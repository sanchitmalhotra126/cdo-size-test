"es":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: ¡Bienvenido a tu primera hora de código! Vamos a sumergirnos bien en
          tu primera experiencia de programación.
      2:
        image: notes/hoc1_2.jpg
        text: Usaremos Blockly, un lenguaje de programación visual donde puedes arrastrar
          y soltar bloques para escribir código.
      3:
        image: notes/hoc1_3.jpg
        text: La mayoría del código se escribe a mano, en cambio Blockly es visual.
          Cada bloque corresponde a una línea de código "real".
      4:
        image: notes/hoc1_4.jpg
        text: Aprenderás los fundamentos de la informática, los conceptos que se utilizan
          en cualquier lugar, desde hacer aplicaciones hasta controlar el Mars rover.
      5:
        image: notes/hoc1_5.jpg
        text: Un programa es un conjunto de instrucciones que tu ordenador sigue.
      6:
        image: notes/hoc1_6.jpg
        text: El objetivo de tu primer programa es guiar un Angry Bird a través de
          un laberinto para golpear al cerdo verde.
      7:
        image: notes/hoc1_7.jpg
        text: El lado izquierdo es el laberinto donde se ejecuta tu programa. Las
          instrucciones para cada rompecabezas están debajo del laberinto.
      8:
        image: notes/hoc1_8.jpg
        text: La barra de herramientas del medio contiene los comandos para el Angry
          Bird. Puedes usarlos para construir tu código.
      9:
        image: notes/hoc1_9.jpg
        text: A la derecha está tu área de trabajo donde podrás arrastrar los bloques
          del cuadro de herramientas para construir tu programa. Para eliminar un
          bloque, arrástralo a la papelera que se encuentra en la esquina.
      10:
        image: notes/hoc1_10.jpg
        text: Cada bloque es una instrucción. Si arrastras el bloque "avanzar" a tu
          espacio de trabajo y oprimes el botón "Ejecutar Programa", el pájaro se
          mueve una casilla en el laberinto.
      11:
        image: notes/hoc1_11.jpg
        text: Para hacer más de una acción, puedes arrastrar muchos bloques en tu
          espacio de trabajo y adjuntarlos juntos. El pájaro hará las acciones de
          arriba hacia abajo.
      12:
        image: notes/hoc1_12.jpg
        text: Si ejecutas un programa y quieres arreglarlo e intentar de nuevo, presiona
          el botón "Reiniciar".
      13:
        image: notes/hoc1_13.jpg
        text: ¡Vamos por esos cerdos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hola, me llamo JR! Cada equipo de coches de carrera necesita programadores
          de computadoras para ganar. Ellos analizan datos del coche para hacerlo
          más rápido.
      2:
        image: notes/stage5_2.jpg
        text: En estos rompecabezas, serás un artista que dibuja una línea detrás
          de ellos dondequiera que vayan.
      3:
        image: notes/stage5_3.jpg
        text: Este bloque dice "avanzar 100 pixeles". Los pixeles son pequeños puntos
          en tu pantalla.
      4:
        image: notes/stage5_4.jpg
        text: Este bloque dice "girar a la derecha 90 grados". Esto girará a tu artista
          la misma cantidad como los bloques "girar" en los rompecabezas laberinto.
      5:
        image: notes/stage5_5.jpg
        text: Haga clic en la flecha en cualquiera de estos bloques para cambiar la
          cantidad que el artista se mueve hacia adelante o gira. Juega para familiarizarte
          con estos nuevos bloques.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hola, soy Paola! En estos rompecabezas, tu eres una granjera que tiene
          que aplanar completamente su campo para iniciar la siembra de cultivos.
      2:
        image: notes/stage9_2.jpg
        text: Tienes que ayudarla a quitar todos los montones de tierra y rellenar
          todos los huecos.
      3:
        image: notes/stage9_3.jpg
        text: Los nuevos bloques eliminan una palada llena de tierra de un montón
          y rellanan  con una palada de tierra un hueco.
      4:
        image: notes/stage9_4.jpg
        text: Los montones y los huecos son de diferente tamaño así que tienes que
          decir al granjero cuantas palas debe usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hola, ¡Soy Katie! Una de las cosas más excitantes de la computación
          es que un programa de ordenador puede ser interactivo.
      2:
        image: notes/flappy02.jpg
        text: Siempre que alguien hace click, pulsa o teclea en un ordenador o teléfono
          genera un EVENTO, y hay un código que decide qué ejecutar cuando ocurre
          un EVENTO.
      3:
        image: notes/flappy03.jpg
        text: 'Por ejemplo, tienes un CONTROLADOR DE EVENTOS que dice "cuando se hace
          clic en el ratón, reproduce un sonido" '
      4:
        image: notes/flappy04.jpg
        text: ¿Has oído del juego FlappyBird? Mediante el uso de controladores de
          eventos, vamos a aprender a programar nuestra propia versión personalizada
          de FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: El código que escribirás consiste de arrastrar y soltar bloques que
          representan los comandos de la computadora. Sin que puedas verlo, cada uno
          de estos bloques está representado por código real.
      6:
        image: notes/flappy06.jpg
        text: 'Si echas un vistazo en el espacio de trabajo, hay algunos bloques verdes
          que son rellenados por ti - son "los controladores de eventos" '
      7:
        image: notes/flappy07.jpg
        text: Si deseas que el pájaro ALETEE cuando haces CLIC en el ratón, puedes
          hacerlo uniendo el bloque "ALETEAR" al manejador de eventos adecuado, y
          ahora en tu juego cada vez que haces clic en el ratón, el pájaro aleteará.
      8:
        image: notes/flappy08.jpg
        text: En cada puzzle de esta actividad te presentamos nuevos tipos de eventos
          como bloques verdes en el espacio de trabajo, tu puedes decidir los bloques
          apropiados para agregar en respuesta a esos eventos.
      9:
        image: notes/flappy09.jpg
        text: Cuando ves un menú desplegable como este, significa que puedes cambiar
          los ajustes - como qué sonido usar cuando flappy caiga al suelo.
      10:
        image: notes/flappy10.jpg
        text: En el puzzle final serás capaz de crear tu propio juego y compartirlo
          con tus amigos. ¡Que te diviertas!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hola, soy Mark! Aprendamos acerca de las iteraciones. Usando iteraciones
          puedes decirle a una computadora que repita una y otra vez cualquier conjunto
          de acciones, miles o incluso millones de veces.
      2:
        image: notes/hoc2_2.jpg
        text: En este puzzle, queremos que el pájaro se mueva hacia adelante 5 espacios
          para llegar al cerdo.
      3:
        image: notes/hoc2_3.jpg
        text: Podemos usar el nuevo bloque "repetir" para ayudarnos.
      4:
        image: notes/hoc2_4.jpg
        text: En lugar arrastrar 5 bloques "avanzar"...
      5:
        image: notes/hoc2_5.jpg
        text: Podemos poner el bloque "avanzar" dentro del bloque "repetir" y escribir
          un número en el bloque para decirle cuántas veces repetirlo.
      6:
        image: notes/hoc2_6.jpg
        text: 'Y esto es importante: puedes poner más de un comando dentro de un bloque
          "repetir".'
      7:
        image: notes/hoc2_7.jpg
        text: ¡Disfruta usando tu nuevo bloque "repetir"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hola, soy Chris. Antes de unirme a los Miami Heat, fui a Georgia Tech
          a estudiar Ciencias de la Computación. Vamos a probar nuestro nuevo bloque,
          el bloque "repetir hasta".
      2:
        image: notes/hoc3_2.jpg
        text: ¿Qué sucedería si no supiéramos cuanto debería moverse el pájaro para
          llegar al cerdo?
      3:
        image: notes/hoc3_3.jpg
        text: Si ponemos un bloque "avanzar" dentro del bloque "repetir hasta" , el
          pájaro avanzará HASTA que alcance al cerdo (o choque con una pared).
      4:
        image: notes/hoc3_4.jpg
        text: Y esto es importante; así como antes, podemos poner múltiples bloques
          dentro del bloque "repetir hasta" y todo ello se repetirá.
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '¡Hola, soy Bill! Aprendamos un nuevo concepto fundamental: las declaraciones
          "si". A través de ellas las computadoras toman decisiones.'
      2:
        image: notes/hoc4_2.jpg
        text: Tu mismo usas declaraciones "sí", "If", diariamente.  Antes de salir
          afuera cada mañana, dices "sí", "IF", lloviera afuera, yo me pondría una
          chubasquero.
      3:
        image: notes/hoc4_3.jpg
        text: Podemos decirle al zombie que compruebe si hay un camino a la izquierda,
          y si encuentra un camino a la izquierda, podemos hacerlo girar en esa dirección.
      4:
        image: notes/hoc4_4.jpg
        text: Para escribir el código para esto, vamos a sacar nuestro bloque "si"
          y colocaremos un bloque "gira a la izquierda" en su interior.
      5:
        image: notes/hoc4_5.jpg
        text: Ahora, si ponemos un bloque "avanzar" encima de este, y un bloque "repetir"
          alrededor de todo, cada vez que el zombie se mueva, el comprobará si hay
          un camino a la izquierda y girará. El comando "repetir" es crítico, para
          comprobar si tiene que girar en cada paso.
      6:
        image: notes/hoc4_6.jpg
        text: Las declaraciones "si" son muy importantes en las ciencias de la computación.
          Uno de los primeros programas que escribí era un juego de tic-tac-toe, y
          había una declaración "Si" que decía que si la otra persona está a punto
          de ganar, bloquea el lugar que le permite ganar.
      7:
        image: notes/hoc4_7.jpg
        text: ¡Diviértete cuando uses el bloque "if" (si)!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hola, mi nombre es Saloni. Yo uso la informática para ayudar a resolver
          problemas en salud y medicina. Vamos a aprender acerca del bloque "si sino".
          Se parece al bloque "si", pero tiene una parte extra al final que dice "sino".
      2:
        image: notes/hoc5_2.jpg
        text: Si pongo el bloque "avanzar" en el lugar donde dice "hacer" y un bloque
          "girar a la izquierda" donde dice "sino" el zombie va a elegir entre dos
          opciones. Si hay un camino adelante, el zombie va a avanzar, y SINO (si
          no hay un camino adelante), el zombie va a girar hacia la izquierda.
      3:
        image: notes/hoc5_3.jpg
        text: Al igual que el bloque "si", podemos poner el bloque "si sino" dentro
          de un bloque "repetir" para que el zombie siga moviéndose y el bloque "si
          sino" seguirá comprobando si hay espacio para girar.
      4:
        image: notes/hoc5_4.jpg
        text: ¡Ahora llevemos a esos zombies a donde pertenecen!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Una instrucción si-sino es una decisión entre dos cosas. Vamos a ver
          cómo podemos utilizar una instrucción si-sino con nuestro amigo Scrat la
          ardilla.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Este bloque se ve igual que el bloque "si", pero hay una pieza extra
          en la parte inferior que dice "sino". Si ponemos un bloque "avanzar" donde
          dice "hacer" y un bloque "girar a la izquierda" donde dice "sino", eso significa
          que la ardilla Scrat avanzará si hay un camino delante. Si no hay un camino
          a seguir, Scrat girará a la izquierda.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Es tomar una decisión y hacer una de las dos acciones en base a esa
          decisión. Y al igual que los bloques "si", puedes poner bloques "si-sino"
          dentro de bloques "repetir".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: ¡Ahora vamos a ayudar a la ardilla Scrat a conseguir esa bellota!
    function:
      1:
        image: notes/stage13_1.jpg
        text: '!Hola! soy Brina, una ingeniera de Instagram. Una función es un conjunto
          de líneas de código que quieres usar una y otra vez, así que en vez de escribir
          ese código cada vez, puedes usar solo un bloque.'
      2:
        image: notes/stage13_2.jpg
        text: Vamos a aprender cómo definir funciones. Las definiciones de funciones
          tienen una estrella en la esquina. El nombre de la función está escrito
          en la línea superior.
      3:
        image: notes/stage13_3.jpg
        text: Los bloques que se encuentran dentro de la definición nos dicen qué
          hace. Así que esta definición de función se llama "rellena 5" y está formada
          por un bloque "repetir" y un bloque "rellenar".
      4:
        image: notes/stage13_4.jpg
        text: La definición se encuentra en el espacio de trabajo, pero nuestro agricultor
          no ejecutará la función hasta que arrastremos el bloque "llenar 5" desde
          la categoría de funciones.
      5:
        image: notes/stage13_5.jpg
        text: '¡Volvamos a hacer divertidas las funciones! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '¡Hola! soy Makinde. Vamos a aprender acerca del bloque "mientras". '
      2:
        image: notes/stage9_6.jpg
        text: El "bloque mientras que (While)" hará todo lo que pones en su interior
          mientras la declaración en la parte superior es verdadera.
      3:
        image: notes/stage9_7.jpg
        text: Por ejemplo, si la granjera está sobre un montón, continuará eliminando
          una palada llena mientras(WHILE) quede tierra debajo de ella.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: '!Hola! soy Trina y trabajo para Pixar. He trabajado en un montón de
          películas incluyendo Shrek.'
      2:
        image: notes/stage11_2.jpg
        text: Esta es nuestra nueva iteración "contador". Realizará acciones una y
          otra ves y puedes hacer que las acciones cambien un poco cada vez.
      3:
        image: notes/stage11_3.jpg
        text: En este ejemplo, nuestra iteración "contador" dice "cuenta con un contador
          de 50 a 90 de 10 en 10" y dentro de ella tenemos un bloque "dibuja un cuadrado".
          Arrastra el bloque "contador" desde la sección "Variables" al sitio "longitud".
      4:
        image: notes/stage11_4.jpg
        text: Esto significa que nuestro artista dibujará un cuadrado que tiene lados
          de 50 píxeles de longitud, luego agregará 10 para dibujar un cuadrado con
          lados de 60 píxeles de longitud, Después continuará agregando 10 para dibujar
          cuadrados hasta que alcance 90. Así que tendremos cuadrados de 50, 60, 70,
          80 y 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: ¡Hola! soy Janete y soy ingeniera en Zynga.
      2:
        image: notes/stage15_2.jpg
        text: ¿Qué pasa si queremos dibujar un montón de triángulos y sus lados tienen
          que ser de longitudes diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escribir a mano ese código o podemos usar una función con parámetros.
      4:
        image: notes/stage15_4.jpg
        text: Para hacer esto, haz clic en la estrella azul sobre la definición de
          la función "dibuja un triángulo". Después arrastra "nombre de entrada" en
          el bloque "entrada".
      5:
        image: notes/stage15_5.jpg
        text: Después si escribes "longitud" en el lugar que dice "x" y presionas
          "Enter" crearás una entrada longitud para tu función.
      6:
        image: notes/stage15_6.jpg
        text: Después haz clic en la estrella. Ahora, haz clic en la categoría de
          las variables y arrastrar el bloque "longitud" dentro del bloque "avanzar"
          de la definición de tu función. Y arrastra hacia afuera el antiguo bloque
          número.
      7:
        image: notes/stage15_7.jpg
        text: Para usar tu función con parámetros, haz clic en la categoría funciones
          y arrastra tu función "dibuja un triángulo con longitud".
      8:
        image: notes/stage15_8.jpg
        text: Ahora puedes usar el bloque matemáticas para introducir diferentes números
          para dibujar triángulos de diferente tamaño.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: ¡Felicidades! Con el último puzzle resuelto, acabas de escribir código
          que puede decir a cualquier robot cómo encontrar su camino a través de un
          laberinto sin ramificación o túnel de cualquier longitud, no importa si
          es un zombie, un pájaro, un rover de Marte o incluso un coche sin conductor.
      2:
        image: notes/hoc6_2.jpg
        text: Los conceptos básicos que utilizaste son el corazón de cualquier programa
          o aplicación que encuentres.  Aprendimos acerca de iteraciones, las declaraciones
          "repetir hasta", las declaraciones "si" y las "si sí no".
      3:
        image: notes/hoc6_3.jpg
        text: Si te gustó tu primera hora del código, visita code.org para continuar
          tu educación en Ciencias de la Computación. Una vez que completes nuestro
          curso de 20 horas, habrás dominado los fundamentos de la programación y
          podrás empezar a aprender cómo escribir aplicaciones para teléfonos, instrucciones
          para robots, juegos, o lo que quieras.
      4:
        image: notes/hoc6_4.jpg
        text: 'La tecnología está cambiando todo lo que hacemos y no importa si eres
          joven o viejo: la programación es divertida, es creativa, y cualquier persona
          puede aprenderla!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: ¡Mostrar notas estará disponible pronto!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hola, mi nombre es Lindsey. Modelo, actúo y escribo mis propias aplicaciones.
          Vamos a usar código para unirnos a Ana y Elsa en la exploración de la magia
          y la belleza del hielo.
      2:
        image: notes/frozen1_2.jpg
        text: Vas a crear copos de nieve y patrones, mientras patinas sobre hielo
          realizas un paisaje invernal que luego puedes compartir con tus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: En la próxima hora, vas a aprender lo básico para poder programar. La
          programación tradicional es generalmente en texto escrito, pero usaremos
          Blockly, que utiliza bloques visuales que puedes arrastrar y soltar para
          escribir programas. De esta forma incluso aprenden las bases los estudiantes
          universitarios. Pero en realidad, todavía estás generando código.
      4:
        image: notes/frozen1_4.jpg
        text: Un programa es un conjunto de instrucciones que le dice una computadora
          qué hacer. Vamos a construir un código o un programa que ayudará a Elsa
          a crear una línea simple. Más tarde utilizaremos esto para crear patrones
          más complejos.
      5:
        image: notes/frozen1_5.jpg
        text: La pantalla se divide en tres partes principales. A la izquierda, está
          la superficie de hielo donde se ejecutará tu programa. Las instrucciones
          para cada nivel se escriben justo debajo de la superficie.
      6:
        image: notes/frozen1_6.jpg
        text: Esta zona media es la caja de herramientas, y cada uno de estos bloques
          es una acción que pueden hacer Elsa y Anna.
      7:
        image: notes/frozen1_7.jpg
        text: El espacio en blanco a la derecha se conoce como "área de trabajo",
          y es ahí dónde crearemos nuestro programa. Para poder movernos alrededor
          de la superficie de hielo necesitarás utilizar el bloque de "Mover hacia
          adelante".
      8:
        image: notes/frozen1_8.jpg
        text: 'Aquí, el bloque de "Moverse hacia adelante" dice: "Moverse hacia adelante
          100 pixeles". Cuando oprimimos el botón "Ejecutar/Run". ¿Qué ocurre? Elsa
          se mueve hacia adelante una cierta distancia en la pantalla. ¡De hecho se
          mueve 100 pixeles! Los pixeles son básicamente cuadros muy pequeños que
          se encuentran en la pantalla de la computadora.'
      9:
        image: notes/frozen1_9.jpg
        text: El otro bloque que tenemos en este rompecabezas dice "girar a la derecha
          de 90 grados". Y cuando usamos este bloque "girar a la derecha", hace girar
          a Elsa una cierta cantidad de grados. Puedes probar cuánto quieres hacer
          girar a Elsa. El ángulo se mide desde el camino delante de Elsa. Entonces,
          esto es un giro de 90 grados. Y esto es un giro de 120 grados.
      10:
        image: notes/frozen1_10.jpg
        text: Recuerda, puedes cambiar el número de píxeles y grados haciendo clic
          en las flechas junto a ellos.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: ¡Hola, soy Paola! Las computadoras son muy buenas repitiendo acciones.
          Puedes contar hasta 10, 20 o 100. Pero una computadora puede contar hasta
          1 mil millones o 1 billón. No se aburrirá y sólo le costará unos pocos segundos.
          Ya sea contando, o dibujando, o haciendo cualquier otra cosa -- las computadoras
          pueden repetir acciones cientos o incluso miles de millones de veces.
      2:
        image: notes/frozen2_2.jpg
        text: En programación, esto se llama bucle. Un bucle es la forma en la que
          repites una y otra vez tu código. Para el siguiente desafío, tu objetivo
          es ayudar a Anna a crear un cuadrado con el bloque "repetir".
      3:
        image: notes/frozen2_3.jpg
        text: Cualquier bloque de código que pones dentro del bloque "repetir" se
          repetirá en secuencia, tantas veces como quieras.
      4:
        image: notes/frozen2_4.jpg
        text: Para dibujar un cuadrado, puedes utilizar el bloque de "mover hacia
          adelante" y "girar a la derecha" 4 veces. Pero la forma más fácil es decirle
          a la computadora "mover hacia adelante" y "girar a la derecha 90 grados"
          una sola vez y luego repetir este par de acciones 4 veces. Para hacer eso,
          tienes que poner el bloque "mover hacia adelante" y el bloque "girar a la
          derecha" dentro de un bloque "repetir".
      5:
        image: notes/frozen2_5.jpg
        text: Recuerda que puedes cambiar el número del bloque "repetir" por cualquier
          otro, y va a repetir lo que está dentro del bloque cuantas veces le hayas
          indicado.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hola, soy Chris Bosh. Soy un jugador de baloncesto profesional, y programé
          en la Universidad.
      2:
        image: notes/frozen3_2.jpg
        text: Uno de los conceptos más importantes en Ciencias de la computación trata
          sobre cómo definir nuevos comandos. La mayoría de lenguajes de programación
          tienen solamente cerca de 100 palabras o comandos. Y en realidad, el arte
          y la magia está en definir tus propias nuevas palabras utilizando estos
          bloques de construcción.
      3:
        image: notes/frozen3_3.jpg
        text: Una vez que has enseñado una computadora cómo realizar una acción una
          vez, con esta secuencia de comandos, puedes ponerle un nombre para que la
          acción sea fácil de repetir más adelante. Definir tu propio comando y darle
          un nombre, se conoce como definir una función.
      4:
        image: notes/frozen3_4.jpg
        text: Hola, soy Jess. Al programar con bloques, utilizarías funciones cuando
          hay un conjunto de acciones que te gustaría hacer muchas veces. Por ejemplo,
          has escrito código para crear un cuadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Puedes definir esto como una función llamada "crear un cuadrado" '
      6:
        image: notes/frozen3_6.jpg
        text: Ahora tienes un nuevo bloque que puedes utilizar varias veces para crear
          múltiples cuadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Un montón de figuras sencillas pueden utilizarse para crear patrones
          más complejos. En el siguiente desafío, el código que has escrito recientemente
          para hacer un círculo está disponible como una nueva función que puede hacer
          círculos de diferentes tamaños. ¿Lo puedes usar para ayudar a Elsa crear
          patrones intrincados y hermosos en la nieve?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vamos a crear juegos usando Play Lab. Los buenos juegos tienen una historia
          y cada historia tiene actores. Aprenderemos cómo hacer que nuestros actores
          sean como brujas, alienígenas, y animales que hablan, se mueven e interactúan
          con los demás. Al final de este tutorial, puedes crear un juego desde cero
          y compartirlo con tus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: La pantalla se divide en tres partes principales. A la izquierda es
          el espacio de juego donde se ejecutará el programa. Las instrucciones para
          cada nivel están escritas abajo.
      3:
        image: notes/playlab_intro_3.png
        text: La zona media es la caja de herramientas, y cada uno de estos bloques
          es un fragmento de código. El espacio en blanco a la derecha se llama el
          espacio de trabajo y es donde construiremos nuestro programa.
      4:
        image: notes/playlab_intro_4.png
        text: Para empezar, necesitarás unir tus bloques al bloque naranja llamado
          "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia
          fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.
      5:
        image: notes/playlab_intro_5.png
        text: En este primer rompecabezas, el actor es un pingüino y haremos que diga
          "¡Hola!" arrastrando el bloque "decir", uniéndolo al bloque "cuando se ejecuta"
          y escribiendo dentro "Hola". También podemos hacer que el pingüino se mueva
          mediante los bloques mover a la derecha y mover a la izquierda. Una vez
          que tienes puestos tus bloques, presiona el botón ejecutar para ver lo que
          has programado.
      6:
        image: notes/playlab_intro_6.png
        text: Comienza, y al final podrás crear tu propio juego con toda clase de
          jugadores, que pueden interactuar, volverse felices o tristes, aumentar
          la puntuación, o lanzar bolas de fuego, o incluso desaparecer unos a otros.
          Es cuestión de ti y del juego que quieres hacer.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Ahora vamos a aprender acerca de algo que todos los programadores de
          juegos usan todos los días. Se llaman eventos. Un evento indica a tu programa
          que atienda cuando algo ocurra. Cuando eso sucede, se realiza una acción.
      2:
        image: notes/playlab_events_2.png
        text: Algunos ejemplos de eventos son esperar a un clic en el ratón, un botón
          de flecha o pulsar en la pantalla.
      3:
        image: notes/playlab_events_3.png
        text: Aquí vamos a hacer que el robot espacial salude a los terrícolas cuando
          un jugador haga clic en él. Utilizaremos el bloque "cuando hace clic en"
          y únele el bloque "decir". Cuando el jugador hace clic en el robot espacial,
          todo lo que esté unido al bloque de evento "cuando hace clic en" se ejecutará.
          ¿Qué dice tu alienígena?
      4:
        image: notes/playlab_events_4.png
        text: También hay bloques "cuando tecla de flecha". Si se unen con los bloques
          "mover", puedes empezar a mover tus actores para arriba, abajo, izquierda
          o derecha. Paso a paso, tu juego se está volviendo más interactivo.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Este es el bloque "repetir para siempre". Todo lo que haya dentro de
          este bloque se repetirá para siempre en el juego.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Si queremos que un actor haga algo en varias ocasiones, sin que el jugador
          tenga que hacer nada, pondremos esos bloques dentro del bloque "repetir
          para siempre".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: En el siguiente rompecabezas, nuestro objetivo es ayudar a que el asistente
          patrulle continuamente los límites del reino, a izquierda y derecha. Aprender
          cómo funciona el comando repetir, te ahorrará mucho tiempo después cuando
          construyas tu propio juego.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Estos son tus bloques de dibujo. Usa el correcto para mover al artistas
          donde necesita ir para completar las lineas grises.
      2:
        image: notes/C1_artist_intro_2.png
        text: Estos son bloques tu de salto. Cuando los usas, tu artista se mueve
          pero no dibuja, asi que usalos para saltar a la siguiente línea gris.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: ¿No son las abejas genial? En el siguiente grupo de puzzles. Tu objetivo
          es ayudar a la abeja para llegar a las flores, tomar el nectar de las flores
          y volar a la colmena para hacer miel. Vas a tener que usar los bloques "obtener
          nectar" y "hacer miel" para estos ejercicios.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Cada flor tiene un número diferente de néctares: 1, 2, 3 o más. Sabemos
          cuánto néctar está en las flores rojas, por el número pequeño en la esquina.
          Así que asegúrese de obtener todo el néctar de la flor antes de seguir adelante.
          Además, cada panal sólo puede contener cierta miel: 1, 2, 3 o más. Así que
          asegúrate de hacer tanta miel como la abeja pueda sostener.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Si eres capaz de obtener todo el néctar y toda la miel, tuviste éxito
          y pasa al siguiente nivel. De lo contrario, tienes que probar este acertijo
          otra vez. Juga un rato mientras y ve lo que se siente ser "abeja" un programador!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Un bucle es una repetición de una actividad. Para entrar en una colmena
          a inspeccionar, miro un cuadro y luego lo pongo, luego repito esta actividad
          varias veces. Hacer un bucle, es hacer la misma actividad varias veces.
      2:
        image: notes/C1_bee_loops_2.png
        text: En este nivel, queremos que la abeja colecte tres néctares de la flor.
          En lugar de utilizar tres "obtener néctar", vas a utilizar el bloque de
          repetición para obtener néctar tres veces. Pulse "Run" y ve si lo tienes
          correcto. ¡ Agradable!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Esta lección se llama el gran evento. Es acerca de cómo podemos controlar
          nuestros programas y cambiar la forma de que un programa se ejecuta sobre
          la marcha usando eventos, como el pulsar de un botón o el clic de un ratón.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Para esta lección, serás controlado con un remoto de papel. Es como
          un juego de video real en vivo.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Un evento es una acción que hace que algo pase. Es como cuando haces
          clic al botón de un ratón y se carga un sitio web. Eso es un evento. Cuando
          tocas la pantalla de una tablet para deslizarla, también es un evento. Los
          eventos son una forma grandiosa de permitir al usuario manipular tu programa
          cuando quiera o lo necesite.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Suceden cosas a las que todos respondemos. Sentimos hambre y nos vamos
          a la nevera. Escuchamos que el cartero viene y pone nuestro correo en el
          buzón y luego vamos a obtener nuestro correo. Lo mismo pasa con los eventos
          de pulsar un botón o mover una palanca de mando. Son algo que pasa que provocan
          que hagamos algo.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: En los videojuegos, hay un evento llamado "Actualizar" y pasa 30 o 60
          veces por segundo. Para los programadores de videojuegos eso es casi más
          importante como un evento, que los botones o la palanca de mando.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |
          Lo principal que buscamos es que pase el tick de "Actualizar". Entonces comprobamos el mando en el tick. Y decimos, "Oh, ¿alguien ha pulsado el botón en este marco? ¿Sí o no?"
          Sin eventos, el jugador no podría moverse, no podrías saltar, no serías capaz de controlar lo que pase. El videojuego no sería capaz de animar nada.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: En la escultura en arena tienes que saber que el fracaso es parte del
          programa. Pero si usted persiste, no conseguirá nada mejor y más emocionante
          para usted. La persistencia es el nombre del juego. Quédate, te va a encantar.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Esta lección se llama construir una base. En esta lección, vamos a trabajar
          en una tarea que va a ser realmente difícil. Debes encontrar la manera de
          hacer una estructura tan alta como uno de estos vasos y tiene que ser lo
          suficientemente fuerte como para soportar el peso de un libro.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Podría haber momentos en los que nuestra creación no funcione. Podría
          haber momentos en los que nos frustremos y querramos dejarlo. Podría haber
          muchos de esos momentos. Pero si seguimos intentándolo, y lo hacemos lo
          mejor que podemos una y otra vez, entonces seguro que lo conseguiremos enseguida.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistencia es mantenerse firme cuando se quiere realmente renunciar.
          Si quieres crear algo nuevo y diferente, van a existir un montón de fracasos
          en el camino.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: El truco para persistir es elegir seguir adelante y aprender de los
          fracasos en lugar de dejar de renunciar porque estás frustrado. La frustración
          sólo significa que hay algo maravilloso al doblar la esquina. Por lo que
          no renuncies antes de llegar a él. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hola, mi nombre es Miral Kotb y soy el creador de Iluminado. En mi trabajo,
          hay algo que usamos en ambas cosas, en bailes y  en    programación. !Y
          eso son los bucles! Los bucles repiten acciones una y otra vez.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Cuando repites algo muchas veces, como mis acciones para que el hula
          hoop siga girando, estoy haciendo un bucle de esa acción. Esto es un bucle.
          Esto es un bucle. Y esto es un bucle.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Hoy vamos a dar una fiesta de baile. Haremos bucles con un nuevo baile.
          La iteración. Vamos a aprender acerca de los bucles utilizando un baile.
          Aprenderás un par de pasos fáciles y los repetirás una y otra vez para completar
          el baile.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Estos son los pasos que necesitas aprender. Da las palmas. Pon tus manos
          detrás de tu cabeza. Pon tus manos en tu cintura. Sube la mano izquierda.
          Sube la mano derecha. Bastante fácil, ¿verdad? Descubrirás que puedes hacer
          más cortas las instrucciones poniendo algunos pasos de baile dentro de bucles.
      5:
        image: notes/C1_getting_loopy_5.png
        text: De hecho utilizamos bucles en nuestros bailes. Los bailarines llevan
          ordenadores, todos en la misma red. Podría hacer un bucle poniendo las luces
          sobre los bailarines una y otra vez. En el bucle podría tener una iteración
          donde digamos que quieres hacer un bucle sobre esos seis bailarines una
          y otra vez, y entonces dentro del bucle incrementar la velocidad de la luz,
          Y todo eso está hecho mediante bucles. Los bucles son importantes en informática
          porque abrevian y simplifican nuestro trabajo.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Esta lección se llama Mapas Felices. Hoy vamos a ayudar a nuestro pequeño
          amigo peludo Flurb a llegar a su fruta.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Consigue que tu Flurb llegue a tu fruta. Para hacer eso necesitarás
          descubrir en qué dirección tiene que ir el Flurb, y dirigirla con las flechas.
          Para que el Flurb llegue a la manzana, ¿en qué dirección tiene que ir el
          Flurb? Línea para hacer que vaya arriba.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Para llegar ahí, haces un círculo en la dirección que tiene que ir.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Construye tu algoritmo pegando las flechas junto al mapa que estás intentando
          resolver. El segundo es igual, pero hacia abajo.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Es como programar con papel. Y eso es todo!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Depurar es encontrar y arreglar problemas. Hay muchas formas de depurar
          problemas. Una de las más fáciles es ir paso a paso hasta que encuentras
          que algo sale mal. Aquí estoy intentando hacer una voltereta hacia atrás
          sobre la barra de equilibrios, pero me caigo una y otra vez.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Revisé cada parte paso a paso y me di cuenta de donde estaba mi error.
          No estaba poniendo mis manos correctamente en la barra. de equilibrios.
          Así que intenté otra voltereta hacia atrás sobre la barra con una nueva
          posición de manos y lo conseguí. Estaba realmente contenta de haber depurado
          mi voltereta hacia atrás.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Para aprender a depurar, empezamos con un conjunto de bloques ya puestos
          en la fase. Como verás esos bloques no te conducirán al objetivo. Necesitamos
          depurar la solución y arreglarla. ¿Qué falló? Te darás cuenta de que necesitabas
          seguir yendo al oeste una casilla más.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Vamos a arreglarlo añadiendo otro bloque de ir al oeste y dando a ejecutar
          para ver si has acertado. ¡Sí, has acertado!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Para este rompecabezas necesitarás llevar el pájaro al cerdo. Mira el
          rompecabezas y averigua que instrucciones necesita.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Necesitas arrastrar los bloques desde la caja de herramientas al espacio
          de trabajo. Asegúrate de dejarlos debajo del bloque "cuando se ejecuta",
          y cuando creas que tienes la solución correcta pulsa en "ejecutar" y observa
          como el pájaro va hacia el cerdo.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Una cosa en la que los ordenadores son muy buenas es la de repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo un montón
          de veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        image: notes/C1_maze_loops_2.png
        text: Por ejemplo, si yo quisiera felicitar a todo el mundo en Facebook por
          su cumpleaños enviándoles un mensaje de correo electrónico, me podría llevar
          más de un siglo para poder escribir todos esos mensajes a todo el mundo.
          Pero con unas pocas líneas de código puedo hacer que una máquina envíe un
          mensaje de correo electrónico a todo el mundo en Facebook felicitándoles
          por su cumpleaños.
      3:
        image: notes/C1_maze_loops_3.png
        text: Para llevar el pájaro al cerdo en este nivel, en lugar de arrastrar
          tres bloques norte al espacio de trabajo, utilizarás el bloque "repetir".
          Arrastra el bloque "repetir" al espacio de trabajo e introduce el número
          3. Entonces arrastra el bloque "mover al norte" dentro de bloque "repetir"
          y pulsa "ejecutar" para ver si has acertado. Enhorabuena, ¡lo conseguiste!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Esta lección se llama muévelo, muévelo, Juntos vamos a escribir un programa
          para llevar a nuestros amigos desde la salida con la brújula hasta la meta
          con la cara sonriente.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Pero la cara sonriente está boca abajo, y sólo una persona sabe como
          llegar hasta ella. Vamos a empezar este programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Un programa es un algoritmo que ha sido codificado en algo que se puede
          ejecutar en una máquina. La mayoría de nosotros piensa en un programa como
          algo que escribimos para una computadora. Los programas son muy buenos para
          eso pero también son útiles en otros lugares. Usted puede hacer su propio
          programa de juego o incluso un robot para hacer las cosas para usted.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Me llamo Jeremiah. Hola, tengo siete años. Me encanta jugar con el ordenador
          de mamá, pero siempre le pido permiso primero. "Mami, ¿puedo ponerme con
          el ordenador? ¡Claro que sí, cielo!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Me encanta el ordenador de mamá porque me puedo meter en Internet. Internet
          es un poco como tu barrio. Puedes visitar sitios chulos, puedes hablar con
          tu familia y amigos, y puedes aprender un montón de cosas nuevas.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Ayer, visité un parque zoológico que es cerca de mi casa. Vi una cebra
          bebé. Le tomé una fotografía y cambié el color de sus rayas, luego le puse
          un sombrero y la agregué a mi colección de animales locos. ¡Impresionante!
          Más tarde, fui a un lugar lejano. Visité Kenia. Es un país en África. Allí
          vive un montón de cebras.
      4:
        image: notes/C1_going_places_safely_4.png
        text: A veces en Internet conozco y hablo con las personas, como mi abuela
          que vive en otro Estado. ¡Hola abuela! Ella me está haciendo galletas que
          me enviará para mi cumpleaños. "Delicioso, ojalá que Internet tuviera smellrama!"
          Yo puedo hablar con diferentes personas en Internet, como mi prima, pero
          solamente hablo con la gente que conozco.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Lo que más me gusta en la Internet es obtengo juegos divertidos. ¡Puntos!
          También me gusta dibujar y crear cosas nuevas y compartir con mis amigos.
          ¡Genial! A veces visito sitios donde aprendo cosas nuevas pero siempre sitios
          web que son adecuados para mí. ¡Oh, dinosaurios!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internet es un lugar super divertido. Pero al igual que cruzar la calle
          en tu barrio, también debes tener cuidado cuando estés en línea. Aquí hay
          tres reglas para recordar. Regla número 1: siempre pregunta a tus padres
          primero. Regla número 2: sólo hablar con gente que conozcas. Regla número
          3: Visita lugares que son adecuados para ti.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, ¡eso fue divertido! Hora de la cena. Ahora estoy cerrando sesión.
          No puedo esperar para iniciar sesión otra vez para ver que puedo visitar
          a continuación.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Hoy vamos a aprender sobre la programación en par. En la programación
          en par se trabaja como un equipo. ¿Por qué dos personas usan una computadora?
          Porque dos cabezas son mejores que una. En la Programación en par tú y tu
          pareja van a sentarse juntos en una computadora y ambos van a trabajar en
          el mismo proyecto.
      2:
        image: notes/C1_pair_programming_2.png
        text: En la programación en par, una persona es el conductor y la otra persona
          es el navegador, al igual que conducir un coche. El conductor se sienta
          en la computadora y es que utilizando el teclado y ratón o pantalla táctil
          y control de las principales acciones de la computadora. La otra persona
          es el navegante. El navegador ayuda al conductor contestando sus preguntas
          y señala posibles problemas o errores.
      3:
        image: notes/C1_pair_programming_3.png
        text: La comunicación es la clave para éxito en la programación en par. Sin
          insultos, debes ser respetuoso, no seas un navegador mandon, porque a nadie
          le gusta un conductor en el asiento trasero. Siempre se deben hablar tú
          y tu compañero. El conductor puede explicar lo que él o ella está haciendo.
          Y el navegador puede ayudar sugeriendo qué hacer a continuación.
      4:
        image: notes/C1_pair_programming_4.png
        text: El navegador debe estar pensando en el panorama y el conductor se centra
          en los detalles. Ambos roles son importantes. Programación en par es trabajar
          juntos como un equipo.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Esta lección se llama plantar una semilla y va a ayudarnos a entender
          los algoritmos. Los algoritmos son instrucciones específicas que explican
          el orden en el que se hace algo. Incluso lo de todos los días, cosas como
          desayunar o el cepillado de los dientes son algoritmos que requieren pequeños
          pasos para hacer un trabajo.
      2:
        image: notes/C1_planting_seed_2.png
        text: Los computadores pueden ser muy inteligentes pero sólo pueden entender
          si les dices exactamente lo que quieres paso a paso. Lo bueno de los algoritmos
          es que si sigues las instrucciones en orden, puedes hacer algo que no sabías
          cómo hacer antes. Es como una receta.
      3:
        image: notes/C1_planting_seed_3.png
        text: Hoy vamos a sembrar nuestras propias semillas utilizando un algoritmo.
          Crea tus propios algoritmos para apartar las fotos. Seleccione las imágenes
          que muestran los pasos para plantar una semilla y organiza las fotografías
          en el orden correcto.
      4:
        image: notes/C1_planting_seed_4.png
        text: Ahora, es el momento para ver si el algoritmo funciona. Siga atentamente
          los pasos en el algoritmo. ¿Están en el orden correcto? ¿Has tenido éxito
          en plantar una semilla siguiendo el algoritmo? ¡Es como la programación
          con imágenes!
      5:
        image: notes/C1_planting_seed_5.png
        text: Cuando queremos hacer el chocolate, hay muchos grandes pasos de ese
          proceso y cada uno de esos grandes pasos tiene un conjunto de pequeños pasos
          y hay diferentes recetas o algoritmos dependiendo de cómo queremos que el
          chocolate al gusto. Cada paso es importante, incluso los pequeños, así que
          sin un solo paso, no se puede completar el resto de ellos. Es muy importante
          crear algoritmos que otros puedan entender. Es por ello que cada paso tiene
          que ser escrito para que no importando quien lo hace, el resultado sea el
          mismo.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Tiempo para ser creativo y utilizar tus habilidades de codificación
          para contar una historia. Tu historia contará con actores y tu serás capaz
          de hacer que estos actores hablen e interactúen con los demás. Comienza
          a pensar qué tipo de historia quieres contar.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: El gato siempre ha tenido miedo del perro y ¿qué pasa si el perro quiere
          ser amable con el gato? El bloque "cuando se ejecuta" comienza todo. El
          bloque "mover" moverá tu personaje y el bloque de «decir» hará que tu personaje
          diga todo lo que escribes.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Esto es un bloque "cuando los actores colisionan" que puedes enlazar
          con otros bloques
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Estaba haciendo que el perro viniera y dijera "Hola", pero cuando el
          gato se asustó se fue. "Ahhh". Si hubiera más tiempo, Habría sido un final
          feliz. !El final!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Este es el nivel de ortografía. Utilice las piezas del puzzle para mover
          la abeja. Al moverse, recogerá las letras para deletrear la palabra.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Vea si puede deletrear la palabra que se da en el cuadro debajo de la
          etapa. ¡Pero cuidado con la abeja! Mover en la dirección equivocada agrega
          cartas que no quieres.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Una cosa que a los ordenadores se les da muy bien es la de repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo un montón
          de veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Por ejemplo, si yo quisiera felicitar a todo el mundo en Facebook por
          su cumpleaños enviándoles un mensaje de correo electrónico, me podría llevar
          más de un siglo para poder escribir todos esos mensajes a todo el mundo.
          Pero con unas pocas líneas de código puedo hacer un sistema que envíe un
          mensaje de correo electrónico a todo el mundo en Facebook felicitándoles
          por su cumpleaños.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: En este ejemplo, debes conseguir mover el pájaro para coger el cerdo.
          Ahora vamos a poder usar el bloque Repetir para poder hacer esto más fácil.
          Lo puedes hacer diciendo al ordenador la instrucción mover adelante 5 veces
          para que el pájaro avance un paso cada vez hacia el cerdo, o puedes directamente
          decir al ordenador que se mueva adelante una vez y decirle que lo repita
          5 veces, y hará la misma cosa.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: La orden de esto es, arrastrar el comando avanzar y luego insertarlo
          dentro del bloque de repetición. Puedes hacer clic en él y decir cuantas
          veces quieres que se repita el bloque, para repetir la cantidad de pasos
          que deseas que avance.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Una cosa más, puedes insertar tantos comandos como quieras dentro del
          bloque de repetición. Así que en este ejemplo, está diciendo que seguir
          adelante y girar a la izquierda, que va a hacer cinco veces. ¡Que te diviertas!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Nisiquiera calificas para la carrera si tu no tienes personas que son
          competentes en ciencias de la computación debido a tantos datos que colectan
          los carros y la necesidad de poder tener personas que puedan escribir programas
          que encuentren la manera de cómo construir rendimiento.
      2:
        image: notes/C2_artist_intro_2.png
        text: En estos puzzles, tu serás un artista que usa un lápiz para dibujar
          distintas formas. Donde sea que tu artista vaya, el dibujará una linea detrás
          de él.
      3:
        image: notes/C2_artist_intro_3.png
        text: Para moverte por canvas, necesitarás usar el bloque de mover hacia delante.
          Aquí el bloque de mover dice que te muevas 100 pixeles hacia delante. Cuando
          pulsamos ejecutar, ¿Qué pasa? El artista se mueve hacia delante una cierta
          cantidad de pixeles y esa cantidad son 100px. Los pixeles son básicamente
          diminutos recuadros en la pantalla de tu ordenador.
      4:
        image: notes/C2_artist_intro_4.png
        text: El otro bloque que tenemos en este puzzle dice Girar a la derecha 90
          grados. Y cuando lo arrastramos, eso hace que nuestro artista gire una cierta
          cantidad. Así que puedes jugar con cuanto quieres que tu artista gire. Este
          es un giro de 90 grados.
      5:
        image: notes/C2_artist_intro_5.png
        text: Y esto es un giro de 120 grados. Y recuerda, tu puedes cambiar estos
          valores haciendo clic en las flechas junto a los números de píxeles y grados.
          ¡Disfruta dibujando con tu artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Este es un bloque condicional. Este dice SI hay un nectar O miel que
          sea menor, igual o mayor que un número, ENTONCES haz algo.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Esto es útil cuando no sabemos cuanto néctar o miel obtener, como vemos
          acá con este signo de interrogación.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: En este ejemplo, vamos a decir SI la flor purpura tiene néctar mayor
          que 0, obtiene néctar. Eso le dice a nuestra abeja que continúe obteniendo
          néctar mientra haya. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Esta es la lección de brazaletes binarios. ¡Vamos a codificar nuestras
          iniciales en un brazalete que podemos usar y mostrar a todos nuestros amigos!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: El binario es una forma de representar información utilizando sólo dos
          opciones. A veces la gente piensa solo en unos y ceros. Pero tú puedes representar
          el binario con combinaciones de encendido ó apagado, arriba ó abajo, dentro
          ó fuera o cualquier combinación de posibilidades.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hola, soy Orion y programo robots aquí en Play-im. Todos los cerebros
          de los computadores y los robots, en su nivel más fundamental, son compuertas
          electrónicas. Cuando una compuerta está abierta la electricidad puede fluir,
          y cuando esta está cerrada, la electricidad no fluye.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Un ejemplo "binario" en el robot, son los ojos. Los ojos del robot son
          LED y estas son luces que están encendidas o apagadas. Es un sistema binario
          de un estado u otro. Podemos utilizar las luces para representar números
          binarios. Si tenemos un conjunto de robots, podemos decir que el primer
          robot es la primera posición y el segundo robot es la segunda posición,
          el tercer robot es la cuarta y así sucesivamente. Así es cómo se representa
          un número binario. Los robots lo hacen los ojos (leds) binarios y cuentan
          asi para usted.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Esta lección se llama condicionales con cartas. Cada dia haces decisiones
          basadas en lo que ves o en lo que oyes.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Quiero caminar por el parque pero primero debo decidir si debo llevar
          un paraguas o no. Por lo que miro por la ventana. Si está nublado, voy a
          llevar mi paraguas. Si no, llevaré mis anteojos de sol. Creo que debería
          llevar mi paraguas. Lo que veo y escucho determina mi decisión sobre qué
          llevar al parque.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Condicionales se utilizan en juegos tambien. Hoy vamos a practicar usando
          condicionales con un juego de cartas. En este juego, la carta que saque
          determina que mis amigos van a hacer. Si yo saco un siete, todos aplauden.
          Sino, todos dicen "awww". Vamos a intentarlo! "Awww" "Aplausos"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Te apuesto a que puedes hacer juegos mucho más entretenidos usando condicionales.
          Inténtalo! Las condicionales son lo que hacen que los computadores parezcan
          inteligentes. Un programa de computador que incluye condicionales puede
          reaccionar frente al usuario y cambiar su curso de acción.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pikirkan tentang permainan kesukaan kamu. Apakah kamu mendapatkan poin
          karena melakukan suatu hal dibandingkan melakukan hal lainnya? Ini terjadi
          karena komputer menggunakan persyaratan. Inilah cara komputer membuat keputusan.
          Bagaimana kalau kamu mendapatkan sepuluh poin jika kamu mengenai target.
          Lain daripada itu, kamu kehilangan tiga. Apabila kamu tahu cara persyaratan
          bekerja, kamu bisa menciptakan berbagai permainan yang menarik.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Ya tenemos algunos bloques en nuestro espacio de trabajo. Sin embargo
          algo está mal.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Vamos a depurar éste código ralentizando la velocidad y observando a
          medida que avanza bloque a bloque.
      3:
        image: notes/C2_artist_debugging_3.png
        text: ¡Oh, ahi está el problema! Los bigotes del gato tienen 75 pixeles de
          largo, no 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: ¿Alguna vez has escuchado lo que es depurar un programa? Esta es la
          manera en la que te das cuenta qué es lo que no está funcionando. Cuando
          depuras un código, identificas y arreglas errores.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Aquí estamos dando unos pocos bloques ya en nuestro lugar de trabajo.
          Vamos a utilizar el botón de paso para caminar a través de los bloques,
          paso a paso, a ver si esta es la solución correcta y donde necesitemos repararlo.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Al parecer ahi está nuestro problema! Necesitamos un bloque más de mover
          adelante. El botón de paso nos ayuda a depurar nuestro problema al identificar
          dónde está el error y cómo podemos arreglarlo.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: En tu cabeza sostienes tu sombrero y tu inteligencia te dirá dónde estás
          y pensar acerca en el zoológico y asentir Hola a ti y a ti! Usa la cabeza
          cuando estás en línea para mantener lo que es tuyo dentro de tu mente y
          saber cómo estar a salvo, cómo darle a tu vida un espacio privado! De tu
          cabeza hasta los dedos de tu pie, pausa, pensar en ello. Desde tus pies
          hasta tu nariz, pausa y piensa en línea!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Usa tu corazón para crecer y crecer y date a ti mismo un brillo saludable
          y para hacer un San Valentín, Dile a alguien que tu seras mío! Usa tu corazón
          cuando estás en línea, siente lo que es correcto y siempre amable y muestra
          a tus amigos respeto, para ser justo y agradable en el Internet. Desde tu
          cabeza a los dedos de tu pie, pausa, piensa en ello. Desde tus pies arriba
          a la nariz, pausa y piensa en línea!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Utiliza tus brazos para abrazar a tu mascota, maten tu ropa sin que
          se moje y lleva tus mangas favoritas y ayudate a volar y hacerte creer.
          Utiliza tus brazos cuando estés en línea, tomate tiempo de descanso y equilibra
          el tiempo y deja tu tecnología y encuentrate a ti mismo un árbol para trepar.
          Desde tu cabeza hasta los dedos de tu pie, pausa, piensa en ello. Desde
          tus pies hasta la nariz, pausa y piensa en línea!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Utiliza tus instintos para almacenar tus alimentos y escucha su rugido
          estado de ánimo, as descansar tu vientre y siente el gas de la soda. Utiliza
          tus instintos cuando estás en línea, para saber, observar ciertos signos
          y dejar que guíe el camino y te diga cuando no está bien. De la cabeza hasta
          los dedos de tu pie, pausa, piensa en ello. Desde los pies hasta la nariz,
          pausa y piensa en línea!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Entonces piensa con tu cabeza y siente con tu corazón, equilibra tus
          brazos, escucha tus presentimiento. en línea. Utiliza tus piernas para correr
          y patear, salta y rebotar en un palo de pogo y baila alrededor de la cuadra
          y salta a lo largo de tus calcetines malolientes. Utiliza tus piernas cuando
          estás en línea, para enfrentar a los peleoneros que cruzan la línea y recuerda
          pararte alto, se agradable a las criaturas grandes y pequeñas.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Desde la cabeza hasta los dedos de los piés, para, piensa en ello. Desde
          tus pies hasta tu nariz, ¡para y piensa conectado! Así que piensa con la
          cabeza, y siente con el corazón, equilibrate con tus brazos, escucha a tus
          entrañas, levantate con tus piernas. Desde tu cabeza hasta los dedos de
          los piés, para, piensa en ello. Desde tus piés hasta la nariz, ¡para y piensa
          conectado!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Siempre que te conectas, dejas una huella que puede ser buscada, copiada,
          transmitida y es permanente. ¿Que clase de huella digital estás dejando?
          ¿Que clase de huella digital quieres dejar?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Esta lección se llama "Papel gráfico Programación" y se trata de algoritmos.
          Hoy vamos a aprender como escribir programas que muestran entre sí cómo
          recrear simples imágenes en blanco y negro, usando sólo flechas dibujadas
          a mano.
      2:
        image: notes/C2_graph_paper_2.png
        text: Un algoritmo es una lista de instrucciones necesarias para completar
          una tarea. Vamos a seguir este set de instrucciones para hacer el tazón.
          Los algoritmos son muy útiles cuando necesitas que otra personas entienda
          como hacer algo.
      3:
        image: notes/C2_graph_paper_3.png
        text: Si estás escribiendo un algoritmo para un computador, tienes que dividir
          el problema en pequeños pasos. Por lo tanto, termina esta fila y luego pasa
          a la siguiente, luego a la siguiente, y estarás listo.
      4:
        image: notes/C2_graph_paper_4.png
        text: Yo Utilizó algoritmos en mi trabajo. Si yo escribo todos los pasos puedo
          recrear esa misma pieza otra vez, o puedo enseñar a alguien que lo haga.
          Pon el vaso en el horno, lo funden, sige el resto de las instrucciones para
          hacer el tazón. Algoritmos te darán una ruta para conseguir que se haga
          algo.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Aquí vamos a utilizar el bloque de repetición que nos ayuda a ahorrar
          pasos cuando estemos programando nuestro artista. Ya tenemos algunos bloques
          fuera en nuestro escenario pero están ahi sólo para que comencemos.
      2:
        image: notes/C2_artist_loops_2.png
        text: Para ciclar los bloques cuatro veces y dibujar to un cuadro, sólo arrastra
          el bloque de repetir y pon el bloques de avanzar y gira a la derecha dentro
          del bloque de repetición. Cuando damos clic en ejecutar, el artista repetirá
          los pasos cuatro veces para completar el cuadrado.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Un bucle es una repetición de una actividad. Para entrar en una colmena
          a inspeccionar, miro un cuadro y luego lo pongo, luego repito esta actividad
          varias veces. Hacer un bucle, es hacer la misma actividad varias veces.
      2:
        image: notes/C2_bee_loops_2.png
        text: Este es el bloque de repetición. Lo que pongas dentro el bloque de repetición
          repetirá las acciones el numero de veces que le digas. Por ejemplo, en éste
          nivel, algo que arrastre hacia fuera mueva hacia adelante y obtengas el
          néctar tres veces, vamos a hacer simplemente que los arrastre hacia fuera
          cada uno y repetir la acción tres veces. Ha sido fácil!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalmente la programación es en texto pero nosotros usaremos Blockly
          que usa bloques visuales que puedes arrastrar y soltar para escribir programas.
          Bajo la cubierta, sigues creando el código. Para empezar, vamos a crear
          el código para el programa que ayudará a éste Angry Bird a moverse entre
          el laberinto para llegar a los cerdos malvados que robaron sus huevos.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly se divide en tres partes principales. A la izquierda está el
          laberinto de los pájaros, donde tu programa se ejecutará. Las instrucciones
          de cada nivel se escriben debajo del laberinto. Esta zona media es la caja
          de herramientas y cada uno de estos bloques es un comando que el pájaro
          puede entender. El espacio blanco en la derecha es el espacio de trabajo
          y es donde compilaremos nuestro programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: Si arrastro un bloque "mover" al área de trabajo y presiono "Ejecutar",
          ¿qué sucede? El págaro se mueve hacia adelante un bloque del terreno. ¿Y
          si quiero que el pájaro haga algo más después de moverse adelante? Puedo
          añadir otro bloque al programa.
      4:
        image: notes/C2_maze_intro_4.png
        text: Voy a elegir el bloque "girar a la derecha" y a arrastrarlo debajo de
          mi bloque de mover hasta que aparezca la flecha amarilla. Después la voy
          a soltar y los dos bloques se quedarán pegados. Cuando presione "Ejecutar"
          otra vez, el pájaro realizará los comandos que están apilados en nuestra
          area de trabajo en orden desde arriba hacia abajo.
      5:
        image: notes/C2_maze_intro_5.png
        text: Si deseas eliminar un bloque, solo sácalo de la pila y arrástralo a
          la papelera. Después de ejecutar el programa, siempre puedes apretar el
          botón de reinicio para que el pájaro vuelva al punto de inicio. ¡Ahora vamos
          por esos cerdos!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Esta lição é designada de Real Life Algorithms. Algorismos descrevem
          coisas que as pessoas fazem todos os dias. Receitas de bolachas e instruções
          de como construir uma casa para passáros são ambos algorismos usados no
          quotidiano.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Hoje, vamos fazer, criar e testar um algorismo para um avião de papel.
          Mas primeiro, necessitamos de separar este grande projecto em passos mais
          facéis de seguir. Para fazer um avião de papel, necessitamos de decidir
          que passos seguir e em que ordem devemos seguí-los.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Crearás tu algoritmo con primero cortando aparte las fotos. Luego, selecciorás
          las 6 fotos que muestran los pasos necesarios para hacer un avión de papel
          y arregla esas fotos en el orden correcto. Después de tener todo en orden,
          cambiarás algoritmos con otro equipo de estudiantes para probar el algoritmo
          y ver si el algoritmo funciona. Es super importante un algoritmo bien diseñado
          para hacer el mejor aeroplano de papel.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Cuando queremos hacer chocolate, hay muchos grandes pasos para ese proceso
          y cada uno de esos grandes pasos tiene un conjunto de pequeños pasos. Y
          hay diferentes recetas o algoritmos, dependiendo de cómo queremos que el
          sepa el chocolate. Cada paso es importante, incluso los pequeños. Así que
          sin un solo paso, el resto de ellos no podran ser completados. Es muy importante
          crear algoritmos que otros puedan entender. Es por ello que cada paso tiene
          que ser escrito no importando quien lo hace, el resultado es el mismo.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Hasta ahora has hecho una animación o una historia que hace exactamente
          lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego
          interactivo con el que de verdad puedes jugar.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner
          estos bloques juntos  para mover a los actores con las teclas de flecha.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Hoy vamos hacer programación retransmitida. Es todo sobre programación
          bajo presión y depurando los errores que a veces ocurren cuando se trabaja
          muy rápido o en equipos. Utilizaremos papel gráfico programando para simular
          la codificación y utiizaremos carreras retransmitiendo para simular que
          se tiene una fecha límite.
      2:
        image: notes/C2_relay_programming_2.png
        text: En programación retransmitida, equipos estarán compitiendo para terminar
          un programa de papel grafico. Tienes que comprobar el trabajo de su compañero
          de equipo, o depurarlo, arreglarlo si hay un error, agrega tu flecha y ejecutalo
          denuevo y etiqueta a tu compañero.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programadores utilizan mucho la depuración para encontrar y solucionar
          problemas en su código o sus algoritmos. Hay muchas maneras de depurar problemas.
          Uno de lo más fáciles es seguir paso a paso hasta encontrar algo donde sale
          mal, entonces arreglarlo.
      4:
        image: notes/C2_relay_programming_4.png
        text: Aquí, estoy tratando de hacer un salto hacia atras, pero me sigo callendo.
          Veo cada parte, paso a paso y trato de darme cuenta en donde estababa mi
          error. Mi entrenador me demostró que no estaba poniendo mis manos sobre
          la viga correctamente. Así que probé otro salto hacia atras en la viga con
          mi nueva posición de la mano, y me quedé! Realmente me alegró haber depurado
          mi salto hacia atras. Hemos averiguado! que la Depuración es encontrar y
          resolver problemas. Que bueno, buen trabajo!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Una cosa que a los ordenadores se les da muy bien es la de repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo un montón
          de veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Asi que por ejemplo si yo quisiera desearle a todos un feliz cumpleaños
          en Facebook enviandoles un correo electrónico, me tardaría más de un siglo
          para realmente escribir todos los mensajes de correo electrónico a todos.
          Pero con sólo unas pocas líneas de código, puedo tener un sistema envia
          un correo electrónico a todos en Facebook deseándoles un feliz cumpleaños.
          Entonces eso es lo que un ciclo es, y por qué son valiosos, y es algo que
          las computadoras pueden hacer muy bien.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: En este ejemplo tu objetivo va a ser el mover el pájaro para obtener
          el cerdo.  Ahora vamos a ser capaces de utilizar el bloque "repetir" para
          poder hacer esto muy fácilmente. Tu puedes hacer esto dando al equipo un
          comando de "seguir adelante" cinco veces en orden para avanzar el pájaro
          un paso a la vez hacia el cerdo.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: O sólo puedes decirle a la computadora "avanzar" una vez y luego dile
          "repetir" 5 veces, y hará lo mismo. Así que para hacer esto arrastra el
          comando "avanzar", y ponlo dentro del bloque "repetir". Puedes hacer clic
          en él y dile cuantas veces deseas que repita el bloque para indicarle cuántos
          pasos quieres que avance.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'Una cosa más: puedes poner todos los comandos que desees dentro de
          un bloque "repetir". En este ejemplo le estás diciendo que se mueva adelante
          y gire a la izquierda, y lo hará cinco veces. Bien, buen trabajo y a divertirse!'
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Una de las grandes cosas programando computadoras es que una vez que
          ya le dijiste a la computadora cómo realizar una acción, puedes llamar a
          esa función denuevo. le das un nombre y entonces asi le puedes llamar. En
          realidad es como ampliando el idioma.
      2:
        image: notes/C3_artist_functions_2.png
        text: En el programa que construimos, aprendimos a dibujar un cuadrado moviéndose
          y girando cuatro veces. Podemos tomar esa función y darle un nombre, dibujar
          un cuadrado, para cada vez que quieramos hacerlo, simplemente decimos dibuja
          un cuadrado y volvera a invocar esa función, ese código. Se hará pora nosotros.
          Hemos añadido ese concepto a nuestro lenguaje de programación.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Nisiquiera calificas para la carrera si tu no tienes personas que son
          competentes en ciencias de la computación debido a tantos datos que colectan
          los carros y la necesidad de poder tener personas que puedan escribir programas
          que encuentren la manera de cómo construir rendimiento.
      2:
        image: notes/C3_artist_intro_2.png
        text: En estos puzzles, tu serás un artista que usa un lápiz para dibujar
          distintas formas. Donde sea que tu artista vaya, el dibujará una linea detrás
          de él.
      3:
        image: notes/C3_artist_intro_3.png
        text: Para moverte por canvas, necesitarás usar el bloque de mover hacia delante.
          Aquí el bloque de mover dice que te muevas 100 pixeles hacia delante. Cuando
          pulsamos ejecutar, ¿Qué pasa? El artista se mueve hacia delante una cierta
          cantidad de pixeles y esa cantidad son 100px. Los pixeles son básicamente
          diminutos recuadros en la pantalla de tu ordenador.
      4:
        image: notes/C3_artist_intro_4.png
        text: El otro bloque que tenemos en este puzzle dice Girar a la derecha 90
          grados. Y cuando lo arrastramos, eso hace que nuestro artista gire una cierta
          cantidad. Así que puedes jugar con cuanto quieres que tu artista gire. Este
          es un giro de 90 grados.
      5:
        image: notes/C3_artist_intro_5.png
        text: Y esto es un giro de 120 grados. Y recuerda, tu puedes cambiar estos
          valores haciendo clic en las flechas junto a los números de píxeles y grados.
          ¡Disfruta dibujando con tu artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Cuando pones un ciclo dentro de otro ciclo, nosotros llamamos eso un
          ciclo anidado. Por ejemplo, aquí nosotros dadomos ya el código para dibujar
          un triángulo con lados de 100 píxeles de longitud usando el bloque de repetición
          tres veces, una para cada lado del triángulo.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Pero queremos dibujar seis triángulos. Para hacer eso, vamos a tomar
          ese bucle y lo pondremos dentro de otro bloque repetir. ¡Genial!, ¿No?
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Este es un bloque condicional. Este dice SI hay un nectar O miel que
          sea menor, igual o mayor que un número, ENTONCES haz algo.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Esto es útil cuando no sabemos cuanto néctar o miel obtener, como vemos
          acá con este signo de interrogación.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: En este ejemplo, vamos a decir SI la flor purpura tiene néctar mayor
          que 0, obtiene néctar. Eso le dice a nuestra abeja que continúe obteniendo
          néctar mientra haya. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: ¿Alguna vez has escuchado lo que es depurar un programa? Esta es la
          manera en la que te das cuenta qué es lo que no está funcionando. Cuando
          depuras un código, identificas y arreglas errores.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Aquí estamos dando unos pocos bloques ya en nuestro lugar de trabajo.
          Vamos a utilizar el botón de paso para caminar a través de los bloques,
          paso a paso, a ver si esta es la solución correcta y donde necesitemos repararlo.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Al parecer ahi está nuestro problema! Necesitamos un bloque más de mover
          adelante. El botón de paso nos ayuda a depurar nuestro problema al identificar
          dónde está el error y cómo podemos arreglarlo.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Uno de los conceptos más importantes en Ciencias de la computación es
          cómo definir nuevos comandos, cómo agregar tus propias palabras a un lenguaje
          para la computadora. La mayoría de los lenguajes de programación tienen
          sólo alrededor de cien palabras o comandos. El arte y la magia está definiendo
          tus propias nuevas palabras fuera de bloques de construcción.
      2:
        image: notes/C3_bee_functions_2.png
        text: Hacemos esto todo el tiempo en el deporte. Por ejemplo, en baloncesto,
          tu empiezas aprendindo a como regatear el balón, como hacer un lanzamiento,
          como rebote. Una vez que aprendimos estos movimientos muy básicos, aprendes
          nuevos movimientos y juntas estos bloques, como agarra y rola o da y muevete.
          Entonces puedes ir desde allí a hacer juegos más complejos. Una vez que
          aprendiste ese juego y le das un nombre, todos en el equipo saben cómo hacerlo.
      3:
        image: notes/C3_bee_functions_3.png
        text: Del mismo modo una vez que le enseñaste a la computadora cómo realizar
          una acción y una vez usando estas secuencias de comandos, puedes darle un
          nombre a esa acción para que sea fácil repetirla más tarde. Cuando defines
          tu propio comando y le das un nombre, A eso se le llama función. Ahora vamos
          a usar funciones para ayudar a la abeja.
      4:
        image: notes/C3_bee_functions_4.png
        text: En este ejemplo, nuestra función se llama obten 2 néctares, este bloque
          verde de aquí. Sabemos qué es lo que hace obten 2 néctares, Viendo la caja
          gris que es la definición de función. Si vemos en el interior, va a obtener
          2 néctares y luego va a obter 2 néctares otra vez. Entonces siempre mira
          lo que está dentro de la caja gris para que sepas que es lo que pueden hacer
          estas funciones de bloques verdes.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Ahora vamos a utilizar ciclos anidados con la abeja. Estamos dado un
          código de arranque que le dice a la abeja a avanzar y oten néctar tres veces
          y luego girar a la derecha. Tomemos la piesa completa de código y anidola
          dentro de otro bloque de repetir y establece a repetir tres veces. Hecho!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Vas a crear tu propio juego de rebotar la pelota que podrás compartir
          con tus amigos, Genial, ¿No?
      2:
        image: notes/C3_bounce_2.png
        text: Para empezar, tenemos que enlazar los controles de paleta a las flechas
          de nuestro teclado.
      3:
        image: notes/C3_bounce_3.png
        text: Podemos hacer esto mediante la vinculación cuando el bloque de flecha
          izquierda mover el bloque izquierdo y cuando el bloque de la flecha derecha
          mover el boque derecho. Pruébalo y estaras programando tu propio juejo al
          instante!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Esta lección es pensamiento computacional. A veces aprender un nuevo
          juego puede ser difícil ¿Verdad? Al principio puede parecer muy confuso
          y aveces, no hay nadie allí para enseñarle las reglas, entonces tienes que
          averiguarlo tu mismo.
      2:
        image: notes/C3_computational_thinking_2.png
        text: La buena noticia es que puedes mejorar averiguando cosas por tu cuenta
          cuando sabes algunos trucos del pensamiento. Estos trucos son formas únicas
          identificando y resolviendo problemas. En esta lección, aprenderas cuatro
          formas de trucos y practicarlos con tus amigos para encontrar las reglas
          para un juego.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Cuando desglosas un gran problema en secciones pequeños, estas utilizando
          tu cerebro para descomponer el problema. Una vez que hemos descompuesto
          el problema en varios problemas más pequeños, podemos pasar a nuestro siguiente
          truco, que se llama coincidencia de patrón.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Esto es cuando buscamos semejanzas entre las cosas. Una vez que encuentre
          las cosas que son iguales, puedo averiguar qué cosas son diferentes. Cuando
          elimino esas diferencias, a eso se le llama abstracción.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Después que me he di cuenta los pasos para resolver un problema, puedo
          poner esos pasos en un orden específico llamado algoritmo para que cualquiera
          pueda utilizar mis instrucciones para resolver el problema. Vamos a utilizar
          estos cuatro pasos para encontrar la manera de jugar el juego sin reglas.
          Al final del juego, podrás jugar algo que se ve así!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Esta lección se llama crowdsourcing. En esta lección vamos a usar una
          baraja de cartas para aprender cuanto mas fácil algunas cosas pueden ser
          si se hacer en grupos en lugar de intentar hacerlo todo solo. Así que ve
          por algunos amigos y haz algo impresionante. Crowdsourcing es conseguir
          ayuda de un grupo grande de personas para terminar algo más rápido.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: En ciencias de la computación, utilizamos crowdsourcing todo el tiempo.
          Miles de aficionados y profesionales enlazan sus equipos conjuntamente para
          buscar a través de miles de millones y miles de millones de piezas de información.
          Buscando por cosas como el siguiente número primo de Mersenne, o incluso
          posibles comunicaciones de extraterrestres.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Cuando ves una película, cada segundo de la película son 24 cuadros
          individuales, llamamos a esos fotogramas. Asi que cada una de esas fotos
          debe ser creado y renderizado y se junta todo. Mi equipo y yo, somos todos
          desarrolladores de software. Todos trabajamos juntos para crear una pieza
          de software que crea una imagen, crea la imagen final que ves en pantalla.
          Es una herramienta que artistas y otros desarrolladores pueden utilizar
          como parte de su trabajo en equipo y su proceso para ser capaces de crear
          las imágenes que quieren en pantalla.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Por ejemplo, en buscando a Nemo, cuando Crush y Squirt y todos sus amigos
          están volando a través de la corriente Australiana del Este. Estás viendo
          imágenes de agua que fluyen, estas viendo los colores en la parte posterior
          de la tortuga, estás viendo los lados de los pescados. Todas esas cosas
          se generan a través de programas de matemáticas y programas de computación
          que nosotros escribimos, que luego le damos al artista y ellos toman eso
          para crear la imagen final y retocarlo para que se vea hermoso y se vea
          divertido.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Esta lección se llama carrera de dados. A casi todos les gusta jugar
          juegos de computadoras. ¿Alguna vez as pensado cómo los programas de computadoras
          convertir los pasos de un juego en un programa? El primer paso en la creación
          de juegos de computadora y resoviendo cualquier problema requiere de pensamiento
          y planificación.
      2:
        image: notes/C3_dice_race_2.png
        text: El paso del pensamiento en resolución de problemas produce un algoritmo,
          el cual es un plan de paso a paso para solucionar un problema o terminar
          una tarea. tu crearás un algoritmo para un juego de carreras de dados. Luego
          le pediras a tus amigos que prueben tu plan para ver si ellos pueden seguir
          los pasos para jugar al juego. Después de que el programador esta seguro
          de que los pasos son correctos, es tiempo de traducir el algoritmo a un
          programa con el lenguaje que la computadora pueda entender.
      3:
        image: notes/C3_dice_race_3.png
        text: Casi todo lo que hacemos todos los días requiere un algoritmo, una lista
          de pasos que puedes seguir para terminar una tarea. Piensa en la rutina
          de estar listo para la escuela o la planificación de un día divertido con
          tus amigos o la preparación de un bocado. Para completar cualquiera de estas
          tareas, Tendrás que desglosarlo en pasos más pequeños y algunas veces los
          pasos deben ser en un orden específico.
      4:
        image: notes/C3_dice_race_4.png
        text: Pensa en hacer un sandwich. No importa que ingrediente saques primero
          de la alacena. Pero tu no puedes poner mantequilla de maní hasta que abras
          el tarro. Computadoras necesitan algoritmos y programas que le muestren
          cómo hacer incluso simples cosas que podemos hacer sin pensarlo.
      5:
        image: notes/C3_dice_race_5.png
        text: Un algoritmo es el pensamiento detrás de lo que debe ocurrir mientras
          que el programa son las instrucciones reales dadas a la computadora para
          que algo ocurra. Un algoritmo tiene que traducirse en un programa antes
          de que una computadora puede ejecutarlo. Desglosando una tarea en pasos
          llamado algoritmo aveces es dificil. Pero como cualquier nueva habilidad,
          se hace más fácil y más fácil con la práctica.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Mientras que los ciclos son muy similares a lo que haces en la vida
          cotidiana. Imagina que estás lavando tu coche, estaras tallando hasta que
          quede limpio. Mientras que no este limpio, seguirás tallando. Estás evaluando
          estas cosas todo el tiempo.
      2:
        image: notes/C3_farmer_while_2.png
        text: Tenemos un nuevo ciclo para ayudar a tu granjero. Se llama mientras-bloque.
          Es muy simple en realidad. Mientras que la declaración de la parte superior
          es verdadera, haz algo. Por ejemplo, mientras que haya un montón de tierra
          mueve una pala completa. Sigue adelante y dale una oportunidad a tu granjero.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Esta lección es funcional vitrales. Crearás bonitos vitrales usando
          funciones. Hay varios pasos en la creación de uno de estos vitrales. Algunos
          de los pasos tienes que repetilo varias veces.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: El primer paso para simplificar el proceso de hacer un vitral es averiguado
          lo que tenemos que repetir una y otra vez. Podemos agrupar estos pasos en
          lo que llamamos función.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Pero hay más que crear en un hermoso vitral que siguiendo pasos exactos.
          A veces queremos ser creativos y cambiar el color de los vidrios que estamos
          utilizando. Podemos hacer cada vitral único si utilizamos diferentes coloreados
          vidrios.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Tu vitral será únicamente tuyo cuando aprendas a pensar en los vidrios
          como las variables que es una palabra que significa un marcador de la información
          que puede ser cambiada. Diviértete creando hermosos vitrales usando funciones
          y variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Esta lección se trata del internet. Internet es un lugar muy ocupado
          y similar a este camino concurrido. Mensajes como los coches son enfocados
          a lo largo para llegar a sus destinos. Los mensajes se mueven a través de
          internet muy rápidamente.
      2:
        image: notes/C3_internet_2.png
        text: Actuando cómo funciona el internet te ayudará a entender lo que sucede
          cuando usas internet. Aprenderás cómo los mensajes van de tu computador
          a un sitio de web favorito o de un amigo a un buzón de correo electrónico.
          Al igual que es más fácil navegar por caminos ocupados cuando conoces los
          caminos y puedes leer las señales, viajando el internet no es tan complicado
          cuando sabes lo que esta pasando detrás de la escena.
      3:
        image: notes/C3_internet_3.png
        text: Envío de mensajes en internet es un poco como enviar mensajes por correo
          pero con algunas diferencias. Estoy aquí en Google.com. La dirección IP
          para este sitio web es este número. Puedes pensar de una dirección IP como
          la dirección del remitente en el correo. Imaginemos que quiero enviar un
          mensaje en el correo a alguien en la oficina de alla. ¿Aparece el URL y
          la dirección IP en esa puerta? He escrito este mensaje y pulse enviar.
      4:
        image: notes/C3_internet_4.png
        text: A diferencia de los servicios postales, lo primero que ocurre es que
          internet separa el mensaje en partes más pequeñas, par que se pueda enviar
          más fácilmente. Estas partes pequeñas se llaman paquetes. Cada paquete del
          mensaje se entrega al destino uno a la vez. Estos paquetes son reunidos
          en el orden correcto para que el receptor pueda leer el mensaje correctamente.
          Por supuesto, hay muchas cosas más que aprender sobre cómo funciona el internet
          pero esto es un gran comienzo. Estás en el camino a convertirte en un experto
          usuario de internet! No olvides decirle a tu familia y amigos lo que has
          aprendido!
      5:
        image: notes/C3_internet_5.png
        text: Mi nombre es Amanda Camp y soy un ingeniero de software en Google. Trabajo
          en un equipo que trabaja en el servidor final que almacena perfiles y contactos.
          En mi trabajo, pensamos mucho en cómo se pueden enviar contactos a otros
          dispositivos, como teléfono. La mayoría de la gente tiene un muchos contactos,
          es posible que tu tengas por decir, 1000 contactos y no queremos enviar
          a todos los contactos a la vez a tu teléfono porque es demasiado grande
          el mensaje. Similar a la manera que el internet separa grandes mensajes
          en paquetes, utilizamos un concepto llamado paginación donde solo mandaremos
          a tu teléfono 100 contactos a la vez y dejar que tu teléfono nos responda
          y pregunte por los próximos 100.
      6:
        image: notes/C3_internet_6.png
        text: Lo más emocionante del software es el hecho de que puede afectar a todo
          el mundo. Primero aprendí a programar cuando tenía cerca de diecinueve años.
          Creo que ya era un estudiante de segundo año o un junior en la Universidad.
          El primer programa que recuerdo haber escrito fue algo que convertía Celsius
          a Fahrenheit. Me gusta programar porque me gusta ayudar a la gente. Puedo
          escribir programas en Google para ayudar a las personas en todo el mundo
          y eso es realmente alucinante y emocionante.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Las personas toman decisiones todos los días. Por ejemplo, antes de
          salir al exterior, tienes una instrucción "Si..." que dice si está lloviendo,
          entonces necesito ponerme mi chaqueta. Las computadoras son sorprendentes
          una vez que se definen ese tipo de declaraciones ya que pueden ejecutar
          dichas sentencias de una forma efectiva y a gran velocidad. Un programa
          de computadora es realmente un poco de matemáticas y algunas declaraciones
          donde se toman decisiones.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: El bloque "Si..." ayuda a los zombies a tomar una decisión. Comprueba
          algo. Por ejemplo, vamos a utilizar el bloque que dice que si hay un camino
          a la izquierda y poner un comando de doblar a la izquierda en su interior.
          Estamos diciendo a los zombis que controlen su entorno, que vean si hay
          un camino a la izquierda y si es así, que doblen.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Luego usamos el bloque Avanzar dentro de esta repetición para continuar
          moviéndonos hacia adelante mientras se quiera. Entonces cuando hay un giro,
          el bloque "Si..." te indicará que hagas el giro a la izquierda. Se puede
          ver que si lo hacemos, si nos tomamos el giro a la izquierda y en otro caso
          seguimos adelante, te alcanzamos nuestro objetivo.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Es un ejemplo el uso de una sentencia "Si" que es en realidad un concepto
          fundamental en programación. Una de las primeras cosas que aprendí fue cómo
          escribir un programa que juega tic-tac-toe. Tuve sentencias "Si" para decir,
          ok, "Si" la otra persona está a punto de ganar, adelantate y bloquea a ese
          lugar. Diviértete aprendiendo a utilizar las sentencias "Si", es un concepto
          clave.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: En este ejemplo, su meta es llevar el zombie el girasol. Podríamos utilizar
          cinco bloques de movimiento hacia Adelante o podríamos decir a la computadora
          que avance 5 veces en un bloque de repetición.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Esto ahorra tiempo y lo hace mucho más fácil. Para usarlo, sólo hay
          que poner el bloque de avanza dentro del bloque de repetición. Pulsa ejecutar
          y el zombie avanzará cinco veces para el delicioso girasol.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Hasta ahora has hecho una animación o una historia que hace exactamente
          lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego
          interactivo con el que de verdad puedes jugar.
      2:
        image: notes/playlab_2.png
        text: Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner
          estos bloques juntos  para mover a los actores con las teclas de flecha.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Esta es la lección de escritura de la canción. La música es como un
          programa de computadora. Las notas escritas y las palabras le dicen al cantante
          exactamente qué hacer. Algunas partes de la música se utilizan una y otra
          vez.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Llamamos a esto el coro. En un programa de computadora, las partes del
          programa que se utilizan una y otra vez se llaman funciones. Cuando lees
          la letra de la canción y dice la palabra "Coro", ¿Cantas la palabra "Coro"?
          No, nos fijamos en la parte superior de la página para ver qué palabras
          forman el coro.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: En esta lección, aprenderás una canción poco tonta llamada conejito
          foo foo. La canción tiene un coro que cantarás varias veces una y otra vez.
          Una función es un pedazo de código que puedes llamar y usar una y otra vez.
          Hace la programación más fácil y eficiente para que no tengas que escribir
          una y otra vez los pasos de tu función. Puede escribirlo solo una vez!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Este es el bloque condicional. Dice que "Si" estas en la flor o el panal,
          entonces haz algo. Esto es útil cuando no sabemos la cantidad de miel o
          néctar para conseguir como vemos aquí con este signo de interrogación.
      2:
        image: notes/C4_bee_conditional_2.png
        text: En este ejemplo, vamos a decir, "Si" esuna flor, obten todo el néctar
          y luego use otro para decir, Si es un panal de abejas, hacer miel. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Tenemos un nuevo bloque llamado el bloque Si/de oto modo. Es una sentencia
          condicional, al igual que Si el bloque que has usado en el rompecabezas
          antes. Pero ahora hay una nueva pieza en la parte inferior que dice de otro
          modo. El bloque Si/de otor modo permite a la abeja tomar una decisión entre
          las dos acciones. Si la abeja esta el la flor, la abeja hará el conjunto
          de acciones que pusiste en la primera parte donde dice hacer. Si la abeja
          no esta en la flor, la abeja hará el conjunto de acciones que pusiste en
          la ranura donde dice de otro modo.
      2:
        image: notes/C4_conditionals_2.png
        text: Sentencias "Si" son cómo las computadoras son capaces de tomar decisiones.
          Los seres humanos definen condiciones para las computdaoras que dicen "Si"
          la computadora se presenta con cierta situación haz esto. De otra modo,
          sólo significa lo contrario, haz eso. La parte superior de nuestro bloque
          Si/de otro modo dice Si en la flor. Pero la parte superior de nuestro bloque
          podría decir otras cosas, como Si el néctar es igual a 2 o si existe un
          camino adelante, nuestro bloque se comportara de la misma manera. Que la
          sentencia Si y en la parte superior es verdadera hará el primer conjunto
          de acciones. Pero si la sentencia en la parte superior es falsa, hará el
          segundo conjunto de acciones.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Cuando se utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo la computadora sabe cuando es repetido suficientes veces? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        image: notes/C4_for_loops_2.png
        text: Por ejemplo, una repetición de bloque tres cuentas del 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El dede el ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          el cual se establece en el valor inicial al principio del ciclo y tiene
          el incremento agregado a él cada vez que el ciclo se ejecuta. En cuanto
          a la variable contador es mayor que el valor final, el ciclo deja de ejecutarse.
      3:
        image: notes/C4_for_loops_3.png
        text: La ventaja de utilizar un verdadero desde ciclo en lugar del bloque
          de repetición es que realmente puedes ver la variable contador y utilizarla
          en tu ciclo. Por ejemplo, Si tengo una serie de flores y la primera de ellas
          tiene un néctar, la segunda tiene dos néctares y la tercera tiene tres,
          puedo usar el desde ciclo para decirle a la abeja que colcte 'contador'
          néctares cada vez, que sería en la primera flor, dos en la segunda y tres
          en el tercero.
      4:
        image: notes/C4_for_loops_4.png
        text: También en desde ciclo, puedes incrementar el contador por un número
          distinto de uno cada vez. Potencialmente puedes contar por 2s, 4s o incluso
          atravez de una cantidad que cambia cada vez.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Cuando se utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo la computadora sabe cuando es repetido suficientes veces? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Por ejemplo, una repetición de bloque tres cuentas del 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El dede el ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          el cual se establece en el valor inicial al principio del ciclo y tiene
          el incremento agregado a él cada vez que el ciclo se ejecuta. En cuanto
          a la variable contador es mayor que el valor final, el ciclo deja de ejecutarse.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: La ventaja de utilizar un verdadero desde ciclo en lugar del bloque
          de repetición es que realmente puedes ver la variable contador y utilizarla
          en tu ciclo. Por ejemplo, Si tengo una serie de flores y la primera de ellas
          tiene un néctar, la segunda tiene dos néctares y la tercera tiene tres,
          puedo usar el desde ciclo para decirle a la abeja que colcte 'contador'
          néctares cada vez, que sería en la primera flor, dos en la segunda y tres
          en el tercero.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: También en desde ciclo, puedes incrementar el contador por un número
          distinto de uno cada vez. Potencialmente puedes contar por 2s, 4s o incluso
          atravez de una cantidad que cambia cada vez.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Cuando se utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo la computadora sabe cuando es repetido suficientes veces? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Por ejemplo, un bloque de repetición de tres cuentas de 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El desde ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          en que se establece el valor inicial al principio del ciclo y tiene el incremento
          agregado de cada vez que el ciclo se ejecuta. En cuanto la variable contador
          es mayor que el valor final, el ciclo deja de ejecutarse. La ventaja de
          utilizar un verdadero bucle en lugar de un bloque de repetición es que realmente
          puedes ver la variable contador y utilizar en tu ciclo.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Ahora que has editado bloques de función, es tiempo de crear un nuevo
          bloque de función desde cero. Es muy simple. Usted verá que el cuadro de
          herramientas tiene una categoría llamada funciones. Si haces clic en esto,
          usted verá un botón naranja que se llama crear una función. Haciendo clic
          en él, aparecerá el editor de función que ya has usado para editar bloques
          de función existentes.
      2:
        image: notes/C4_function_create_2.png
        text: Al igual que antes, usted comenzó nombrando su función y escribiendo
          una descripción de lo que se supone dicha función debe hacer. Por ejemplo,
          se supone que debe dibujar un cuadrado o dibujar un triángulo y luego arrastrar
          bloques de la caja de herramientas en el espacio blanco de abajo. Recuerda
          arrastrar estos bloques dentro del bloque verde que recubre la función.
      3:
        image: notes/C4_function_create_3.png
        text: Una vez que terminaste, haga clic en guardar y salir. Esto te llevará
          al romprecabezas principal. La nueva función que creaste aparecerá como
          un bloque verde en la categoría de función en tu caja de herramientas. Arrastrala
          y suelta esto en el espacio de trabajo principal y utilizarlo como cualquier
          otro bloque para resolver el rompecabezas.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Una de las grandes cosas programando computadoras es que una vez que
          ya le dijiste a la computadora cómo realizar una acción, puedes llamar a
          esa función denuevo. le das un nombre y entonces asi le puedes llamar. En
          realidad es como ampliando el idioma.
      2:
        image: notes/C4_function_edit_2.png
        text: En el programa construimos, aprendimos a dibujar un cuadrado moviéndose
          y girando cuatro veces. Podemos tomar esa función y darle un nombre, dibuja
          un cuadrado, para cada vez que quieramos hacerlo, simplemente decimos dibuja
          un cuadrado y volvera a invocar esa función, ese código. y lo hará por nosotros.
          Hemos añadido ese concepto a nuestro lenguaje de programación.
      3:
        image: notes/C4_function_edit_3.png
        text: En este rompecabezas, hemos ya creado una función de dibuja un cuadrado
          para ti. Lo verás en la caja de herramientas como un bloque verde. Lo que
          debes hacer es escribir el mismo código que escribiste antes de dibujar
          un cuadrado y pon esta función. Para ello, haga clic en la opción de editar
          en el bloque cuadrado verde. Esto abrirá el editor de funciones. El editor
          de función tiene tres partes. Un lugar donde nombraste tu función. Ésta
          aparecerá en el bloque verde antes de esa función. Entonces escribe una
          breve descripción de lo que tu función se supone que hace.
      4:
        image: notes/C4_function_edit_4.png
        text: En este caso, se supone que para dibujar un cuadrado. El espacio blanco
          de abajo este es el espacio de trabajo y obras como la obra de espacio que
          has estado usando. Arrastra y suelta bloques de la caja de herramientas
          en este espacio de trabajo. Recuerda en poner los bloques que creaste dentro
          de la cuadrado verde envolviendo el bloque para la función. Una vez que
          terminaste, da clic en guardar y salir. Esto te llevará al rompecabezas
          principal. Ahora puede utilizar la funcion bloque que dibuja el cuadrado
          al igual que cualquier otro bloque para resolver el rompecabezas.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Aqui hay una función que dibuja un cuadrado con lados de 50 pixeles.
          ¿Eso es genial pero que tal si quiero dibujar un cuadrado con lados de 50
          pixeles y otro cuadrado con lados de 100 píxeles? No tenemos que hacer dos
          funciones separadas que hacen casi lo mismo. Por el contrario, podemos usar
          una función con un parámetro.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parámetros nos permiten pasar valores a una función que utilice como
          variables dentro de la función. Vamos a intentar añadir un parámetro llamado
          como a esta función para que podamos usarla para crear cuadrados de diferentes
          tamaños. En el editor de función, pueded editar el nombre y descripción
          como antes pero ahora también puedes agregar un parámetro. Escribe el nombre
          de tu parámetro en el espacio y da clic en Agregar Parámetro. Esto crea
          un bloque rojo con el nombre del parámetro que acabas de crear. Ahora podemos
          reemplazar el movimiento hacia adelante por el bloque de 100 con el parámetro
          longitud pora que lo mueva hacia adelante por longitud.
      3:
        image: notes/C4_function_parameters_3.png
        text: Da clic en guardar y cerrar y arrastra hacia fuera tu nuevo crear un
          bloque cuadrado de la categoría de las funciones de la caja de herramientas.
          Notarás que hay un espacio vacío al lado de longitud porque la función quiere
          saber cuál es el valor del parámetro que longitud debe tener. Arrastrar
          un bloque del número de la categoría matemáticas y colocalo en este espacio.
          ¿Ve cómo puedes utilizar la función una y otra vez con diferentes longitudes
          para hacer cuadrados de diferentes tamaños? ¡ Pruébalo tu mismo!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalmente la programación es en texto pero nosotros usaremos Blockly
          que usa bloques visuales que puedes arrastrar y soltar para escribir programas.
          Bajo la cubierta, sigues creando el código. Para empezar, vamos a crear
          el código para el programa que ayudará a éste Angry Bird a moverse entre
          el laberinto para llegar a los cerdos malvados que robaron sus huevos.
      2:
        image: notes/C4_intro_2.png
        text: Blockly se divide en tres partes principales. A la izquierda está el
          laberinto de los pájaros, donde tu programa se ejecutará. Las instrucciones
          de cada nivel se escriben debajo del laberinto. Esta zona media es la caja
          de herramientas y cada uno de estos bloques es un comando que el pájaro
          puede entender. El espacio blanco en la derecha es el espacio de trabajo
          y es donde compilaremos nuestro programa.
      3:
        image: notes/C4_intro_3.png
        text: Si arrastro un bloque "mover" al área de trabajo y presiono "Ejecutar",
          ¿qué sucede? El págaro avanza una caja en la parrilla. ¿Y que tal si quiero
          que el pájaro haga algo más despues de qeu avanza una caja? Puedo agregar
          otro bloque a nuestro programa.
      4:
        image: notes/C4_intro_4.png
        text: Voy a elegir el bloque "girar a la derecha" y lo arrastrare debajo de
          mi bloque de mover hasta que aparezca la flecha amarilla. Después la voy
          a soltar y los dos bloques se quedarán pegados. Cuando presione "Ejecutar"
          otra vez, el pájaro realizará los comandos que están apilados en nuestra
          area de trabajo en orden desde arriba hacia abajo.
      5:
        image: notes/C4_intro_5.png
        text: Si deseas eliminar un bloque, solo sácalo de la pila y arrástralo a
          la papelera. Después de ejecutar el programa, siempre puedes apretar el
          botón de reinicio para que el pájaro vuelva al punto de inicio. ¡Ahora vamos
          por esos cerdos!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Si quiero dibujar un rectángulo de 50 píxeles de alto y eso es dos veces
          mas ancho que de alto, ¿cómo programare la computadora para hacer eso? Bueno,
          Podrian decirle la artista que suba cincuenta, girar a la derecha y luego
          ir mas de 100 y mover todo eso dos veces. Pero entonces estoy haciendo los
          cálculos para la computadora.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplicar cincuenta por dos en tu cabeza puede no decir mucho pero
          computadoras son realmente buenos en matemáticas, entonces debemos dejarcela
          a ellos siempre que sea posible. Si solo llamo a la variable altura en su
          lugar, entonces podría cambiar fácilmente la altura a los cincuenta y luego
          cambiar mi algoritmo para decirle al artista que suba por la altura, gire
          a la derecha y luego vaya más que la altura 2 veces, lo que nos da un rectángulo
          que es dos veces más ancho como lo es de alto.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Esta lección es llamada Tangram algoritmos. Un tangram es un rompecabezas
          con siete piezas que se pueden poner juntos a hacer otras formas. Utilizarás
          un algoritmo para explicar a tu compañero cómo armar el rompecabezas.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Un algoritmo es uno de los pasos de la lista que tu puedes tomar para
          completar una tarea. Los utilizamos todos los días con cosas como recetas
          y listas de compras. Si mantienes un algoritmo simple, hay muchas maneras
          de interpretarlo y quien realiza ese algoritmo no puede conseguir exactamente
          lo que querías. Si quieres asegurarte de que todos terminen exactamente
          con lo mismo, entonces su algoritmo tendrá que ser detallado y específico.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Estoy usando un algoritmo el dia de hoy para completar una pintura.
          Quería intentar hacer una pintura de algunos lobos pero no soy el mejor
          pintor. Por suerte para la gente como yo. hay pintura por números. Hay 40
          colores y tiene pocas letras y números que te dicen de qué color pintar
          cada sección. Pinturar por números me dice exactamente qué color usar y
          dónde.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Es muy específico por lo que soy capaz de seguir indicaciones y la pintura
          va a quedar impresionante. Es un gran algoritmo. Si las instrucciones no
          fueron lo suficientemente específicas, mis lobos no se veran tan bien. Cuando
          realmente quieres que salga algo exactamente de la manera en que lo planeaste,
          es mejor ser extremadamente preciso.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Cada equipo, la persona que está dando instrucciones es la persona que
          sostiene el papel, tiene que averiguar cual es el símbolo que va a ser y
          lo que su símbolo puesto es lo que va a ser. En binario, es como un alfabeto
          con dos letras. Como tener A y B es tu alfabeto completo pero tienes un
          0 y un 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: Es la forma más común qu utilizas binario en una sentencia de "Si".
          Es un clásico de la programación. El programa se ejecuta a lo largo y dice
          Si algo es verdadero, entonces haz esto. O no es verdadero y haces otra
          cosa. Qué pasa Si tu quieres hacer algo tal vez un poco más complicado.
          En su lugar una sentecia Si, deseas trabajar con algo como una imagen o
          un sonido en una computadora.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'Una computadora sólo sabe binario pero una imagen, no es binario, no
          son unos y ceros entonces ¿Cómo haces esto? Aquí está un ejemplo: tienes
          este hermosa foto. Ahora una foto es básicamente una forma de información.
          Toda la información puede ser codificada en binario de una u otra forma,
          sólo tienes que encontrar la manera de hacerlo.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Te imaginas que vamos a poner cuadros sobre este oso panda y para cada
          cuadro, vamos a decidir si esa cuadro es más negro o más blanco. Y luego
          vamos a colorearlo de esa manera. Ahora cada celda del cuadrodo es ya negro
          o blanco y luego los cuadrados negros vamos a decir que son ceros (dígito
          binario) y los cuadros blancos son unos, los otros dígitos binarios. Al
          final, te queda sólo un montón de unos y ceros. Asi es como representas
          esta imagen en binario.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: El disco de helado de vainilla puede ser el mismo para cada helado pero
          cuando pides a tus amigos que agreguen dos coberturas, usted podría conseguir
          un montón de combinaciones diferentes. Cobertura es el nombre de función
          pero cada tipo de cobertura es un parámetro. Funciones y parámetros trabajan
          juntos para hacer grandes programas de computación y grandes copas heladas
          también.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: La ciencia de la computación es la base para muchas de las cosas que
          profesionales y estudiantes universitarios harán en los próximos veinte
          o treinta años. Me gusta la programación porque me gusta ayudar a la gente.
          Tengo la oportunidad de construir algo que va a facilitar la vida de las
          personas. Creo que es lo más cercano que tenemos a un superpoder. Empezar
          es la parte más importante. Yo soy un principiante y quiero que aprendas
          conmigo.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: Soy John Vechey, y soy uno de los co-fundadores de PopCap Games. Hacemos
          Juegos como Plants vs Zombies, Bejeweled y Peggle. Mucho sobre los juegos
          no es lo perfecto de su código, no es lo perfecto su arte, se trata de cómo
          se siente y qué divertido es. Sólo puede obtener esa sensación al probarlo,
          aprendiendo y adaptando e iterando en sus propias habilidades de hacer juegos.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: ¿Tienes un juego de video favorito? Bueno, vamos a dar un paso hacia
          la creación de juegos usando Play Lab. Los buenos juegos tienen una historia
          y cada historia tiene actores. Actores hacen cosas como hablar, moverse
          e interactuar con los demás. Tal vez incluso anotan puntos basado en las
          reglas del juego. Hoy vamos a aprender cómo hacer todas estas cosas, una
          por una, con personajes de Disney como Ana, Elsa, Hiro, Baymax y Rapunzel.
          Construiremos un juego desde cero que puedes compartir y reproducir en un
          teléfono.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: La pantalla se divide en tres partes principales. Sobre la izquierda
          está el espacio del juego, donde se ejecutará el programa. Las instrucciones
          para cada nivel se escriben a continuación. Esta área central es la caja
          de herramientas, y cada uno de estos bloques es un pedazo de código. El
          espacio en blanco a la derecha se llama el espacio de trabajo, y esto es
          donde construimos nuestro programa.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Hola, soy Kathleen Kennedy, el productor de Star Wars, El Despertar
          de La Fuerza. Hoy trabajarás con una de nuestras estrellas, el BB-8. BB-8
          es un androide esférico. Todo lo que hace, cada movimiento que ejecuta,
          es controlado por un software. La Informática impacta en cada industria,
          desde el marketing hasta la atención en salud, o hasta en una película.
          De hecho, cientos de ingenieros informáticos trabajaron juntos para hacer
          una película como El Despertar de La Fuerza.
      2:
        image: notes/starwars_intro_2.JPG
        text: Hola, soy Rachel Rose. Soy una ingeniera de I+D en ILM y lidero el equipo
          de desarrollo de criaturas y animación. En El Despertar de la Fuerza, soy
          la responsable de ayudar a los actistas a desarrollar plataformas, que son
          las partes de lso personajes que se mueves y que permiten que parezcan muy
          creibles en una galaxia lejana, muy lejana.
      3:
        image: notes/starwars_intro_3.JPG
        text: En la siguiente hora, vamos a construir nuestro propio juego de Star
          Wars que te enseñará los conceptos basicos de la programación. Normalmente,
          la programación es totalmente textual, pero nosotros utilizaremos boques
          de tal manera que podremos arrastrarlos y soltarlos para escribir programas.
          Bajo esta apariencia, nosotros también estaremos creando código. Despues
          de que pruebes los conceptos básicos, cambiaremos a JavaScript, uno de los
          lenguajes de programación más populares en la web.
      4:
        image: notes/starwars_intro_4.JPG
        text: Para empezar, vamos a trabajar con Rey para programar a BB-8 para que
          se mueva para recoger todos los trozos de chatarra. Tu pantalla esta dividida
          en tres partes. La de la izquierda es el espacio del juego Star Wars donde
          se ejecutará el código. Las instrucciones para cada nivel se escriben debajo
          del espacio de juego.
      5:
        image: notes/starwars_intro_5.JPG
        text: La parte intermedia es la caja de herramientas y cada uno de estos bloques
          es un comando que BB-8 puede entender.
      6:
        image: notes/starwars_intro_6.JPG
        text: El espacio blanco de la derecha se llama espacio de trabajo y es donde
          vamos a construir nuestro programa.
      7:
        image: notes/starwars_intro_7.JPG
        text: Si arrastro el bloque moveLeft(); a nuestro espacio de trabajo y pulso
          ejecutar, qué pasa? BB-8 se mueve un bloque en la cuadrícula.
      8:
        image: notes/starwars_intro_8.JPG
        text: Y que pasa si quiero que BB-8 haga algo después del bloque moveLeft();?
          Puedo añadir otro bloque a nuestro programa. Voy a elegir el bloque moveUp();
          y lo arrastraré bajo mi bloque moveLeft(); hasta que se destaque. Entonces
          lo soltaré y los dos bloques se engancharán juntos.
      9:
        image: notes/starwars_intro_9.JPG
        text: Cuando pulse ejecutar otra vez, BB-8 realizará las acciones que he apilado
          de arriba a abajo en nuestro espacio de trabajo. Si quieres eliminar un
          bloque en algún momento, simplemente elimínalo del montón y devuelvelo arrastrándolo
          a la caja de herramientas.
      10:
        image: notes/starwars_intro_10.JPG
        text: Después de pulsar ejecutar, siempre puedes pulsar el botón de reiniciar
          para devolver a BB-8 al principio. Ahora, vamos a probar!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Dentro de los boques que hemos estado utilizando hay comandos JavaScript.
          JavaScript es hoy en día el lenguaje de programación más popular para los
          desarrolladores profesionales. Los bloques son una magnífica forma de empezar
          a aprender a escribir código y de hecho, las mejore universidades como Harvard
          y Berkeley empiezan a enseñar de esta forma. Pero una vez que aprendemos
          los conceptos básicos, los ingenieros escribimos código teclenado texto
          ya que de esta forma programamos más rápido.
      2:
        image: notes/starwars_typing_2.JPG
        text: Podemos teclear cientos de comandos sin tener que encontrarlos en la
          caja d eherramientas y arrastrarlos Dado que estás aprendiendo, escribir
          texto puede ser más lento al principio, pero queremos que lo intentes.
      3:
        image: notes/starwars_typing_3.JPG
        text: En la esquina superior derecha de tu espacio de trbajo, puedes pulsar
          el boton de mostrar texto de cualquier puzzle para cambiar de mostrar bloques
          a introducir código como texto.
      4:
        image: notes/starwars_typing_4.JPG
        text: En la próxima lección, empezaremos en modo de teclear texto. Aún podrás
          arrastrar el bloque desde la caja de herramientas o bien podrás teclear
          el nombre del comando. Cuando empiezas a teclear, verás que los nombres
          de los posibles comandos aparecen debajo de dónde estés tecleando. En vez
          de teclear el nombre completo del comando, puedes seleccionar uno de ellos
          para ir más rápido. En mi trabajo, uso esta característica de autocompletar
          continuamente cuando escribo código.
      5:
        image: notes/starwars_typing_5.JPG
        text: Cuando escribas código, el ordenador necesita que seas muy preciso.
          Deberás teclear y usar las mayúsculas en el nombre del comando exactamente,
          incluyendo los paréntesis y el punto y coma. Aunque sólo cometas un pequeño
          error, BB-8 no podrá entender el código y no será capaz de moverse.
      6:
        image: notes/starwars_typing_6.JPG
        text: Cuando cometas un error en la línea, el editor lo marcará para que puedas
          intentar cambiar el texto para corregirlo.
      7:
        image: notes/starwars_typing_7.JPG
        text: Si te atascas, siempre podrás comenzar de nuevo con el botón de recomenzar
          y también podrás volver al modo de bloques en cualquier momento pulsando
          en la esquina superior derecha. Ok, vamos a probar a escribir! Y si cometes
          errores, no te preocupes. Todo el mundo necesita varios intentos para hacerlo
          correctamente.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force
          Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hola, soy Rachel Rose. Soy una ingeniera de I+D en ILM y lidero el equipo
          de desarrollo de criaturas y animación. En El Despertar de la Fuerza, soy
          la responsable de ayudar a los actistas a desarrollar plataformas, que son
          las partes de lso personajes que se mueves y que permiten que parezcan muy
          creibles en una galaxia lejana, muy lejana.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: En la siguiente hora, vamos a construir nuestro propio juego de Star
          Wars que te enseñará los conceptos basicos de la programación. Normalmente,
          la programación es totalmente textual, pero nosotros utilizaremos boques
          de tal manera que podremos arrastrarlos y soltarlos para escribir programas.
          Para empezar, vamos a trabajar con Rey para programar que BB-8 se mueva
          para recoger todos los trozos de chatarra.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Tu pantalla esta dividida en tres partes. La de la izquierda es el espacio
          del juego Star Wars donde se ejecutará el código. Las instrucciones para
          cada nivel se escriben debajo del espacio de juego.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: La parte intermedia es la caja de herramientas y cada uno de estos bloques
          es un comando que BB-8 puede entender.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: El espacio blanco de la derecha se llama espacio de trabajo y ahí es
          donde construiremos nuestro programa.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Si arrastro el bloque moveLeft(); a nuestro espacio de trabajo, qué
          pasará? BB-8 se mueve un bloque a la izquierda en la cuadrícula.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Y que pasa si quiero que BB-8 haga algo después del bloque moveLeft();?
          Puedo añadir otro bloque a nuestro programa. Voy a elegir el bloque moveUp();
          y lo arrastraré bajo mi bloque moveLeft(); hasta que se destaque. Entonces
          lo soltaré y los dos bloques se engancharán juntos. Cuando pulse ejecutar
          otra vez, BB-8 realizará las acciones que he apilado de arriba a abajo en
          nuestro espacio de trabajo.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Si quieres eliminar un bloque en algún momento, simplemente elimínalo
          del montón y devuelvelo arrastrándolo a la caja de herramientas.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Después de pulsar ejecutar, siempre puedes pulsar el botón de reiniciar
          para devolver a BB-8 al principio. Ahora, vamos a probar!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Usamos el bloque de evento whenUp() y le añadimos el bloque goUp().
          Cuando el jugador pulse la tecla de flecha hacia arriba, el código asociado
          al bloque whenUp() se ejecuta. Y haremos lo mismo para para mover a R2-D2
          hacia abajo. Ahora, en vez de escribir todo el código para controlar nuestro
          androide a priori, podemos dejar que R2-D2 reaccione a los eventos de pulsación
          de botón que lo mueven por la pantalla.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Paso a paso, tu juego se va haciendo cada vez más interactivo.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Il mio nome è Jens Bergensten meglio conosciuto come Jeb. Sono lo sviluppatore
          principale di Minecraft, qui alla Mojang a Stoccolma. Penso che da quando
          avevo 11 anni, forse 12 ho iniziato a programmare perche volevo creare videogiochi.
          Un amico di mio padre mi disse che per creare videogiochi, hai bisogno di
          imparare come programmare. Ed è da li che ho iniziato. A me piace progettare
          e capire l' architettura dei videogiochi. E' questo che mi piace davvero
          di Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Over the next hour, you're going to learn the basics of computer science
          by programming Alex or Steve to move through a simulated piece of a Minecraft
          world.
      3:
        image: notes/mc_intro_3.JPG
        text: Traditional programming is usually in text but today we'll use Blockly,
          a system which uses visual blocks that you can drag and drop to write programs.
          Under the hood, you're creating Javascript code.
      4:
        image: notes/mc_intro_4.JPG
        text: The concepts you'll be learning are what computer programmers use every
          day and are the foundation to computer science. Here at Mojang, we use these
          same concepts to make Minecraft work.
      5:
        image: notes/mc_intro_5.JPG
        text: Before you start, you'll pick your character. I'm going to choose Alex.
          Let's build code for a program that will help her move around the screen.
      6:
        image: notes/mc_intro_6.JPG
        text: Your screen is split into three main parts. On the left is the Minecraft
          playspace where your program will run. The instructions for each level are
          written below.
      7:
        image: notes/mc_intro_7.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that directs Alex's actions.
      8:
        image: notes/mc_intro_8.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      9:
        image: notes/mc_intro_9.JPG
        text: If we drag the moveForward(); block to our workspace and then click
          run, what happens? Alex moves forward one space on the grid.
      10:
        image: notes/mc_intro_10.JPG
        text: And what if we want to do something after she has moved forward one
          space? We can add another block to our program. I'm going to choose the
          turnRight(); block and I'll drag it underneath my moveForward(); block until
          this orange line appears. Then I'll drop it and the two blocks will snap
          together. When we press run again, Alex will perform the commands that are
          stacked from top to bottom in our workspace.
      11:
        image: notes/mc_intro_11.JPG
        text: If you ever want to delete a block, just drag it from the stack back
          to the toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: 'To undo your changes and get back to how the level started, use the
          Start Over button in the top right corner of the workspace. One more thing:
          you see the little triangle on the turn blocks? Anytime you see these triangles,
          it means that you can pick a different option. Let''s start coding!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: I'm Lydia Winters, Mojang's brand director and we made a little game
          called Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: My favorite thing to do in Minecraft is explore. I love adventuring
          in caves and seeing what I can find. As someone who isn't a programmer,
          I'm really excited to go through the Minecraft lesson and actually learn
          some coding myself.
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier
          if we could just tell the computer to perform the moveForward(); command
          four or five times. Luckily for us, computers are really good at repeating
          commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: When building Minecraft, we use repeat loops to place all the initial
          materials for creating a new world. That's thousands and thousands of blocks.
          We also use loops in little ways, for example to make Alex's feet move back
          and forth as she walks. Repeat loops are a powerful part of programming.
      5:
        image: notes/mc_repeat_5.JPG
        text: Night is coming so in the next couple of levels, we're going to build
          a house to stay safe. We're going to use the repeat block to do this very
          easily.
      6:
        image: notes/mc_repeat_6.JPG
        text: To build a wall of our house, we can either tell Alex to moveForward();
          and place planks four times or we can tell her to moveForward(); and place
          one plank, then take this command and use the repeat block to have her perform
          the action multiple times. Now we'll click on the repeat block and tell
          her how many times we want her to perform this action. Now let's build our
          house before night falls! Have fun.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Now we're going to learn about if statements. If statements are a fundamental
          part of learning to program. They help a computer make decisions.
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when
          I unlock my phone, it runs some code that says if I enter the password correctly,
          then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react
          to what they see in the world. For example, if there is a rock in front
          of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: In this case, we don't want to fall in the lava. It's easy to plan for
          the lava. We can see it on the screen. But what about the lava that we can't
          under the stone?
      5:
        image: notes/mc_if_statements_5.JPG
        text: After we mine the stone, we'll need to check if there's any lava in
          that place before moving forward. If there is lava there, we want to place
          a stone in front of our character before we can move forward. That way we
          can safely move on. Time for more mining! And remember to use the if statement
          to watch your step.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[students talking] It''s about to get real. Shear. I made an L out
          of torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: When you're done making your creation, choose share to get a link to
          share with your friends. Have fun!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[students talking] It''s about to get real. Shear. I made an L out
          of torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
