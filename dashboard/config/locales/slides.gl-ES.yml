"gl":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Benvido á súa primeira Hora do Código! Ímonos mergullar na súa primeira
          experiencia con programación.
      2:
        image: notes/hoc1_2.jpg
        text: Imos usar o Blockly, unha linguaxe de programación visual onde vostede
          arrastra e solta bloques para escribir código.
      3:
        image: notes/hoc1_3.jpg
        text: A programación é xeralmente en liñas de código escrito, no entanto o
          "Blockly" é visual. Cada bloque corresponde a unha liña de código "real".
      4:
        image: notes/hoc1_4.jpg
        text: Vostede vai aprender o básico da informática, que consiste en conceptos
          usados no desenvolvemento de aplicacións e até mesmo para controlar unha
          sonda en Marte.
      5:
        image: notes/hoc1_5.jpg
        text: Un programa é un conxunto de instrucións a seren seguidas polo seu computador.
      6:
        image: notes/hoc1_6.jpg
        text: O obxectivo do seu primeiro programa é levar o Angry Bird até un Porco
          Verde a través do labirinto.
      7:
        image: notes/hoc1_7.jpg
        text: O lado esquerdo é o labirinto onde o programa é executado. As instrucións
          para cada desafío están debaixo labirinto.
      8:
        image: notes/hoc1_8.jpg
        text: A caixa de ferramentas do medio contén os comandos do Angry Bird. Vostede
          vai usalos para crear o seu programa.
      9:
        image: notes/hoc1_9.jpg
        text: Á dereita vostede ten a súa área de traballo, onde vai arrastrar os
          bloques da caixa de ferramentas para crear o seu programa. Para excluír
          un bloque, arrástreo para a recolledora de lixo no recanto.
      10:
        image: notes/hoc1_10.jpg
        text: Cada bloque é unha instrución. Se vostede arrastra un bloque "avance"
          para a súa área de traballo e preme en "Executar Programa", o paxaro móvese
          un espazo para diante no labirinto.
      11:
        image: notes/hoc1_11.jpg
        text: Para facer máis de unha acción, vostede pode arrastrar varios bloques
          para a súa área de traballo e conectalos os uns aos outros. O paxariño obedecerá
          os comandos de enriba para baixo.
      12:
        image: notes/hoc1_12.jpg
        text: Se executa un programa e quere corrixilo, clique en "Recomezar".
      13:
        image: notes/hoc1_13.jpg
        text: Imos apañar estes porcos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Ola, son o JR! Todo equipo de carreira precisa da informática para gañar.
          Analizan os datos do coche para facelo máis rápido.
      2:
        image: notes/stage5_2.jpg
        text: Nestes desafíos, vostede vai ser un artista que debuxa por todo lugar
          que pasa.
      3:
        image: notes/stage5_3.jpg
        text: Este bloque di "avance por 100 pixels". Pixels son puntos minúsculos
          na súa pantalla.
      4:
        image: notes/stage5_4.jpg
        text: Este bloque di "vire á dereita 90 graos". Este bloque funciona da mesma
          forma que o bloque "vire" no desafío do labirinto.
      5:
        image: notes/stage5_5.jpg
        text: Clica na frecha en calquera un destes bloques para alterar o número
          de movementos do artista, tanto para avanzar canto para virar. Xogue cos
          novos bloques para ver como funcionan.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Ola, eu son a Paola! Nestes desafíos, vostede é unha campesiña que precisa
          deixar o seu terreo completamente plano para comezar o plantío.
      2:
        image: notes/stage9_2.jpg
        text: Precisa axudarlle a remover todos os montes de terra e cubrir todos
          os buracos.
      3:
        image: notes/stage9_3.jpg
        text: Os novos bloques removen 1 pa de terra dun monte, e cobren o buraco
          con 1 pa de terra.
      4:
        image: notes/stage9_4.jpg
        text: Os montes de terra e os buracos son de tamaños distintos, entón ten
          que dicir á campesiña cantas pas usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Ola, eu son Katie! Unha das cousas máis emocionantes da informática
          é que un programa de computador pode ser interactivo.
      2:
        image: notes/flappy02.jpg
        text: Sempre que alguén preme, teclea, ou toca na pantalla dun móbil, xérase
          un EVENTO, e existen algúns códigos que deciden o que facer cando un EVENTO
          ocorre.
      3:
        image: notes/flappy03.jpg
        text: 'Por exemplo, vostede podería ter un MANIPULADOR DE EVENTOS que di "cando
          se prema o rato, toque un son" '
      4:
        image: notes/flappy04.jpg
        text: Vostede xa oiu falar do xogo Flappy Bird? Usando manipuladores de eventos,
          imos aprender a programar a nosa propia versión do Flappy Bird!
      5:
        image: notes/flappy05.jpg
        text: O código que vai escribir consiste en arrastrar e soltar bloques que
          representan os comandos para o computador. Na verdade, cada un destes bloques
          é representado polo código real.
      6:
        image: notes/flappy06.jpg
        text: 'Se dá unha ollada na área de traballo, existen algúns bloques verdes
          que son cubertos para vostede - eses son os "manipuladores de evento" '
      7:
        image: notes/flappy07.jpg
        text: Se quere que o paxariño VOE cando vostede PREMER, pode anexar o bloque
          "FLAP" ao manipulador de evento apropiado. Así, sempre que vostede prema,
          o paxariño vai voar.
      8:
        image: notes/flappy08.jpg
        text: En cada desafío desa actividade, imos introducir novos tipos de eventos,
          como os bloques verdes na área de traballo, e pode decidir que bloques son
          apropiados para agregar en resposta a eses eventos.
      9:
        image: notes/flappy09.jpg
        text: Cando observe unha frecha suspensa como esta, significa que pode alterar
          as configuracións, como o son a ser reproducido cando o paxaro bata no chan.
      10:
        image: notes/flappy10.jpg
        text: No desafío final vai poder crear o seu propio xogo e compartir cos seus
          amigos. Divírtase!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Ola, eu son o Mark! Imos aprender sobre bucles. Usando bucles pode dicir
          a un computador que repeta calquera conxunto de accións continuamente, miles
          ou mesmo millóns de veces.
      2:
        image: notes/hoc2_2.jpg
        text: Neste desafío, queremos facer o paxaro avanzar 5 espazos para chegar
          ao porco.
      3:
        image: notes/hoc2_3.jpg
        text: Podemos usar o novo bloque "repita" para nos axudar.
      4:
        image: notes/hoc2_4.jpg
        text: En vez de arrastrar 5 bloques "avance"...
      5:
        image: notes/hoc2_5.jpg
        text: Podemos colocar o bloque "avance" dentro do bloque "repita" e escribir
          un número no bloque para definir o número de repeticións.
      6:
        image: notes/hoc2_6.jpg
        text: 'E isto é importante: pode colocar máis dun comando dentro dun bloque
          "repita".'
      7:
        image: notes/hoc2_7.jpg
        text: Aproveite o  novo bloque "repita"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Ola, eu son o Chris. Antes de entrar para o Miami Heat, fun para a Georgia
          Tech para estudar informática. Imos dar unha ollada no noso novo bloque,
          o bloque "repita até".
      2:
        image: notes/hoc3_2.jpg
        text: E se nós non soubesemos canto tivo que se mover o paxaro para chegar
          ao porco?
      3:
        image: notes/hoc3_3.jpg
        text: Se colocamos un bloque "avance" dentro do bloque "repita até", o paxaro
          vai seguir adiante ATÉ chegar ao porco (ou se chocar contra unha parede).
      4:
        image: notes/hoc3_4.jpg
        text: 'E iso é importante: así como antes, podemos colocar varios bloques
          dentro do bloque "repita até", e todos eles serán repetidos.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: Ola, eu son o Bill! Imos aprender un novo concepto fundamental;* instrucións
          "se". É así como os computadores toman decisións.
      2:
        image: notes/hoc4_2.jpg
        text: Vostede usa a instrución "se" todos os días. Toda mañá, antes de saír,
          vostede di;* SE estivese chovendo alí fóra, vou precisar da miña chaqueta.
      3:
        image: notes/hoc4_3.jpg
        text: Podemos dicir ao zumbi que verifique SE hai camiño para a esquerda e,
          se atopa un camiño para a esquerda, precisamos viralo naquela dirección.
      4:
        image: notes/hoc4_4.jpg
        text: Para programar isto, imos arrastrar o noso bloque "se" e colocar un
          bloque "vire á esquerda" dentro del.
      5:
        image: notes/hoc4_5.jpg
        text: Agora, se colocamos un bloque "avance" por enriba del e colocamos todo
          dentro dun bloque "repita", a cada vez que o zumbi se mova vai verificar
          se hai un camiño para a esquerda e virar. O comando "repita" é fundamental
          para verificar a necesidade de virar a cada paso.
      6:
        image: notes/hoc4_6.jpg
        text: As instrucións "se" son moi importantes para a informática. Un dos primeiros
          programas que escribín foi un xogo da vella, e había unha instrución "se"
          que dicía;* SE a outra persoa está a piques de gañar, bloquee a casa que
          lle permitiría gañar.
      7:
        image: notes/hoc4_7.jpg
        text: Divírtase usando o bloque  "se"!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Ola, o meu nome é Saloni. A informática axúdame a resolver problemas
          das áreas da saúde e medicina. Imos aprender sobre o bloque "se-senón".
          Parece o bloque "se", pero cunha parte extra no final que di "senón".
      2:
        image: notes/hoc5_2.jpg
        text: Se eu coloco un bloque "avance" na instrución "faga", e un bloque "vire
          á esquerda" na instrución "senón", significa que o zumbi vai escoller entre
          2 opcións. SE existe un camiño diante, o zumbi vai avanzar e, EN CASO CONTRARIO
          (non hai un camiño adiante), o zumbi vai virar á esquerda.
      3:
        image: notes/hoc5_3.jpg
        text: Así como o bloque "se", nós podemos colocar bloques "se-senón" dentro
          de bloques "repita", así o zumbi continuará se movendo, e o bloque "se-senón"
          continuará verificando se é posíbel virar para algún lugar.
      4:
        image: notes/hoc5_4.jpg
        text: Agora, coloque cada zumbis no seu lugar debido!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Un comando se-senón é unha decisión entre dúas opcións. Imos ver como
          podemos usar un comando se-senón con noso amigo Scrat, o esquío.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Este bloque parece igual ao bloque "se", pero hai unha parte extra no
          final que di "senón". Se eu colocar un bloque "avance" na instrución "faga",
          e un bloque "vire á esquerda" na instrución "senón", significa que o esquío
          Scrat vai avanzar se houbese un camiño diante. Se non houbese camiño diante,
          o Scrat vai virar á esquerda.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Significa tomar unha decisión e facer unha das dúas accións con base
          nesa decisión. E, así como os bloques "se", pode colocar bloques "se-senón"
          dentro de bloques "repita".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Agora imos axudar Scrat, o esquío, a apañar esa landra!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Ola, eu son a Brina, unha engeñeira do Instagram. Unha función é un
          conxunto de liñas de código que se desexan usar varias veces. Entón, en
          vez de escribir ese código cada vez, vostede pode usar só unha liña.
      2:
        image: notes/stage13_2.jpg
        text: Imos aprender a definir funcións. As definicións de función teñen unha
          estrela no recanto. O nome da función está escrito na liña superior.
      3:
        image: notes/stage13_3.jpg
        text: Os bloques que van dentro da definición din o que fai. Entón, esta definición
          de función chámase "cubra 5", e está composta por un bloque "repita" e un
          bloque "cubra".
      4:
        image: notes/stage13_4.jpg
        text: A definición está na área de traballo, pero a campesiña non vai executar
          a función até que arrastremos o bloque "cubra 5" para fóra da categoría
          funcións.
      5:
        image: notes/stage13_5.jpg
        text: 'Imos actuar en "función" da diversión! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Ola, eu son o Makinde! Imos aprender sobre o bloque "mentres". '
      2:
        image: notes/stage9_6.jpg
        text: O bloque "mentres" vai facer todo o que vostede coloque no seu interior,
          SEMPRE QUE a declaración na parte superior sexa CERTA.
      3:
        image: notes/stage9_7.jpg
        text: Por exemplo, se a campesiña está nun monte de terra continuará a remover
          1 pa MENTRES haxa terra debaixo dela.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Ola, eu son a Trina, e traballo para a Pixar. Xa traballei nunha cheia
          de filmes, incluíndo o Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Este é o noso novo bucle "contador". Executará accións repetidamente,
          e vostede pode facer que as accións muden aos poucos.
      3:
        image: notes/stage11_3.jpg
        text: Neste exemplo, o noso bucle "contador" di "conte de 50 até 90, indo
          de 10 en 10" e, dentro del, temos o noso bloque "debuxe un cadrado". Arrastre
          o bloque "contador" da sección "Variábeis" para o sitio que indica "lonxitude".
      4:
        image: notes/stage11_4.jpg
        text: Iso significa que o noso artista vai debuxar un cadrado con lados de
          50 pixels de lonxitude, e entón vai engadir 10 e debuxar un cadrado con
          lados de 60 pixels de lonxitude. Vai continuar agregando 10 e debuxando
          cadrados até que atinxa 90 pixels. Así, imos ter cadrados de 50, 60, 70,
          80 e 90 pixels.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Ola, eu son a Janete, e eu son unha engeñeira da Zynga.
      2:
        image: notes/stage15_2.jpg
        text: E se quixéramos debuxar unha cheia de triángulos de tamaños distintos?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escribir todo o código á man ou podemos usar unha función con
          parámetros.
      4:
        image: notes/stage15_4.jpg
        text: Para facer iso, clique na estrela azul sobre a definición da función
          "debuxe un triángulo". Arrastre o "nome de entrada" para o bloque "entrada".
      5:
        image: notes/stage15_5.jpg
        text: Entón, se escribe "lonxitude" no sitio onde hai un "x" e aperta "Enter",
          vai crear unha lonxitude de entrada para a súa función.
      6:
        image: notes/stage15_6.jpg
        text: Entón, clique na estrela. Agora vai premer na categoría de variábeis
          e arrastrar o bloque "lonxitude" para dentro do bloque "avance" da súa definición
          da función. E arrastre para fóra o antigo bloque de número.
      7:
        image: notes/stage15_7.jpg
        text: Para usar a súa función con parámetros, clique na categoría funcións
          e arrastre para fóra a función "debuxe un triángulo con lonxitude".
      8:
        image: notes/stage15_8.jpg
        text: Agora pode usar o bloque de matemáticas para entrar con números distintos
          e debuxar triángulos de tamaños distintos.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Parabéns! Co último desafío resolto, acabou de escribir o código que
          pode dicir a CALQUERA robot como encontrar o o seu camiño a través dun labirinto
          sen ramificación ou dun túnel de calquera lonxitude, sexa el un zumbi, un
          paxaro, unha sonda en Marte ou até mesmo un coche sen condutor.
      2:
        image: notes/hoc6_2.jpg
        text: Os conceptos básicos que usou son o corazón de calquera programa ou
          aplicación. Aprendemos sobre bucles de repetición, instrucións de repeticións
          condicionais, instrucións se, e instrucións se senón.
      3:
        image: notes/hoc6_3.jpg
        text: Se gustou da primeira hora de programación, visite a code.org para continuar
          a aprender a informática! Ao completar o noso curso de 20 horas, dominará
          o básico de programación, e vai estar apto a aprender como programar aplicacións
          para móbil, instrucións robóticas, xogos, e moito máis.
      4:
        image: notes/hoc6_4.jpg
        text: A tecnoloxía está mudando todo o que facemos, e non importa se ti es
          mozo ou vello;* programar é divertido, é creativo, e todos poden aprender!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá en breve!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Ola, o meu nome é Lyndsey. Eu son modelo, actriz e tamén escribo as
          miñas propias aplicacións. Imos usar a programación para explorar a maxia
          e a beleza do xeo coa Anna e a Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Vai crear flocos de neve e padróns mentres esquía, e un país das marabillas
          invernal para compartir cos seus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: Na próxima hora, vai aprender os conceptos básicos da programación.
          A programación tradicional é escrita, pero nós usaremos Blockly, bloques
          visuais que pode arrastrar e soltar para escribir programas. Tamén é así
          como os estudantes universitarios aprenden o básico. E por tras deses bloques,
          vostede está creando códigos.
      4:
        image: notes/frozen1_4.jpg
        text: Un programa é un conxunto de instrucións que di a un computador o que
          debe facer. Imos construír un código, ou programa, que axudará á Elsa a
          crear unha recta simple. Máis adiante imos usar isto para crear padróns
          máis complexos.
      5:
        image: notes/frozen1_5.jpg
        text: A súa pantalla está dividida en tres partes principais. Á esquerda ten
          a superficie de xeo onde vai executar o seu programa. As instrucións de
          cada nivel están escritas xusto abaixo da superficie.
      6:
        image: notes/frozen1_6.jpg
        text: A parte do medio é onde fica a caixa de ferramentas, e cada un deses
          bloques representa unha acción que pode ser realizada pola Elsa e a Anna.
      7:
        image: notes/frozen1_7.jpg
        text: O espazo en branco á dereita é chamado de área de traballo, e é onde
          imos crear o noso programa. Para se mover pola superficie de xeo, usará
          o bloque "avance".
      8:
        image: notes/frozen1_8.jpg
        text: Aquí, o bloque "avance" di;* "avance 100 pixels". Cando prememos en
          "Executar", o que acontece? a Elsa móvese unha correcta distancia na pantalla,
          100 pixels, de verdade! Os pixels son, basicamente, minúsculos cadrados
          na pantalla do seu computador.
      9:
        image: notes/frozen1_9.jpg
        text: O outro bloque que temos neste desafío di "vire á dereita 90 graos".
          Cando usamos o bloque "vire á dereita", a Elsa fai unha determinada curva.
          Pode xogar coa cantidade que desexe que a Elsa vire. O ángulo é medido a
          partir do camiño diante da Elsa. Entón, este é un xiro de 90 graos. E este
          é un xiro de 120 graos.
      10:
        image: notes/frozen1_10.jpg
        text: Lémbrese de que é posíbel mudar o número de pixels e graos, premendo
          nas frechas ao lado deles.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Ola, eu son a Paola! Os computadores son realmente moi bos en repetir
          accións. Pode contar até 10, 20 ou até 100, pero un computador pode contar
          até un billón ou un trillón sen se cansar, e só levará algúns segundos.
          Sexa contar, debuxar ou calquera outra actividade, os computadores poden
          repetir accións centenares ou até billóns de veces.
      2:
        image: notes/frozen2_2.jpg
        text: Na programación, podemos chamar a iso "bucle". Un bucle é o modo como
          vostede repite o seu código diversas veces. No próximo desafío, a súa meta
          é axudar á Anna a crear un cadrado co bloque "repita".
      3:
        image: notes/frozen2_3.jpg
        text: Todos os bloques de código que colocar dentro do bloque "repita" serán
          repetidos en secuencia, cantas veces vostede quixese.
      4:
        image: notes/frozen2_4.jpg
        text: Para debuxar un cadrado pode usar os bloques "avance" e "vire á dereita"
          catro veces. Pero o modo máis fácil de facer iso é dicir ao computador "avance"
          e "vire á dereita 90 graos" unha vez e, despois, facerlle repetir este par
          de accións catro veces. Para iso precisa colocar os bloques "avance" e "vire
          á dereita" dentro dun bloque "repita".
      5:
        image: notes/frozen2_5.jpg
        text: Lémbrese de que é posíbel mudar o valor no bloque "repita" a calquera
          número, e el repetirá o que está dentro do bloque de acordo co número que
          vostede escolla.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Ola, eu son Chris Bosh. Son xogador de baloncesto profesional, e xa
          programei cando estaba na facultade.
      2:
        image: notes/frozen3_2.jpg
        text: Un dos conceptos máis importantes da informática é como definir novos
          comandos. A maioría das linguaxes de computador teñen só 100 palabras ou
          comandos. A arte e a maxia están, entón, en definir as súas propias palabras
          novas a partir do básico.
      3:
        image: notes/frozen3_3.jpg
        text: Despois de ensinar a un computador como facer unha acción unha vez usando
          esta secuencia de comandos, vostede pode crear o nome que queira para esa
          acción, así será máis fácil repetila despois. Ao definir e nomear o seu
          propio comando estará creando unha función.
      4:
        image: notes/frozen3_4.jpg
        text: Ola, eu son Jess. Na programación con bloques, use funcións cando haxa
          un conxunto de accións que vostede quere repetir varias veces. Por exemplo,
          vostede escribiu un código para crear un cadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Pode definir isto como unha función chamada "cree un cadrado". '
      6:
        image: notes/frozen3_6.jpg
        text: Agora vostede ten un novo bloque que pode ser usado varias veces para
          crear diversos cadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Moitas formas simples poden ser usadas para crear padróns máis complexos.
          No próximo desafío, o código que acaba de escribir para facer un círculo
          estará dispoñíbel como unha nova función que pode facer círculos de distintos
          tamaños. Pode usala para axudar á Elsa a crear padróns belos e intrincados
          na neve?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nós imos crear xogos usando o Laboratorio. Os bos xogos teñen historias,
          e toda historia ten personaxes. Nós imos aprender como crear os nosos personaxes,
          como un bruxo, alieníxenas e animais que falan, andan e interactúan os uns
          cos outros. Ao final deste titorial poderá crear un xogo a partir do cero
          e compartilo cos seus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: A súa pantalla está dividida en tres partes principais. Á esquerda está
          o espazo do xogo onde o seu programa será executado. As instrucións para
          cada nivel están escritas abaixo.
      3:
        image: notes/playlab_intro_3.png
        text: A parte do medio é onde fica a caixa de ferramentas, e cada un deses
          bloques representa unha parte do código. O espazo en branco á dereita é
          chamado de área de traballo e é onde crearemos o noso programa.
      4:
        image: notes/playlab_intro_4.png
        text: Para comezar terá que conectar os seus bloques ao bloque laranxa "cando
          executar". É posíbel conectar diversos bloques os uns aos outros, arrastrándoos
          até ver a liña amarela e, entón, eles se encaixan.
      5:
        image: notes/playlab_intro_5.png
        text: Neste primeiro desafío, o noso personaxe é un pinguim, e nós o faremos
          dicir "Ola!", arrastrando o bloque "diga", conectándoo ao bloque "cando
          executar" e tecleando "Ola". Nós tamén podemos facer que o pinguim se mova
          usando os bloques "mova á dereita" e "mova á esquerda". Despois que seus
          bloques estiveren no lugar correcto, aperte o botón "executar" para ver
          o que vostede programou.
      6:
        image: notes/playlab_intro_6.png
        text: Comece agora mesmo! Ao final, vostede conseguirá crear o seu propio
          xogo, con todos os tipos de xogadores que poderán interagir, ficar felices
          ou tristes, marcar puntos ou lanzar bólas de fogo, ou até mesmo facer desaparecer
          uns aos outros. Depende da a súa imaxinación e do xogo que vostede quere
          crear.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Agora, imos aprender un pouco sobre algo que os programadores de xogos
          usan todos os días;* os eventos. Un evento di ao o seu programa que el debe
          ouvir cando algo acontece. Cando tal cousa acontece, el realiza unha acción.
      2:
        image: notes/playlab_events_2.png
        text: Algúns exemplos de eventos son;* ouvir o clic de rato, presionar unha
          tecla de dirección ou tocar a pantalla.
      3:
        image: notes/playlab_events_3.png
        text: Agora, imos facer o robot espacial cumprimentar os terráqueos cando
          un xogador premer nel. Nós usaremos o bloque "cando premido" e conectaremos
          o bloque "diga" a el. Cando o xogador premer no robot espacial, todo que
          estiver conectado ao bloque de evento "cando premido" será realizado. O
          que o seu alieníxena di?
      4:
        image: notes/playlab_events_4.png
        text: Hai tamén os bloques "cando a frecha estiver presionada". Se vostede
          conectar os bloques "mova" a eles, será posíbel comezar a mover seus personaxes
          para cima, para baixo, para esquerda e para a dereita. Aos poucos, o seu
          xogo está ficando cada vez máis interativo.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Este é o bloque "repita infinitamente". Todo que estiver contido neste
          bloque acontecerá repetidamente no xogo.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Se quixermos que un personaxe faga algo repetidamente, sen ningunha
          acción do xogador, colocaremos eses bloques dentro do bloque "repita infinitamente".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Neste desafío, o noso obxectivo é axudar o mago a protexer as fronteiras
          do reino, andando da esquerda para a dereita e viceversa, continuamente.
          Aprender como repetir accións de comandos vai economizar moito do o seu
          tempo no futuro, cando vostede for crear o seu propio xogo.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Estes son seus bloques de debuxo. Use o bloque correcto para mover o
          artista para onde el precisa cubrir as liñas cinzas.
      2:
        image: notes/C1_artist_intro_2.png
        text: Estes son os bloques pule. Cando vostede os usa, o seu artista se move
          pero non debuxa, entón úseos para pular para a próxima liña cinza.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Abelhas non son super legais? Nese próximo conxunto de desafíos, o seu
          obxectivo é axudar a abella a chegar até as flores, obter o seu néctar e
          voar até a colmeia para producir mel. Vostede precisa usar os bloques "obteña
          néctar" e "faga mel" nese exercicio.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: Cada flor ten un número distinto de néctares;* 1, 2, 3, ou máis. Sabemos
          a cantidade de néctar presente nas flores vermellas, por medio do pequeno
          número no canto. Entón lémbrese de obter todo o néctar da flor antes de
          avanzar. Alén diso, cada colmeia pode almacenar só unha correcta cantidade
          de mel;* 1, 2, 3, ou máis. Entón lémbrese de producir o máximo de mel que
          unha colmeia pode almacenar.
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Se vostede puider obter todo o néctar e producir todo o mel, vostede
          vai para o próximo nivel. En caso contrario, vostede precisa realizar ese
          desafío novamente. Xogue un pouco e vexa como a programación é doce como
          o mel!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Un bucle é unha repetición dunha actividade. Ao entrar nunha colmeia
          para inspeccionar, eu ollo para un cadro e o coloco de volta, e entón eu
          repito esa mesma actividade varias veces. Estou repetindo, facendo a mesma
          actividade varias veces.
      2:
        image: notes/C1_bee_loops_2.png
        text: Nese nivel, queremos que a abella recade tres néctares da flor. Ao contrario
          de usar tres bloques "obteña néctar", vostede vai usar o bloque repita para
          obter néctar tres veces. Clic en "Executar" e vexa se vostede acertou. Legal!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Esa lección é chamada do gran evento. Ela é sobre como podemos controlar
          nosos programas e de traxe alterar un programa en execución usando eventos,
          como apertar un botón ou premer no rato.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Para esta lección, vostede será controlado por un control remoto de
          papel. É como un xogo da vida real.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Un evento é unha acción que fai algo acontecer. É como cando vostede
          preme no botón do rato e unha páxina carga. Iso é un evento. Cando vostede
          toca a pantalla do o seu tablet para deslizar, iso tamén é un evento. Os
          eventos son unha excelente maneira de deixar que o usuario dirixa o seu
          programa para onde el quixer ou precisar.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Acontecen cousas ás cales todos respondemos. Sentimos fame e imos até
          a geladeira. Escoitamos o carteiro chegar e entregar a correspondencia e
          imos até a porta buscala. Eses eventos son como apertar un botón ou mover
          un control de vídeo game. Eles son cousas que acontecen e que fan que realicemos
          algo.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Nos xogos, hai un evento chamado "actualización" e el acontece 30 ou
          60 veces por segundo. Para programadores de xogos, iso é case máis importante
          como un evento que os botóns ou o control do xogo.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: O principal evento que estamos observando é a "actualización". Entón
          ollamos para o control por un momento e dicimos "ah, alguén apertou o botón
          nese cadro? Si ou non?". Sen eventos, o xogador non podería se mover, pular,
          nin podería controlar o que está acontecendo. O xogo non podería animar
          cousa algunha.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Na escultura de area vostede ten que saber que o fallo forma parte do
          programa. Mais se vostede persistir, ela non representará nada alén de máis
          emoción. Persistência é o nome do xogo. Fique con ela, vostede non vai se
          arrepentir.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Esta lección é chamada de creando unha base. Nesta lección, imos traballar
          nunha tarefa realmente difícil. Vostede vai descubrir como crear unha estrutura
          tan alta canto un deses copos e ela será forte o suficiente para soportar
          o peso dun libro.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Pode haber momentos en que a nosa creación non funcionará. Pode haber
          momentos en que nos frustraremos e pensaremos en desistir. Pode haber varios
          deses momentos. Mais se continuarmos tentando e dando o noso mellor, con
          certeza teremos éxito en pouco tempo.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistência significa aguantar firme cando vostede realmente quere
          desistir. Se vostede quixer crear algo novo e distinto, vostede vai se deparar
          con moitos fallos no camiño.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: O truco para persistir é escoller seguir adiante e aprender con seus
          fracasos en vez de desistir por estar frustrado. A frustración na verdade
          significa que hai algo marabilloso esperando por nós. Entón, non desista
          antes de conseguir!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Ola, meu nome é Miral Kotb e son o creador do Iluminate. En meu traballo,
          hai algo que usamos na danza e na programación de traxes luminosos;* son
          os bucles! Os bucles repiten unha acción varias veces.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Cando vostede repite algo varias veces, como miñas accións para manter
          o bambolê xirando, vostede realiza unha repetición daquela acción. Iso é
          unha repetición. Iso é unha repetición. E iso é unha repetición.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Hoxe imos ter unha festa dançante. Imos facer repeticións cunha nova
          danza, a iteración. Imos aprender máis sobre repeticións usando unha danza.
          Vostede vai aprender algúns pasos fáciles e repetídelos varias veces para
          completar a danza.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Aquí están os pasos que vostede precisa aprender. Bata palmas. Coloque
          súas mans atrás da cabeza. Coloque as mans na cintura. Levante a súa man
          esquerda. Levante a súa man dereita. Fácil, non é? Vostede vai descubrir
          que vostede pode acurtar as direccións colocando algúns pasos de danza en
          bucles de repetición.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Na verdade usamos repeticións en a nosa danza. Os dançarinos están usando
          computadores, todos na mesma rede. Eu podo repetir as luces para os mesmos
          dançarinos varias veces. Na repetición eu podo ter unha iteración na cal
          eu vou dicir que quero iterar por eses seis dançarinos varias veces e entón,
          dentro do bucle, aumentar a velocidade da luz. Todo iso é creado usando
          bucles de repetición. Lazos son importantes na informática porque eles tornan
          o noso traballo máis breve e máis fácil.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Esa lección se chama Mapas divertidos. Hoxe imos axudar a nosa amiguinha
          peluda Flurb a chegar até a súa froita.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Faga a Flurb ir até a froita. Para facer iso vostede precisa descubrir
          o camiño que ela debe percorrer e dirixila coas frechas. Para a Flurb chegar
          até a mazá, en que direccións ela precisa ir? Circule a frecha para cima.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Para facela chegar até alí, circule a dirección na cal ela ten que ir.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Cree o seu algoritmo colando as frechas próximas ao mapa que vostede
          está tentando resolver. O segundo é igual, pero ela vai para baixo.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: É como programar con papel. E é iso mesmo!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Depurar é encontrar e corrixir problemas. Hai varias formas de depurar
          problemas. Unha das máis fáciles é avanzar paso a paso até vostede encontrar
          algo de errado. Eu estou tentando facer unha parada de man para tras, pero
          continúo caendo.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Eu fixen todo o camiño, paso a paso, e descubrín onde estaba meu erro.
          Eu non estaba colocando miñas mans na trabe correctamente. Entón eu tentei
          facer unha parada de man para tras na trabe con miña nova posición de mans
          e conseguín. Eu fiquei realmente feliz por ter depurado miña parada de man.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Para aprender sobre depuración, xa comezamos cun conxunto de bloques
          na fase. Vostede vai entender que eses bloques non van levar vostede até
          o obxectivo. Precisamos depurar a solución para corrixídela. O que deu errado?
          Vostede vai entender que era preciso ir máis un bloque para o oeste.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Imos corrixir iso agregando outro bloque para o oeste e premendo en
          Executar para ver se deu correcto. Vostede conseguiu!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Para este desafío, vostede precisa levar o paxaro até o porco. Olle
          para o desafío e vexa en que direccións el precisa ir.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Vostede precisa arrastrar os bloques da caixa de ferramentas para a
          área de traballo. Verifique se el está so o bloque "cando executar" e, cando
          vostede pensar que encontrou a solución correcta, clic en "Executar" e vexa
          o paxaro ir até o porco.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Os computadores son moi bos en repetir comandos. Como persoa, vostede
          ficaría realmente entediado se tivese que facer a mesma cousa varias veces
          en secuencia. Mais un computador pode facer a mesma cousa millóns, ou até
          mesmo bilhóns de veces, sen ficar entediado e aínda facer moito ben.
      2:
        image: notes/C1_maze_loops_2.png
        text: Por exemplo, se eu quixese desexar a todos no Facebook un feliz aniversario
          enviando un e-mail, iso levaría máis dun século para de traxe escribir todos
          os e-mails para todos. Mais con só algunhas liñas de código, eu podo facer
          un sistema enviar un e-mail para todos no Facebook desexando un feliz aniversario.
      3:
        image: notes/C1_maze_loops_3.png
        text: Para levar o paxaro até o porco neste nivel... en vez de arrastrar tres
          bloques para o norte na área de traballo, vostede vai usar o bloque "repita".
          Arrastre o bloque "repita" para a área de traballo e coloque o número 3.
          Entón, arrastre o bloque "mova para o norte" para dentro do bloque "repita"
          e clic en "Executar" para ver se vostede acertou. Parabéns, vostede conseguiu!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Esta lección se chama Creando camiños. Xuntos, imos escribir un programa
          para levar nosos amigos do inicio, coa compás, até o rostinho feliz.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Mais o rostinho feliz está volto para baixo e só unha persoa sabe como
          chegar alí. Imos iniciar ese programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Un programa é un algoritmo que foi programado en algo que pode ser executado
          por unha máquina. A maioría pensa nun programa como algo que escribimos
          para un computador. Os programas son realmente bos para iso, pero eles tamén
          son útiles noutros lugares. Vostede pode crear o seu propio xogo ou mesmo
          programar un robot para realizar tarefas para vostede.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Ola, meu nome é Jeremiah! Eu teño sete anos. Eu adoro xogar no computador
          da miña nai, pero eu sempre pido permiso primeiro. "Nai, podo usar o computador?
          É claro, querido!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Eu adoro o computador da miña nai porque eu podo acessar a internet.
          A internet é como o o seu barrio. Vostede pode visitar lugares legais, falar
          con a súa familia e amigos e aprender un monte de cousas novas.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Onte, eu visitei un zoológico preto da miña casa. Eu vin unha zebra
          bebé. Tirei foto dela e alterei a cor de súas listras, entón eu coloquei
          un chapéu nela e a adicionei á miña colección de animais estraños. Incríbel!
          Despois, fun a un lugar moi distante. Eu visitei o Quênia, un país da África.
          Moitas zebras moran alí.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Ás veces eu uso a internet para conversar con persoas que eu coñezo,
          como miña avoa, que mora noutro Estado. Ola vovó! Ela está facendo cookies
          para me mandar no meu aniversario. "Hmm, quería que a internet tivese cheiro!".
          Eu podo conversar con persoas distintas na internet, como meu primo fai,
          pero eu só converso con persoas que eu coñezo.
      5:
        image: notes/C1_going_places_safely_5.png
        text: O que eu máis gústame na internet é que eu podo xogar xogos divertidos.
          Punto! Eu tamén me gusta debuxar e crear novas cousas para compartir con
          meus amigos. Legal! Ás veces eu visito sitios web nos cales eu aprendo cousas
          novas, pero eu sempre acceso sitios web apropiados para min. Uau, dia nosauros!
      6:
        image: notes/C1_going_places_safely_6.png
        text: A internet é un lugar superdivertido. Mais, así como cando vostede atravesa
          unha rúa en o seu barrio, vostede tamén precisa tomar coidado cando vostede
          fica on-line. Aquí están tres regras que non podemos esquecer. Regra número
          1;* sempre pida o permiso de seus pais. Regra número 2;* fale soamente con
          persoas coñecidas. Regra número 3;* fique en lugares apropiados para vostede.
      7:
        image: notes/C1_going_places_safely_7.png
        text: Uau, iso foi divertido! Hora da cea. Vou saír agora. Mal podo esperar
          para me conectar novamente e ver o que máis podo visitar.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Hoxe imos aprender sobre programación en dúos. Na programación en dúos
          vós traballades como un equipo. Por que dúas persoas deberían usar un único
          computador? Porque dúas cabezas pensan mellor que unha. Na programación
          en dúos, vostede e o seu socio van sentar xuntos nun computador e ambos
          van traballar no mesmo proxecto.
      2:
        image: notes/C1_pair_programming_2.png
        text: Na programación en dúos, unha persoa é o piloto e a outra é o navegador,
          como nun coche. O piloto senta no computador e é quen usa o teclado e o
          rato, ou a pantalla de toque, e controla as principais accións do computador.
          A outra persoa é o navegador. Ela axuda o piloto respondendo ás preguntas
          del e apuntando posíbeis problemas ou erros.
      3:
        image: notes/C1_pair_programming_3.png
        text: A comunicación é a chave para o éxito da programación en dúos. Non insulte,
          sexa respectuoso, non sexa un navegador mandón, porque ninguén lle gusta
          de quen fica dando palpite e tentando controlar a dirección todo o tempo.
          Vostede e o seu socio deben conversar sempre. O piloto pode explicar o que
          está facendo, e o navegador pode axudar suxerindo o que facer axiña.
      4:
        image: notes/C1_pair_programming_4.png
        text: O navegador debe pensar sobre o problema todo, mentres o piloto se concentra
          nos detalles. Ambos os papeis son importantes. A programación en dúos é
          sobre como traballar en equipo.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Esta lección se chama Plantando unha semente e vai nos axudar a entender
          algoritmos. Os algoritmos son instrucións específicas que explican a orde
          de facer algunha cousa. Mesmo actividades cotiás, como tomar café ou escovar
          os dentes, son algoritmos que esixen pequenas etapas para realizar un traballo.
      2:
        image: notes/C1_planting_seed_2.png
        text: Os computadores poden ser moi espertos, pero eles só entenden vostede
          se vostede lles informar exactamente o que quere, paso a paso. O máis interesante
          sobre algoritmos é que se vostede seguir as instrucións en orde, é posíbel
          facer algo que vostede non sabía como facer de antemán. É como seguir unha
          receita.
      3:
        image: notes/C1_planting_seed_3.png
        text: Hoxe imos plantar a nosas propias sementes usando un algoritmo. Cree
          o seu propio algoritmo separando as imaxes. Seleccione as imaxes que mostran
          etapas do plantio dunha semente e organice esas imaxes na orde correcta.
      4:
        image: notes/C1_planting_seed_4.png
        text: Agora, imos ver se o seu algoritmo funciona. Siga os pasos do algoritmo
          cuidadosamente. Eles están na orde correcta? Vostede conseguiu plantar unha
          semente seguindo o algoritmo? Iso é como programar con imaxes!
      5:
        image: notes/C1_planting_seed_5.png
        text: Cando queremos facer chocolate, hai varias etapas grandes nese proceso,
          cada unha delas ten un conxunto de pasos menores e hai distintas receitas
          ou algoritmos, dependendo do gústame que queremos para o chocolate. Cada
          etapa é importante, mesmo as menores, entón se pularmos unha delas as demais
          non poden ser concluídas. Crear algoritmos que os outros poidan entender
          é moi importante. É por iso polo que cada etapa debe ser escrita de forma
          que o resultado sexa sempre o mesmo, non importa quen faga.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Hora de ser creativo e usar súas habilidades de programación para contar
          unha historia. Súa historia terá personaxes e vostede vai poder facer eses
          personaxes conversaren e interagir uns cos outros. Comece pensando no tipo
          de historia que vostede quere contar.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: O gato está sempre con medo do can, pero e se o gato descubrir que o
          can está tentando ser legal? O bloque "cando executar" inicia todo. O bloque
          "mova" vai mover o seu personaxe e o bloque "diga" vai facer o seu personaxe
          dicir o que vostede teclear.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Ese é o bloque "cando os personaxes trombam" que vostede pode conectar
          aos outros bloques.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Eu estaba facendo o can vir aquí e dicir "Ola", pero o gato se asustou
          e saíu correndo. "Ahh". Se houbese máis tempo, ese sería un final feliz.
          Fin!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Este é o nivel do Soletrando. Use as pezas para mover a abella. Conforme
          ela se move, ela vai recadar letras para soletrar palabras.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Vexa se vostede pode soletrar a palabra fornecida na caixa abaixo da
          fase. Mais coidado! Ir para a dirección errada vai agregar letras que vostede
          non quere.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Os computadores son moi bos en repetir comandos. Como persoa, vostede
          ficaría realmente entediado se tivese que facer a mesma cousa varias veces
          en secuencia. Mais un computador pode facer a mesma cousa millóns, ou até
          mesmo bilhóns de veces, sen ficar entediado e aínda facer moito ben.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Por exemplo, se eu quixese desexar a todos no Facebook un feliz aniversario
          enviando un e-mail, iso levaría máis dun século para de traxe escribir todos
          os e-mails para todos. Mais con só algunhas liñas de código, eu podo facer
          un sistema enviar un e-mail para todos no Facebook desexando un feliz aniversario.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Neste exemplo, o seu obxectivo é levar o paxaro até o porco. Agora,
          podemos usar o bloque repita para facer iso con máis facilidade. Vostede
          pode facer iso pasando ao computador un comando avance cinco veces para
          que o paxaro dea un paso en dirección ao porco toda vez, ou vostede pode
          simplemente dicir ao computador para avanzar unha vez e entón dicir para
          el repetir iso cinco veces, e el vai facer a mesma cousa.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Para facer iso, vostede debe arrastrar o seu comando avance e colocalo
          nun bloque repita. Entón, vostede preme e escolle cantas veces o bloque
          repita debe realizar a acción de avanzar.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Outra cousa, vostede pode colocar cantos comandos quixer dentro do bloque
          repita. Entón, nese exemplo, vostede está dicindo para el avanzar e virar
          á esquerda, o que el fará cinco veces. Divírtase!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Vostede nin se clasificaría para a carreira se non tivese persoas proficientes
          en informática, por causa da cantidade de datos que os coches recadan e
          a necesidade de ter persoas que poidan escribir programas para descubrir
          como continuar a mellorar a performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: Neses desafíos, vostede será un artista que usa un lápis para debuxar
          formas distintas. O artista vai debuxar unha liña por onde queira que el
          pase.
      3:
        image: notes/C2_artist_intro_3.png
        text: Para se mover na pantalla, vostede vai usar o bloque avance. Aquí o
          bloque avance di para avanzar 100 pixels. Cando prememos en Executar, o
          que acontece? O artista avanza unha correcta cantidade, e esa cantidade
          é 100 pixels. Pixels son, basicamente, quadradinhos moi pequenos na pantalla
          do o seu computador.
      4:
        image: notes/C2_artist_intro_4.png
        text: O outro bloque que temos nese desafío di para virar 90 graos á dereita.
          Cando arrastramos iso, o artista vira unha correcta cantidade de graos.
          Entón, vostede pode xogar co canto desexa que o artista vire. Esa é unha
          curva de 90 graos.
      5:
        image: notes/C2_artist_intro_5.png
        text: E esa é unha curva de 120 graos. Lémbrese, vostede pode alterar eses
          valores premendo nas frechas próximas aos números de pixels e graos. Divírtase
          debuxando con o seu artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Este é o bloque condicional. El di que SE houber néctar ou mel menor
          que, igual a, ou maior que un número, ENTÓN algo debe ser feito.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Iso é útil cando non sabemos canto néctar ou mel obter, como vemos aquí
          con ese punto de interrogación.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Neste exemplo, imos dicir que LLA flor roxa ten néctar maior que 0,
          obteña néctar. Iso fará que a nosa abella continúe recadando néctar mentres
          for posíbel. Bingo!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Está é a lección das Pulseiras binárias. Imos programar a nosas iniciais
          nunha pulseira que podemos usar e mostrar a todos os nosos amigos!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: A forma binária é unha maneira de representar informacións usando só
          dúas opcións. Ás veces as persoas pensan nela como só 1s e 0s. Mais a forma
          binária pode ser representada con combinacións de ligado e desconectado,
          para enriba e para baixo, entrada e saída, ou calquera conxunto de cousas
          opostas.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Ola, meu nome é Orion e eu programo robots aquí na Play-im. Todos os
          computadores e cerebros de robots son basicamente pequenos portóns electrónicos.
          Cando o portón está aberto, a electricidade pode pasar e, cando está pechado,
          ela non pode pasar.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Un exemplo de binário en robots son os ollos. Os ollos dos robots son
          LEDs, luces que están acendidas ou apagadas. É un sistema binário, ou unha
          cousa, ou outra. Podemos usar luces para representar números binários. Se
          temos un conxunto de robots, podemos dicir que o primeiro robot está na
          casa dos 1s, o segundo na casa dos 2s, o terceiro na casa dos 4s, e así
          por diante. É así que vostede representa un número binário. Os robots fan
          iso con seus ollos binários e contan para vostede.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Esta lección se chama Condicionais con cartas. Todos os días vostede
          toma decisións con base no que vostede ve e ouve.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Eu quero ir até o parque, pero primeiro preciso decidir se debo levar
          un garda-choiva ou non. Entón eu ollo pola xanela. Se o tempo estiver nublado,
          vou levar meu garda-choiva. Senón, vou levar meus óculos de sol. Penso que
          é mellor levar o garda-choiva. O que eu vexo e ouzo determina o que vou
          levar ao parque.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Condicionais tamén son usadas en xogos. Hoxe imos practicar usando condicionais
          cun xogo de cartas. Nese xogo, a carta que eu tiro determina o que meus
          amigos van facer. Se eu tirar un sete, todos baten palmas. Senón, todos
          din "ahhhh". Imos tentar! "Ahhhh" "aplausos"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Aposto que vostede consegue facer xogos aínda máis divertidos con condicionais.
          Tente! Condicionais fan os computadores pareceren espertos. Un programa
          de computador que inclúe condicionais pode reaccionar ao usuario e alterar
          o seu curso de acción.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pense no o seu xogo preferido. Vostede gaña máis puntos por facer algunhas
          accións en comparación con outras? Iso ocorre porque o computador está usando
          condicionais. Esa é a forma do computador tomar unha decisión. Por exemplo,
          se vostede atinxe o albo, vostede gaña dez puntos. Senón, vostede perde
          tres. Cando vostede sabe como esas condicións funcionan é posíbel crear
          todo o tipo de xogos emocionantes.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Aquí xa temos algúns bloques en a nosa área de traballo. Mais algo está
          errado.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Imos depurar ese código diminuíndo a velocidade e vendo como el pasa
          por cada bloque, paso a paso.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ah, aí está o problema! Os bigodes do gato teñen 75 pixels de lonxitude,
          e non 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Vostede xa ouvín falar en depurar un programa? Esa é unha forma de descubrir
          o que non está funcionando. Cando vostede depura un código, vostede identifica
          e remove os erros.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Aquí, xa temos algúns bloques en a nosa área de traballo. Imos usar
          o botón do paso para camiñar polos bloques, paso a paso, para ver se esta
          é a solución correcta e onde podemos corrixídela.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Parece que o noso problema está aí! Precisamos de máis un bloque avance.
          O botón de paso nos axuda a depurar o noso problema, identificando onde
          está o erro para corrixídelo.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Vostede suxeita o seu chapéu na cabeza e o seu cerebro lle di onde vostede
          está e para pensar sobre o zoológico, para acenar e dicir ola! Use a cabeza
          cando estiver on-line para manter o que é o seu en a súa mente e para saber
          se protexer, como dar un pouco de privacidade para vostede mesmo! Da cabeza
          aos pés, pare, pense. Dos pés até o seu nariz, pare, e pense on-line!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use o seu corazón para crecer, dea a si mesmo un brillo saudábel, e
          para conquistar alguén, diga a ese alguén vostede será meu! Use o seu corazón
          cando estiver on-line, sexa gentil, correcto e mostre respecto por seus
          amigos, sexa xusto e bo na internet. Da cabeza aos pés, pare, pense. Dos
          pés até o seu nariz, pare, e pense on-line!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use seus brazos para abrazar o seu bichinho de estimación, para evitar
          que súas roupas se molhem, para usar súas mangas favoritas e para voar e
          crer. Use seus brazos cando estiver on-line, para dar un tempo, equilibrar
          o tempo, deixar a tecnoloxía para tras e subir nunha árbore. Da cabeza aos
          pés, pare, pense. Dos pés até o seu nariz, pare, e pense on-line!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use a súa barriga para almacenar comida, para ouvir o seu estómago roncar,
          para mexer a pança e para sentir o gas do refrigerante. Use seus instintos
          cando estiver on-line, para ficar de ollo nalgúns sinais e guiarse polo
          camiño, dicindo cando as cousas non estiveren ben. Da cabeza aos pés, pare,
          pense. Dos pés até o seu nariz, pare, e pense on-line!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Entón pense con a súa cabeza, sinta con o seu corazón, equilíbrese con
          seus brazos e ouza seus instintos, on-line. Use súas pernas para correr
          e xutar, para pular nun pula-pula, para bailar e para pular con súas medias
          suadas. Use súas pernas cando estiver on-line, para afrontar os valentóns
          e lémbrese de manterse en pé, de ser bo coas criaturas pequenas e grandes.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Da cabeza aos pés, pare, pense. Dos pés até o seu nariz, pare, e pense
          on-line! Entón pense con a súa cabeza, sinta con o seu corazón, equilíbrese
          con seus brazos, ouza seus instintos e fique de pé con súas pernas. Da cabeza
          aos pés, pare, pense. Dos pés até o seu nariz, pare, e pense on-line!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Toda vez que vostede fica on-line, vostede deixa unha pegada que pode
          ser pescudada, copiada, compartida e transmitida, e ela é permanente. Que
          tipo de pegada dixital vostede está deixando? Que tipo de pegada dixital
          vostede quere deixar?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Esta lección se chama "Programación en papel cuadriculado", e ela é
          sobre algoritmos. Hoxe imos aprender a escribir programas que mostran uns
          aos outros como recriar imaxes simples en negro e branco, usando só frechas
          debuxadas á man.
      2:
        image: notes/C2_graph_paper_2.png
        text: Un algoritmo é unha lista de instrucións para realizar unha tarefa.
          Imos seguir ese conxunto de instrucións para facer a tigela. Os algoritmos
          son realmente útiles cando vostede precisa que alguén entenda como facer
          algunha cousa.
      3:
        image: notes/C2_graph_paper_3.png
        text: Se vostede está escribindo un algoritmo para un computador, vostede
          precisa dividídelo en pequenas etapas. Entón termine esta liña e vaia para
          a próxima, entón para a próxima, e vostede chegará no fin.
      4:
        image: notes/C2_graph_paper_4.png
        text: Eu uso algoritmos no meu traballo. Se eu escribo todas as etapas, eu
          podo recriar a mesma peza novamente, ou eu podo ensinar outra persoa a facer
          iso. Coloque o vidro no forno, faga a fundición, siga o resto das instrucións
          para facer a tigela. Os algoritmos dan un mapa para facer algunha cousa.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Aquí, imos usar o bloque repita para economizar pasos cando estivermos
          programando o noso artista. Xa temos algúns bloques, pero eles están aquí
          soamente para darmos inicio ao programa.
      2:
        image: notes/C2_artist_loops_2.png
        text: Para repetir eses bloques catro veces para debuxar o cadrado enteiro,
          arrastramos o bloque repita e colocamos os bloques avance e vire á dereita
          dentro del. Cando premermos en Executar, o artista vai repetir eses pasos
          catro veces para completar o cadrado.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Un bucle é unha repetición dunha actividade. Ao entrar nunha colmeia
          para inspeccionar, eu ollo para un cadro e o coloco de volta. Eu repito
          esa mesma actividade varias veces. Estou repetindo, facendo a mesma actividade
          varias veces.
      2:
        image: notes/C2_bee_loops_2.png
        text: Este é o bloque repita. Todo o que vostede colocar dentro do bloque
          repita será repetido o número de veces que vostede quixer. Por exemplo,
          nese nivel, en vez de arrastrar os bloques avance e obteña néctar tres veces,
          imos arrastralos unha vez cada e repetir a acción tres veces. Así fica fácil!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalmente a programación é feita toda en texto, pero imos usar o Blockly,
          que usa bloques visuais que poden ser arrastrados e posicionados para escribir
          programas. Indirectamente, vostede aínda está creando código. Para comezar,
          imos crear o código para un programa que vai axudar ese Angry Bird a andar
          por un labirinto para chegar até o porco malvado que roubou seus ovos.
      2:
        image: notes/C2_maze_intro_2.png
        text: O Blockly é dividido en tres partes principais. Á esquerda está o labirinto
          do paxaro, onde o seu programa será executado. As instrucións para cada
          nivel están escritas abaixo do labirinto. Esa área do medio é a caixa de
          ferramentas, e cada un deses bloques é un comando que o paxaro consegue
          entender. O espazo en branco á dereita é chamado de área de traballo, e
          é onde imos crear o noso programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: Se eu arrastrar un bloque mova para a nosa área de traballo e premer
          en "Executar", o que acontece? O paxaro avanza un quadradinho na reixa.
          E se eu quixer que o paxaro faga algo despois de avanzar un quadradinho?
          Eu podo agregar outro bloque ao o noso programa.
      4:
        image: notes/C2_maze_intro_4.png
        text: Eu vou escoller o bloque "vire á dereita" e vou arrastralo para baixo
          do meu bloque avance até que a frecha amarela apareza. Entón, vou soltalo
          e os dous bloques van se xuntar. Cando eu apertar "Executar" novamente,
          o paxaro vai realizar os comandos que están apiñados de enriba para baixo
          en a nosa área de traballo.
      5:
        image: notes/C2_maze_intro_5.png
        text: Se vostede quixer excluír un bloque, simplemente remóvao da pila e arrástreo
          para a recolledora de lixo. Despois de premer en Executar, vostede sempre
          pode premer no botón Reiniciar para facer o paxaro volver para o inicio.
          Agora imos apañar os porcos!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Esta lección se chama Algoritmos da vida real. Os algoritmos describen
          cousas que as persoas fan todos os días. Receitas de cookies e instrucións
          para construír unha casa de paxariño son exemplos de algoritmos da vida
          cotiá.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Hoxe imos facer, crear e examinar un algoritmo para un avión de papel.
          Mais, primeiro, precisamos dividir ese gran proxecto en pequenas etapas
          fáciles de seguir. Para crear un avión de papel, precisamos decidir cales
          pasos dar e en que orde dalos.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Vostede vai crear o seu algoritmo primeiro cortando as imaxes. Axiña,
          vostede vai seleccionar as 6 imaxes que mostran as etapas necesarias para
          crear un avión de papel e organizar esas imaxes na orde correcta. Despois
          de colocar todo en orde, vostede vai trocar de algoritmo con outro equipo
          de alumnos para examinalo e ver se el funciona. Un algoritmo ben proxectado
          é superimportante para crear o mellor avión de papel.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Cando queremos facer chocolate, hai varias etapas grandes nese proceso.
          Cada unha delas ten o seu propio conxunto de pasos menores. E hai distintas
          receitas ou algoritmos, dependendo do gústame que queremos para o chocolate.
          Todas as etapas son importantes, mesmo as menores, entón se pularmos unha
          delas as demais non poderán ser concluídas. Crear algoritmos que os outros
          poidan entender é moi importante. É por iso polo que cada etapa debe ser
          escrita de forma que o resultado sexa sempre o mesmo, non importa quen faga.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Até agora, vostede fixo animacións ou historias que fan exactamente
          as mesmas cousas cando vostede as executa. Agora, vostede pode facer un
          xogo interativo e xogalo de verdade.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Existen algúns novos bloques para probar. Hai os bloques "cando a frecha
          estiver presionada" e "mova o personaxe". Vostede pode xuntar eses bloques
          para mover os personaxes coas frechas do teclado. E hai algúns bloques que
          fan cousas cando os personaxes trombam ou son premidos. Dea unha ollada
          e divírtase!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Hoxe imos facer programación por revezamento. Iso significa programar
          so presión e depurar os erros que ás veces acontecen cando vostede traballa
          moi rápido ou en equipo. Imos usar a programación en papel cuadriculado
          para simular a programación e usar carreiras de revezamento para simular
          un prazo de entrega.
      2:
        image: notes/C2_relay_programming_2.png
        text: Na programación por revezamento, os equipos van competir para terminar
          un programa en papel cuadriculado. Vostede precisa verificar o traballo
          do o seu compañeiro de equipo, ou depurá-lo, corrixídelo se houber un erro,
          agregar a súa frecha, volver e marcar o seu compañeiro.
      3:
        image: notes/C2_relay_programming_3.png
        text: Os programadores usan moito a depuración para encontrar e corrixir problemas
          en seus algoritmos ou códigos. Hai varias formas de depurar problemas. Unha
          das máis fáciles é seguir a execución paso a paso até vostede encontrar
          algo errado, e entón corrixir o problema.
      4:
        image: notes/C2_relay_programming_4.png
        text: Aquí, estou tentando facer unha parada de man para tras, pero eu continúo
          caendo. Eu pasei por cada parte, paso a paso, e descubrín onde estaba meu
          erro. Meu adestrador me mostrou que eu non estaba colocando as mans na trabe
          correctamente. Entón, eu tentei facer outra parada de man para tras con
          miña nova posición de mans e eu conseguín! Fiquei realmente feliz por ter
          depurado miña parada de man para tras. Descubrimos o problema! Depurar é
          encontrar e corrixir problemas. Bo traballo!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Unha cousa na cal os computadores son moi bos é repetir comandos. Como
          persoa, vostede ficaría realmente entediado se tivese que facer a mesma
          cousa varias veces en secuencia. Mais un computador pode facer a mesma cousa
          millóns, ou até mesmo bilhóns de veces, sen ficar entediado e aínda facer
          moito ben.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Entón, por exemplo, se eu quixese desexar feliz aniversario a todos
          no Facebook enviando un e-mail, eu levaría máis dun século para de traxe
          escribir todos os e-mails para todo o mundo. Mais, con só algunhas liñas
          de código, eu podo facer un sistema enviar un e-mail para todos no Facebook
          desexando un feliz aniversario. É iso que son as repeticións, e é por iso
          polo que son valiosas, algo que os computadores conseguen facer moito ben.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Neste exemplo, o seu obxectivo é levar o paxaro até o porco. Agora estamos
          aptos a usar o bloque "repita" para facer iso facilmente. Vostede tamén
          pode facer iso dando ao computador o comando "avance" cinco veces para levar
          o paxaro até o porco, un paso por vez.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Ou vostede pode simplemente dicir ao computador "avance" unha única
          vez, e entón dicir a el "repita" iso 5 veces, e el fará a mesma cousa. Entón,
          para facer iso, vostede arrastra o seu comando "avance" e o coloca dentro
          do bloque "repita". Vostede pode premer nel e escoller cantas veces vostede
          quere repetir o bloque, para dicir cantos pasos vostede quere que el avance.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Vostede tamén pode colocar cantos comandos quixer dentro do bloque "repita".
          Entón, neste exemplo, vostede está dicindo para el avanzar e virar á esquerda,
          o que el fará cinco veces. Correcto, bo traballo e divírtase!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Unha das mellores cousas na programación é que cando vostede ensina
          un computador a realizar unha acción vostede pode chamar esa función novamente.
          Vostede dá un nome a ela e entón vostede a chama. Iso é realmente como estender
          a linguaxe.
      2:
        image: notes/C3_artist_functions_2.png
        text: No programa que creamos, aprendemos como debuxar un cadrado movendo
          e virando catro veces. Podemos apañar esa función e chamala de "debuxe un
          cadrado", así, sempre que quixermos facer iso, simplemente dicimos "debuxe
          un cadrado" e o código desa función será chamado. Ela fará iso por nós.
          Adicionamos ese concepto a a nosa linguaxe de programación.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Vostede nin se clasificaría para a carreira se non tivese persoas proficientes
          en informática, por causa da cantidade de datos que os coches recadan e
          a necesidade de ter persoas que poidan escribir programas para descubrir
          como continuar a mellorar a performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: Neses desafíos, vostede será un artista que usa un lápis para debuxar
          formas distintas. O artista vai debuxar unha liña por onde queira que el
          pase.
      3:
        image: notes/C3_artist_intro_3.png
        text: Para se mover na pantalla, vostede vai usar o bloque avance. Aquí o
          bloque avance di para avanzar 100 pixels. Cando prememos en Executar, o
          que acontece? O artista avanza unha correcta cantidade, e esa cantidade
          é 100 pixels. Pixels son, basicamente, quadradinhos moi pequenos na pantalla
          do o seu computador.
      4:
        image: notes/C3_artist_intro_4.png
        text: O outro bloque que temos nese desafío di para virar 90 graos á dereita.
          Cando arrastramos iso, o artista vira unha correcta cantidade de graos.
          Entón, vostede pode xogar co canto desexa que o artista vire. Esa é unha
          curva de 90 graos.
      5:
        image: notes/C3_artist_intro_5.png
        text: E esa é unha curva de 120 graos. Lémbrese, vostede pode alterar eses
          valores premendo nas frechas próximas aos números de pixels e graos. Divírtase
          debuxando con o seu artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Cando vostede coloca un bucle dentro doutro, chamamos iso de bucle aninhado.
          Por exemplo, xa temos aquí o código para debuxar un triángulo con lados
          de 100 pixels usando o bloque repita veces configurado para tres veces,
          unha para cada lado do triángulo.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Mais queremos debuxar seis triángulos. Para iso, imos apañar aquel bucle
          e colocalo dentro doutro bloque repita veces. Que legal!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Este é o bloque condicional. El di que SE houber néctar ou mel menor
          que, igual a, ou maior que un número, ENTÓN algo debe ser feito.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Iso é útil cando non sabemos canto néctar ou mel obter, como vemos aquí
          con ese punto de interrogación.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Neste exemplo, imos dicir que LLA flor roxa ten néctar maior que 0,
          obteña néctar. Iso fará que a nosa abella continúe recadando néctar mentres
          for posíbel. Bingo!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Vostede xa ouvín falar en depurar un programa? Esa é unha forma de descubrir
          o que non está funcionando. Cando vostede depura un código, vostede identifica
          e remove os erros.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Aquí, xa temos algúns bloques en a nosa área de traballo. Imos usar
          o botón do paso para camiñar polos bloques, paso a paso, para ver se esta
          é a solución correcta e onde podemos corrixídela.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Parece que o noso problema está aí! Precisamos de máis un bloque avance.
          O botón de paso nos axuda a depurar o noso problema, identificando onde
          está o erro para corrixídelo.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Un dos conceptos máis importantes da informática é como definir novos
          comandos, como agregar súas propias palabras nunha linguaxe de computador.
          A maioría das linguaxes de computador ten só cen palabras ou comandos. A
          arte e a maxia están en definir súas propias novas palabras a partir dos
          bloques de construción.
      2:
        image: notes/C3_bee_functions_2.png
        text: Facemos iso todo o tempo nos deportes. Por exemplo, no baloncesto vostede
          comeza aprendendo como driblar, como arremessar e como facer un rebote.
          Cando vostede aprender eses conceptos básicos, vostede pode aprender novos
          conceptos e xuntar eses bloques de construción, como facer unha xogada de
          pivô ou unha táboa. Entón, a partir diso vostede pode facer xogadas máis
          complexas. Cando vostede aprende a xogada e dá un nome a ela, todos do equipo
          saben como executala.
      3:
        image: notes/C3_bee_functions_3.png
        text: Da mesma forma, despois de ensinar a un computador como facer unha acción
          unha vez usando esas secuencias de comandos, vostede pode crear o nome que
          quixer para esa acción, así será máis fácil repetídela despois. Ao definir
          e nomear o seu propio comando, vostede crea unha función. Agora, imos usar
          funcións para axudar a abella.
      4:
        image: notes/C3_bee_functions_4.png
        text: Nese exemplo, a nosa función é chamada obteña 2 néctares, representada
          por ese bloque verde. Sabemos o que obteña 2 néctares fai ollando para esa
          caixa cinza que é a definición da función. Se ollarmos para dentro dela,
          a función obteña 2 néctares vai obter néctar, e entón obter néctar novamente.
          Sempre olle para o que está dentro da caixa cinza, así vostede sabe o que
          os bloques de función verdes poden facer.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Agora, imos usar bucles aninhados coa abella. Temos un código inicial
          que di para a abella avanzar e obter néctar tres veces, e entón virar á
          dereita. Imos apañar todo ese fragmento de código, aninhá-lo dentro doutro
          bloque repita e configuralo para repetir tres veces. Pronto!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Vostede vai crear o seu propio xogo de pingue-pongue e vai poder compartilo
          con seus amigos! Que legal!
      2:
        image: notes/C3_bounce_2.png
        text: Para comezar, precisamos conectar os controis da raquete ás frechas
          do o noso teclado.
      3:
        image: notes/C3_bounce_3.png
        text: Podemos facer iso conectando o bloque "cando a frecha á esquerda estiver
          presionada" ao bloque "mova á esquerda" e o bloque "cando a frecha á dereita
          estiver presionada" ao bloque "mova á dereita". Faga iso e logo vostede
          vai programar o seu propio xogo de pingue-pongue!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Esa lección é sobre pensamento computacional. Ás veces, aprender un
          novo xogo pode ser difícil, correcto? No comezo iso pode parecer realmente
          confuso e, ás veces, non hai ninguén para ensinar as regras e vostede precisa
          descubrir todo só.
      2:
        image: notes/C3_computational_thinking_2.png
        text: A boa noticia é que vostede pode mellorar a súa habilidade de descubrir
          cousas só cando vostede coñece algúns trucos. Eses trucos son formas únicas
          de ollar para os problemas e resolvelos. Nesa lección, vostede vai aprender
          catro trucos e adestrar con seus amigos para descubrir as regras dun xogo.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Cando vostede divide un problema grande en partes menores, vostede está
          usando o seu cerebro para decompor o problema maior. Cando tivermos decomposto
          o problema grande en problemas menores, podemos ir para o próximo truco,
          o cal chamamos de correspondencia de padróns.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Iso acontece cando procuramos por semellanzas entre as cousas. Cando
          eu encontro as cousas iguais, eu podo descubrir cales cousas son distintas.
          Cando eu removo esas diferenzas, iso é chamado de abstracción.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Despois de descubrir as etapas para resolver un problema, eu podo colocalas
          nunha orde específica chamada algoritmo, así calquera un pode usar miñas
          instrucións para resolver aquel problema. Imos usar esas catro etapas para
          descubrir como xogar o xogo sen regra algunha. Ao final do xogo, vostede
          vai poder xogar algo parecido con iso!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Esta lección é chamada de crowdsourcing. Nesta lección, imos usar un
          barallo de cartas para aprender como algunhas cousas poden ser máis fáciles
          se feitas en grupo, en vez de individualmente. Entón reúna algúns amigos
          e faga algo incríbel. Crowdsourcing significa obter axuda dun gran grupo
          de persoas para terminar algo máis rápido.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: Na informática, usamos crowdsourcing todo o tempo. Miles de afeccionados
          e profesionais conectan seus computadores para procurar por bilhóns e bilhóns
          de fragmentos de información. Eles procuran por cousas como o próximo número
          primo de Mersenne, ou até mesmo pola posibilidade de comunicación con alieníxenas.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Cando vostede asiste a un filme, cada segundo del é composto por 24
          imaxes individuais, as cales chamamos de cadros. Entón, cada unha desas
          imaxes precisa ser creada e renderizada, para que todas fiquen xuntas. Meu
          equipo e eu somos desenvolvedores de software. Traballamos xuntos para crear
          un software que de traxe crea unha imaxe, crea a imaxe final que vostede
          ve na pantalla. Esa é unha ferramenta que artistas e outros desenvolvedores
          poden usar como parte de o seu traballo e proceso para poder crear as imaxes
          que quixeren na pantalla.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Por exemplo, en Procurando Nemo, cando Crush, Esguicho e seus amigos
          están navegando pola Corrente da Australia oriental. Vostede ve imaxes de
          auga en movemento, vostede ve as cores nas costas da tartaruga, vostede
          ve os lados do peixe. Todas esas cousas son xeradas usando matemática e
          programas de computador que escribimos e entón pasamos para os artistas
          usaren e crear a imaxe final, facendo os axustes para que todo fique bonito
          e divertido.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Esa lección é chamada Xogo de datos. Case todo o mundo gústalle xogar
          xogos de computador. Vostede xa pensou sobre como programadores de computador
          transforman as etapas dun xogo nun programa? O primeiro paso na creación
          de xogos de computador e na resolución de calquera problema consiste de
          pensamento e de planificación.
      2:
        image: notes/C3_dice_race_2.png
        text: A etapa de pensamento sobre a resolución de problema produce un algoritmo,
          o cal é un plano paso a paso para resolver un problema ou terminar unha
          tarefa. Nesa lección, vostede vai crear un algoritmo para un xogo de datos.
          Entón, vostede vai pedir a seus amigos para probar o seu plano e ver se
          eles conseguen seguir os pasos para xogar o xogo. Cando o programador ten
          certeza de que os pasos están correctos, é hora de traducir o algoritmo
          nun programa cunha linguaxe que o computador poida entender.
      3:
        image: notes/C3_dice_race_3.png
        text: Case todo que facemos todos os días require un algoritmo, unha lista
          de pasos que vostede pode seguir para terminar unha tarefa. Pense en ficar
          pronto para ir á escola, ou planear un día divertido con seus amigos, ou
          facer un lanche. Para completar esas tarefas, vostede precisa dividídelas
          en pasos menores e, ás veces, os pasos precisan estar nunha orde específica.
      4:
        image: notes/C3_dice_race_4.png
        text: Pense sobre como facer un sanduíche. Non importa cal ingrediente vostede
          tira do armário primeiro. Mais vostede non pode pasar a margarina antes
          de abrir o pote. Os computadores precisan de algoritmos e programas para
          mostralos como facer até mesmo cousas simples que podemos facer sen pensar.
      5:
        image: notes/C3_dice_race_5.png
        text: Un algoritmo é o pensamento por tras do que precisa acontecer mentres
          o programa de traxe dá instrucións para que o computador faga algo acontecer.
          Un algoritmo precisa ser traducido nun programa antes que un computador
          poida executalo. Dividir unha tarefa en pasos chamados de algoritmo pode
          ser difícil. Mais, como calquera nova habilidade, iso fica máis fácil coa
          práctica.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Lazos mentres son moi parecidos co que vostede fai na vida cotiá. Imaxine
          que vostede está lavando o seu coche. Vostede vai continuar fregando até
          que el fique limpo. Mentres el non estiver limpo, vostede continúa fregando.
          Vostede está avaliando esas cousas todo o tempo.
      2:
        image: notes/C3_farmer_while_2.png
        text: Temos un novo bloque para axudar a súa campesiña. El é chamado de bloque
          mentres. Na verdade, el é moi simple. Mentres unha instrución na parte superior
          for certa, faga algunha cousa. Por exemplo, mentres houber unha pila, mova.
          Vaia adiante e probe iso con a súa campesiña.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Esa lección é sobre caza-soles funcionades. Vostede vai crear eses belos
          caza-soles usando funcións. Hai varias etapas para crear un caza-sol. Algunhas
          etapas precisan ser repetidas varias veces.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: O primeiro paso para simplificar o proceso de confección dun caza-sol
          é descubrir o que precisa ser repetido varias veces. Podemos reunir eses
          pasos no que chamamos dunha función.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Mais, para crear un belo caza-sol, precisamos facer máis do que só seguir
          pasos precisos. Ás veces, queremos ser creativos e alterar a cor das miçangas
          que estamos usando. Podemos tornar cada caza-sol único se usarmos miçangas
          de cores distintas.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Seu caza-sol será soamente o seu cando vostede aprender a pensar nas
          miçangas como variábeis, que son un espazo reservado para informacións que
          poden ser alteradas. Divírtase creando belos caza-soles usando funcións
          e variábeis!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Esa lección é sobre a internet. A internet é un lugar moi movido, parecido
          con esa estrada movida. As mensaxes son como os coches, e pasan zunindo
          para chegar aos seus destinos. As mensaxes se moven rapidamente pola internet.
      2:
        image: notes/C3_internet_2.png
        text: Pensar sobre como a internet funciona axuda a entender o que acontece
          cando se usa a internet. Vostede vai aprender como as mensaxes van do o
          seu computador até un dos seus sitios web favoritos ou até a caixa de e-mails
          dun amigo. Así como fica máis fácil andar por estradas movidas cando vostede
          coñece o camiño e sabe ler as placas, navegar pola internet non é tan complicado
          cando vostede sabe o que acontece nos bastidores.
      3:
        image: notes/C3_internet_3.png
        text: O envío de mensaxes na internet é parecido co envío de mensaxes polo
          correo, pero con algunhas diferenzas. Eu estou aquí no Google.con. O enderezo
          de IP para ese sitio web é ese número. Vostede pode pensar nun enderezo
          de IP como o seu enderezo de retorno no correo. Imos imaxinar que eu queira
          enviar unha mensaxe por correo para alguén na oficina alí embaixo. Vostede
          ve a URL e o enderezo de IP naquela porta? Eu escribín esa mensaxe e premín
          en enviar.
      4:
        image: notes/C3_internet_4.png
        text: Diferentemente dos correos, a primeira cousa que a internet fai é dividir
          a mensaxe en partes menores para que elas sexan enviadas máis facilmente.
          Esas pequenas partes son chamadas paquetes. Cada paquete da mensaxe é entregada
          ao destino, un de cada vez. Eses paquetes son colocados na orde correcta
          para que o destinatário poida ler a mensaxe correctamente. É claro que hai
          moitas outras cousas para aprender sobre como a internet funciona, pero
          ese é un excelente comezo. Vostede está no camiño para se tornar un usuario
          de internet esclarecido! Lémbrese de contar a a súa familia e aos seus amigos
          o que vostede aprendeu!
      5:
        image: notes/C3_internet_5.png
        text: Meu nome é Amanda Camp, son unha engeñeira de software na Google. Eu
          traballo nun equipo que forma parte do servidor backend, que almacena perfís
          e contactos. En meu traballo, pensamos moito sobre como os contactos poden
          ser enviados para outros dispositivos, como o seu teléfono. A maioría da
          xente ten moitos contactos, digamos uns mil contactos, e non queremos enviar
          todos eses contactos dunha vez para o seu teléfono porque esa sería unha
          mensaxe moi grande. Da mesma forma que a internet divide mensaxes grandes
          en paquetes, usamos un concepto chamado memoria paginada, no cal debemos
          mandar só 100 contactos por vez para o seu teléfono, e despois esperamos
          unha resposta, pedindo para que enviemos os próximos 100.
      6:
        image: notes/C3_internet_6.png
        text: A cousa máis legal sobre software é o traxe de que el pode afectar o
          mundo todo. Eu aprendín a programar cando eu tiña 19 anos. Penso que eu
          xa estaba no primeiro ou segundo ano da facultade. O primeiro programa que
          eu lembro de ter feito convertía Celsius para Fahrenheit. Eu gústame programar
          porque eu gústame axudar as persoas. Eu podo escribir programas na Google
          que axudan persoas en todo o mundo, e iso é realmente fascinante e emocionante.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: As persoas toman decisións todos os días. Por exemplo, antes de saír
          de casa, vostede ten unha instrución se que di;* se estiver chovendo, entón
          eu preciso levar meu chaqueta. Os computadores son incríbeis cando vostede
          decide ese tipo de instrución sobre a cal eles poden executar cousas nunha
          velocidade inacreditável. Un programa de computador é realmente un pequeno
          fragmento de cálculos e algunhas instrucións se, nas cales as decisións
          son tomadas.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: O bloque se axuda o zumbi a tomar unha decisión. El verifica algunha
          cousa. Por exemplo, imos usar o bloque que di se hai un camiño á esquerda,
          e entón colocamos un comando vire á esquerda dentro del. Estamos falando
          para o zumbi ver as cousas ao o seu redor, ver se hai un camiño á esquerda
          e, no caso de que o camiño exista, facemos el virar.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Entón, usamos o bloque avance dentro do repita para que el continúe
          avanzando, xa que el quere só seguir adiante. Entón, cando hai unha curva,
          o bloque se di para el virar á esquerda. Vostede pode ver que, se fixermos
          iso, se virarmos á esquerda e avanzarmos, imos atinxir o noso obxectivo.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Ese é un exemplo de uso dunha instrución se, que é un concepto fundamental
          na programación de computadores. Unha das primeiras cousas que eu aprendín
          foi como escribir un programa para xogar o xogo da vella. Eu tiña instrucións
          se para dicir;* ok, se a outra persoa estiver a piques de gañar, vaia adiante
          e impídaa. Divírtase aprendendo a usar instrucións se, elas son un concepto-chave
          moi importante.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Nese exemplo, o seu obxectivo é facer o zumbi chegar ao girassol. Poderiamos
          usar cinco bloques avance, ou poderiamos dicir ao computador para avanzar
          e repetir esa acción cinco veces usando un bloque repita.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Iso economiza tempo e torna as cousas máis fáciles. Para usalo, coloque
          o bloque avance dentro do bloque repita. Clic en Executar e o zumbi vai
          avanzar cinco veces para chegar ao saboroso girassol.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Até agora, vostede fixo animacións ou historias que fan exactamente
          as mesmas cousas cando vostede as executa. Agora, vostede pode facer un
          xogo interativo e xogalo de verdade.
      2:
        image: notes/playlab_2.png
        text: Existen algúns novos bloques para probar. Hai os bloques "cando a frecha
          estiver presionada" e "mova o personaxe". Vostede pode xuntar eses bloques
          para mover os personaxes coas frechas do teclado. E hai algúns bloques que
          fan cousas cando os personaxes trombam ou son premidos. Dea unha ollada
          e divírtase!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Esa é a lección de composición de música. A música se parece moito cun
          programa de computador. As notas e as palabras escritas din ao cantante
          exactamente o que facer. Algunhas partes da música son usadas varias veces.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Chamamos iso de refrán. Nun programa de computador, as partes do programa
          que son usadas varias veces son chamadas de funcións. Cando vostede le a
          letra dunha música e encontra a palabra refrán, vostede canta a palabra
          refrán? Non, vostede olla para a parte de enriba da páxina e ve cales palabras
          compoñen o refrán.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Nesa lección, vostede vai aprender unha música infantil chamada Coelhinho
          foo foo. A música ten un refrán que vostede vai cantar varias veces. Unha
          función é un fragmento de código que vostede pode chamar e usar moitas veces.
          Iso torna a programación máis fácil e eficiente, así vostede non precisa
          escribir os pasos da función varias veces. Vostede pode escribir só unha
          vez!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Este é un bloque condicional. El di se vostede está nunha flor ou nunha
          colmeia, e entón fai algunha cousa. É útil cando non sabemos canto mel ou
          néctar apañar, como vemos aquí neste punto de interrogación.
      2:
        image: notes/C4_bee_conditional_2.png
        text: Neste exemplo, imos dicir se isto é unha flor, apañar todo o néctar
          e entón usar outro para dicir se é unha colmeia e facer mel. Tcharanz!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Temos un novo bloque chamado de se/entón. El é unha instrución condicional
          como o bloque se que vostede usou nos desafíos anteriores. Mais agora hai
          unha nova parte embaixo que di senón. O bloque se/entón fai a abella tomar
          a decisión entre dous tipos de acción. Se a abella estiver nunha flor, ela
          fará o conxunto de accións que vostede colocou na primeira parte que di
          faga. Se a abella non estiver na flor, ela fará o conxunto de accións que
          vostede colocou na parte que di senón.
      2:
        image: notes/C4_conditionals_2.png
        text: É a partir das instrucións se que os computadores son capaces de tomar
          decisións. Os humanos estabelecen condicións para o computador que din que,
          se o computador encontrar certa situación, el debe facer unha cousa, senón,
          el debe facer outra cousa. O comezo do o noso bloque se/senón di "se en
          a flor". Mais podería dicir outras cousas, como "se néctar igual a 2" ou
          "se houber un camiño diante", e o bloque se comportaría do mesmo modo. Se
          a instrución for certa, el executará o primeiro conxunto de accións, pero
          se for falsa, el executará o segundo conxunto de accións.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Cando vostede usa un bloque repita para crear un bucle no o seu código,
          como o computador sabe que el foi repetido o suficiente? O bloque repita
          está, na verdade, escondendo un fragmento de código chamado "bucle para",
          que conta a partir dun valor inicial até un valor final, en incrementos
          específicos.
      2:
        image: notes/C4_for_loops_2.png
        text: Por exemplo, un bloque "repita tres" conta de 1 até 3, de 1 en 1. Sempre
          que el conta, executa o código dentro do bucle. O bucle "para" sabe cantas
          veces foi executado usando unha variável contadora que é definida co valor
          inicial do comezo do bucle e é incrementada sempre que o bucle é executado.
          Así que a variável contadora for maior que o valor final, o bucle para de
          ser executado.
      3:
        image: notes/C4_for_loops_3.png
        text: A vantaxe de usar un bucle "para" real en vez do bloque repita é que
          vostede pode ver a variável contadora, e usala no bucle. Por exemplo, se
          eu tiver unha fileira de flores e a primeira tiver un néctar, a segunda
          tiver dous e a terceira tiver tres, podo usar o bucle "para" para dicir
          á abella para recadar "contador" néctares por vez, o que sería un na primeira
          flor, dous na segunda e tres na terceira.
      4:
        image: notes/C4_for_loops_4.png
        text: Vostede tamén pode incrementar o contador por un número distinto dun
          nun bucle "para". Vostede pode contar de 2 en 2, de 4 en 4, ou até mesmo
          un valor que varíe toda vez.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Cando vostede usa un bloque repita para crear un bucle no o seu código,
          como o computador sabe que el foi repetido o suficiente? O bloque repita
          está, na verdade, escondendo un fragmento de código chamado "bucle para",
          que conta a partir dun valor inicial até un valor final, en incrementos
          específicos.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Por exemplo, un bloque "repita tres" conta de 1 até 3, de 1 en 1. Sempre
          que el conta, executa o código dentro do bucle. O bucle "para" sabe cantas
          veces foi executado usando unha variável contadora que é definida co valor
          inicial do comezo do bucle e é incrementada sempre que o bucle é executado.
          Así que a variável contadora for maior que o valor final, o bucle para de
          ser executado.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: A vantaxe de usar un bucle "para" real en vez do bloque repita é que
          vostede pode ver a variável contadora, e usala no bucle. Por exemplo, se
          eu tiver unha fileira de flores e a primeira tiver un néctar, a segunda
          tiver dous e a terceira tiver tres, podo usar o bucle "para" para dicir
          á abella para recadar "contador" néctares por vez, o que sería un na primeira
          flor, dous na segunda e tres na terceira.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Vostede tamén pode incrementar o contador por un número distinto dun
          nun bucle "para". Vostede pode contar de 2 en 2, de 4 en 4, ou até mesmo
          un valor que varíe toda vez.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Cando vostede usa un bloque repita para crear un bucle no o seu código,
          como o computador sabe que el foi repetido o suficiente? O bloque repita
          está, na verdade, escondendo un fragmento de código chamado "bucle para",
          que conta a partir dun valor inicial até un valor final, en incrementos
          específicos.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Por exemplo, un bloque "repita tres" conta de 1 até 3, de 1 en 1. Sempre
          que el conta, executa o código dentro do bucle. O bucle "para" sabe cantas
          veces foi executado usando unha variável contadora que é definida co valor
          inicial do comezo do bucle e é incrementada sempre que o bucle é executado.
          Así que a variável contadora for maior que o valor final, o bucle para de
          ser executado. A vantaxe de usar un bucle "para" real en vez do bloque repita
          é que vostede pode ver a variável contadora e usala no bucle.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Agora que vostede editou bloques de función, é hora de crear un do cero.
          É ben simple. vostede verá que a caixa de ferramentas ten unha categoría
          chamada "funcións". Se vostede premer nela, verá un botón laranxa chamado
          "crear unha función". Premer nel abre o editor de funcións que vostede xa
          usou para editar bloques de función xa existentes.
      2:
        image: notes/C4_function_create_2.png
        text: Como antes, vostede comeza dando un nome para a súa función, escribindo
          unha descrición do que a función debe facer. Por exemplo, ela vai debuxar
          un cadrado ou un triángulo. Entón, arrastre bloques da caixa de ferramentas
          para o espazo en branco abaixo. Lémbrese de arrastrar os bloques para dentro
          do bloque verde da función.
      3:
        image: notes/C4_function_create_3.png
        text: Cando terminar, clic en "salvar e saír". Iso o levará de volta á área
          de traballo principal dos desafíos. A nova función que vostede creou vai
          aparecer como un bloque verde na categoría "funcións" da a súa caixa de
          ferramentas. Arrástreo e sólteo na área de traballo principal e úseo como
          calquera outro bloque para resolver o desafío.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Unha das mellores cousas na programación é que cando vostede ensina
          un computador a realizar unha acción vostede pode chamar esa función novamente.
          Vostede dá un nome a ela e entón vostede a chama. Iso é realmente como estender
          a linguaxe.
      2:
        image: notes/C4_function_edit_2.png
        text: No programa que creamos, aprendemos a debuxar un cadrado movendo e virando
          catro veces. Podemos apañar esa función e chamala de "debuxe un cadrado".
          Así, sempre que quixermos facer iso, simplemente dicimos "debuxe un cadrado"
          e o código desa función será chamado e fará iso por nós. Adicionamos ese
          concepto á a nosa linguaxe de programación.
      3:
        image: notes/C4_function_edit_3.png
        text: Nese desafío, xa creamos unha función "debuxe un cadrado" para vostede.
          Vostede a verá na caixa de ferramentas como un bloque verde. O que vostede
          precisa facer é escribir o mesmo código que escribiu antes para debuxar
          un cadrado e colocalo dentro desa función. Para facer iso, clic na opción
          editar no bloque verde "debuxe un cadrado". Iso vai abrir o editor de funcións.
          O editor ten tres partes. Un lugar no cal vostede dá un nome para a a súa
          función. El vai aparecer no bloque verde antes da función. Despois, escriba
          unha descrición curta do que a súa función debe facer.
      4:
        image: notes/C4_function_edit_4.png
        text: Nese caso, ela debe debuxar un cadrado. A área en branco abaixo diso
          é a área de traballo, e funciona igual ao que vostede xa vén usando. Arrastre
          e solte bloques da caixa de ferramentas na área de traballo. Lémbrese de
          colocar os bloques que crean un cadrado dentro do bloque verde da función.
          Cando terminar, clic en "salvar e saír". Iso vai levalo de volta á área
          de traballo principal do desafío. Agora, vostede pode usar o bloque "debuxe
          un cadrado" como calquera outro bloque para resolver o desafío.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Aquí está unha función que debuxa un cadrado con lados de 50 pixels.
          Excelente, pero e se eu quixese debuxar un cadrado con lados de 50 pixels
          e outro con lados de 100 pixels? Non precisamos facer dúas funcións separadas
          para facer practicamente a mesma cousa. En vez diso, podemos usar unha función
          cun parámetro.
      2:
        image: notes/C4_function_parameters_2.png
        text: Os parámetros nos permiten atribuír valores para unha función que son
          usadas como variábeis dentro da función. Imos tentar agregar un parámetro
          chamado "lonxitude" a esa función para que poidamos crear cadrados de tamaños
          distintos. No editor de funcións, vostede pode editar o nome e descrición
          como antes, pero agora tamén pode agregar un parámetro. Escriba o nome do
          parámetro no espazo e clic en "agregar parámetro". Iso vai crear un bloque
          vermello co nome do parámetro que vostede acabou de crear. Agora, podemos
          substituír o 100 no bloque "avanzar 100" polo parámetro "lonxitude" para
          que el avance a lonxitude desexada.
      3:
        image: notes/C4_function_parameters_3.png
        text: Clic en salvar e fechar e arrastre o seu novo bloque "cree un cadrado"
          da categoría funcións na caixa de ferramentas. Vostede vai entender que
          hai un espazo baleiro preto de lonxitude, porque a función quere saber cal
          debe ser o valor do parámetro lonxitude. Arrastre un bloque numérico da
          categoría matemática e colóqueo nese espazo. Ve como vostede pode usar a
          función varias veces con lonxitudes distintas para crear cadrados de tamaños
          distintos? Probe!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalmente a programación é feita toda en texto, pero imos usar o Blockly,
          que usa bloques visuais que poden ser arrastrados e posicionados para escribir
          programas. Indirectamente, vostede aínda está creando código. Para comezar,
          imos crear o código para un programa que vai axudar ese Angry Bird a andar
          por un labirinto para chegar até o porco malvado que roubou seus ovos.
      2:
        image: notes/C4_intro_2.png
        text: O Blockly é dividido en tres partes principais. Á esquerda está o labirinto
          do paxaro, onde o seu programa será executado. As instrucións para cada
          nivel están escritas abaixo do labirinto. Esa área do medio é a caixa de
          ferramentas, e cada un deses bloques é un comando que o paxaro consegue
          entender. O espazo en branco á dereita é chamado de área de traballo, e
          é onde imos crear o noso programa.
      3:
        image: notes/C4_intro_3.png
        text: Se eu arrastrar un bloque mova para a nosa área de traballo e premer
          en "Executar", o que acontece? O paxaro avanza un quadradinho na reixa.
          E se eu quixer que o paxaro faga algo despois de avanzar un quadradinho?
          Eu podo agregar outro bloque ao o noso programa.
      4:
        image: notes/C4_intro_4.png
        text: Vou escoller o bloque "vire á dereita" e arrastralo para baixo do meu
          bloque avance até que a frecha amarela apareza. Entón, vou soltalo e os
          dous bloques van se xuntar. Cando eu apertar "executar" novamente, o paxaro
          vai realizar os comandos que están apiñados de enriba para baixo en a nosa
          área de traballo.
      5:
        image: notes/C4_intro_5.png
        text: Se vostede quixer excluír un bloque, simplemente remóvao da pila e arrástreo
          para a recolledora de lixo. Despois de premer en Executar, vostede sempre
          pode premer no botón Reiniciar para facer o paxaro volver para o inicio.
          Agora imos apañar os porcos!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Se eu quixer debuxar un retángulo con 50 pixels de altura e con lonxitude
          igual a dúas veces a súa altura, como podo programar o computador para facer
          iso? Ben, eu podería dicir ao artista para subir cincuenta, despois 100
          para o lado e mover todo dúas veces. Mais nese caso eu estaría facendo as
          contas para o computador.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplicar cincuenta por dous de cabeza pode non ser tan difícil, pero
          os computadores son realmente bos de matemática, entón debemos deixalos
          facer as contas sempre que posíbel. Se eu simplemente usase unha variável
          chamada altura, podería mudar a altura facilmente para cincuenta e entón
          mudar o algoritmo para dicir para o artista subir o valor da altura, virar
          para a dereita e andar dúas veces a altura, o que nos dá un retángulo con
          con lonxitude igual a dúas veces a súa altura.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Esa lección é chamada Algoritmos de Tangram. Tangram é un quebra-cabeza
          con sete pezas que se encaixam para crear outras formas. Vostede vai usar
          un algoritmo para explicar para o seu socio como montar o quebra-cabeza.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Un algoritmo é só unha lista de accións que deben ser tomadas para completar
          unha tarefa. Nós os usamos todos os días, en cousas como listas de compras
          e receitas. Se o seu algoritmo for moi simple, haberá moitos modos de interpretalo,
          e quen for executalo pode non conseguir exactamente o que vostede quería.
          Se vostede quixer garantir que todos obteñan o mesmo resultado, o seu algoritmo
          deberá ser detallado e específico.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Hoxe, estou usando un algoritmo para terminar unha pintura. Eu quería
          tentar pintar algúns lobos, pero non son o mellor pintor do mundo. Felizmente
          para persoas como eu, alguén inventou a pintura por números. Temos corenta
          cores e pequenas letras e números que din con que cor pintar cada sección.
          A pintura por números me di exactamente cal cor usar e onde.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Ela é moi específica, entón podo seguir as instrucións e a pintura ficará
          incríbel! É un excelente algoritmo. Se as instrucións non fosen específicas
          o bastante, meus lobos non ficarían tan bos. Cando vostede realmente quixer
          que algunha cousa fique exactamente do xeito que planeou, é mellor ser extremamente
          preciso.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: En cada equipo, a persoa que está instruíndo, aquela que está co papel,
          debe descubrir cal será o seu símbolo de "desconectado" e cal será o seu
          símbolo de "ligado". En binário, é unha especie de alfabeto con dúas letras,
          como se as letras A e B fosen todo o alfabeto, pero nese caso, temos 0 e
          1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: O modo máis común de usar binários é nunha instrución se. É un clásico
          da programación. O programa é executado e, se algo for certo, fai unha cousa,
          ou, senón, fai outra cousa. E se vostede quixer facer algo un pouco máis
          complicado? En vez dunha instrución se, vostede pode querer traballar con
          algo como unha imaxe ou un son nun computador.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: O computador só coñece binário, pero unha imaxe non é binária. Ela non
          é feita duns e ceros, entón como vostede pode facer iso? Aquí está un exemplo;*
          vostede ten esa linda imaxe. Unha imaxe é, basicamente, unha forma de informacións.
          Todas as informacións poden ser codificadas en binário dun xeito ou doutro,
          vostede só ten que descubrir como.
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Imaxine que imos colocar un cuadriculado sobre ese oso panda e decidir
          se cada cadrado é máis negro ou máis branco, e entón, imos colorar así.
          Agora, cada célula do cuadriculado é negra ou branca, e dicimos que os cadrados
          negros son ceros (dígito binário), e os cadrados brancos son un, o outro
          dígito binário. No final, o que vostede terá é un monte duns e ceros. É
          así que vostede representa esa imaxe en binário.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Esta lección é chamada diversión co bucle para. Nesta lección. imos
          aprender a usar a recta numérica para xogar un xogo de datos. Cada xogador
          vai xogar tres veces para definir un valor inicial, un valor final, e un
          intervalo. En cada quenda, circulamos o valor inicial, e todos os valores
          que estean ao mesmo número de pasos adiante que o valor do o noso intervalo.
          Paramos de circular cando chegamos ao o noso valor final. Quen tiver a maior
          puntuación gaña!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: Os bucles para poden ser útiles en moitos lugares, e se vostede fose
          ser un meteorologista, usaría os bucles para todo o tempo. Ola, eu son Becky,
          e traballo na EverPower Renewables como meteorologista especializada en
          ventos. Eu prevexo a velocidade dos ventos na área do desfiladeiro do Río
          Colúmbia, onde a empresa ten parques eólicos.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Estamos tentando entender a forza dos ventos alí, para que saibamos
          canta enerxía será xerada. Fornecemos esas informacións aos negociantes
          de enerxía en tempo real. Eles compran e venden enerxía con base en canta
          enerxía dicimos que será xerada, para garantir que a malla enerxética permaneza
          equilibrada, que as luces da a súa casa continúen acendidas, e que maximizemos
          a enerxía que obtemos dos nosos parques.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: Estamos no centro nacional de control da EverPower Renewables, aquí
          en Portland, e é aquí que recibimos informacións de todas os nosos parques
          por todo o país. Nin mesmo os computadores máis poderosos de hoxe poden
          simular a atmosfera enteira. Nos modelos de previsión computadorizados,
          temos o que chamamos de malla. Cada punto da malla corresponde a unha latitude
          e unha longura. Temos que calcular a física e tentar descubrir a velocidade
          do vento, temperatura, presión, ese tipo de cousa.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Como esas mallas son ben grandes, e estamos facendo iso en moitos puntos,
          estamos pasando por esas cousas millóns e millóns de veces. Eu uso bucles
          para en todo o que fago. Por exemplo, aquí está un bucle para, ben aquí.
          Cando vostede esta facendo previsións do vento, hai tantos parámetros distintos
          que sería imposíbel para un ser humano se sentar e facer todas esas contas.
          Hai tantos aspectos distintos afectando o que acontece co vento que precisamos
          dun modelo computadorizado para prevelo.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: Nesa lección, imos xogar con algunhas historias de cubrir as lagoas.
          Vostede ten un modelo que pode cubrir para crear historias similares, pero
          con diferenzas moi divertidas.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: Nesa lección, tamén aprendemos a crear un modelo abstraído a partir
          de dúas historias que xa foron creadas. A abstracción é a arte de eliminar
          diferenzas e detalles para que poidamos ver como unha solución pode funcionar
          para problemas distintos. Iso é moi útil en informática, porque nos permite
          crear funcións que poden ser útiles en moitas situacións distintas.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: Esa lección é chamada Escribindo unha canción con parámetros. Imos escribir
          algunhas músicas. Ás veces, o refrán é un pouquinho distinto a cada vez
          que vostede o canta. Vostede coñece a música "Old Macdonald Had a Farm"?
          O refrán é un pouco distinto para cada animal. E naquela facenda, el tiña
          unha vaca, i-á-i-á-ô. A pequena mudanza no refrán pode ser mostrada usando
          algo que chamamos de parámetros.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Ás veces unha función precisa dun parámetro. Un parámetro é unha información
          adicional que vostede pode pasar para unha función e personalizá-la para
          unha necesidade especial. Cando vostede fai sorvete con seus amigos, está
          usando un proceso similar aos parámetros nun programa de computador.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: A bóla de sorvete de creme pode ser igual en todos os sundaes, pero
          cando vostede pide aos seus amigos para escoller dúas coberturas, consegue
          moitas combinacións distintas. O nome da función é "cobertura", pero cada
          tipo de cobertura é un parámetro. Funcións e parámetros funcionan xuntas
          na produción de excelente programas de computador e tamén excelente sundaes.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: Esa lección é chamada variábeis en envelopes. Imos aprender como podemos
          construír sentenzas mesmo cando temos informacións faltando. A maioría de
          nós xa está familiarizado coa idea de cubrir unha lagoa. Facemos iso cando
          colocamos o noso nome na lección de casa. Ás veces, máis dunha palabra precisa
          ser cuberta, e, nese caso, identificamos esa lagoa, para que saibamos que
          información vai onde.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variábeis son espazos reservados para informacións que poden mudar.
          Usando unha variável para a información que falta, podemos continuar a traballar
          no que quere que esteamos facendo e deixar alguén cubrir as informacións
          que faltan máis tarde. Usamos moi as variábeis nos softwares. Usamos variábeis
          como espazos reservados para nomes, enderezos de e-mail, e até mesmo nomes
          de usuario. Así, podemos informar ao programa que eses detalles van aparecer
          despois que o usuario os cubrir. Usamos variábeis todo o tempo no o noso
          traballo.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Sempre que precisamos almacenar unha información para máis tarde, usamos
          unha variável. Digamos que precisemos contar o número de veces que o usuario
          escribiu un tweet. Sempre que el escribir un tweet, sumamos un a ese número,
          e sempre que el apagar un, subtraímos un dese número. Sempre que precisamos
          saber cantas veces o usuario escribiu un tweet, simplemente ollamos para
          esa variável.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Unha variável é un contêiner en que vostede pode almacenar un valor.
          Cando vostede usa unha variável nun algoritmo, el abre o contêiner e olla
          o valor dentro del. Iso permite a vostede escribir programas máis intelixentes,
          que se comportan de modo distinto dependendo do valor almacenado na variável.
      2:
        image: notes/C4_variables_artist_2.png
        text: Por exemplo, se eu quixese escribir un algoritmo para dicir "Feliz aniversario
          de 10 anos!" para o meu irmónzinho, excelente, pero o ano que vén eu vou
          querer dicir "Feliz aniversario de 11 anos!". Podo crear unha variável chamada
          idade para almacenar a idade do meu irmán, e escribir meu algoritmo para
          dicir "Feliz aniversario de 'idade' anos!". Como a variável pode mudar,
          eu podo atualizar a variável 'idade' para ser igual a 'idade' máis 1 todos
          os anos.
      3:
        image: notes/C4_variables_artist_3.png
        text: Nese desafío, imos usar unha variável que vai definir a lonxitude da
          liña que o noso artista vai trazar. Máis diante en o noso código, o bloque
          avance vai ler esa variável lonxitude para ver cal é o o seu valor.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Unha variável é un contêiner en que vostede pode almacenar un valor.
          Cando vostede usa unha variável nun algoritmo, el abre o contêiner e olla
          o valor dentro del. Iso permite a vostede escribir programas máis intelixentes,
          que se comportan de modo distinto dependendo do valor almacenado na variável.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Agora, vostede vai probar o laboratorio, onde recibirá xogos distintos
          e poderá mudar os valores de variábeis como velocidade, altura e puntuación
          para mudar o xogo. Vostede non terá que mudar o algoritmo do xogo para mudar
          como el é xogado, só as variábeis.
      3:
        image: notes/C4_variables_playlab_3.png
        text: No meu traballo no Kindle e no raio-x para libros, aplicamos variábeis
          de moitos modos distintos. Un modo como vostede pode usar unha variável
          é para almacenar os números das páxinas dun libro. O usuario pode aumentar
          ou diminuír o tamaño da fonte dun libro electrónico. Con base no tamaño
          da fonte, o número de páxinas no libro electrónico pode mudar. Podemos axustar
          iso almacenando o número de páxinas na variável.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Agora, imos aprender a ler sobre algo que os programadores de xogos
          usan todos os días. Eles son chamados eventos. Un evento di ao o seu programa
          para prestar atención en cando algunha cousa acontece. E cando acontece,
          el realiza unha acción. Algúns exemplos de eventos son detectar un clic
          no rato, nunha tecla, ou un toque na pantalla.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Aquí, imos facer Baymax se mover para enriba para tocar Hiro, e para
          baixo para tocar Rapunzel cando o xogador usar as frechas para cima/para
          baixo ou os botóns para cima/para baixo. Imos usar o bloque "cando a frecha
          para enriba estiver presionada" e ligar o bloque "mova un personaxe para
          cima" a el, para que cando o xogador presionar a frecha para cima, todo
          que estea ligado ao bloque "cando a frecha para enriba estiver presionada"
          sexa executado. Faremos o mesmo para mover Baymax para baixo. Paso a paso,
          o seu xogo está ficando máis interativo.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: En que ano vostede está? Segundo. Décimo ano. Primeiro ano. Eu estaba
          o primeiro ano cando aprendín a programar. Eu gañei meu primeiro computador
          cando estaba o sexto ano. O que me deixa empolgado é ser capaz de resolver
          os problemas das persoas. Vostede pode se expresar, pode construír cousas
          a partir dunha idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: A informática é a base de moitas das cousas que os alumnos de facultade
          e profesionais farán polos próximos vinte ou trinta anos. Gústame programar
          porque gústame axudar as persoas. Teño a oportunidade de crear algo que
          tornará a vida das persoas máis fácil. Penso que é o máis próximo que teño
          dun superpoder. Comezar é a parte máis importante. Eu me considero unha
          iniciante, e quero que vostede aprenda comigo.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: Eu son John Vechey, un dos cofundadores da PopCap Games. Facemos xogos
          como Plants vs. Zombies, Bejeweled, e Peggle. O importante sobre os xogos
          non é como o seu código é perfecto, nin como a súa arte é perfecta, e si
          como el fai vostede se sentir e como el é divertido. Vostede só consegue
          entender iso facendo, aprendendo e adaptando e mellorando súas propias habilidades
          na creación de xogos.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Vostede ten un xogo favorito? Ben, imos dar un paso para a creación
          de xogos como ese usando o laboratorio. Bos xogos teñen unha historia, e
          toda historia ten personaxes. Os personaxes fan cousas como falar, se mover
          e interagir uns cos outros. Talvez até mesmo marcar puntos con base nas
          regras do xogo. Hoxe, imos aprender como facer todas esas cousas, unha a
          unha, con personaxes da Disney como Anna, Elsa, Hiro, Baymax, e Rapunzel.
          Imos crear un xogo do cero, que pode ser compartido e xogado nun móbil.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Súa pantalla está dividida en tres partes principais. Á esquerda está
          a área do xogo, onde o seu programa será executado. As instrucións para
          cada nivel están escritas abaixo. A área do medio é a caixa de ferramentas,
          e cada un deses bloques é unha parte do código. O espazo en branco á dereita
          é chamado de área de traballo, e é onde imos crear o noso programa.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: Para comezar, vostede vai precisar encaixar seus bloques ao bloque laranxa
          "cando executar". Vostede pode encaixar varios bloques arrastrándoos até
          ver o contorno amarelo, e entón eles van se encaixar. Nese primeiro desafío,
          Hiro é o personaxe 1 e Baymax é o personaxe 2. Precisamos mover Hiro para
          chegar até Baymax, arrastrando o bloque "mover para a dereita" e encaixando-o
          ao bloque "cando executar". Cando os bloques estiveren no lugar, clic no
          botón "Executar" para ver o que vostede programou.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Imos comezar e, cando terminarmos, vostede poderá crear o seu propio
          xogo con eses actores incríbeis que poden interagir, marcar puntos, lanzar
          microrrobôs, cerejas, panelas, centelhas e xeo... e derrotar uns aos outros.
          Depende de vostede!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Vostede consegue imaxinar se tivese que repetir algunha cousa para todo
          o sempre? Con sorte, vostede nunca terá que facer iso, porque os computadores
          son moi bos en repetir as cousas. Este é o bloque "repita infinitamente".
          Calquera cousa dentro dese bloque vai acontecer para sempre no xogo.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: Entón, se quixermos que un actor faga algo repetidamente, sen que o
          xogador teña que facer nada, imos colocar eses bloques dentro do bloque
          "repita infinitamente". Nese próximo desafío, o seu obxectivo é axudar Anna
          a andar continuamente para enriba e para baixo. Aprender como os comandos
          de repetición funcionan vai aforrar moito tempo máis tarde, cando vostede
          for crear o seu propio xogo.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: O que vostede quere ser cando crecer, Olivia? Astronauta. Vostede sabe
          o que é un programador de computador? Hmm non. Hmm o quê? Non sei ben como
          explicar, a programación de computadores é moi simples. É un conxunto de
          instrucións, como unha receita, que vostede ten que seguir paso a paso para
          obter o resultado desexado.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Eu podo alterar o número de pixels ou a lonxitude da liña usando ese
          menu. Cal era mesmo a lonxitude? Vostede pode ver as instrucións de novo
          procurando abaixo do botón executar. Aquí, eu usei o bloque avance e vou
          seleccionar 100 pixels. Podo apagar un bloque arrastrándoo para a caixa
          de ferramentas ou para a recolledora de lixo. Imos colocalo de volta.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Execute o código presionando executar. Ben, non funcionou! Vou apertar
          reiniciar e descubrir o que está errado. Vostede pode tentar facer un desafío
          cantas veces quixer, e pular desafíos e volver a eles máis tarde. Só teña
          certeza de facer o o seu mellor, e non desista. Imos agregar outro avance.
          Aínda non funcionou. Podo colocar un bloque entre outros bloques.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Imos apañar un bloque vire e colocalo entre os bloques avance. Vire
          á esquerda 45 graos. Imos executar de novo. Reiniciar, executar, legal!
          Aquí está outro desafío. Ás veces, vostede ten un código inicial para completar.
          Aquí, eu preciso agregar as lonxitudes e graos apropiados.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: Ás veces, vostede pode accidentalmente estragar o código inicial. O
          que facer nese caso? Vostede pode presionar limpar desafío e comezar de
          novo. Vou arrastrar ese bloque numérico para as distintas áreas de pixels.
          Seleccione 100 para pixels, 45 para graos e 100 para pixels de novo. Legal!
          Aquí está a abella do Code Studio. Eu preciso mover a abella para cada unha
          das flores e recadar néctar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: A primeira flor está a tres bloques de distancia, entón eu preciso de
          tres bloques avance. 1, 2, 3. Entón, un obteña néctar, despois outro obteña
          néctar. Ben, iso non funcionou! Vou colocar outro avance entre os obteña
          néctar e executar o programa de novo. Oba, funcionou! Vostede acaba de aprender
          como usar os desafíos do artista e da abella do Code Studio. Boa sorte co
          desafío do Code Studio.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: O que vostede quere ser cando crecer, Olivia? Hmm, astronauta. Vostede
          sabe o que é un programador de computador? Hmm, non. Hmmm, o quê? Non sei
          ben como explicar. A programación de computadores é moi simples. É un conxunto
          de instrucións, como unha receita. Vostede ten que seguídela paso a paso
          para obter o resultado desexado.
      2:
        image: notes/unplug1_2.png
        text: A informática é un modo de termos impacto no mundo. Poden ser vídeos
          de música, xogos ou descubrir se alguén é ou non parente de alguén. Descubrir
          os amigos das persoas. Vostede pode facer todo tipo de cousas malucas que
          na verdade salvan vidas. Eu penso que vostede debe tentar. Para min, é como
          un pincel. Eu penso que boa programación non é tan distinta de boa arte.
      3:
        image: notes/unplug1_3.png
        text: Cando eu finalmente aprendín un pouco de programación, aquela parede
          baleira se transformou en varias portas que podían ser abertas, e, é claro,
          o que vostede encontrar atrás delas é outro corredor cheo de portas. Programar
          é fácil e divertido. Vostede pode facer calquera cousa que quixer. Finalmente,
          vostede comeza a abrir portas o bastante para que a luz entre. Para min,
          un programa acabado é como unha estrutura chea de luz. Todos os cantos están
          iluminados. O número de persoas que vostede pode tocar e interagir é algo
          que o mundo nunca viu antes.
      4:
        image: notes/unplug1_4.png
        text: Nosa primeira lección nesa serie é sobre o que é a informática, o que
          un científico da computación fai, e como vostede pode ser máis responsábel
          en como usa a tecnoloxía. É unha lección moi importante, pero un pouco pesada
          no texto. Cando acabarmos, vostede poderá facer o seu propio código personalizado
          usando súas iniciais. É unha actividade divertida, e moi estimulante, porque
          o binário é unha daquelas cousas que parecen ser moi técnicas, pero que,
          cando vostede entende, é como se falase unha lingua secreta.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: A lección sobre pensamento computacional ten o obxectivo de ensinar
          a vostede como apañar un problema grande e difícil e dividídelo en varios
          problemas máis fáciles. O obxectivo desa lección é escribir un conxunto
          de instrucións que alguén poida seguir para debuxar un dos monstros incluídos
          no plano de clase.
      2:
        image: notes/unplug2_2.png
        text: Os alumnos van se dividir en grupos para escribir instrucións e entón
          van trocalas polas doutro grupo, que terá que debuxar o monstro. Os grupos
          van escribir instrucións usando as catro etapas do pensamento computacional;*
          decomposición, identificación de padróns, abstracción e algoritmos.
      3:
        image: notes/unplug2_3.png
        text: Primeiro, os grupos van dividir a tarefa, o que significa facer un plano
          de xogo. Entón, eles van procurar por padróns entre todos os monstros do
          catálogo. Cando eles se depararem coas diferenzas entre os monstros, eles
          van abstrair ou remover eses detalles. Por exemplo, un monstro do catálogo
          ten ollos Ranzinza e outro ten ollos Duende. Mais ambos teñen ollos, entón
          podemos escribir unha liña que di que o monstro ten ollos en branco.
      4:
        image: notes/unplug2_4.png
        text: Entón, os alumnos poderán escribir un conxunto de instrucións, chamado
          de algoritmo, que alista as partes dos monstros que están en branco para
          dicir de que estilo elas deben ser. Ese é o conxunto de instrucións que
          eles van pasar aos outros alumnos para recriar o seu propio monstro.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: Na programación en papel cuadriculado, axudamos a explicar como a programación
          funciona tentando axudar as persoas a recriaren debuxos usando só frechas
          e rabiscos. Unha persoa recibe un pequeno debuxo nun papel cuadriculado
          e ela precisa usar só frechas específicas para tentar describir como recriar
          ese debuxo.
      2:
        image: notes/unplug3_2.png
        text: Nesa actividade, os únicos símbolos que vostede pode usar son eses;*
          avance un cadrado, volva un cadrado, mova un cadrado para cima, mova un
          cadrado para baixo, altere para a próxima cor e cubra o seu cadrado con
          cor. Cando tivermos iso programado, podemos entregar as instrucións para
          outra persoa e ela poderá ler o código e tentar recriar a imaxe.
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: Na programación en papel cuadriculado, axudamos a explicar como a programación
          funciona tentando axudar as persoas a recriaren debuxos usando só frechas
          e rabiscos. Unha persoa recibe un pequeno debuxo nun papel cuadriculado
          e ela precisa usar só frechas específicas para tentar describir como recriar
          ese debuxo.
      2:
        image: notes/unplug4_2.png
        text: Na segunda metade da actividade, preguntamos aos alumnos de cantas formas
          distintas eles poden dobrar un pedazo de papel para crear dezaseis retángulos
          idénticos. Entón, vostede vai discutir cantas solucións poden levar ao mesmo
          resultado e por que algunhas solucións son mellores en certas situacións.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: Na programación en papel cuadriculado, axudamos a explicar como a programación
          funciona tentando axudar as persoas a recriaren debuxos usando só frechas
          e rabiscos. Unha persoa recibe un pequeno debuxo nun papel cuadriculado
          e ela precisa usar só frechas específicas para tentar describir como recriar
          ese debuxo.
      2:
        image: notes/unplug5_2.png
        text: Na segunda metade da actividade, preguntamos aos alumnos de cantas formas
          distintas eles poden dobrar un pedazo de papel para crear dezaseis retángulos
          idénticos. Entón, vostede vai discutir cantas solucións poden levar ao mesmo
          resultado e por que algunhas solucións son mellores en certas situacións.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: Esa actividade se chama programación con cartas, e ela é excelente para
          todas as idades. Como vostede aprendeu coas leccións anteriores, durante
          o contido sobre o Blockly, as instrucións "se" precisan ser avaliadas para
          sabermos se elas son certas ou falsas. Iso é condicional, e pode ser usado
          de varias formas distintas.
      2:
        image: notes/unplug6_2.png
        text: Tiramos vantaxe diso creando programas en papel que vostede executa
          usando cartas escollidas aleatoriamente. Vostede pode ter unha instrución
          "se" que di algo como;* "se a carta que vostede tirou for maior que 8, vostede
          gaña un punto. En caso contrario, o seu oponente gaña un punto". Vostede
          pode facer iso de formas máis simples ou máis complexas conforme vostede
          se sentir máis confortável.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: Vostede sabe cando vostede procura a letra dunha música e eles definen
          o refrán pronto no inicio e despois, para o resto da música, eles só fan
          referencia ao refrán? É así que vostede chama unha función.
      2:
        image: notes/unplug7_2.png
        text: Nesta lección, definimos o refrán no comezo da música e entón comezamos
          a cantar, e entendemos que a clase non canta a palabra "refrán", eles automaticamente
          volven para o inicio, onde definimos o refrán, e o cantan. Usamos iso como
          unha excelente introdución para entender o que un programa fai cando el
          define e chama unha función.
      3:
        image: notes/unplug7_3.png
        text: Usamos músicas coñecidas, como Old Macdonald, para falar sobre como
          un refrán é chamado varias veces e, ás veces, el pode ser alterado. Cando
          temos unha música como Old Macdonald, na cal certas palabras mudan, temos
          unha excelente oportunidade de introducir a idea de parámetros. Pasando
          certas palabras, vostede pode enviar informacións extras para a a súa función.
          Cando vostede tiver certeza de que todos entenderon, vostede pode apañar
          súas propias músicas e dividídelas vostede mesmo. Vexa se, xunto con toda
          a clase, vós conseguides facer iso.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Nosa lección sobre abstracción usa o concepto de madlibs, onde vostede
          basicamente insere unha lagoa nunha historia que pode ser cuberta con varias
          palabras distintas. Pegamos esa idea, desafiamos os nenos para que inventen
          súas propias palabras para súas propias historias, e realmente explicaren
          o concepto de abstracción.
      2:
        image: notes/unplug8_2.png
        text: Iso está relacionado a funcións e como vostede pode ter unha función,
          como na música do Old Macdonald, na cal vostede ten unha estrutura para
          o o seu refrán, pero tamén ten pequenas alteracións, e vostede as abstrai
          cubríndoas toda vez con a súa propia palabra. Mais ás veces vostede ten
          tres palabras que mudan, entón vostede as cobre con tres parámetros, iso
          é moi útil.
      3:
        image: notes/unplug8_3.png
        text: Vostede pode ter unha función que lide con varios problemas distintos.
          Moitas veces, as persoas van escribir funcións separadas para todos eses
          problemas, sen entender que hai só unha pequena diferenza. Se elas puidesen
          encontrar unha maneira de lidar con esa pequena diferenza, elas poderían
          reutilizar unha función varias veces, en vez de ter 14 funcións distintas.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: A programación por revezamento é unha lección extremamente divertida
          que vai moito alén da informática. Ás veces alguén está ficando un pouco
          impaciente e vostede quere mantelo atento. Esa é unha excelente forma de
          agregar un pouco de emoción á informática.
      2:
        image: notes/unplug9_2.png
        text: Vostede divide todo o mundo en dous grupos nos cales eles fican nunha
          fila e corren no estilo revezamento. A primeira persoa en cada grupo corre
          até o outro lado da sala, onde hai un papel de debuxo cuadriculado e un
          papel en branco esperando por eles. Eles escriben o primeiro paso para crear
          esa imaxe, volven correndo para a fila e o próximo xogador vai correndo
          escribir o próximo paso.
      3:
        image: notes/unplug9_3.png
        text: Esa é unha excelente maneira de pasar a idea de depuración, a necesidade
          de revisar o seu propio traballo e o traballo que as persoas fixeron antes
          de vostede. Vostede vai entender rapidamente o quón importante é ser coidadoso
          ao escribir o seu código cando un equipo enteiro depende de vostede.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: Esa actividade explica, dunha forma fácil de entender, como a internet
          funciona. Explicamos todas as terminologias que vostede irá precisar en
          termos simples, para que os alumnos poidan simular transmisións de mensaxes,
          como un e-mail.
      2:
        image: notes/unplug10_2.png
        text: Os alumnos van transmitir mensaxes mentres finxen ser un dos tres métodos
          de transmisión. Internet sen fío, DSL ou fibra ótica. Os alumnos que representan
          o wi-fi precisan equilibrar a mensaxe que eles están enviando na cabeza,
          porque o wi-fi ten a maior probabilidade de perder algunha información.
      3:
        image: notes/unplug10_3.png
        text: Os alumnos que finxen ser o DSL ou o cabo van cargar a mensaxe nas costas
          de súas mans, local con menor probabilidade de perder a información. E os
          alumnos que representan a fibra ótica van cargar a mensaxe coas dúas mans.
          Esa actividade é unha excelente forma de comprender algo que moitos de nós
          usamos todos os días.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: Entón, agora é hora de dar un paso para tras e dar unha ollada en todo
          o que vostede fixo nas últimas dezanove leccións. Esa é unha excelente hora
          para dicir aos alumnos que o que eles fixeron xa é unha gran conquista.
          Eles aprenderon máis nesas leccións do que moitos adultos saben sobre informática.
      2:
        image: notes/unplug11_2.png
        text: Discuta coa sala toda ou en grupos pequenos sobre súas leccións favoritas.
          Cando vostede ollar para todo o que aprendeu, é o momento no cal pode brillar
          a creatividade de seus alumnos. Divídaos en grupos e pidan para que eles
          creen a súa propia lección offline. Atribúa un concepto chave para cada
          grupo, como funcións ou algoritmos, e dea materiais para que eles usen.
          Peza para que cada grupo presente a súa nova actividade ou até mesmo reserve
          outro día para realizar as actividades creadas polos alumnos.
      3:
        image: notes/unplug11_3.png
        text: De todos aquí da Code.org, esperamos que vostede tivese unha TONELADA
          de diversión durante ese curso. E se o seu soño é crear o mellor novo aplicación,
          usar a programación para axudar na cura de doenzas, ou se vostede quere
          ser só un grande solucionador de problemas, ese curso foi o primeiro paso
          para alcanzar eses soños.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Ola, son Kathleen Kennedy, produtora de Star Wars, O Despertar da Forza.
          Hoxe, vostede vai traballar cun dos nosos astros, BB-8. BB-8 é un androide
          esférico. Todo o que el fai e todos os seus movementos son controlados por
          softwares de computador. A informática ten impacto sobre todas as industrias,
          do marketing á saúde, aos filmes. De traxe, centenares de enxeñeiros da
          computación traballan xuntos para crear un filme como O Despertar da Forza.
      2:
        image: notes/starwars_intro_2.JPG
        text: Ola, son Rachel Rose, engeñeira sênior de P&D na ILM, e lidero o equipo
          de animación e desenvolvemento de criaturas. No Despertar da Forza, son
          responsábel por axudar os artistas a desenvolver equipamentos que son as
          partes do personaxe que se moven e permiten a el parecer moi real nunha
          galáxia moito, moi distante.
      3:
        image: notes/starwars_intro_3.JPG
        text: Durante a próxima hora, imos crear o noso propio xogo do Star Wars.
          Imos ensinar a vostede os conceptos básicos da programación. Xeralmente,
          a programación é toda feita con texto, pero aquí imos usar bloques, para
          que vostede poida arrastrar e soltar para escribir os programas. Por tras
          diso, vostede aínda vai estar creando código. Despois que vostede examinar
          os conceptos básicos cos bloques, imos mudar para JavaScript, unha das linguaxes
          de programación máis aforrares na web.
      4:
        image: notes/starwars_intro_4.JPG
        text: Para comezar, imos traballar con Rey para programar o BB-8 para andar
          e recadar toda a sucata. Súa pantalla está dividida en tres partes. Á esquerda,
          temos a área do xogo de Star Wars, onde o código será executado. As instrucións
          para cada nivel están abaixo da área de xogo.
      5:
        image: notes/starwars_intro_5.JPG
        text: A parte do medio é onde fica a caixa de ferramentas, e cada un deses
          bloques é un comando que BB-8 pode entender.
      6:
        image: notes/starwars_intro_6.JPG
        text: O espazo en branco á dereita é chamada área de traballo, e é onde imos
          crear o noso programa.
      7:
        image: notes/starwars_intro_7.JPG
        text: Se eu arrastrar o bloque moveLeft(); para a nosa área de traballo e
          presionar Executar, o que acontece? O BB-8 se move un bloque para a esquerda.
      8:
        image: notes/starwars_intro_8.JPG
        text: E se eu quixer que BB-8 faga algo despois do moveLeft();? Podo agregar
          outro bloque ao o noso programa. Vou escoller o bloque moveUp(); e arrastralo
          para debaixo do bloque moveLeft(); até que el fique en destaque. Entón,
          vou soltalo, e os dous bloques van se encaixar.
      9:
        image: notes/starwars_intro_9.JPG
        text: Cando presiono Executar de novo, BB-8 vai obedecer aos comandos apiñados
          de enriba para baixo en a nosa área de traballo. Se vostede quixer apagar
          un bloque, simplemente remóvao da pila e arrástreo de volta para a caixa
          de ferramentas.
      10:
        image: notes/starwars_intro_10.JPG
        text: Despois que presionar Executar, vostede sempre pode presionar o botón
          Recomezar para levar BB-8 de volta ao inicio. Imos comezar!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Dentro dos bloques que temos usado existen comandos JavaScript. Actualmente,
          JavaScript é a linguaxe de programación máis popular entre os desenvolvedores
          profesionais. Bloques son un excelente modo de comezar a aprender a programar,
          e, na verdade, as mellores universidades, como Harvard e Berkeley, comezan
          a ensinar así. Mais despois que aprendermos o básico, imos escribir os códigos
          tecleando, porque iso nos torna máis rápidos.
      2:
        image: notes/starwars_typing_2.JPG
        text: Podemos teclear centenares de comandos sen ter que encontralos na caixa
          de ferramentas e arrastralos para a área de traballo. Como vostede está
          aprendendo, teclear pode ser máis lento no comezo, pero queremos que vostede
          probe.
      3:
        image: notes/starwars_typing_3.JPG
        text: No canto superior dereito da a súa área de traballo, vostede pode premer
          no botón "Mostrar texto" en calquera desafío para alterar do modo de bloques
          para o modo de programación na forma de texto.
      4:
        image: notes/starwars_typing_4.JPG
        text: Na próxima lección, imos presentalo ao modo de dixitación. Aquí, vostede
          aínda pode arrastrar o bloque da caixa de ferramentas ou pode teclear o
          nome do comando. Conforme for tecleando, vostede vai ver nomes de comandos
          posíbeis abaixo de onde está tecleando. En vez de teclear o nome enteiro
          do comando, vostede pode seleccionar un deles para ser máis rápido. No meu
          traballo, eu uso ese recurso de preenchimento automático todo o tempo cando
          estou escribindo código.
      5:
        image: notes/starwars_typing_5.JPG
        text: Cando estiver tecleando código, o computador precisa que vostede sexa
          moi preciso. A grafia e o uso de letras maiúsculas e minúsculas no nome
          do comando deben ser exactamente correctas, incluíndo as parénteses e o
          punto e vírgula. Mesmo se houber só un pequeno erro de dixitación, o BB-8
          non vai entender o código e non poderá se mover.
      6:
        image: notes/starwars_typing_6.JPG
        text: Cando vostede cometer un erro na liña, o editor vai destacalo para que
          vostede poida tentar modificar o texto e corrixídelo.
      7:
        image: notes/starwars_typing_7.JPG
        text: Se tiver problemas, vostede sempre pode recomezar co botón "Comezar
          do inicio", e pode volver ao modo de bloques a calquera momento, premendo
          no canto superior dereito. Ok, imos tentar teclear! E se cometer algún erro,
          non fique frustrado. Todo o mundo ten que tentar algunhas veces antes de
          acertar.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Ola, meu nome é Charita Carter. Son produtora creativa sênior aquí na
          Walt Disney Imagineering. Son responsábel por liderar os equipos que producen
          as atraccións que nosos convidados proban. Estamos sempre procurando modos
          de mellorar e tornar a experiencia dos nosos convidados máis agradábel,
          e a tecnoloxía é esencial para iso.
      2:
        image: notes/starwars_events_2.JPG
        text: Parabéns, vostede conseguiu! Vostede programou BB-8. Agora, penso que
          estamos prontos para algo máis difícil. Imos tentar. Agora que vostede aprendeu
          os conceptos básicos da programación, imos volver o tempo para vostede crear
          o seu propio xogo, estrelando R2-D2 e C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: Para facer un xogo, precisamos aprender sobre algo que os programadores
          de xogos usan todos os días;* os eventos. Os eventos din ao o seu programa
          que el debe prestar atención para cando algo acontece, e, cando acontecer,
          realizar unha acción.
      4:
        image: notes/starwars_events_4.JPG
        text: Algúns exemplos de eventos son;* detectar un clic do rato, o toque dunha
          tecla de dirección ou un toque na pantalla.
      5:
        image: notes/starwars_events_5.JPG
        text: Aquí, imos facer R2-D2 se mover para enriba para entregar unha mensaxe
          para un piloto rebelde, e entón se mover para baixo até o outro piloto rebelde.
          Imos usar eventos para facelo se mover cando o xogador usar as teclas de
          dirección para cima/para baixo ou os botóns para cima/para baixo.
      6:
        image: notes/starwars_events_6.JPG
        text: Usamos o bloque de evento whenUp() e encaixamos o bloque goUp() a el.
          Cando o xogador presionar a tecla de dirección para cima, o código vinculado
          ao bloque whenUp() é executado. Faremos a mesma cousa para o R2-D2 se mover
          para baixo.
      7:
        image: notes/starwars_events_7.JPG
        text: Para facer iso, usamos un comando chamado whenUp(). Cando vostede arrastrar
          o comando para fóra da caixa de ferramentas, vai ver que el comeza e termina
          con chaves en vez de punto e vírgula. Iso nos dá espazo para colocar outros
          comandos entre as chaves. Todos os comandos que colocarmos entre esas chaves
          serán executados cando o xogador presionar a frecha para cima.
      8:
        image: notes/starwars_events_8.JPG
        text: Queremos que o R2-D2 vaia para cima, entón imos colocar un bloque goUp();
          dentro do comando. E imos facer a mesma cousa para o R2-D2 ir para baixo.
      9:
        image: notes/starwars_events_9.JPG
        text: Agora, en vez de escribir anticipadamente todo o código para controlar
          o noso androide, podemos deixar R2-D2 reaccionar a eventos de botóns sendo
          presionados que o fan se mover pola pantalla.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Ola, meu nome é Alice! Eu gerencio os equipos de produto e enxeñaría
          aquí na Code.org e traballei neste titorial que vostede está vendo agora.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Vostede acaba de chegar ao último nivel. Parabéns! Vostede aprendeu
          todo o que precisa saber para crear o seu propio xogo de Star Wars. Agora,
          non hai máis instrucións nin desafíos para resolver. Vostede pode crear
          o seu propio xogo e escoller como el vai funcionar. Máis unha cousa, vostede
          desbloqueou novos sons e comandos para poder facer aínda máis.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[alumnos falando] Entón, fixemos un xogo en que, basicamente, vostede
          marca puntos cando pega puffer pigs. O truco é que sempre que vostede pega
          un puffer pig, un Stormtrooper aparece. Na verdade, a pantalla está chea
          de puffer pigs e, cando tocar 10.000 deles, vostede vence.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[alumnos falando] Fixemos un xogo en que vostede non pode perder, e
          todo que vostede mata lle dá puntos. No meu programa, eu inverti os botóns,
          entón sempre que vostede preme para cima, o seu personaxe vai para baixo,
          e cando preme para a dereita, el vai para a esquerda. É ben difícil! Ás
          veces vostede ten unha vantaxe, unha vantaxe inxusta cando é o desenvolvedor
          do xogo. Eu conseguín? Si!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: Cando terminar o seu xogo, seleccione compartir para recibir un link
          que vostede poderá compartir con seus amigos ou abrir para xogar o seu xogo
          no o seu móbil. Divírtase!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: Ola, son Kathleen Kennedy, produtora de Star Wars;* O Despertar da Forza.
          Hoxe, vostede vai traballar cun dos nosos astros, o BB-8. BB-8 é un androide
          esférico. Todo o que el fai e cada movemento que el fai son controlados
          por softwares de computador. A informática ten impacto sobre todas as industrias,
          do marketing á saúde, aos filmes. De traxe, centenares de enxeñeiros da
          computación traballan xuntos para crear un filme como O Despertar da Forza.
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Ola, son Rachel Rose, engeñeira sênior de P&D na ILM, e lidero o equipo
          de animación e desenvolvemento de criaturas. No Despertar da Forza, son
          responsábel por axudar o artista a desenvolver equipamentos que son as partes
          do personaxe que se moven e permiten a el parecer moi real nunha galáxia
          moito, moi distante.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: Durante a próxima hora, imos crear o noso propio xogo do Star Wars,
          que vai ensinar a vostede os conceptos básicos da programación. Xeralmente,
          a programación é toda feita con texto, pero aquí imos usar bloques, para
          que vostede poida arrastrar e soltar para escribir os programas. Para comezar,
          imos traballar con Rey para programar BB-8 para se mover e recadar toda
          a sucata.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Súa pantalla está dividida en tres partes principais. Á esquerda está
          a área do xogo, onde o seu programa será executado. As instrucións para
          cada nivel están escritas abaixo da área do xogo.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: A parte do medio é onde fica a caixa de ferramentas, e cada un deses
          bloques é un comando que BB-8 pode entender.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: O espazo en branco á dereita é chamado de área de traballo, e é onde
          imos crear o noso programa.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Se eu arrastrar o bloque moveLeft(); para a nosa área de traballo, o
          que acontece? BB-8 se move un bloque para a esquerda.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: E se eu quixer que BB-8 faga algo despois do moveLeft();? Podo agregar
          outro bloque ao o noso programa. Vou escoller o bloque moveUp(); e arrastralo
          para debaixo do bloque moveLeft(); até que el fique en destaque. Entón,
          vou soltalo, e os dous bloques van se encaixar. Cando eu presionar Executar
          de novo, BB-8 vai seguir os comandos que están apiñados en a nosa área de
          traballo de enriba para baixo.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Se vostede quixer apagar un bloque, simplemente remóvao da pila e arrástreo
          de volta para a caixa de ferramentas.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Despois que presionar Executar, vostede sempre pode presionar o botón
          Recomezar para levar BB-8 de volta ao inicio. Imos comezar!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Ola, meu nome é Charita Carter. Son produtora creativa sênior aquí na
          Walt Disney Imagineering. Son responsábel por liderar os equipos que producen
          as atraccións que nosos convidados proban. Estamos sempre procurando modos
          de mellorar e tornar a experiencia dos nosos convidados máis agradábel,
          e a tecnoloxía é esencial para iso.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Parabéns, vostede conseguiu! Vostede programou BB-8. Agora, penso que
          estamos prontos para algo máis difícil. Imos tentar. Agora que vostede aprendeu
          os conceptos básicos da programación, imos volver o tempo para vostede crear
          o seu propio xogo, estrelando R2-D2 e C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: Para facer un xogo, precisamos aprender sobre algo que os programadores
          de xogos usan todos os días;* os eventos. Os eventos din ao o seu programa
          que el debe prestar atención para cando algo acontece, e, cando acontecer,
          realizar unha acción.
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Algúns exemplos de eventos son;* detectar un clic do rato, o toque dunha
          tecla de dirección ou un toque na pantalla.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Aquí, imos facer R2-D2 se mover para enriba para entregar unha mensaxe
          para un piloto rebelde, e entón se mover para baixo até o outro piloto rebelde.
          Imos usar eventos para facelo se mover cando o xogador usar as teclas de
          dirección para cima/para baixo ou os botóns para cima/para baixo.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Usamos o bloque de evento whenUp() e encaixamos o bloque goUp() nel.
          Cando o xogador presionar a tecla de dirección para cima, o código do bloque
          whenUp() é executado. Faremos a mesma cousa para facer R2-D2 se mover para
          baixo. Agora, en vez de escribir anticipadamente todo o código para controlar
          o noso androide, podemos deixar R2-D2 reaccionar a eventos de botóns sendo
          presionados que o fan se mover pola pantalla.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Paso a paso, o seu xogo está ficando máis interativo.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Ola, meu nome é Alice! Eu gerencio os equipos de produto e enxeñaría
          aquí na Code.org e traballei neste titorial que vostede está vendo agora.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Vostede acaba de chegar ao último nivel. Parabéns! Vostede aprendeu
          todo o que precisa saber para crear o seu propio xogo de Star Wars. Agora,
          non hai máis instrucións nin desafíos para resolver. Vostede pode crear
          o seu propio xogo e escoller como el vai funcionar. Máis unha cousa, vostede
          desbloqueou novos sons e comandos para poder facer aínda máis.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[alumnos falando] Entón, fixemos un xogo en que, basicamente, vostede
          marca puntos cando pega puffer pigs. O truco é que sempre que vostede pega
          un puffer pig, un Stormtrooper aparece. Na verdade, a pantalla está chea
          de puffer pigs e, cando tocar 10.000 deles, vostede vence.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[alumnos falando] Fixemos un xogo en que vostede non pode perder, e
          todo que vostede mata lle dá puntos. No meu programa, eu inverti os botóns,
          entón sempre que vostede preme para cima, o seu personaxe vai para baixo,
          e cando preme para a dereita, el vai para a esquerda. É ben difícil! Ás
          veces vostede ten unha vantaxe, unha vantaxe inxusta cando é o desenvolvedor
          do xogo. Eu conseguín? Si!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Cando terminar o seu xogo, seleccione compartir para recibir un link
          que vostede poderá compartir con seus amigos ou abrir para xogar o seu xogo
          no o seu móbil. Divírtase!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Meu nome é Jens Bergensten, pero me chaman de Jeb. Son o desenvolvedor
          xefe do Minecraft aquí na mojang.con. Penso que eu tiña 11 ou 12 anos cando
          comecei a programar porque quería facer xogos. Un dos amigos do meu pai
          me dixen que para facer xogos vostede precisa aprender a programar. Foi
          así que eu comecei. Gústame proxectar e descubrir a arquitetura das cousas.
          É diso que eu máis gústame no Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Durante a próxima hora vostede vai aprender o básico da informática,
          programando a Alex ou o Steve para andaren por un pedazo simulado dun mundo
          de Minecraft.
      3:
        image: notes/mc_intro_3.JPG
        text: A programación tradicional acostuma ser en texto, pero hoxe imos usar
          blockly;* un sistema que usa bloques que vostede pode arrastrar e soltar
          para escribir programas. Por baixo dos panos, vostede está creando código
          en JavaScript.
      4:
        image: notes/mc_intro_4.JPG
        text: Os conceptos que vostede vai aprender son o que programadores usan todos
          os días e son a base da informática. Aquí na Mojang, usamos os mesmos conceptos
          para facer o Minecraft funcionar.
      5:
        image: notes/mc_intro_5.JPG
        text: ' Antes de comezar, vostede vai escoller o seu personaxe. Eu vou escoller
          a Alex. Imos construír o código para un programa que vai axudala a andar
          pola pantalla.'
      6:
        image: notes/mc_intro_6.JPG
        text: Súa pantalla é dividida en tres partes principais. Na esquerda, está
          a súa área de xogo do Minecraft, onde o programa será executado. As instrucións
          para cada nivel son escritas abaixo.
      7:
        image: notes/mc_intro_7.JPG
        text: Esta zona intermedia é a caixa de ferramentas, e cada un destes bloques
          é un comando que dirixe as accións da Alex.
      8:
        image: notes/mc_intro_8.JPG
        text: O espazo branco á dereita é chamado área de traballo e é aquí que imos
          construír o noso programa.
      9:
        image: notes/mc_intro_9.JPG
        text: Se arrastrarmos o bloque "andar diante" até a nosa área de traballo
          e premermos en Executar, o que acontece? Alex avanza un espazo na reixa.
      10:
        image: notes/mc_intro_10.JPG
        text: E se quixermos facer algunha cousa tras ela avanzar un espazo? Podemos
          agregar máis un bloque ao o noso programa. Vou escoller o bloque "virar
          á dereita" e vou arrastralo abaixo do meu bloque "andar diante" até que
          esa liña laranxa apareza. Entón, vou soltalo e os dous bloques van formar
          un grupo. Cando mandamos Executar novamente, a Alex vai seguir os comandos
          apiñados de enriba para baixo en a nosa área de traballo.
      11:
        image: notes/mc_intro_11.JPG
        text: E se vostede quixer apagar un bloque, basta arrastralo da pila de volta
          para a caixa de ferramentas.
      12:
        image: notes/mc_intro_12.JPG
        text: Para desfacer súas mudanzas e volver ao estado inicial da fase, use
          o botón Comezar de novo, no canto superior dereito da área de traballo.
          Máis unha cousa, está vendo ese triángulo nos bloques de virar? Sempre que
          vostede vir eses triángulos, significa que pode escoller unha opción distinta.
          Imos comezar a programar!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Son Lydia Winters, directora de marca da Mojang, e fixemos un joguinho
          chamado Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Miña actividade preferida no Minecraft é explorar. Adoro me aventurar
          nas cavernas e ver o que encontro. Como non son programadora, é moi empolgante
          pasar polas leccións do Minecraft e aprender un pouco sobre programación.
      3:
        image: notes/mc_repeat_3.JPG
        text: A última fase precisaba de moitos bloques "andar diante". Sería moito
          máis fácil se puidésemos dicir ao computador para realizar o comando para
          avanzar catro ou cinco veces. Para a nosa sorte, computadores son moi bos
          en repetir comandos con loops de repetición.
      4:
        image: notes/mc_repeat_4.JPG
        text: Ao construír o Minecraft, usamos loops de repetición para colocar todos
          os materiais iniciais e crear un novo mundo. San miles e miles de bloques.
          Tamén usamos loops nos detalles, por exemplo, para facer os pés da Alex
          iren para fronte e para tras cando ela anda. Loops de repetición son unha
          parte poderosa da programación.
      5:
        image: notes/mc_repeat_5.JPG
        text: A noite está chegando, entón nas próximas fases, imos construír unha
          casa para a nosa seguranza. Imos usar o bloque de repetición para facer
          iso con facilidade.
      6:
        image: notes/mc_repeat_6.JPG
        text: Para construír unha parede para a nosa casa, podemos dicir á Alex para
          avanzar e colocar tábuas catro veces, ou podemos dicir a ela para avanzar
          e colocar unha tábua, entón apañar ese comando e usar o bloque de repetición
          para que ela realice esa acción varias veces. Agora, imos premer no bloque
          de repetición e dicir a ela cantas veces queremos que ela realice esta acción.
          Agora, imos construír a nosa casa antes que a noite chegue! Divírtase.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Agora imos aprender sobre comandos "se". Comandos "se" son unha parte
          fundamental de aprender a programar. Eles axudan un computador a tomar decisións.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Todos os computadores usan comandos "se", inclusive meu teléfono. Por
          exemplo, cando desbloqueo meu teléfono, el executa un código onde se eu
          teclear o sinal correcto, o teléfono será desbloqueado. En caso contrario,
          el mostra unha mensaxe de erro.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Vostede pode usar comandos "se" en o seu código para facer o Steve e
          a Alice reaccionaren ao que viren no mundo. Por exemplo, se tiver unha rocha
          na fronte deles, eles poden virar á esquerda. Por exemplo, se tiver unha
          rocha na fronte deles, eles poden virar á esquerda. Ou virar á dereita se
          eles bateren nunha árbore.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Neste caso, non queremos caer na lava. É fácil facer planos contra a
          lava. Ela pode ser vista na pantalla. Mais e a lava que non podemos ver,
          so as pedras?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Tras minerar a pedra, precisamos verificar se existe lava naquel lugar
          antes de avanzar. Se tiver lava alí, queremos colocar unha pedra na fronte
          de o noso personaxe antes de avanzar. Así, podemos avanzar en seguranza.
          Hora de minerar máis! E lémbrese de usar o comando "se" para andar con coidado.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Parabéns! Vostede aprendeu os bloques básicos da informática.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Agora, vostede pode usar eses bloques para facer a súa propia creación.
          Non hai máis instrucións ou quebra-cabezas para resolver. Vostede pode construír
          o que quixer. Vostede escolle.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[alumnos falando] Agora é para valer. Tosar. Eu fixen un L usando facho.
          Eu fixen un A usando tábuas de eucalipto. Deu correcto, deu correcto. Construímos
          unha casa de lã!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Cando terminar a a súa creación, escolla compartir para recibir un link
          para enviar aos seus amigos. Divírtase!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Parabéns! Vostede aprendeu os bloques básicos da informática.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Agora, vostede pode usar eses bloques para facer a súa propia creación.
          Non hai máis instrucións ou quebra-cabezas para resolver. Vostede pode construír
          o que quixer. Vostede escolle.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[alumnos falando] Agora é para valer. Tosar. Eu fixen un L usando facho.
          Eu fixen un A usando tábuas de eucalipto. Deu correcto, deu correcto. Construímos
          unha casa de lã!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Cando terminar a a súa creación, escolla compartir para recibir un link
          para enviar aos seus amigos. Divírtase!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: Se vostede quixer facer o seu propio xogo, iso é realmente fácil. Todo
          o que vostede precisa son algúns conceptos básicos de programación e vostede
          pode comezar a xogar o xogo que vostede creou.
      2:
        image: notes/gumball_intro_2.JPG
        text: Vostede ten un xogo favorito? Imos dar un paso para a creación de xogos
          tal como ese en o PlayLab. Bos xogos teñen unha historia, e toda historia
          ten personaxes. Os personaxes fan cousas como falar, se mover e interagir
          uns cos outros. Talvez até mesmo marcar puntos con base nas regras do xogo.
          Hoxe, imos aprender como facer todas esas cousas, unha a unha, con personaxes
          divertidos e imos crear un xogo do cero, que pode ser compartido e xogado
          nun móbil.
      3:
        image: notes/gumball_intro_3.JPG
        text: Hoxe, imos aprender a facer todas esas cousas, unha por unha, con personaxes
          divertidos e imos crear un xogo do cero, que pode ser compartido e xogado
          nun móbil.
      4:
        image: notes/gumball_intro_4.JPG
        text: Súa pantalla está dividida en tres partes principais. Á esquerda está
          o espazo do xogo, onde o seu programa será executado. As instrucións para
          cada nivel están escritas abaixo.
      5:
        image: notes/gumball_intro_5.JPG
        text: Esa área do medio é a caixa de ferramentas e cada un deses bloques é
          un fragmento de código.
      6:
        image: notes/gumball_intro_6.JPG
        text: O espazo branco á dereita é chamado área de traballo e é aquí que imos
          construír o noso programa.
      7:
        image: notes/gumball_intro_7.JPG
        text: Para comezar, vostede terá que conectar seus bloques ao bloque laranxa
          "cando executar". É posíbel conectar diversos bloques uns aos outros, arrastrándoos
          até ver a liña amarela e, entón, eles se encaixam.
      8:
        image: notes/gumball_intro_8.JPG
        text: Nese primeiro desafío, imos facer os personaxes diciren algo conectando
          o bloque "diga" ao bloque "cando executar" e tecleando a súa mensaxe. Cando
          vostede colocar os bloques no lugar, presione o botón Executar e vexa o
          que programou.
      9:
        image: notes/gumball_intro_9.JPG
        text: Comece e, cando terminar, vostede vai poder crear o seu propio xogo,
          con todos os tipos de xogadores que poden interagir, marcar puntos, xogar
          cousas e facer os outros desapareceren. Vostede é quen decide!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Agora, imos aprender un pouco sobre algo que todos os programadores
          de xogos usan todos os días;* os eventos. Un evento di ao o seu programa
          que el debe ouvir cando algo acontece e, cando esa cousa acontece, el realiza
          unha acción.
      2:
        image: notes/gumball_events_2.JPG
        text: Algúns exemplos de eventos son;* detectar un clic do rato, o toque dunha
          tecla de dirección ou un toque na pantalla.
      3:
        image: notes/gumball_events_3.JPG
        text: Aquí, imos facer o seu personaxe dicir algunha cousa cando o xogador
          premer nel. Imos usar o bloque "cando premido" e anexar o bloque "diga"
          á el. Cando o xogador premer, todos os bloques anexados a ese bloque serán
          executados.
      4:
        image: notes/gumball_events_4.JPG
        text: Hai tamén os bloques "cando a frecha estiver presionada". Se vostede
          conectar os bloques "mova" a eles, vostede pode comezar a mover seus personaxes
          para cima, para baixo, para esquerda e para a dereita coas frechas do teclado.
          Aos poucos, o seu xogo está ficando cada vez máis interativo.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Vostede consegue imaxinar se tivese que repetir algo para todo o sempre?
          Felizmente vostede nunca vai precisar facer iso, porque os computadores
          son realmente bos en repetir cousas.
      2:
        image: notes/gumball_repeat_2.JPG
        text: Ese é o bloque "repita infinitamente". Todo dentro dese bloque vai acontecer
          para sempre no xogo. Se queremos que un personaxe faga algo repetidamente
          sen que o xogador faga nada, imos colocar eses bloques dentro do bloque
          "repita infinitamente".
      3:
        image: notes/gumball_repeat_3.JPG
        text: Nese próximo desafío, o noso obxectivo é axudar o personaxe a realizar
          algo continuamente. Aprender sobre o funcionamento dos comandos de repetición
          vai axudar vostede a economizar moi tempo no futuro, cando vostede crear
          o seu propio xogo.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: Se vostede quixer facer o seu propio xogo, iso é realmente fácil. Todo
          o que vostede precisa son algúns conceptos básicos de programación e vostede
          pode comezar a xogar o xogo que vostede creou.
      2:
        image: notes/iceage_intro_2.JPG
        text: Vostede ten un xogo favorito? Imos dar un paso para a creación de xogos
          tal como ese en o PlayLab. Bos xogos teñen unha historia, e toda historia
          ten personaxes. Os personaxes fan cousas como falar, se mover e interagir
          uns cos outros. Talvez até mesmo marcar puntos con base nas regras do xogo.
          Hoxe, imos aprender como facer todas esas cousas, unha a unha, con personaxes
          divertidos e imos crear un xogo do cero, que pode ser compartido e xogado
          nun móbil.
      3:
        image: notes/iceage_intro_3.JPG
        text: Hoxe, imos aprender a facer todas esas cousas, unha por unha, con personaxes
          divertidos e imos crear un xogo do cero, que pode ser compartido e xogado
          nun móbil.
      4:
        image: notes/iceage_intro_4.JPG
        text: Súa pantalla está dividida en tres partes principais. Á esquerda está
          o espazo do xogo, onde o seu programa será executado. As instrucións para
          cada nivel están escritas abaixo.
      5:
        image: notes/iceage_intro_5.JPG
        text: Esa área do medio é a caixa de ferramentas e cada un deses bloques é
          un fragmento de código.
      6:
        image: notes/iceage_intro_6.JPG
        text: O espazo branco á dereita é chamado área de traballo e é aquí que imos
          construír o noso programa.
      7:
        image: notes/iceage_intro_7.JPG
        text: Para comezar, vostede terá que conectar seus bloques ao bloque laranxa
          "cando executar". É posíbel conectar diversos bloques uns aos outros, arrastrándoos
          até ver a liña amarela e, entón, eles se encaixam.
      8:
        image: notes/iceage_intro_8.JPG
        text: Nese primeiro desafío, imos facer os personaxes diciren algo conectando
          o bloque "diga" ao bloque "cando executar" e tecleando a súa mensaxe. Cando
          vostede colocar os bloques no lugar, presione o botón Executar e vexa o
          que programou.
      9:
        image: notes/iceage_intro_9.JPG
        text: Comece e, cando terminar, vostede vai poder crear o seu propio xogo,
          con todos os tipos de xogadores que poden interagir, marcar puntos, xogar
          cousas e facer os outros desapareceren. Vostede é quen decide!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Agora, imos aprender un pouco sobre algo que todos os programadores
          de xogos usan todos os días;* os eventos. Un evento di ao o seu programa
          que el debe ouvir cando algo acontece e, cando esa cousa acontece, el realiza
          unha acción.
      2:
        image: notes/iceage_events_2.JPG
        text: Algúns exemplos de eventos son;* detectar un clic do rato, o toque dunha
          tecla de dirección ou un toque na pantalla.
      3:
        image: notes/iceage_events_3.JPG
        text: Aquí, imos facer o seu personaxe dicir algunha cousa cando o xogador
          premer nel. Imos usar o bloque "cando premido" e anexar o bloque "diga"
          á el. Cando o xogador premer, todos os bloques anexados a ese bloque serán
          executados.
      4:
        image: notes/iceage_events_4.JPG
        text: Hai tamén os bloques "cando a frecha estiver presionada". Se vostede
          conectar os bloques "mova" a eles, vostede pode comezar a mover seus personaxes
          para cima, para baixo, para esquerda e para a dereita coas frechas do teclado.
          Aos poucos, o seu xogo está ficando cada vez máis interativo.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Vostede consegue imaxinar se tivese que repetir algo para todo o sempre?
          Felizmente vostede nunca vai precisar facer iso, porque os computadores
          son realmente bos en repetir cousas.
      2:
        image: notes/iceage_repeat_2.JPG
        text: Ese é o bloque "repita infinitamente". Todo dentro dese bloque vai acontecer
          para sempre no xogo. Se queremos que un personaxe faga algo repetidamente
          sen que o xogador faga nada, imos colocar eses bloques dentro do bloque
          "repita infinitamente".
      3:
        image: notes/iceage_repeat_3.JPG
        text: Nese próximo desafío, o noso obxectivo é axudar o personaxe a realizar
          algo continuamente. Aprender sobre o funcionamento dos comandos de repetición
          vai axudar vostede a economizar moi tempo no futuro, cando vostede crear
          o seu propio xogo.
