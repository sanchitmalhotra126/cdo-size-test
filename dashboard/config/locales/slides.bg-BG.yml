"bg":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Добре дошли в първия си час по програмиране! Нека да се потопим направо
          в първото си предизвикателство.
      2:
        image: notes/hoc1_2.jpg
        text: Ние ще  използваме Blockly. Това е визуален език за програмиране, където
          трябва само да плъзнете и пуснете блоковете за да напишете код.
      3:
        image: notes/hoc1_3.jpg
        text: Кодът се пише, но Blockly е визуален език. Всеки блок, обаче, отговаря
          на един ред от "истински" код.
      4:
        image: notes/hoc1_4.jpg
        text: Ще научите основите на компютърните науки, концепции, които се използват
          навсякъде дори за създаването на приложения за контролиране на марсоходът
          на Марс.
      5:
        image: notes/hoc1_5.jpg
        text: Програмата е набор от инструкции за вашия компютър, които  да следва.
      6:
        image: notes/hoc1_6.jpg
        text: Целта на вашата първа програма е да посочите на ядосаната птица пътят,
          по който да достигне и удари зеленото прасе.
      7:
        image: notes/hoc1_7.jpg
        text: От лявата страна е лабиринтът, където се изпълнява вашата програма.
          Инструкциите за всеки пъзел са под лабиринта.
      8:
        image: notes/hoc1_8.jpg
        text: В средата на кутията с инструменти има команди за ядосаната птица. Използвайте
          ги,  за да изградите вашия код.
      9:
        image: notes/hoc1_9.jpg
        text: Вдясно е вашата работна област, където ще можете да плъзгате блокове
          от кутията с инструменти. За да изтриете блок просто го плъзнете в кошчето.
      10:
        image: notes/hoc1_10.jpg
        text: Всеки блок е една инструкция. Ако плъзнете "продължи напред" блок във
          вашата работна област и натиснете "Старт", птицата ще се премести едно квадратче  напред
          в лабиринта.
      11:
        image: notes/hoc1_11.jpg
        text: За да направите повече от едно действие, можете да плъзнете много блокове
          във вашата работна област и да ги прикрепите заедно. Птицата ще извърши
          командите отгоре надолу.
      12:
        image: notes/hoc1_12.jpg
        text: Ако стартирате програмата и искате да поправите кода си за да опитате
          отново, натиснете бутона "Начално състояние".
      13:
        image: notes/hoc1_13.jpg
        text: Да вървим да хванем тези прасета!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Здравейте аз съм младши! На всеки състезателен екип са му  необходими
          компютърни учени, за да спечели. Те анализират данни от колата за да може
          тя да се подобри.
      2:
        image: notes/stage5_2.jpg
        text: В тези пъзели вие ще бъдете художник, който чертае линия зад себе си,
          където и да отиде.
      3:
        image: notes/stage5_3.jpg
        text: Този блок се казва "премества напред със 100 пиксела." Пикселите са
          много малки точки на вашия екран.
      4:
        image: notes/stage5_4.jpg
        text: Този блок се казва, "завърта надясно на 90 градуса." Той ще завърти
          вашия художник във определената посока както "обърни" блоковете при ядосаните
          птици.
      5:
        image: notes/stage5_5.jpg
        text: Кликнете върху стрелката в някой от тези блокове, за да промените броя
          на движенията на художника напред или при въртене. Поиграйте си с блоковете,
          за да се запознаете с техните възможности.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Здравейте аз съм Паола! В тези пъзели Вие сте фермер, който трябва да
          заравни нивата си за да започне засаждане на семена.
      2:
        image: notes/stage9_2.jpg
        text: Трябва да премахнете всички купчинки и запълните всички дупки.
      3:
        image: notes/stage9_3.jpg
        text: Новите блокове премахват една лопата мръсотия от купчината и запълват
          с една лопата дупката.
      4:
        image: notes/stage9_4.jpg
        text: Купчинките и дупките са с различни размери, така че вие трябва да кажете
          на фермера колко лопати да използва.
    flappy_intro:
      1:
        image: бележки/flappy01.jpg
        text: Здравейте, аз съм Кейти! Едно от най-вълнуващите неща в компютърните
          науки е, че компютърните програми може да бъдат интерактивни.
      2:
        image: бележки/flappy02.jpg
        text: Всеки път, когато някой кликне, докосне, или пише на компютър или на
          телефон - това действие създава СЪБИТИЕ, а определен програмен код (МАНИПУЛАТОР
          НА СЪБИТИЕ) решава какво да се случи, когато СЪБИТИЕТО възникне.
      3:
        image: бележки/flappy03.jpg
        text: 'Например, може да използваш МАНИПУЛАТОР НА СЪБИТИЕ, който казва "при
          кликване с мишката, изпълни звук" '
      4:
        image: бележки/flappy04.jpg
        text: Чувал ли си за играта FlappyBird? С помощта на манипулатори на събития,
          ще се научим как да програмираме наша собствена версия на FlappyBird!
      5:
        image: бележки/flappy05.jpg
        text: Програмите, които ще създадеш, ще се състоят от блокове, които ще приплъзнеш
          и присъединиш. Тези блокове представляват команди за компютъра и зад всеки
          от тях стои истински програмен код.
      6:
        image: бележки/flappy06.jpg
        text: Ако огледаш работната площ (в дясната част на екрата), ще забележиш
          няколко зелени блока, които сме попълнили за теб - това са "манипулатори
          на събития".
      7:
        image: бележки/flappy07.jpg
        text: Ако искаш птицата да ПЛЕСНЕ с крила при КЛИКВАНЕ с мишката, ще трябва
          да присъединиш блока "плесни с крила" към манипулатора на съответното събитие.
          Така всеки път, когато кликнеш с мишката по време на игра, птица ще плесне
          с криле.
      8:
        image: бележки/flappy08.jpg
        text: При всеки пъзел от тази поредица, ние ще добавим нови събития като зелени
          блокове на работния плот, а ти ще решиш какви други блокове да добавиш в
          отговор на тези събития.
      9:
        image: бележки/flappy09.jpg
        text: Когато видиш стрелка за падащо меню като тази, това означава, че можеш
          да промениш настройките - като например какъв звук да се изпълни, когато
          птицата удари земята.
      10:
        image: бележки/flappy10.jpg
        text: Във финалния пъзел ще успееш да създадеш своя собствена игра и да я
          споделиш със своите приятели. Забавлявай се!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Здравейте аз съм Марк! Нека да обясня какво представляват командите
          за повторения. Тези команди казват на компютъра да повтаря отново и отново
          набор от действия, хиляди или дори милиони пъти.
      2:
        image: notes/hoc2_2.jpg
        text: В този пъзел ние трябва да накараме птицата да се придвижи напред с
          5 квадратчета, за да стигне до прасето.
      3:
        image: notes/hoc2_3.jpg
        text: Можем да използваме новите блокове за повторение за да си помогнем.
      4:
        image: notes/hoc2_4.jpg
        text: Вместо да плъзгаме 5 "върви напред" блокове...
      5:
        image: notes/hoc2_5.jpg
        text: Ние ще поставим "върви напред" блока вътре в блока  за повторение и
          ще напишем число, за да кажем колко пъти да се повтори действието.
      6:
        image: notes/hoc2_6.jpg
        text: 'това е важно: можете да поставите повече от една команда в блока за
          повторене.'
      7:
        image: notes/hoc2_7.jpg
        text: Насладете се на използването на вашия нов блок за повторение!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Здравейте аз съм Крис. Преди да постъпя в Маями Хийт, бях в Джорджия
          Tech за да уча компютърни науки. Нека опитаме нашия нов " повтаряй докато"
          блок.
      2:
        image: notes/hoc3_2.jpg
        text: Какво става, ако ние не знаем колко далеч птицата трябва да се премести
          за да стигне до прасето?
      3:
        image: notes/hoc3_3.jpg
        text: Ако сложим "предвижи се напред" блок вътре в блока, "повтаряй докато",
          птицата ще продължи напред, докато достигне прасето (или ще се блъсне в
          стената).
      4:
        image: notes/hoc3_4.jpg
        text: 'И това е важно: както преди, можем да сложим няколко блока вътре в
          блока, "повтори докато", и всички те ще бъдат повтаряни.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Здравейте аз съм Бил! Нека да научим нова основна концепция: "Ако".
          С нея ние учим компютрите да вземат решения.'
      2:
        image: notes/hoc4_2.jpg
        text: Вие използвате "ако" концепцията всеки ден. Преди да отидете навън всяка
          сутрин, вие си казвате, ако навън вали, трябва да си взема яке.
      3:
        image: notes/hoc4_3.jpg
        text: Ние можем да кажем на зомбито да провери дали има път наляво, и ако
          то открие път, да се придвижи в тази посока.
      4:
        image: notes/hoc4_4.jpg
        text: За да напишем код за това, нека да поставим "Ако" блок и в него да вмъкнем
          "Завий наляво".
      5:
        image: notes/hoc4_5.jpg
        text: Сега ако сложим "върви напред" блок над него и блок за повторение около
          всичко, всеки път, когато зомбито се движи, то ще проверява дали има път
          наляво. Командата за повторение е от решаващо значение, за да проверите
          за завой на всяка стъпка.
      6:
        image: notes/hoc4_6.jpg
        text: '"Ако" твърденията са много важни за компютърните науки. Една от първите
          програми, която съм написал е игра на кръстчета и нули, и съдържаше "ако"
          твърдение: ако другият човек е на път да победи, компютърът трябва да блокира
          мястото, което му позволило да спечели.'
      7:
        image: notes/hoc4_7.jpg
        text: Забавлявайте се с помощта на "Ако" блока!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Здравейте моето име е Салони. Използвам компютърни науки, за да помогна
          за решаването на проблемите в здравеопазването и медицината. Нека да сe
          научим  да използваме "ако иначе" блока. Той изглежда като блокът "Ако",
          но има допълнителна част в края, която казва "иначе".
      2:
        image: notes/hoc5_2.jpg
        text: Ако сложим блок за предвижване в мястото, където пише "ако"  и "завърти
          наляво" блок където пише "друго" това означава, че зомбито ще избира между
          две опции. Ако има път напред, зомбито ще се движи напред, или (ако липса
          такава възможност)- зомбито ще завие наляво.
      3:
        image: notes/hoc5_3.jpg
        text: Точно като при "Ако" блока, можем да сложим "ако иначе" блокира вътре
          в блокове за повторение, така че зомбито ще продължава да се движи и "ако
          иначе" блокът ще прави проверка, ако има някъде да се завие.
      4:
        image: notes/hoc5_4.jpg
        text: Сега, преведете зомбитата до местата, където те трябва да стигнат!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: '"Ако иначе" твърдението е решение между две неща. Нека видим как можем
          да използваме "ако иначе" с нашия приятел Scrat катерицата.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Този блок изглежда по същия начин като "Ако" блока, но е добавена допълнителна
          част накрая, която казва "иначе". Ако поставите блок за движение, където
          се казва "ако" и блок за завиване наляво, където се казва "иначе", това
          означава, че Scrat катерицата ще се движи напред ако е има път напред. Ако
          няма път напред, Scrat ще завие наляво.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Това е вземане на решение за правене на едно от двете действия въз основа
          на това решение. И точно като "Ако" блоковете, можете да поставите "Ако
          иначе" блоковете в  блокове за повторение.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Сега, нека да помогнем на Scrat катерицата да вземе жълъда!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Здравейте аз съм Брина, инженер от Instagram. Функция е няколко реда
          с код, които искаме да използваме отново и отново, така че вместо да повтаряме
          изписването на кода, ние използваме само един блок.
      2:
        image: notes/stage13_2.jpg
        text: Ще научите как да дефинирате функции. Дефинициите имат звезда в ъгъла
          на блока си. Името на функцията е написано на най-горния ред.
      3:
        image: notes/stage13_3.jpg
        text: Блоковете, които влизат вътре в дефиницията ни казват какво прави тя.
          Дефиницията, която ще използваме се нарича "запълни 5" и тя се състои от
          блок за повторение и блок за запълване.
      4:
        image: notes/stage13_4.jpg
        text: Дефиницията се намира на работната област, но нашият фермер няма да
          изпълни функцията, докато ние не поставим блок за функция "запълва 5" от
          категорията функции.
      5:
        image: notes/stage13_5.jpg
        text: 'Нека върнем "fun" обратно във "FUNкцията!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Здравейте аз съм Макинде! Нека да научим за "докато" блока.
      2:
        image: notes/stage9_6.jpg
        text: '"Докато блокът" ще повтаря действие, докато се отчете, че действието
          е извършено.'
      3:
        image: notes/stage9_7.jpg
        text: Например ако фермерът е стъпил върху купчина, той ще продължи да я премахва
          с по 1 лопата, докато все още има купчина под него.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Здравейте аз съм Трина, и работя за Pixar. Работила съм в няколко филми,
          включително и в Шрек.
      2:
        image: notes/stage11_2.jpg
        text: Това е нашият нов "брояч" за цикли. Той ще извършва действия отново
          и отново, а вие можете да направите така, че действията да се променят леко
          всеки път.
      3:
        image: notes/stage11_3.jpg
        text: В този пример, нашият "брояч" на цикли  казва "ще броя с брояч от 50
          до 90  през 10" и вътре в него, ние имаме нашият "начертай квадрат" блок.
          Плъзнете блока "брояч" от раздела "Променливи" в мястото за "дължина".
      4:
        image: notes/stage11_4.jpg
        text: Това означава, че художникът ще начертае квадрат, който има 50 пиксела
          дължина на страните, тогава той ще добави 10, и ще начертае квадрат с дължина
          на страните 60 пиксела. Тогава ще продължи докато начертае квадрат със страни
          90. Така ще имаме квадрати със страни 50, 60, 70, 80 и 90 пиксела.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Здравейте аз съм Джанет и съм инженер в Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Как ще начертаете куп триъгълници  със различни размери на страните
          им?
      3:
        image: notes/stage15_3.jpg
        text: Можем да напишем целия този код на ръка или можем да използваме функция
          с параметри.
      4:
        image: notes/stage15_4.jpg
        text: За да добавите параметър на функцията, щракнете върху синята звезда.
          След това плъзнете "въведете име" във "вмъкни" блока.
      5:
        image: notes/stage15_5.jpg
        text: Тогава, ако  напишете "дължина" на мястото на "х" и натиснете "Enter",
          вие ще създадете нов параметър "дължина" за вашата функция.
      6:
        image: notes/stage15_6.jpg
        text: След това кликнете върху звездата. Сега кликнете върху категорията "променливи"
          и плъзнете блок "дължина" в "премества напред" блок във вашата дефиниция
          на функция. Плъзнете стария блок за номер от външната страна.
      7:
        image: notes/stage15_7.jpg
        text: За да използвате вашата функция с параметри, щракнете върху категорията
          функции и изберете "Начертай триъгълник с дължина" функция.
      8:
        image: notes/stage15_8.jpg
        text: Сега можете да използвате математически блок за да въведете различни
          числа и да начертаете триъгълници с различни размери.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Поздравления! С последната загадка, която разгадахте, вие просто написахте
          код, който може да каже на всеки робот как да си придвижи, без да се губи
          в лабиринта или тунела. Това можете да повторите и със зомбито, птицата,
          марсохода или дори самоуправляващ се автомобил.
      2:
        image: notes/hoc6_2.jpg
        text: Основните понятия, които използвахте са в основата на всяка програма
          или приложение, които сте ползвали. Изучихме циклите на "повтори няколко
          пъти" и "повторение, докато" и  командите "ако" и "ако / иначе".
      3:
        image: notes/hoc6_3.jpg
        text: Ако ви харесва  първия час на кодиране, посетете code.org за да продължите
          образованието си в компютърните науки! След като завършите нашият 20 часов
          курс, вие ще сте усвоили основите на програмирането и може да се научите
          как да създавате програми за телефони, инструкции за роботи, игри, и др.
      4:
        image: notes/hoc6_4.jpg
        text: 'Технологията променя всичко, което правим и няма значение, ако сте
          млад или стар: програмирането е забавно, това е творчество  и всеки може
          да се научи!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Очаквайте скоро показването на бележки!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Здравейте моето име е Линдзи. Модел съм, създавам и пиша мои собствени
          приложения. Нека да използваме кода, за да се присъединим към Анна и Елза,
          докато те опознават магията и красотата на леда.
      2:
        image: notes/frozen1_2.jpg
        text: Вие ще създадете снежинки и десени от следите на зимните кънки и ще
          направите зимна приказка, която след това можете да споделите с приятелите
          си.
      3:
        image: notes/frozen1_3.jpg
        text: В следващия час ще се научите на основите на кодирането. Традиционното
          програмиране обикновено е текстово, но ние ще използваме Blockly, който
          използва визуални блокове, които можете да плъзнете и пуснете, за да пишете
          програми. Така дори студентите изучават основите. Под капака, Вие все още
          създавате код.
      4:
        image: notes/frozen1_4.jpg
        text: Програмата е набор от инструкции, които казват на компютъра какво да
          прави. Нека построим код, или програма, която ще помогне на Елза да създаде
          проста линия или отсечка. Ще използваме това по-късно, за да създадем по-сложни
          модели.
      5:
        image: notes/frozen1_5.jpg
        text: Екрана е разделен на три основни части. В ляво е повърхността на леда,
          където ще изпълнявате вашата програма. Инструкциите за всяко ниво са написани
          точно под повърхността.
      6:
        image: notes/frozen1_6.jpg
        text: Тази средна област е кутията с инструменти, и всеки от тези блокове
          е действие, което Елза и Анна могат да извършат.
      7:
        image: notes/frozen1_7.jpg
        text: Празно пространство вдясно се нарича работната област, и това е мястото,
          където ние ще изградим нашата програма. За да се местите по повърхността
          на леда, ще използвате блок за преметване.
      8:
        image: notes/frozen1_8.jpg
        text: Тук, блокът за преместване казва, "премества напред със 100 пиксела."
          Когато натиснете "Старт", какво се случва? Елза се придвижва напред на екрана,
          точно 100 пиксела в действителност! Пикселите са много малки квадратчета
          на екрана на компютъра.
      9:
        image: notes/frozen1_9.jpg
        text: Друг блок, който имаме в този пъзел казва "завърти надясно на 90 градуса."
          И когато ние използваме този блок, караме Елза да се завърта на определени
          градуси. Можете да опитате блока и да  завъртите Елза на колкото искате
          градуси. Ъгълът се измерва от пътя пред Elsa. Така че това е завой на 90
          градуса. И това е завой на 120 градуса.
      10:
        image: notes/frozen1_10.jpg
        text: Не забравяйте, че можете да промените броя на пикселите и градусите
          чрез натискане на стрелките до тях.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Здравейте аз съм Паола! Компютрите са наистина добри в повтарянето на
          действия. Можете да броите от 10, 20 или 100. Но един компютър може да брои
          до един милиард или трилиони. Той няма да се отегчи и ще му отнеме само
          няколко секунди. Дали това е броене, или чертеж, или нещо подобно--компютрите
          могат да повтарят неща стотици или дори милиарди пъти.
      2:
        image: notes/frozen2_2.jpg
        text: В програмирането, ние наричаме това цикъл. Цикъл е, когато се повтаря
          код отново и отново. За следващия пъзел целта ви е да помогнете на Анна
          да създаде квадрат с блок за повторение.
      3:
        image: notes/frozen2_3.jpg
        text: Всички блокове с код, които поставяте вътре в блока за повторение, ще
          се повтарят последователно, толкова пъти, колкото искате.
      4:
        image: notes/frozen2_4.jpg
        text: За да нарисувате квадрат, можете да използвате "премества напред" и
          "завърта надясно" блок 4 пъти. Но по-лесен начин е да кажете на компютъра
          да "премества напред" и "завърта надясно на 90 градуса" веднъж и след това
          той да повтаря тази двойка действия 4 пъти. За да направите това, трябва
          да поставите двойката действия в блок за повторение.
      5:
        image: notes/frozen2_5.jpg
        text: Не забравяйте, че можете да промените номера в "Повтори" блока  и той
          ще  повтаря това, което е вътре в него много пъти.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Здравейте аз съм Крис Бош. Аз съм професионален баскетболист, и се учех
          да кодирам в колежа.
      2:
        image: notes/frozen3_2.jpg
        text: Едно от най-важните понятия по компютърни науки е как да се дефинират
          нови команди. Повечето компютърни езици имат само около 100 думи или команди.
          И наистина, изкуството и магията е в определянето на собствени нови думи,
          създадени на основата на тези градивни блокове.
      3:
        image: notes/frozen3_3.jpg
        text: След като сте научили компютъра как да направи едно действие, с помощта
          на тази последователност от команди, можете да дадете собствено име за това
          действие, така че е лесно да го повторите по-късно. Когато дефинирате своя
          собствена команда и й давате име, вие създавате функция.
      4:
        image: notes/frozen3_4.jpg
        text: Здравейте аз съм Джес. При програмирането с блокове, трябва да използвате
          функции за набор от действия, които искате да използвате много пъти. Например
          ако сте написали код, за да създадете квадрат.
      5:
        image: notes/frozen3_5.jpg
        text: 'Можете да дефинирате това като функция, наречена "чертае квадрат." '
      6:
        image: notes/frozen3_6.jpg
        text: Сега имате нов блок, който можете да използвате няколко пъти за да създадете
          няколко квадратчета.
      7:
        image: notes/frozen3_7.jpg
        text: Много от простите форми може да се използват за създаване на по-сложни
          модели. В следващия пъзел кода, който наскоро написахме да  направи един
          кръг е достъпен за вас като нова функция, която може да направи кръгове
          с различни размери. Можете ли да използвате това, за да помогнете на Елза
          да създаде сложен и красив модел в снега?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Досега сте създавали анимация или история, която прави точно същото
          нещо всеки път, когато го стартирате. Сега можете да направите една интерактивна
          игра, която да играете.
      2:
        image: notes/playlab_2.png
        text: Там е "когато стрелка" блок и блок "премести актьор". Можете да поставите
          тези блокове заедно, за да движите актьорите с клавишите със стрелки.
      3:
        image: notes/playlab_3.png
        text: И има някои блокове, които правят неща, когато участниците се сблъскат
          или е кликнато върху им. Проверете ги и се забавлявайте!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Ние ще създаваме игри като използваме Игрална Лаборатория. Добрите игри
          имат история, а всяка история си има герои. Ще се научим как да караме нашите
          герои като вещици, извънземни и животни да говорят, да се движат и да комуникират
          едни с други. До края на този урок, ще можеш да създаваш игра от подръчни
          средства и ще я споделяш със твоите приятели.
      2:
        image: notes/playlab_intro_2.png
        text: Екрана е разделен на 3 основни части. Вляво е игралното поле, където
          вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под него.
      3:
        image: notes/playlab_intro_3.png
        text: Средната зона е кутията с инструменти, и всеки от тези блокове е част
          от код. Празното пространство вдясно се нарича работната област и това е
          мястото, където ние ще изградим нашата програма.
      4:
        image: notes/playlab_intro_4.png
        text: За начало, присъединете вашите блокове към оранжевия "при стартиране"
          блок. Можете да свържете множество блокове заедно като ги приплъзнете един
          към друг, докато не видите жълтата линия; след това ги пуснете и те ще се
          присъединят заедно.
      5:
        image: notes/playlab_intro_5.png
        text: В този първи пъзел, нашият актьор е пингвин и ние ще го накараме да
          казва "Здравей!" като плъзнем "казва" блок, и го свържем към "при стартиране"  блока.
          Ще напишем в него "Здравей." Ние можем да движим пингвина с помощта на блоковете
          за движение. След като сте поставили блоковете на място, натиснете бутона
          Старт, за да видите какво сте програмирали.
      6:
        image: notes/playlab_intro_6.png
        text: Започнете и до края, ще можете да създадете своя собствена игра с всички
          видове герои, които могат да си взаимодействат, щастливи или тъжни, да печелят
          точки, или да хвърлят огнени топки, или дори да изчезват от полето. Това
          е всичко е за вас и играта, която искате да направите.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Време е да научим неща, които всички програмисти на игри използват всеки
          ден. Те се наричат манипулатори на събития. Манипулаторът на събитие казва
          на програмата ви да слуша за събитие, което може да се случи. Когато събитието
          се случи, програмата ви отговаря на събитието като извършва дадено действие.
      2:
        image: notes/playlab_events_2.png
        text: Някои примери на събития слушат за щракване с мишката, бутон със стрелка
          или натискане на екрана.
      3:
        image: notes/playlab_events_3.png
        text: Тук ние ще да се накараме космическия робот да каже "Поздрави, земляни!",
          когато играчът кликне върху него. Ние ще използваме "когато е кликнато върху"
          блок и "казва" блока, които ще прикрепим към "при стартиране" блока. Когато
          играчът кликне върху робота, всичко, прикрепено към "когато е кликнато върху"
          събитийния блок ще се извърши. Какво ли би казало вашето извънземно?
      4:
        image: notes/playlab_events_4.png
        text: Има и "когато стрелка" блокове. Ако свържете блокове "премести" с тях,
          можете да движите актьорите нагоре, надолу, наляво, или надясно. Стъпка
          по стъпка играта става по-интерактивна.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Това е "повтаря завинаги" блокът. Ако поставите друг блок вътре в него,
          той ще се повтаря завинаги в играта.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Ако искаме актьора да  направи нещо няколко пъти, се налага да поставим
          тези блокове вътре в блока, "повтаря завинаги".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: В този пъзел нашата цел е да помогнем на магьосника да патрулира по
          границите на кралството, наляво и надясно. Научете как  работят командите
          за повторение, това ще ви спести един тон време по-късно, когато създавате
          своя собствена игра.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where
          he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: These are jump blocks. When you use these, your artist moves but doesn't
          draw, so use these to jump to the next grey line.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Aren't bees super cool? In this next set of puzzles, your goal is to
          help the bee get to the flowers and get nectar from the flowers and fly
          over to the honeycomb to make honey. You'll need to use the "get nectar"
          and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We
          know how much nectar is in the red flowers, by the little number in the
          corner. So be sure to get all the nectar from the flower before you move
          forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or
          more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: If you're able to get all the nectar and make all the honey, you succeed
          and go to the next level. Otherwise, you need to try this puzzle again.
          Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: A loop is a repetition of activity. So going into a hive to inspect,
          I look at a frame and then I put it back, so I repeat that same activity
          multiple times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C1_bee_loops_2.png
        text: In this level, we want the bee to collect three nectars from the flower.
          Instead of using three "get nectar" blocks, you're going to use the repeat
          block to get nectar three times. Hit "Run" and see if you got it right.
          Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: This lesson is called the big event. It's all about how we can control
          our programs and actually change the way a program runs on the fly using
          events, like the push of a button or the click of a mouse.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: For this lesson, you'll be controlled with a paper remote control. It's
          just like a real-live video game.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: An event is an action  that causes something to happen. It's like when
          you click the button on a mouse and a webpage loads. That's an event. When
          you touch your screen on a tablet to scroll, that's an event also. Events
          are a great way of letting the user direct your program whenever they need
          or want to.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Things happen that we all respond to. We feel hungry and we go to the
          fridge. We hear the mailman come and he puts our mail in the mailbox  and
          then we go get our mail. Those are just like the events of pushing a button
          or moving a joystick. They are something that happens that triggers us to
          do something.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: In video games, there's an event called "Update" and it happens 30 or
          60 times a second. For videogame programmers that's almost more important
          as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: The main event we're watching for is that "Update" tick happening. And
          then we check the joystick in the tick. So we say, "Oh, has somebody pushed
          the button this frame? Yes or no?" Without events, the player couldn't move,
          you couldn't jump, you wouldn't be able to control what's going on. The
          videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: In sand sculpture you've got to know that failure is part of the program.
          But if you're persist, it's just going to get nothing but better and more
          exciting for you.Persistence is the name of the game. Stay with it, you'll
          love it.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: This lesson is called building a foundation. In this lesson, we'll work
          on a task that is meant to be really difficult. You will figure out how
          to make a structure at least as tall as one of these cups and it's got to
          be strong enough to hold the weight of a book.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: There might be times that our creation doesn't work out. There might
          be times that we get frusrated and want to give up. There might be a lot
          of those moments. But if we keep on trying, give it our best shot over and
          over again, then we're sure to get it before long.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistence is all about hanging in there when you really want to give
          up. If you want to create something new and different, there's going to
          be a lot of failures along the way.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: The trick to persistence is choosing to keep on going and learn from
          your failures instead of quitting because you're frustrated. Frustration
          actually just means there's something wonderful around the corner. So don't
          quit before you get to it. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work,
          there is something we use in both dances and in programming lightsuits.
          And that is loops! Loops are repeating an action over and over.
      2:
        image: notes/C1_getting_loopy_2.png
        text: When you repeat something multiple times, like my actions to keep the
          hula hoop spinning, I'm performing a loop of that action. This is a loop.
          This is a loop. And this is a loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Today we're going to have a dance party. We'll act out loops with a
          new dance. The Iteration. We're going to learn about loops using a dance.
          You will learn a couple of easy steps and repeat them over and over to complete
          the dance.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands
          behind your head. Put your hands on your waist. Lift your left hand up.
          Lift your right hand up. Pretty simple, right? You will discover that you
          can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: We actually do use loops in our dancing. The dancers are wearing computers,
          all in the same network. I might loop the lights through to the same dancers
          over and over again. In the loop I might have an iteration where I'll say
          you want to go loop through these six dancers over and over again and then
          within the loop you want to increase the speed of the light. And that's
          all created through loops. Loops are important in computer science because
          they make our work shorter and easier.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: This lesson is called Happy Maps. Today we're gonna help our furry little
          friend Flurb get to her fruit.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Make your Flurb go to your fruit. To do this you'll need to figure out
          which way the Flurb needs to go and direct her with arrows. In order for
          the Flurb to get to the apple, what direction does the Flurb have to go?
          Line to make it go up.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Create your algorithm by gluing arrows next to the map that you're trying
          to solve. The second one it's the same but it's going down.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: It's like programming with paper. And that's it!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging is finding and fixing problems. There are lots of ways to
          debug problems. One of the easiest is to move step by step until where you
          find where something goes wrong. Here I'm trying to do a back handspring
          on the beam but I keep falling off.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I walked through each part step by step and realized where my mistake
          was. I wasn't putting my hands on the beam correctly. So I tried another
          back handspring on the beam with my new hand position and I got it. I was
          really glad I debugged my back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: To learn about debugging, we start with a set of blocks already on the
          stage. You'll notice that these blocks won't get you to the goal. We need
          to debug the solution and fix it. What went wrong? You'll notice that you
          needed to keep going west one more block.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Let's fix this by adding another west block and hitting run to see if
          you got it right. Yay, you got it!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle
          and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: You need to drag the blocks over from the toolbox to the workspace.
          Make sure it's under the "when run" block and when you think you've got
          the right solution, then you can click "Run" and watch the bird go to the
          pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: To get the bird to the pig in this level... rather than drag three North
          blocks on to the workspace, you will use the "repeat" block. Drag the "repeat"
          block on to the workspace and enter the number 3. Then drag the "move North"
          block into the "repeat" block and hit "Run" to see if you got it right.
          Congratulations, you got it!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: But the smiley is face down and only one person knows how to get there.
          Let's get this program started.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: A program is an algorithm that has been coded into something that can
          be run by a machine. Most of us think of a program as something that we
          write for a computer. Programs are really good for that but they're also
          helpful in other places. You can make your own game or even program a robot
          to do things for you.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: My name is Jeremiah. Hi! I am seven years old. I love playing on my
          mom's computer but I always get permission first. "Mom, can I go on the
          computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: I love my mom's computer because I can go on the internet. The internet
          is kind of like your neighborhood. You can visit cool places, you can talk
          to family and friends and you can learn lots of new things.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Yesterday, I visited a zoo that's near my house. I saw a baby zebra.
          I took her picture and changed the color of her stripes, then added a hat
          and added it to my collection of wacky animals. Awesome! Later, I went to
          a place far far away. I visited Kenya. That's a country in Africa. Lots
          of zebras live there.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Sometimes on the internet I talk to peeople I know, like my grandma
          who lives in another state. Hi grandma! She's making me cookies that she'll
          send me for my birthday. "Yummy, I wish the internet had smellorama!" I
          can talk to different people on the internet, like my cousin but I only
          talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street
          in your neighborhood, you also have to be careful when you go online. Here
          are three rules to remember. Rule number 1: Always ask your parents first.
          Rule number 2: Only talk to people you know. Rule number 3: Stick to places
          that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to
          log on again to see where I can visit next.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Today we're going to learn about Pair Programming. In pair programming
          you work as a team. Why should two people use one computer? Because two
          heads are better than one. In pair programming you and your partner are
          going to sit down together at one computer and you are both going to work
          on the same project.
      2:
        image: notes/C1_pair_programming_2.png
        text: In pair programming, one person is the driver and the other person is
          the navigator, just like driving a car. The driver sits at the computer
          and is the one using the keyboard and mouse or touchscreen and controlling
          the main actions of the computer. The other person is the navigator. The
          navigator helps the driver by answering the driver's questions and pointing
          out potential problems or mistakes.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communication is key to successful pair programming. No insults, be
          respectful, don't be a bossy navigator, because nobody likes a backseat
          driver. You and your partner should always be talking. The driver can explain
          what she or he is doing. And the navigator can help suggest what to do next.
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver
          focuses on the details. Both roles are important. Pair programming is all
          about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: Computers can be really smart but they can only understand you if you
          tell them exactly what you want step by step. The great thing about algorithms
          is that if you follow the instructions in order, you can do something that
          you didn't know how to do ahead of time. It's like following a recipe.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: The cat's always been afraid of the dog and what if the cat figures
          out that the dog is trying to be nice? The "when run" block starts everything.
          The "move" block will move your character and the "say" block will make
          your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: This is the "when actors collide" block which you can link up to the
          other blocks.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: I was making the dog come over and say "Hi" but then the cat got scared
          so it ran away. "Ahh" If there was more time, it would have been a happy
          ending. The end!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee.
          As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: See if you can spell the word they give you in the box below the stage.
          But bee careful! Moving the wrong direction will add letters you don't want.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In this example, your goal is going to be to move the bird to get the
          pig. Now, we're going to be able to use the repeat block in order to be
          able to do this very easily. You can either do this by giving the computer
          a move forward command five times in order to advance the bird one step
          each time to the pig or you can just tell the computer to move forward once,
          and then tell it to repeat that five times and it'll do the same thing.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: In order to do this, you drag your move forward command and then you
          put it inside the repeat block. And you can click on it and tell it how
          many times you  to repeat the block to tell it how many steps you want it
          to take forward.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: One more thing is you can put as many commands as you want inside the
          repeat block. So in this example, you're telling it to move forward and
          turn left, which it'll do five times. Have fun!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C2_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is
          something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Let's debug this code by slowing down the speed and watching it as it
          goes through each block step by step.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, there's the problem! The cat's whiskers are 75 pixels long, not
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: An algorithm is a list of instructions for completing a task. We'll
          follow this set of instructions to make the bowl. Algorithms are really
          helpful when you need someone else to understand how to do something.
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A loop is a repetition of activity. Going into a hive to inspect, I
          look at a frame, and then I put it back. I repeat that same activity multiple
          times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "Run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Досега сте създавали анимация или история, която прави точно същото
          нещо всеки път, когато го стартирате. Сега можете да направите една интерактивна
          игра, която да играете.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: There are some new blocks to try out. There's the "when arrow" block
          and the "move actor" block. You can put these blocks together to move the
          actors around with the arrow keys. And there are some blocks that do stuff
          when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
