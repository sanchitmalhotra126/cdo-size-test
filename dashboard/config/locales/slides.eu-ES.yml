"eu":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Ongi etorri zure lehen kode ordura! Goazen bada zure lehen programazio
          esperientzian sakontzera.
      2:
        image: notes/hoc1_2.jpg
        text: Blockly erabiliko dugu, blokeak arrastatu eta askatuz kodea idazten
          duen programazio lengoaia bisuala.
      3:
        image: notes/hoc1_3.jpg
        text: Normalean, programatu tekleatuz egiten da, baina Blockly bisuala da.
          Bloke bakoitzak "benetako" kode lerro bat adierazten du.
      4:
        image: notes/hoc1_4.jpg
        text: Konputazio zientzien oinarriak ikasiko dituzu. Kontzeptu hauek appak
          egiteko edota Mars rover-a kontrolatzeko erabiltzen dira.
      5:
        image: notes/hoc1_5.jpg
        text: Programa bat, zure ordenagailuak jarraituko duen agindu multzo bat da.
      6:
        image: notes/hoc1_6.jpg
        text: Zure lehenengo programaren helburua, Angry Bird labirintoan zehar gidatzea
          da txerri berdea harrapatzeko.
      7:
        image: notes/hoc1_7.jpg
        text: Ezkerreko aldea zure programa exekutatuko den labirintoa da. Jarraibideak
          labirintoaren azpian daude.
      8:
        image: notes/hoc1_8.jpg
        text: Erdiko tresna kutxak Angry Bird-entzako aginduak ditu. Kodea eraikitzeko
          erabiliko dituzu.
      9:
        image: notes/hoc1_9.jpg
        text: Eskuinaldean lan eremua dago. Bertara tresna kutxako blokeak arrastatuko
          dituzu zure programa eraikitzeko. Bloke bat ezabatzeko, iskinean dagoen
          zakarrontzira arrastatu.
      10:
        image: notes/hoc1_10.jpg
        text: Bloke bakoitza instrukzio bat da. "aurrera mugitu" blokea zure lan eremura
          mugitzen baduzu eta "Hasi" sakatzen baduzu, gure txoria espazio bat mugituko
          da labirintoan.
      11:
        image: notes/hoc1_11.jpg
        text: Ekintza bat baino gehiago egiteko, bloke asko arrastatu ditzakezu zure
          lan eremura eta denak batera elkartu. Txoriak aginduak egikarituko ditu
          goitik beherako ordenan.
      12:
        image: notes/hoc1_12.jpg
        text: Zure kodea konpondu eta beste saiakera bat egin nahi baduzu, "Berrabiarazi"
          botoia sakatu.
      13:
        image: notes/hoc1_13.jpg
        text: Goazen txerri horiek harrapatzera!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Kaixo, JR naiz! Edozein kotxe lasterketak informatikariak behar ditu
          irabazteko. Kotxeen datuak aztertzen dituzte azkarragoak egiteko.
      2:
        image: notes/stage5_2.jpg
        text: Ariketa hauetan, pasatzen den lekutik lerro bat marraztuko duen artista
          izango zara.
      3:
        image: notes/stage5_3.jpg
        text: Bloke honek "mugitu aurrera 100 pixel" esaten du. "Pixelak" zure pantaila
          osatzen duten puntu txikiak dira.
      4:
        image: notes/stage5_4.jpg
        text: Bloke honek "biratu 90 gradu eskuinerantz" esaten du. Honek, zure artista
          "biratu" blokeak dioen gradu kopurua bira araziko du, labirintoko ariketetan
          gertatzen zen bezalaxe.
      5:
        image: notes/stage5_5.jpg
        text: Bloketako gezietan klikatu ezkero, gure artista zenbateko kopuruan aurrera
          mugitzen edo biratzen duen aldatu ahal izango duzu. Bloke berri hauekin
          trebatzeko jolastu beraiekin.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Kaixo, Paola naiz! Ariketa hauetan, zelaia guztiz berdindu behar duen
          baserritarra izango zara.
      2:
        image: notes/stage9_2.jpg
        text: Menditxoak kentzen eta zuloak betetzen lagundu behar diozu.
      3:
        image: notes/stage9_3.jpg
        text: Bloke berriek menditxo batetik palakada bat lur kendu eta zulo bat lur
          palakada batez beteko dute.
      4:
        image: notes/stage9_4.jpg
        text: Menditxoak eta zuloak tamaina ezberdinetakoak dira, beraz baserritarrari
          zenbat palakada erabili behar dituen esan beharko diozu.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Kaixo, Katie naiz! Informatikaren gauzarik interesgarrienetakoa, sortzen
          ditugun programak elkarreragileak izan daitezkeela da.
      2:
        image: notes/flappy02.jpg
        text: Ordenagailu edo telefono batean norbaitek klikatu, pantaila ukitu edo
          tekleatzen duen unean, honek GERTAERA bat sortzen du, eta badago kode bat
          erabakitzen duena zer egin GERTAERA bat jazotzen denean.
      3:
        image: notes/flappy03.jpg
        text: 'Adibidez, GERTAERA-KONTROLATZAILE bat, "Sagua klikatzean, jo soinu
          bat" izan daiteke '
      4:
        image: notes/flappy04.jpg
        text: Noizbait entzun duzu FlappyBird jokoari buruz? Gertaera kontrolatzaileak
          erabiliz, gure FlappyBird bertsio propioa programatzen ikasiko dugu!
      5:
        image: notes/flappy05.jpg
        text: Kodea idaztea, blokeak arrastatu eta askatuz egingo dugu, bloke hauetako
          bakoitza, ordenagailuak ulertuko dituen agindu ezberdinak ordezkatzen du.
          Azken finean, bloke hauetako bakoitzak, programa kode lerroak dira.
      6:
        image: notes/flappy06.jpg
        text: 'Lan eremuan, aurrez beteta dauden zenbait bloke berde aurkituko dituzu,
          hauek "gertaera kontrolatzaileak" dira '
      7:
        image: notes/flappy07.jpg
        text: Sagua klikatzean txoriak HEGALDI bat egitea nahi baduzu, "HEGALDI" blokea
          gertaera kudeatzailea egokiari elkartuz egin dezakezu, horrela, sagua klikatzen
          duzun bakoitzean txoriak hegoak eragingo ditu.
      8:
        image: notes/flappy08.jpg
        text: Atal honetako ariketa bakoitzean, bloke berde itxura duten gertaera
          mota berriak ikusiko ditugu, zuk erabakiko beharko duzu zein bloke diren
          egokiak gertaera horiei erantzuteko.
      9:
        image: notes/flappy09.jpg
        text: Honelako gezitxo bat ikusten duzunean, horrek esan nahi du aukerak aldatu
          ditzakezula - flappyk lurra jotzean egiten duen soinua adibidez.
      10:
        image: notes/flappy10.jpg
        text: Azken ariketa bezala, zure gustuko jokoa sortu eta zure lagunekin partekatu
          ahal izango duzu. Ondo pasa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Kaixo, Mark naiz! Ikas dezagun begiztei buruz. Begiztek, edozein ekintza
          multzo, behin eta berriro errepikatzeko balio dute, bai milaka edo baita
          milioika aldiz ere.
      2:
        image: notes/hoc2_2.jpg
        text: Ariketa honetan, txoria 5 aldiz aurrera mugiarazi nahi dugu txerriarengana
          iristeko.
      3:
        image: notes/hoc2_3.jpg
        text: Gure lana errazteko, "errepikatu" bloke berria erabili dezakegu.
      4:
        image: notes/hoc2_4.jpg
        text: 5 "mugitu aurrera" bloke arrastatu beharrean...
      5:
        image: notes/hoc2_5.jpg
        text: '"aurrera mugitu" blokea "errepikatu" blokearen barruan jarri dezakegu,
          eta blokean, zenbakiz adierazi zenbat aldiz errepikatu nahi dugun.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Hau garrantzitsua da: "errepikatu" bloke baten barruan agindu bat baino
          gehiago jarri ditzakezu.'
      7:
        image: notes/hoc2_7.jpg
        text: Ondo pasa "errepikatu" bloke berria erabiliz!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Kaixo, Chris naiz. Miami Heat taldean jokatu aurretik, informatika ikasi
          nuen Georgia Tech unibertsitatean. Probatu dezagun "errepikatu arte" bloke
          berria.
      2:
        image: notes/hoc3_2.jpg
        text: Eta, txoria txerriarenganaino iristeko zenbat mugitu behar duen jakingo
          ez bagenu?
      3:
        image: notes/hoc3_3.jpg
        text: '"errepikatu harik eta" bloke baten barruan "Mugitu aurrera" bloke bat
          sartzen badugu, txoria aurrera mugituko da txerriarenganaino iritsi ARTE
          (edo horma baten kontra jo arte).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Hau garrantzitsua da: "errepikatu harik eta" blokearen barruan bloke
          asko sar ditzakegu, eta sartutako errepikatuko dira.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Kaixo, Bill naiz! Ikas dezagun oinarrizko kontzeptu bat: "baldin" aginduak.
          Horiei esker hartzen dituzte konputagailuek erabakiak.'
      2:
        image: notes/hoc4_2.jpg
        text: Zuk zeuk egunero erabiltzen dituzu "baldin" aginduak. Goizero kalera
          irten baino lehen, zera esaten duzu BALDIN kanpoan euria badago, xira jantzi
          beharko dut.
      3:
        image: notes/hoc4_3.jpg
        text: Zonbiari agindu diezaiokegu begiratzea ea ezker alden bidea dagoen,
          eta ezkerrerako bidea topatzen BALDIN badu, noranzko horretara biratzeko
          esan diezaiokegu.
      4:
        image: notes/hoc4_4.jpg
        text: Hau egiteko kodea idazteko, "baldin" blokea arrastatuko dugu eta haren
          barruan "biratu ezkerrera" bloke bat jarri.
      5:
        image: notes/hoc4_5.jpg
        text: Orain, horren gainean "mugitu aurrera" bloke bat jartzen badugu, eta
          guztiaren inguruan "errepikatu" bloke bat, zonbia mugitzen den bakoitzean
          begiratuko du ea ezkerretara bidea dagoen eta biratuko du. "Errepikatu"
          agindua funtsezkoa da urrats bakoitzean biratu daitekeen begiratzeko.
      6:
        image: notes/hoc4_6.jpg
        text: '"Baldin" aginduak oso garrantzitsuak dira programazioan. Nire lehenengo
          programetako bat "hiru lerroan" jolasa izan zen, eta bazegoen "baldin" agindu
          bat, hau esaten zuena: BALDIN beste jokalaria irabazteko zorian dago, kokatu
          nire pieza besteak ez irabazteko tokian.'
      7:
        image: notes/hoc4_7.jpg
        text: Ongi pasa "baldin" blokea erabiltzen!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Kaixo, Saloni naiz. Programazioa erabiltzen dut arazoei soluzioak bilatzeko,
          osasungintzan eta medikuntzan. Ikas dezagun "baldin bestela" blokea. "baldin"
          blokea bezalakoa da, baina atal gehigarri bat dauka bukaeran, "bestela"
          atala.
      2:
        image: notes/hoc5_2.jpg
        text: '"Mugitu aurrera" bloke bat jartzen badut "egin" dioen tokian eta "biratu
          ezkerrera" bloke bat "bestela" dioen tokian, horrek esan nahi du zonbiak
          bi aukera izango dituela mugitzeko. BALDIN bidea libre badago aurrera joateko,
          orduan zonbia aurrera mugituko da, BESTELA (hau da, aurrera joateko bidea
          ez badago libre) zonbiak ezkerrera biratuko du.'
      3:
        image: notes/hoc5_3.jpg
        text: '"Baldin" blokearekin bezala, "baldin bestela" blokeak ere jar ditzakegu
          "errepikatu" bloke baten barruan; horrela, zonbia ez da geldituko eta "baldin
          bestela" blokeak detektatuko du norantz mugitu daitekeen.'
      4:
        image: notes/hoc5_4.jpg
        text: Orain eraman ditzagun zonbi horiek haien tokira!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Baldin-bestela agindu bat bi aukeren arteko erabaki bat da. Ikus dezagun
          nola erabil dezakegun baldin-bestela agindua gure adiskide Scrat urtxintxarekin.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Bloke hau "baldin" blokearen antzekoa da, baina honek badu bigarren
          zati bat "bestela" dioena. "mugitu aurrera" bloke bat jartzen badut "egin"-en
          ondoren, eta "biratu ezkerrera" bloke bat "bestela"-ren ondoren, horrek
          zera esan nahi du, Scrat urtxintxa aurrera mugituko da aurrean bide irekia
          baldin badu; bestela, aurrean oztoporen bat baldin badu, Scrat ezkerrera
          biratuko da.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Erabaki bat hartu eta erabaki horretan oinarrituz bi ekintzetako bat
          aukeratzean datza. Eta, "baldin" blokeekin gertatzen zen bezala, "baldin-bestela"
          blokeak ere jar daitezke "errepikatu" bloke baten barnean.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Orain lagun diezaiogun Scrat urtxintxari ezkurra lortzen!
    function:
      1:
        image: notes/stage13_1.jpg
        text: 'Kaixo! Brina naiz, ingeniaria Instagram enpresan. Funtzio bat hauxe
          da: behin eta berriro erabili nahi dituzun kode lerro batzuen sekuentzia
          bat, eta kode lerro horiek behin eta berriro idatzi beharrean, bloke berri
          batean bildu ditzakezu eta, aurrerago behar duzunean, bloke hori erabili.'
      2:
        image: notes/stage13_2.jpg
        text: Orain, funtzioak nola definitzen diren ikasiko dugu. Funtzioen definizioek
          izartxo bat dute izkinan. Funtzioaren izena lerroaren goiko aldean idazten
          da.
      3:
        image: notes/stage13_3.jpg
        text: Definizioaren barruan dauden blokeek adierazten digute zer egiten duen
          funtzioak. Adibidez, funtzio honen definizioaren izena "bete 5" da eta haren
          barruan "errepikatu" bloke bat eta "bete" bloke bat daude.
      4:
        image: notes/stage13_4.jpg
        text: Definizioa lan eremuan dago, baina gure baserritarrak ez du funtzioa
          exekutatuko, "bete 5" funtzio-blokea funtzioen kategoriatik arrastatzen
          ez dugun bitartean.
      5:
        image: notes/stage13_5.jpg
        text: 'Egin dezagun jolas funtzioekin! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Kaixo! Makinde naiz. Ikas dezagun "bitartean blokea." '
      2:
        image: notes/stage9_6.jpg
        text: '"Bitartean blokea"k barruan jartzen duzuna egingo du goiko adierazpena
          EGIA den BITARTEAN.'
      3:
        image: notes/stage9_7.jpg
        text: Adibidez, baserritarra menditxo baten gainean baldin badago, palakada
          bat ateratzen jarraituko du bere azpian menditxorik geratzen den BITARTEAN.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Kaixo! Trina naiz eta Pixar enpresan egiten dut lan. Film askotan egin
          dut lan, Shrek barne.
      2:
        image: notes/stage11_2.jpg
        text: Hau da gure "kontagailu" begizta berria. Behin eta berriro beteko ditu
          aginduak, baina begizta bakoitzean aldaketa txikiak ere sartu ditzake agindu
          horietan.
      3:
        image: notes/stage11_3.jpg
        text: Adibide honetan, gure "kontagailu" begiztak dio "kontatu kontagailuarekin
          50etik 90era 10naka" eta haren barruan gure "marraztu karratu bat" blokea
          dago. Arrastatu "kontagailu" blokea "Aldagaiak" ataletik "luzera" dioen
          lekura.
      4:
        image: notes/stage11_4.jpg
        text: Honek esan nahi du gure artistak 50 pixeleko luzerako aldeak dituen
          lauki bat marraztuko duela, gero 10 gehitu eta 60 pixeleko aldeko laukia
          marraztuko du. Gero jarraituko du laukiak marrazten 10naka gehituz, 90koa
          lortu arte. Horrela 50, 60, 70, 80 eta 90ko laukiak lortuko ditugu.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Kaixo, Janete naiz eta Zynga enpresako ingeniaria naiz.
      2:
        image: notes/stage15_2.jpg
        text: Eta luzera desberdineko aldeak dituzten triangelu mordo bat marraztu
          nahi badugu?
      3:
        image: notes/stage15_3.jpg
        text: Kode hori guztia eskuz idatz genezake, edo bestela parametrodun funtzio
          bat erabil dezakegu.
      4:
        image: notes/stage15_4.jpg
        text: Hau egiteko, klikatu "marraztu triangelu bat" funtzioaren izar urdinean.
          Gero arrastatu "sarrera izena" "sarrera" blokera.
      5:
        image: notes/stage15_5.jpg
        text: '"x" dioen lekuan "luzera" idatzi eta "Enter" sakatzen baduzu, zure
          funtzioarentzako, luzera parametro bat sortuko duzu.'
      6:
        image: notes/stage15_6.jpg
        text: Klik egin izarraren gainean. Orain, aldagaien kategorian egin klik eta
          arrastatu "luzera" blokeak zuri funtzioaren definizioko "aurrera mugitu"
          blokera. Eta kendu zenbaki bloke zaharra.
      7:
        image: notes/stage15_7.jpg
        text: Zure funtzioa parametroekin probatzeko "funtzioak" kategoriako eta bertaratu
          ezazu "triangelua luzerarekin irudikatu" funtzioa.
      8:
        image: notes/stage15_8.jpg
        text: Orain matematikako blokea erabili dezakezu zenbaki desberdinak sartuz
          gero tamaina desberdineko triangeluak marrazteko.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Zorionak! Ebatzi duzun azken puzlearekin, edozein erroboti labirinto
          batean zehar bidea aurkitzeko kodea idatzi duzu. Errobot hori edozer izan
          daiteke, txori bat, zonbi bat, espazioko gailua... Baita auto-gidatutako
          autoa ere!
      2:
        image: notes/hoc6_2.jpg
        text: Erabili dituzun oinarrizko kontzeptuak ezagutzen dugun edozein programaren
          edo app-ren bihotza dira. "Errepikatu" begiztak, "errepikatu arte", "baldin"
          eta "bestela baldin" aginduak ikasi ditugu.
      3:
        image: notes/hoc6_3.jpg
        text: Disfrutatu bazenuen zure lehenengo ordua kodetzen, bisitatu code.org
          informatikan zure heziketa zabaltzeko! Behin 20 ordu ematen dituzula ikasten,
          programazioaren oinarriak menperatuta edukiko dituzu eta ikasten hasi ahal
          izango zara mugikorrentzako app-ak, robotentzako aginduak, jokoak edo zuk
          nahi duzuna.
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologia egiten dugun oro aldatzen ari da eta ez du axola gazte edo
          zaharra zaren: programatzea dibertigarria da, sormena dario eta edonork
          ikas dezake!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Notak erakutsi laster atzigarri!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Kaixo, nire izena Lindsey da. nire aplikazioak sortu eta idazten ditut.
          Erabil dezagun gure kodea Anna eta Elsarekin bateratzeko izotzaren mundu
          magikoa aztertzen duten bitartean.
      2:
        image: notes/frozen1_2.jpg
        text: Elur-malutak sor ditzakezu izotzetan patinatzen duzun heinean eta horrekin
          zure lagunekin elkarbanatu dezakezun neguko mundu magikoa sortu.
      3:
        image: notes/frozen1_3.jpg
        text: 'Hurrengo ordubetean, programazioaren oinarriak ikasiko dituzu. Ohiko
          programazioa testu formatuan izaten da, baina guk Blockly erabiliko dugu
          , arrastatu eta askatu daitezkeen bloke bisualen bidez programatzeko aukera
          ematen duena. Unibertsitateko ikasleek ere metodo hau erabiltzen dute askotan.
          Hala ez badirudi ere, azken finean kodea idazten ari zara. '
      4:
        image: notes/frozen1_4.jpg
        text: Programa bat agindu multzo bat da konputagailuari zer egin behar duen
          adieraziko diona. Eraiki dezagun  Elsari lerro bat marrazten lagunduko dion
          kodea. Ondoren, eredu konplexuagoak sortzeko erabiliko dugu kode hau.
      5:
        image: notes/frozen1_5.jpg
        text: Zure pantaila hiru zati nagusitan banatzen da. Ezkerrean, izotzezko
          panela dago, non zure programa exekutatuko da. Maila bakoitzeko zehaztapenak
          panelaren azpian daude idatzita.
      6:
        image: notes/frozen1_6.jpg
        text: Erdiko zati hau erremintek osatzen dute, eta hemengo bloke bakoitza
          Elsa eta Annak egin ditzaketen ekintzak dira.
      7:
        image: notes/frozen1_7.jpg
        text: Eskubiko zati txuriari lan tokia deitzen zaio, eta bertan gure programa
          sortuko dugu. IZotzezko paneletik mugitu ahal izateko "Mugitu Aurrera" blokea
          erabiliko da.
      8:
        image: notes/frozen1_8.jpg
        text: Hemen "Aurrera mugitu" blokean "100 pixel aurrera mugitu" esaten du.
          "Exekutatu" klikatzen duzunean zer gertatzen da? Elsa pantailan mugitzen
          da, 100 pixel hain zuzen ere! Pixelak, oinarrian, zure pantailako karratu
          txiki-txikiak dira.
      9:
        image: notes/frozen1_9.jpg
        text: Puzle honetan dugun beste blokeak "biratu 90 gradu eskubira" dio, eta
          bloke hau erabiltzean Elsa pixka bat biratuko da eskubira. Probatu eta ikusi
          ea zenbat biratuko den Elsa. Angelu hau Elsaren pareko bidetik bidetik neurtzen
          da. Beraz, hau 90 graduko biraketa bat da. Eta hau 120 graduko biraketa
          bat.
      10:
        image: notes/frozen1_10.jpg
        text: Akorda zaitez, pixel kopurua eta graduak alda ditzakezu bere ondoko
          geziak klikatuz.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Kaixo, Paola naiz! Ordenagailuek oso ondo errepikatzen dituzte ekintzak.
          10era, 20ra edo 100era arte zenbatu dezakezu. Ordenagailu batek, ordea,
          bilioira edo trilioira arte zenba dezake. Ez da aspertuko eta segun batzuen
          tartean egingo du. Zenbatzen, marrazten edo edozertan aritzean ere, ordenagailuek
          gauzak ehundaka edo bilioika aldiz errepika ditzakete.
      2:
        image: notes/frozen2_2.jpg
        text: Programazioan honi begizta deitzen diogu. Begizta bat zure kodea behin
          eta berriz errepikatzean datza. Hurrengo puzzlean, zure helburua Anna lauki
          bat sortzen laguntzea da "errepikatu" blokea erabiliz.
      3:
        image: notes/frozen2_3.jpg
        text: '"Errepikatu" bloke baten barruan sartutako edozein kode bloke sekuentzia
          batean errepikatuko da, zuk nahi duzun beste aldiz.'
      4:
        image: notes/frozen2_4.jpg
        text: Karratu bat marrazteko, "mugitu aurrera" eta "eskuinera biratu" blokeak
          4 aldiz erabil ditzakezu. Era errazena, ordea, ordenagailuari "mugitu aurrera"
          eta "eskuinera biratu 90 gradu" behin esatea da, eta ondoren ekintza pare
          hay lau aldiz errepikatzeko esatea. Hori egiteko, "mugitu aurrera" eta "eskuinera
          biratu" blokeak "errepikatu" bloke baten barruan sartu behar dituzu.
      5:
        image: notes/frozen2_5.jpg
        text: Gogoratu, "Errepikatu" blokeko zenbakia nahieran alda dezakezu, eta
          ordenagailuak bloke barruan dagoena hainbeste aldiz errepikatuko du.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Kaixo! Chris Bosh naiz. Saskibaloi-jokalari profesionala naiz eta unibertsitatean
          nengoenean programatzen nuen.
      2:
        image: notes/frozen3_2.jpg
        text: Informatikako kontzepturik garrantzitsuenetako bat komando berriak nola
          definitzea da. Programazio lengoaia gehienek 100 hitz edo komando inguru
          izaten dituzte soilik Eta, egia esan, mamia eraikitzeko bloke hauetatik
          hasita zure hitz berriak definitzean datza.
      3:
        image: notes/frozen3_3.jpg
        text: Behin ordenagailuari komando sekuentzia erabiliz ekintza bat egiten
          erakutsi diozunean, ekintzari izena jar diezaiokezu gerora errepikatzeko
          errazagoa izateko. Komando berri bat definitu eta izena emateari funtzio
          deitzen zaio.
      4:
        image: notes/frozen3_4.jpg
        text: Kaixo, Jess naiz. Blokeekin programatzean, askotan erabiliko dituzun
          ekintza multzoak badaude, funtzioak erabiliko dituzu. Adibidez, karratu
          bat sortzeko kodea idatzi duzu.
      5:
        image: notes/frozen3_5.jpg
        text: Hau "sortu karratua" izeneko funtzioa bezala erazagutu dezakezu
      6:
        image: notes/frozen3_6.jpg
        text: Orain hainbat aldiz erabilita hainbat karratu sortzeko blokea duzu.
      7:
        image: notes/frozen3_7.jpg
        text: Figura sinple askok patroi konplexu bat sortu dezakete. Hurrengo puzzlean,
          zirkulua egiteko egindako kodea eskuragarri duzu funtzio berri honetan,
          tamaina ezberdinetako zirkuluak marraztuko dituena. Erabili al dezakezu
          Elsak honako irudi polit eta korapilatsuak marraz dezan?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: 'Play Lab erabiliz jokoak sortuko ditugu. Joko onek istorio bat dute,
          eta istorioek aktoreak. Gure aktoreak sorgin eta alien bihurtzen ikasiko
          dugu, animaliak hiztegirarazi, mugiarazi, eta beraien arteak elkarreragin
          daitezen. Tutorial honen bukaeran, hasieratik joko bat sortzeko gai izango
          zara, eta elkarbanatu ahal izango duzu. '
      2:
        image: notes/playlab_intro_2.png
        text: Zure pantaila 3 zati nagusitan zatitu da. Ezkerrean programa exekutatzeko
          jokalekua duzu. Maila bakoitzaren instrukzioak behean idatzita daude.
      3:
        image: notes/playlab_intro_3.png
        text: Erdiko zatian erremintak dituzu, eta bloke bakoitza kodigoaren zati
          bat da. Eskuineko espazio zuria lan-lekua izena du eta hemen eraikiko dugu
          gure programa.
      4:
        image: notes/playlab_intro_4.png
        text: Hasteko, zure blokeak elkartu beharko dituzu "egikaritzean" bloke laranjarekin.
          Hainbat bloke elkartu ditzakezu blokeak, lerro horia ikusi arte kanporaka
          mugituz gero, denak elkartuko dira.
      5:
        image: notes/playlab_intro_5.png
        text: Lehenengo puzle honetan, gure aktorea pinguino bat da eta "Kaixo!" esanaraziko
          diogu. Horretarako "esan" blokea mugituko dugu "egikaritu" blokearekin elkartu
          arte, eta bertan "Kaixo!" idatziko dugu. Pinguinoa mugiarazi dezakegu ere,
          "mugitu eskuinera" eta "mugitu ezkerrera" blokeak erabiliz. Blokeak dagokien
          tokian dituzunean, "egikaritu" botoia klikatu programatutakoa ikusteko.
      6:
        image: notes/playlab_intro_6.png
        text: Hasi ikasten eta bukatzerakoan zure joko propioa sortu ahalko duzu,
          jokalari ezberdinekin, elkarreragin dezaketenak, pozik edo triste jar daitezkeenak,
          puntuak lortu ditzaketenak edo suzko bolak bota ditzaketenak, baita bata
          bestea desagerrarazi ere. Dena zure esku eta sortu nahi duzun jokoaren esku
          dago.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Orain, joko-programatzaile orok euren egunerokoan erabiltzen duten zerbait
          ikasiko dugu. "Gertaerak" deitzen dira. Gertaera batek zure programari adi
          egoteko esaten dio, zerbait gertatzen bada entzuteko. Hori gertatzen denean,
          ekintza bat egikarituko du.
      2:
        image: notes/playlab_events_2.png
        text: Hainat ekintza saguaren klikarekin, geziekin, edota pantaila ukimanarekin
          daude erlazionatuta.
      3:
        image: notes/playlab_events_3.png
        text: Oraingoan, jokalariak espazioko robot batean klik egitean, lurtarrak
          agurtzeko programa inplementatuko dugu, "klik egitean" eta "hitz egin" blokeak
          erabiliz. Jokalariak robotean klik egitean, "klik egitean" blokea exekutatuko
          da. Zer dio zure alienak?
      4:
        image: notes/playlab_events_4.png
        text: '"Gezia sakatzean" blokeak ere badaude. Hauek "mugitu" blokeekin lotzen
          badituzu, hasi zaitezke zure aktoreak gora, behera, ezker, eskuin mugitzen.
          Urratsez urrats, zure jokoa elkarreragileago bihurtzen ari da.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Hau da "errepikatu betirako" blokea. Edozein gauza bloke honen barruan
          beti gertatuko da jokoan.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Aktore batek hainbatetan zerbait egitea nahi baldin badugu, jokalariak
          ezer egin behar izan gabe, bloke horiek "errepikatu betirako" blokearen
          barruan jarriko ditugu.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Hurrengo puzlean gure helburua magoarekin erreinuko zaurituak patruilatzea
          da ezkerratik eskurbira denbora guztian. Agindu lanak nola nola errepikatzen
          ikasiko dugu horrela zure jokua egitean denbora asko aurreztuko duzu.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Hauek dira marrazteko eskuartean dituzun blokeak. Artistak lerro grisak
          bete behar ditu. Horratarako, joan behar duen lekura eramateko, bloke zuzena
          erabil ezazu.
      2:
        image: notes/C1_artist_intro_2.png
        text: Hauek jauzi-blokeak dira. Hauek erabiltzen dituzunean zure artista mugitu
          baino ez du marrazten. Erabil dezagun hau hurrengo lerro grisera jauzitzeko.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Erleak, zein ederrak diren!!! Ez da hala? Hurrengo puzzle andanan, zure
          helburua erleari laguntza ematea da. Erleak loreztia eskuratu behar du loreetatik
          eta abaraskara eraman, bertan eztia egin dezan. "Loreztia eskuratu" eta
          "eztia egin" blokeak erabili beharko dituzu ariketa hau ebazteko.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Lore orok lorezti kopuru ezberdina du: 1, 2, 3 edo gehiago. Badakigu
          zenbat lorezti duten lore gorriek, eskuin oinari begiratuz. Lorezti dena
          hartu duzula ziurta ezazu aurrera egin aurretik. Abaraska bakoitzean gorde
          daitekeen ezti kopurua ere mugatua da: 1, 2, 3 edo gehiago. Beraz, erne
          ibili abaraska bakoitzean gorde daitekeen eztia besterik ez egiteko.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Lorezti guztia eskuratu eta eztia egiteko gai bazara, lortu duzu egitekoa
          eta hurrengo mailara joan zintezke. Bestela, puzlera itzuli behar duzu berriz.
          Saia zaitez berriro eta senti ezazu zer den "erle" programatzailea izatea!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Begizta bat eragiketa bat errepikatzea da. Erlauntza bat aztertzean,
          gelaxka bat begiratu eta utzi egingo dut. Hau gelaxka guztiekin errepikatu
          behar denez, begizta batean aztertuko ditut gelaxkak.
      2:
        image: notes/C1_bee_loops_2.png
        text: Maila honetan, erleak loreetatik 3 ezti jasotzea nahi dugu. 3 "lortu
          eztia" bloke erabili beharrean, errepikapen blokea erabiliko duzu ezti 3
          aldiz lortzeko. Sakatu "hasi" eta ikusi ea ondo egin duzun. Oso ondo!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: 'Ikasgai hau Gertaera Handia deitzen da. Bertan zera tratatuko dugu:
          nola kontrolatu gure programak eta nola aldatu egiten dutena exekutatzen
          ari diren bitartean gertaerak erabiliz, botoi bat sakatzea edo saguarekin
          klik egitea, adibidez.'
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Ikastaro honetan, paperezko urruneko kontrolak gidatuko zaitu. Hau bai
          benetako bideo jokoa!
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: 'Gertakaria zerbait eginarazten duen ekintza da. Esaterako: saguarekin
          botoia sakatuta weborria dator. Hori da gertakaria.  Beste adibide bat:
          tablet-pantaila ukitzea behera-gora egiteko. Erabiltzailea -nahi duen eran-programaren
          egikaritzaile edo gidari bilaka dadin apartak dira gertakariak.'
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Badira gertaerak denok egiten ditugunak. Gose garenean hozkailura jotzen
          dugu. Postaria entzuten dugunean kartazalak buzoian sartzen, gure postaren
          bila joaten gara. Horiek gertaerak dira, botoi bat sakatu edo palanka bat
          mugitzea gertaerak diren era berean. Gertaerek zerbait egitera bultzatzen
          gaituzte azken finean.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Bideojokoetan "Eguneratu" izeneko ekintza bat burutzen da, eta 30-60
          aldiz exekutatzen da segunduko. Bideojokoen progrmatzaileentzat hau garrantzisuagoa
          da joystick baten ekintza baino.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Bilatzen ari garen gertaera nagusia "eguneratu" marka agertzea da. Gero
          joysticka markan ziurtatuko dugu. Orduan esango dugu, "norbaitek zapaldu
          al du gelaxka honetan? bai ala ez?". Gertaerarik gabe, jokalariak ezin izango
          zen mugitu, ezin izango zenuke salto egin, ez zinateke zer gertatzen den
          kontroilatzeko gai izango. Bideojokoa ez zen ezer animatzeko gai izango.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Hondarrezko irudietan, porrota programaren zati dela jakinaren gainean
          egon behar duzu. Aurrera egin ezkero, ordea, kontua hoberantz joango da
          ezinbestean eta zuretzat irrikagarriagoa izango da. Iraun da jokoaren izena.
          Gelditu zaitez bertan, gustoko izango duzu.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Ikastaro honen izena oinarrien eraikuntza da. Ikastaro honetan, zaila
          den ataza batean egingo dugu lan. Zuk pentsatu beharko duzu nola egin egitura
          bat kopa hauek bezain altua eta liburu baten pisua eusteko bezain indartsua.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Batzuetan gure sorkuntzak ez du funtzionatuko. Batzuetan frustratu eta
          amore eman nahi izango dugu. Halako une asko egongo dira. Baina saiatzen
          jarraitzen badugu, bakoitzean gure onena ematen badugu behin eta berriz,
          berandu baino lehen lortuko dugu.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistentzia amore eman nahi duzunean aurrera jarraitzeko ekintza da.
          Zerbai berria eta desberdina sortu nahi baduzu hainbat kale egingo dituzu
          bidean.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Persistentziaren trukoa frustratuta egoteagatik amore eman ordez arazoekin
          aurrera jarraitzean datza. Frustrazioak, berez, zerbait ezinhobea datorrela
          esan nahi du. Ez ezazu amore eman. Woooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Nire izena Miral Kotb da eta Iluminatien buruzagia naiz. Nire lanean
          badago zerbait dantzan eta programazioan. Eta hori begizta da. Begiztak
          behin eta berriz errepikatzen dituzte ekintzak.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Gauza bat hainbat aldiz errepikatzen duzunean, hula-hop-a bueltaka jarduten
          dudanean bezala, Ekintza baten begizta egiten ari naiz. Hau begizta bat
          da. Eta hau ere bai.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Festa izango dugu gaur. Begiztak erabiliko ditugu Iterazioa dantzaren
          pausu gisa. Begiztei buruz ikasiko dugu dantza erabiliz. Pausu erraz pare
          bat ikasiko duzu eta behin eta berriz errepikatuko dituzu dantza osoa burutu
          arte.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Hemen daude ikasi beharreko pausoak. Txaloak jo itzazu. Orain, buruaren
          atzetik. Orain, eskuak gerrian jarri. Ezkerreko besoa igo. Orain zure eskuina.
          Erraza ezta? Ikusiko duzu nola aginduak gutxitu ditzazkezun dantza-pauso
          batzuk begiztetan jartzen.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Gure dantzan begiztak erabiltzen ditugu. Dantzariek ordenagailuak daramatzate,
          denak sare berean. Argiak dantzari berdinengana begiztatuko ditu behin eta
          berriz. Begiztan iterazio bat izango dut "sei dantzari hauenganako begizta
          egin nahi duzu eta begiztaren baitan argiaren abiadura handituko da" esango
          duena. Eta hori begiztaz sortuta dago. Begiztak garrantzitsuak dira informatikan
          gure lana errazagoa eta laburragoa egiten dutelako.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Ikasgai honek Mapa Zoriontsuak izena du. Gaur gure lagun iletsu Flurb
          txikiari lagunduko diogu bere fruitura heltzen.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Zure Flurb-a zure fruitura eraman ezazu. Honetarako Flurb-ek zein bidetatik
          joan beharko duen asmatu beharko duzu eta gezien bidez zuzendu. Flurb-a
          sagarrera irits dadin zein noranzkotan joan beharko du? marraz ezazu gorantz
          joan dadin.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Hara heltzeko, hartu behar duen norabidea zirkulu baten barruan sartu
          behar duzu.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Sortu zure algoritmoa ebazten ari zaren maparen aldamenean geziak itsatsiz.
          Bigarrena berdina da, baina beheraka joanez.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Paperean programatzea bezala da. Hori da!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugeatzea arazoak aurkitu eta konpontzeko prozesua da. Modu asko daude
          arazoak debugeatzeko. Modurik errazena arazoa aurkitu arte pausoz-pauso
          mugitzea da. Hemen nago txiribuelta atzeraka egiten saiatzen, baino eortzen
          jarraitzen dut.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Atal guztietan zehar joan naiz urratsez urrats eta nire akatsa non dagoen
          konturatu naiz. Ez nintzen nire eskuak tximistan zuzen jartzen ari. Beraz
          beste atzerako jauzi bat egiten saiatu nintzen nire eskuen posizio berriarekin
          eta lortu dut. Benetan pozten naiz nire atzera jauzia debugeatu izanaz.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Arazketari buruz ikasteko, eszenatokian dugun bloke multzo batekin hasiko
          gara. Konturatuko zara bloke hauek ez zaituztela helburua eramango. Emaitza
          araztu eta konpondu behar dugu. Non zegoen akatsa? Konturatuko zara mendebalderantz
          joaten jarraitu behar zenuela bloke bat gehiago.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Konpon dezagun hau beste ekialde-bloke bat gehituz eta "abiatu" sakatuz
          ea zuzen egin duzun. Bejondeizula!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Buruhauste honetan, txoria txerritxoarengana eraman behar duzu. Begiratu
          ariketan eta pentsatu nora joan behar duen.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Blokeak erraminta-lekutik lan-lekura arrastatu itzazu. Ziurtatu zaitez
          "Exekutatzen ari den bitartean" blokearen azpian dagoela eta soluzioa duzula
          pentsatzen duzunean, "Exekutatu" klikatu eta ikus ezazu txoria kabira joaten.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Konputagailuak aginduak errepikatzen oso onak dira. Pertsona izanda,
          zu, oso segituan aspertuko zinateke zerbait behin eta berriz egin beharko
          bazenu. Konputagailuak, ordea, gauza berdina milaka edo milioika aldiz oso
          ondo egin dezake aspertu gabe.
      2:
        image: notes/C1_maze_loops_2.png
        text: Adibidez, Facebook-en dauden guztiei e-mailak bidalita zoriondu nahiko
          banie, mezu horiek guztiak idazten mende oso bat emango nuke. Pixka bat
          programatuta, Facebook-eko pertsona guztiei zoriontzeko programa bat egin
          dezaket.
      3:
        image: notes/C1_maze_loops_3.png
        text: Txoria txerrira eramateko maila honetan... hiru ipar bloke eraman ordez
          langunera, "errepika" blokea erabiliko duzu. Eraman "errepika" blokea langunera
          eta sartu 3 zenbakia. Ondoren, eraman "mugitu iparrera" blokea eta sakatu
          "Exekutatu" zuzen egin ote duzun ikusteko. Zorionak, lortu duzu!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Ikasgai hau "mugi ezazu, mugi ezazu!" deitzen da. Elkarrekin programa
          bat idatziko dugu gure lagunak iparorratza duen hasiera puntutik aurpegi
          irrifartsudun helmugara eramateko.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Aurpegi irrifartsua behena dago eta pertsona bakarrak daki nola heldu
          horra. Has dezagun programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Programa bat makina batek exekuta dezakeen zerbaitetan kodetu den algoritmo
          bat da. Gutako gehienok programa bat guk ordenagailuarentzat idazten dugun
          zerbait dela uste dugu. Programak oso onak dira horretarako, baina beste
          leku batzuetan ere baliogarriak dira. Zure jolasa sor dezakezu edo zuretzako
          lan egingo duen errobot bat programa dezakezu.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Kaixo! Jeremiah dut izena. Zazpi urte ditut. Nire amaren ordenagailuan
          jolastea atsegin dut, baina bere baimenarekin. "Ama, erabil al dezaket ordenagailua?
          Jakina, laztana!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Oso gustuko dut nire amaren ordenagailua interneten sar naitekeelako.
          Internet zure auzoaren antzekoa da. Leku paregabeak bisita ditzakegu, familia
          eta lagunekin hitz egin dezakezu eta gauza berri asko ikas ditzakezu.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Atzo, nire etxetik hurbil dagoen zoo bat bisitatu nuen. Zebrakume bat
          ikusi nuen. Argazki bat atera nion eta marren kolorea aldatu nion, gero
          kapela bat jarri nion eta nire animalia bitxien bildumara gehitu nuen. Itzel!
          Gero, oso urrun dagoen leku batera joan nintzen. Kenia bisitatu nuen. Afrikako
          herrialde bat da. Han zebra asko bizi dira.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Batzutan ezagutzen dudan jendearekin hitz egiten dut interneten, adibidez,
          beste estatu batean bizi den nire amonarekin. Kaixo, amona! Nire urtebetetzean
          bidaliko dizkidan gailetak egiten ari da. "Mmmm, internetetik usaintzea
          gustatuko litzaidake!" Edonorekin hitz egin dezaket internetetik, adibidez,
          nire lehengusina; baina ezagutzen dudan jendearekin baino ez dut hitz egiten.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Interneten gehien gustatzen zaidana jolas dibertigarriean jolastu ahal
          izatea da. Tanto! Marraztea eta gauza berriak sortzea eta horiek lagunekin
          elkarbanatzea ere gustatzen zait. Itzel! Batzuetan gauza berriak ikasteko
          webguneak bisitatzen ditut, baina beti niretzat egokiak diren webguneetan
          ibiltzen naiz. Hara, dinosauruak!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internet oso leku dibertigarria da. Baina auzoan errepidea gurutzatzean
          bezala, adi egon behar duzu konektatzen zarenean. Gogoratzeko 3 arau dago.
          Lehen araua: baimena eskatu gurasoei beti. Bigarren araua: ezagutzen duzun
          jendearekin soilik hitz egin. Hirugarren araua: zuretzat egokiak diren lekuetan
          geratu.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Hara, hori bai dibertigarria! Afalordua. Deskonektatuko naiz. Irrikitan
          nago noiz berriz konektatu eta zer berri bisitatu.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Gaur bikotekako programazioa ikasiko dugu. Programatzean taldeka lan
          egiten da. Zergatik bi pertsonek erabili behar izango lukete ordenagailu
          bakarra? Bi buruk batek baino hobeto pentsatzen duelako. Bikotekako programazioan
          zu eta zure kidea batera eseriko zarete ordenagailu baten aurrean eta proiektu
          berean lan egingo duzue.
      2:
        image: notes/C1_pair_programming_2.png
        text: Bikotetako programazioan pertsona bat gidaria da eta bestea nabigatzailea,
          auto bat gidatzean bezala. Gidaria ordenagailuan eseriko da eta teklatua,
          sagua edo pantaila ikugarria erabiliko ditu eta ordenagailuaren ekintza
          nagusiak kontrolatuko ditu. Beste pertsona nabigatzailea da. Nabigatzaileak
          gidaria lagunduko du gidariaren erantzunei erantzunez eta balizko arazo
          edo akatsak azaleratuz.
      3:
        image: notes/C1_pair_programming_3.png
        text: Komunikazioa gakoa da bikotetako programazioan. biraorik ez, izan zaitez
          begirunezko, ez zaitez nabigatzaile agintzailea izan; inork ez du kontrolatzailerik
          nahi. Zuk eta zure bikoteak etengabe hitz egin behar duzue. Gidariak zer
          egiten ari den azal dezake. Eta nabigatzaileak jarraian zer egin iradoki
          dezake.
      4:
        image: notes/C1_pair_programming_4.png
        text: Nabigatzaileak proiektuaren osotasunean pentsatu behar du eta gidariak
          xehetasunei erreparatu behar die. Bi ekintzak garrantzitsuak dira. Bikotekako
          programazioa talde bezala lan egitea da.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Ikasgai hau "hazia landatu" deitzen da eta algoritmoak ulertzen lagunduko
          digu. Algoritmoak gauzak zer ordenatan egin adierazten duten agindu zehatzak
          dira. Eguneroko ekintzak, gosaltzea edota hortzak garbitzea bezalakoak,
          lana ondo egiteko pauso txikiak behar dituzten algoritmoak dira.
      2:
        image: notes/C1_planting_seed_2.png
        text: Ordenagailuak oso azkarrak izan daitezke, baina pausoz pauso zer egin
          behar duten zehazt-mehatz esaten badiezu baino ez dizute ulertuko. Algoritmoen
          gauza ona, aginduak ordenean jarraituta, lehen egiten ez zenekien gauzak
          egin ditzakezula da. Errezeta bat jarraitzea bezalakoa da.
      3:
        image: notes/C1_planting_seed_3.png
        text: Gaur gure hazi propioak landatuko ditugu algoritmo bat erabiliz. Irudiak
          moztuz sortu zuren algoritmoa. Hautatu hazia landatzeko pausoak erakusten
          dituzten irudiak eta ordena zuzenean jarri.
      4:
        image: notes/C1_planting_seed_4.png
        text: Orain, zure algoritmoa dabilen ikusiko duzu. Algoritmoko urratsak adi
          jarraitu. Ordena zuzenean al daude? Lortu al duzu hazia landatzea algoritmoa
          jarraituz? Irudiekin programatzea bezalakoa da!
      5:
        image: notes/C1_planting_seed_5.png
        text: Txokolatea egin nahi dugunean, prozesuak hainbat urrats nagusi ditu,
          baita urrats txikiago batzuk ere eta hainbat errezeta edo algoritmo dago
          lortu nahi dugun txokolatearen zaporearen araberakoak. Urrats bakoitza garrantzitsua
          da, txikienenak ere. Hala, urrats bat gabe beste guztiak ezin izango dira
          burutu. Besteek ulertuko dituzten algoritmoak sortzea oso garrantzitsua
          da. Ondorioz, urrats bakoitza idatzi behar da edonork eginda ere emaitza
          berdina lortzeko.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Heldu da sormenaren ordua eta erabil itzazu zure kodetze trebetasuna
          istorio bat kontatzeko. Zure istorioak aktoreak izango ditu eta aktore horiei
          hitz eginarazi eta elkartrukatu arazi ahal izango diezu. has zaitez zein
          motatako istorioa kontatu nahi duzun.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Katuak beti izan dira txakurren beldur, baina zer gertatuko litzateke
          katuak txakurrak berarekin adeikorra izan nahi duela deskubritzen badu?
          "abiarazi" blokeak dena hasiko du. "Mugitu" blokeak zure pertsonaia mugituko
          du eta "esan" blokeak zure pertsonaiak idazten duzuna esatea ahalbidetuko
          du.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Beste bloke batzuei lot diezaiokezun "akotreek talka egiten dutenean"
          blokea da hau.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Txakurrari etorrarazten eta "kaixo" esanarazten ari nintzen, baina katua
          izutu eta alde egin du. "Ah" denbora luzeagoa balego, amaiera zoriontsua
          izango genuke. Amaiera!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Hau letraka esateko erlearen maila da. Erabili puzlearen piezak erlea
          mugitzeko. Mugitzen den heinean, hitzak letraka esateko letrak batuko ditu.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Ikusi ea eszenatokiaren azpian dagoen kutxako hitza letraka esan dezakezun.
          Baina kontu handia izzzzzzzan! Norabide okerrean mugituz gero, nahi ez dituzun
          letrak gehituko ditu.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Konputagailuak aginduak errepikatzen oso onak dira. Pertsona izanda,
          zu, oso segituan aspertuko zinateke zerbait behin eta berriz egin beharko
          bazenu. Konputagailuak, ordea, gauza berdina milaka edo milioika aldiz oso
          ondo egin dezake aspertu gabe.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Adibidez, Facebook-en dauden guztiei e-mailak bidalita zoriondu nahiko
          banie, mezu horiek guztiak idazten mende oso bat emango nuke. Pixka bat
          programatuta, Facebook-eko pertsona guztiei zoriontzeko programa bat egin
          dezaket.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Adibide honetan, zure helburua txoria txerria hartzeko mugitzea da.
          Orain "errepikatu" blokea erabili ahal izango dugu hau oso erraz egiteko.
          Ordenagailuari txoria urrats bakoitzean urratz bat aurrera egiten aurrera
          mugitzeko "mugitu aurrera" komandoa 5 aldiz emanda edo ordenagailuari behin
          aurrera mugitzeko esanda eta gero hori bost aldiz errepikatzeko esanda egin
          dezakezu.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Hau egin ahal izateko, zure "mugitu aurrera" komandoa errepikatu blokeraino
          arrastratu beharko duzu. Bloke honetan sakatuz komandoa zenbat aldiz errepikatzen
          den aukera dezakezu, eta beraz, aurrera zenbat pauso eman aukeratu.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Ahal bezain aina comando sartu ditzakezu errepikatu blokearen barruan.
          Adibide honetan, aurrera eta gero ekubira mugitzeko esaten ari zara, 5 aldiz
          egingo dena. Ondo pasa!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Ezin zara lasterketarako sailkatu informatikan onak diren pertsonak
          ez badituzu, autoek datu kantitate handia behar dutelako eta eraikuntza
          jarduera eraikitzen nola jarraituko duzun asmatuko duten programak idazten
          dakien jendea behar duzulako.
      2:
        image: notes/C2_artist_intro_2.png
        text: Puzzle hauetan, forma ezberdinak arkatzez marrazten dituen artista izango
          zara. Artista edonora joanda ere, lerro bat marraztuko du zure atzean.
      3:
        image: notes/C2_artist_intro_3.png
        text: Oihalean zehar mugitzeko, "mugitu aurrera" blokea erabiliko duzu. Hemen
          "mugitu aurrera" blokeak 100 pixel aurrera mugitzeko esaten du. "abiarazi"
          zapaltzen dugunean, zer gertatzen da? Artista aurrera 100 pixel mugitzen
          da. Pixelak zure ordenagailuaren pantailako karratu ñimiñoak dira.
      4:
        image: notes/C2_artist_intro_4.png
        text: Puzle honetan dugun beste blokeak eskuinera 90ko bira egin esaten du.
          Hori arrastatzen dugunean, artistak biratu egingo du. Artistak zenbateko
          bira egingo duen erabaki dezakezu. Hau 90 graduko bira da.
      5:
        image: notes/C2_artist_intro_5.png
        text: Eta hau 120 graduko biraketa bat da. Eta gogoratu, balio hauek alda
          ditzakezu zenbakien ondoan dauden geziak sakatuta. Atera barruan duzun artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Hau baldintza bat da. Nektar edo eztia zenbaki bat baino gehiago/gutxiago/berdina
          bada, orduan egin zerbait.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Hau erabilgarria da zenbat nektar edo ezti dugun ez dakigunean, galdera
          ikurrarekin ikus daitekeen bezala.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Adibide honetan, lore moreak 0 nektar baino gehiago baldin badu, hartu
          nektarra. Honi esker gure erleak nektarra hartzen jarraituko du lorean badagoen
          bitartean. Ta-txan!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Hau eskumuturreko bitarren ikasgaia da. Gure inizialak eskumuturreko
          batean kodetuko ditugu eta gure lagunei erakutsi ahal izango diegu!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: 'Bitarra informazioa bi aukera bakarrik erabiliz gordetzeko era bat
          da. 0 eta 1ak erabiliz gorde ohi da informazio hau, baina beste hainbat
          modu daude: zuria eta beltza, piztuta eta itzalita, gora eta behera...'
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Kaixo, Orion naiz eta robotak Play-im-en programatzen ditut. Ordenagailu
          eta roboten burmuin guztiek atetxo elektronikoak dituzte beren barruan.
          Atea irekita dagoenean elektrizitatea pasatzen da eta itxita dagoenean,
          ezin da pasa.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Errobotaren begiak errobot bitarraren adibidea da. Errobotaren begial
          LEDak dira eta argi horiek piztu eta itzali egiten dira. Sistema bitarr
          ada, bata ala bestea. Argiak erabil ditzakegu zenbaki bitarrak adierazteko.
          Errobot multzo bat badugu, lehen errobota lehen tokia dela eta bigarrer
          errobota bigarrena dela eta abar esan dezakegu. Hala errepresentatzen duzu
          zenbaki bitarra. Errobotek euren begi bitarrekin egingo dute zenbakia eta
          zuretza kontatuko dute.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Lekzio honek "kondizionala kartekin" izena du. Egunero ikusten eta entzuten
          duzuen araberakoan oinarrituta aukerak egiten dituzu.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Parkera joan nahi dut, baina aurretik ea aterkia eraman nahi dudan edo
          ez erabaki behar dut. Orduan, leihotik begiratzen dut. Hodeitsu badago aterkia
          hartuko dut. Bestela, eguzkitako betaurrekoak hartuko ditut. Uste dut hobea
          izango dela aterkia hartzea. Entzuten eta ikusten dudanaren arabera, parkera
          zer eramango dudan aukeratuko dut.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Baldintzazkoak jokoetan ere erabiltzen dira. Gaur karta jolas batekin
          landuko dugu hau. Joko honetan, nik botatako kartak lagunek zer egingo duten
          dio. 7 bat ateraz gero, denek txalo egingo dute. Bestela, denek "awwww"
          esango dute. Saia gaitezen!
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Baldintzak erabiliz joko dibertigarriagoak egin ditzakezu. Saia zaitez!
          Baldintzak dira konputagailuei azkar itxura ematen diotenak. Baldintzak
          erabiltzen dituen programa batek bere ekintzak alda ditzake erabiltzaileak
          egiten duenaren arabera.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pentsa ezazu zure bideojoko gogokoenean. Ekintza bat egiteak beste batek
          baino puntu gehiago ematen al dizkizu? Honen arrazoia ordenagailuak baldintzak
          erabiltzen dituela da. Ordenagailuak baldintzak erabiliz hartzen ditu erabakiak.
          Helburua lortzerakoan, hamar puntu irabazten dituzu, bestela hiru galdu.
          Baldintzak erabiltzen jakiteak, joko dibertigarriak sortzea ahalbidetzen
          dizu.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Hemen badauzkagu jada bloke batzuk gure laneremuan. Baina zerbait dago
          gaizki.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Debugeatu dezagun kode exekuzio-abiadura motelduz, bloke bakoitza pausoka-pausoka
          nola exekutatzen den ikusteko.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh! Hemen dago arazoa! Katuaren biboteak 75 pixeleko luzera dute, ez
          25 pixelekoa.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Entzun al duzu "programa bat debugeatu" esaldia? Horrela ikus dezakegu
          zer doan gaizki. Kodea debugeatzen duzunean, erroreak identifikatu eta konpontzen
          dituzu.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Gure lan eremuan baditugu dagoeneko zenbait bloke. Urrats botoia erabiliko
          dugu, blokeak urratsez urrats exekutatzeko. Honela gure emaitza zuzena den
          edota zuzendu behar dugun jakingo dugu.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Arazoa hemen dagoela ematen du! "Aurrera egin" beste bloke bat behar
          dugu. "Pauso bat eman" botoiak debugeatzen uzten diigu problema identifikatuz
          eta erroreak hautemanez.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Buruan kapela duzu eta zure azkarrek esango dizute non zauden eta zooari
          buruz pentsatzeko eta kaizo esateko zuri eta zuri. Erabili zure burua sarean
          zaudenean zurea dena zure buru barruan gordetzeko eta seguru egoten jakiteko,
          zure bizitzari eremu pribatu bat emateko! Burutik hasita eta behatzetara,
          pausatu, horretaz pentsatu. Zure oinetatik eta sudurreraino, pausatu eta
          sarean pentsatu!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Erabili zure bihotza hazteko, eta emaiozu zure buruari distira osasungarria,
          eta San Balentin egunean esan norbaiti zurea izango dela! Erabili zure bihotza
          sarean zaudenean, zuzena da eta abegikorra, eta izan adeitsua zure lagunekin,
          sarean zintzo eta atsegina izateko. Burutik hasita eta behatzetara, pausatu,
          horretaz pentsatu. Zure oinetatik eta sudurreraino, pausatu eta sarean pentsatu!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Erabili besoak zure maskotari besarkada emateko, zure arropak uretatik
          babesteko, eta zure mahukarik gogokoenak eramateko eta hegan egin eta besteei
          sinestarazteko. Erabili zure besoak sarean, deskantsatu eta lasaitzeko denbora
          hartzeko eta utzi teknologia alde batera eta topatu gora igotzeko zuhaitz
          bat. Burutik hasita eta behatzetara, pausatu, horretaz pentsatu. Zure oinetatik
          eta sudurreraino, pausatu eta sarean pentsatu!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Erabili sabela janaria gordetzeko eta bere korroskadak entzuteko, sabelez
          dzanga egiteko eta sodazko gozokien gasa sentitzeko. Erabili zure sabela
          sarean, zeinbat zeinu erazagutzeko, eta utzi zure bidea gidatzen eta zuzen
          ez dauden gauzak adierazten. Burutik hasita eta behatzetara, pausatu, horretaz
          pentsatu. Zure oinetatik eta sudurreraino, pausatu eta sarean pentsatu!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Beraz, pentsatu zure buruarekin eta sentitu zure bihotzarekin eta neurtu
          besoekin eta entzun zure sabelari sarean. Erabili zure hankak korrika egin
          eta ostikoa emateko eta saltatzeko makilean saltatzeko eta etxe inguruan
          dantzatzeko eta galtzerdi usaintsuekin salto egiteko. Erabili zure hankak
          sarean, pasatzen diren erasotzaileei aurre egiteko eta gogoratu irmo egotea
          eta izaki handi eta txikiekin adeitsua izatea.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Burutik hasita eta behatzetara, pausatu, horretaz pentsatu. Zure oinetatik
          eta sudurreraino, pausatu eta sarean pentsatu! Buruarekin pentsatu, bihotzarekin
          snetitu, besoekin neurtu, sabelari entzun eta hanken gainean zutitu. Burutik
          hasita eta behatzetara, pausatu, horretaz pentsatu. Zure oinetatik eta sudurreraino,
          pausatu eta sarean pentsatu!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Konektatzen zaren bakoitzean, bilatu, kopiatu, elkarbanatu eta emititu
          daitekeen betiereko aztarna bat uzten duzu. Zer motatako aztarna digitala
          uzten ari zara? Zer motatako aztarna digitala utzi nahi duzu?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Lekzio honen izena "Paper grafikoaren progrmazioa" du izena, eta algoeritmoetaz
          doa. Gaur elkarri erakutsiko diogu nola sortu zuribeltzean dauden irudiak,
          eskuz marraztutako geziak erabiliz.
      2:
        image: notes/C2_graph_paper_2.png
        text: Algoritmo bat zerbait egiteko agindu-lista bat da. Instrukzio hauek
          jarraituko ditugu. Algoritmoak oso lagungarriak dira beste batenbat behar
          baduzu zerbait egiterakoan.
      3:
        image: notes/C2_graph_paper_3.png
        text: Konputagailu baterako algoritmoa idazten ari bazara, hainbat pausoetan
          zatitu behar duzu. Lerro hau bukatu eta pasa hurrengora, gero hurrengora,
          eta bukatu egingo duzu.
      4:
        image: notes/C2_graph_paper_4.png
        text: Nire lanean algoritmoak erabiltzen ditut. Urrats guztiak idazten baditut,
          pieza bera berriz errepika dezaket, edo norbaiti nola egin irakats diezaioket.
          Jarri beira labean, urtu, jarraitu hurrengo aginduak eta bola egin. Algoritmoek
          zerbait egiteko zer bide jarraitu esaten dizute.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Hemen errepikapen blokea erabiliko dugu gure artista programatzerakoan
          pausoak saiesten lagunduko digu. Dagoeneko baditugu eszenatokian bloke batzuk
          baina programatzen hasteko daude bakarrik.
      2:
        image: notes/C2_artist_loops_2.png
        text: Bloke horiek begizta batean sartzeko karratu oso marraztu ahal izateko,
          errepikapen blokea arrastatuko dugu, eta aurrera mugitu eta eskubira biratu
          blokeak errepikapen blokearen barnean sartuko ditugu. Kodea exekutatzean,
          artistak mugimendu horiek lau aldiz errepikatuko ditu laukia osatu arte.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Begizta bat eragiketa bat errepikatzea da. Erlauntza bat aztertzean,
          gelaxka bat begiratu eta utzi egingo dut. Hau gelaxka guztiekin errepikatu
          behar denez, begizta batean aztertuko ditut gelaxkak.
      2:
        image: notes/C2_bee_loops_2.png
        text: Hau da errepikapen blokea. Bloke horren barnean sartzen duzun guztia
          hainbat aldiz errepikatuko da, zuk esan adina aldiz. Esate baterako, maila
          honetan, hainbat aldiz mugitu eta nektarra hartu ordez, errepikapen bloke
          batean sartu eta hiru aldiz higikaratuko dugu. Halako erraza izango da!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalean programazioa testuan soilik oinarritzen da, baina guk Blockly
          erabiliko dugu, honek bloke bisualak erabiltzen baititu eta hauek arrastatuz
          idatziko ditugu gure programak. Dena den, hau funtsean programazioa da!
          Hasteko, kode zati bat idatziko dugu Angry Birds-eko txori hau labirinto
          batean zehar mugi dadin, helburutzat bere arrautzak lapurtu dizkien zerriengana
          heltzea izango duelarik.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly hiru zati nagusitan dago banatuta. Ezkerraldean txoriaren labirintoa
          dago, non programa exekutatuko den. Maila bakoitzarentzat jarraibideak labirintoaren
          azpian daude idatzirik. Erdikaldea tresna kutxa da eta bloke horietako bakoitza
          txoriak uler dezakeen komando bat da. Eskuinaldeko espazio zuria lan eremua
          da eta bertan eraikiko dugu programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: Mugitzeko blokea gure lan eremura arrastatu eta kodea exekutatuz gero,
          zer gertatzen da? Txoria mugitu egiten da aurrerantz, laukitxo bat gure
          sarean. Eta zer egingo dugu txoriak zerbait egin dezan aurrerantz pauso
          hori eman eta gero? Beste bloke bat gehi dezakegu gure programara.
      4:
        image: notes/C2_maze_intro_4.png
        text: '"Eskubira biratu" blokea hautatuko dut, eta mugimendu blokearen azpira
          mugituko dut gezi horia agertu arte. Gero, askatu egingo dut eta bi blokeak
          elkartu egingo dira. Kodea berriro ere exekutatzean, txoriak gure lan eremuan
          dauden komando guztiak beteko ditu, goitik behera.'
      5:
        image: notes/C2_maze_intro_5.png
        text: Inoiz bloke bat ezabatu nahi baldin baduzu, kendu pilatik eta arrastatu
          zakarrontzira. Behin "abiarazi" sakatu duzula, beti izango duzu aukera "berrezarri"
          botoia sakatzeko eta txoria hasierara bueltatzeko. Orain harrapa ditzagun
          txerri horiek!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Ikasgai honek Bizitza Errealeko Algoritmoak du izena. Algoritmoek pertsonek
          egunero egiten dituzten gauzak deskribatzen dituzte. Gaileten errezetak
          eta txorientzako etxeak egiteko jarraibideak eguneroko algoritmoak dira.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Gaur sortu eta probatuko dugu algoritmo bat paperezko abioi bat egiteko.
          Baina lehenengo, proiektu handi hau zatitan banatu behar dugu errazago jarraitzeko.
          Paperezko abioi bat egiteko, lehenengo zein pauso egin behar ditugun erabaki
          behar dugu eta zein ordenetan eman hauek.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Zure lehenengo algoritmoa sortuko duzu lehenengo irudia zatitan banatzen.
          Gero, 6 irudi aukeratu beharko dituzu pausoak paperezko abioi bat nola egiten
          den erakusten duena eta ordenatu irudi hauek orden egokian. Behin dena ondo
          ordenatuta dagoela, beste ikasle talde batekin partekatuko da algoritmoari
          probak egiteko. Ondo diseinatutako algoritmo batek paperezko abioi hoberena
          sortu behar du.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Txokolatea egin nahi dugunean, pauso handiak eman behar dira hona iristeko.
          Pauso handi hauetako bakoitza bere azpimultzo txikia du. Gainera, errezeta
          mota desberdin asko daude, edo algoritmo, txokolatearen zaporea nolakoa
          nahi dugunaren arabera. Pauso bakoitza inportantea da, txikiak ere. Beraz,
          pauso bat gabe, gainerakoak ezin dira aurrera eraman. Besteek ulertzen dituzten
          algoritmoak egitea oso garrantzitsua da. Horregatik idatzi behar dira pauso
          guztiak.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Orain arte, animazio edo istorio bat egiten aritu zara, exekutatzean
          behin eta berriro gauza bera egiten duena. Orain , jolas interaktiboa egin
          dezakezu eta benetan jolastu ahal izango duzu.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Probatzeko bloke berriak daude. "gezia sakatzean" eta "mugitu aktorea"
          bloke berriak ditugu. Jarri al ditzakezu bloke hauek batera aktoreak mugitzeko
          gezien bitartez? Badaude ere bloke batzuk erantzun bat emateko aktorea klikatzen
          denean edo talka egiten duenean. Proba itzazu eta jolastu hauekin!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Gaur errelebotako programazioa egingo dugu. Presiopean programatzea
          da eta azkar programatzean edo taldean programatzean gertatu ohi diren akatsak
          arazkatu behar dira. Paper gaineko grafo programazioa erabiliko dugu kodeketa
          simulatzeko eta errelebotako lasterketak erabiliko ditugu entregatzeko data
          simulatzeko.
      2:
        image: notes/C2_relay_programming_2.png
        text: Errele programazioan taldeek paper grafiko programa bat amaitzeko leihatuko
          dira. zure taldekidearen lana aztertu behar duzu, edo araztu eta konpondu
          akatsik badago, zure gezia gehitu eta berriro hasi eta zure taldekidea etiketatu.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programatzaileek asko erabiltzen dute araztatzea arazoak topatu eta
          konpontzeko euren algoritmo eta kode zatietan. Modu askotan egin daiteke
          araztatzea. Errazenetako bat pausoz-pauso mugitzea da, akatsen bat topatu
          arte. Behin topatu dugunean, konpondu egin beharko dugu.
      4:
        image: notes/C2_relay_programming_4.png
        text: Atzerako txiribuelta egiten saiatzen ari naiz hemen, baina behin eta
          berriz erortzen naiz. Urrats bakoitza birpasatu dut, urratsez urrats, eta
          arazoa non zegoen aurkitu. Nire entrenatzaileak esan zidan ez nintzela eskuak
          habean era zuzenean jartzen ari. Beraz, atzerako txiribuelta saiatu dut
          berriro eskuak habean posizio berrian jarriz eta asmatu dut! Oso pozik nago
          nire atzerako txiribuelta araztu dudalako. Asmatu genuen! Arazketa arazoak
          aurkitu eta zuzentzea da. Oso lan ona!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Konputagailuak aginduak errepikatzen oso onak dira. Pertsona izanda,
          berehala aspertuko zinateke zerbait behin eta berriz egin beharko bazenu.
          Konputagailuek, ordea, gauza berdina milaka edo milioika aldiz oso ondo
          egin dezake aspertu gabe.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Adibidez, Facebook guztia zoriondu nahi izango banu e-mail bat bidaliz,
          mende oso bat baino gehiago igaro nezake denentzako email horiek idazten.
          Baina kode lerro gutxi batzuekin Facebook-eko erabiltzeile guztiei zorionduz
          emailak bidaliko dituen sistema bat izan dezaket. Hauxe da begiztek egiten
          dutena, eta horren baliotsuak izatearen arrazoia, gainera ordenagailuak
          oso ondo egiteko gai dira.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Adibide honetan, helburua txoria zerriarengana heltzea izango da. Orain
          eskuragarri dugun errepikapen blokea erabiliko dugu helburu hau era errazean
          lortu ahal izateko. Hau egiteko, eman ordenagailuari "aurrera mugitu" blokea
          bost aldiz, hala txoria gero eta gertuago egongo baita zerritik.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Edo esaiozu ordenagailuari "mugitu aurrera" behin eta ondoren errepikatu
          dezala hau 5 aldiz, eta gauza bera egingo du. Hau egin ahal izateko arrastatu
          "mugitu aurrera" blokea eta sartu ezazu "errepikatu" blokearen barnean.
          Ondoren klikatu bertan eta esan zenbat aldiz nahi duzun agindua errepikatzea.
          Modu honetan aurrera zenbat aldiz mugitu behar duen esango diozu.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Gainera, hainbat agindu jarri ditzakezu errepikapen bloke baten barruan.
          Esaterako, adibide honetan aurrera eta ezkerretara mugimenduak egingo ditu,
          bost aldiz guztira. Primeran, ondo pasa!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Konputagailu programazioaren gauza onenetarikoa zera da, behin konputagailu
          bati gauza bat nola egin erakutsi diozunean, gauza hori berriz egin ahal
          izango duzu funtzio bati deituz. Funtzioari izen bat eman eta listo, dei
          egin diezaiokezu. Hau lengoaia zabaltzea bezala da.
      2:
        image: notes/C3_artist_functions_2.png
        text: Eraiki dugun programan, karratu bat lau aldiz mugituz eta biratuz nola
          marraztu ikasi dugu. Funtzio hori hartu eta izena jar diezaiokegu, egin
          nahi dugun bakoitzean "karratua marraztu" esanda funtzio hori inboka dezan,
          kode hori. Egingo digu. Kontzeptu hori gehitu diogu gure programazio lengoaiari.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Ezin zara lasterketarako sailkatu informatikan onak diren pertsonak
          ez badituzu, autoek datu kantitate handia behar dutelako eta eraikuntza
          jarduera eraikitzen nola jarraituko duzun asmatuko duten programak idazten
          dakien jendea behar duzulako.
      2:
        image: notes/C3_artist_intro_2.png
        text: Puzzle hauetan, forma ezberdinak arkatzez marrazten dituen artista izango
          zara. Artista edonora joanda ere, lerro bat marraztuko du zure atzean.
      3:
        image: notes/C3_artist_intro_3.png
        text: Oihalean zehar mugitzeko, "mugitu aurrera" blokea erabiliko duzu. Hemen
          "mugitu aurrera" blokeak 100 pixel aurrera mugitzeko esaten du. "abiarazi"
          zapaltzen dugunean, zer gertatzen da? Artista aurrera 100 pixel mugitzen
          da. Pixelak zure ordenagailuaren pantailako karratu ñimiñoak dira.
      4:
        image: notes/C3_artist_intro_4.png
        text: Puzle honetan dugun beste blokeak eskuinera 90ko bira egin esaten du.
          Hori arrastatzen dugunean, artistak biratu egingo du. Artistak zenbateko
          bira egingo duen erabaki dezakezu. Hau 90 graduko bira da.
      5:
        image: notes/C3_artist_intro_5.png
        text: Eta hau 120 graduko biraketa bat da. Eta gogoratu, balio hauek alda
          ditzakezu zenbakien ondoan dauden geziak sakatuta. Atera barruan duzun artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Begizta bat beste begizta baten barruan sartzeari begizta sarea deitzen
          zaio. Adibidez, hemen 100 pixeleko aldeak dituen triangeluak marrazteko
          kodea ematen digute, errepikapen blokea 3 aldiz erabiliz, alde bakoitzeko
          bana.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Baino 6 triangelu marraztu nahi ditugu. Hori egin ordez, begizta hori
          hartu eta hainbat aldiz errepikatzeko bloke baten barruan sartuko dugu.
          Oso ondo!!!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Hau baldintza bat da. Nektar edo eztia zenbaki bat baino gehiago/gutxiago/berdina
          bada, orduan egin zerbait.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Hau erabilgarria da zenbat nektar edo ezti dugun ez dakigunean, galdera
          ikurrarekin ikus daitekeen bezala.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Adibide honetan, lore moreak 0 nektar baino gehiago baldin badu, hartu
          nektarra. Honi esker gure erleak nektarra hartzen jarraituko du lorean badagoen
          bitartean. Ta-txan!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Entzun al duzu "programa bat debugeatu" esaldia? Horrela ikus dezakegu
          zer doan gaizki. Kodea debugeatzen duzunean, erroreak identifikatu eta konpontzen
          dituzu.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Gure lan eremuan baditugu dagoeneko zenbait bloke. Urrats botoia erabiliko
          dugu, blokeak urratsez urrats exekutatzeko. Honela gure emaitza zuzena den
          edota zuzendu behar dugun jakingo dugu.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Arazoa hemen dagoela ematen du! "Aurrera egin" beste bloke bat behar
          dugu. "Pauso bat eman" botoiak debugeatzen uzten diigu problema identifikatuz
          eta erroreak hautemanez.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Konputazioaren munduan kontzeptu garrantzitsuenetako bat agindu berriak
          definitzea da, zure hitzak programazio lengoaia batera gehitzea. Lengoai
          gehienak 100 agindu inguru izaten dituzte. Artea eta magia hitz berri hauek
          definitzean datza.
      2:
        image: notes/C3_bee_functions_2.png
        text: Hau bera etengabean egiten dugu kiroletan. Adibidez, saskibaloian, bote
          egiten ikasten hasten zara, sarrera bat egiten, erreboteak hartzen. Oso
          oinarrizko mugimendu hauek ikasten dituzunean, mugimendu berriak ikasten
          dituzu, eta eraikuntza bloke hauek elkarrekin ipintzen, "pick and roll"
          bat bezala. Orduan jokaldi konplikatuagoetara joan zaitezke. Behin jokaldia
          ikasita eta honi izen bat emanda, taldeko edonork jakingo du nola egiten
          den.
      3:
        image: notes/C3_bee_functions_3.png
        text: Antzera, ordenagailu bati ekintza bat nola egiten den irakasten diozunean
          komando sekuentzia horiek erabiliz, ekintza horri nahi duzun izena eman
          ahal diozu errepikatzea erraza izateko. Komando berri bat definitzen duzunean
          eta izen bat ematen diozunean, honi funtzio deritzo. Orain funtzioak erabiliko
          ditugu erleari laguntzeko.
      4:
        image: notes/C3_bee_functions_4.png
        text: Adibide honetan, gure funtzioa "hartu bi nektar" deitzen da, hemengo
          bloke berde hau. Badakigu "hartu bi nektar" funtzio definizioa adierazten
          duen kutxa grisari begiratuta ibiltzen dela. Hor barruan begiratzen badugu,
          "hartu bi nektar" blokeak nektarra hartu eta berriz hartuko du. Begiratu
          beti kutxa grisarn barruan zer dagoen funtzio bloke berdeek zer egin dezaketen
          jakiteko.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Orain begizta habiaratuak erabiliko ditugu erlearekin. Hasiera kodea
          dugu erleari aurrera mugitu, 3 aldiz nektarra hartu eta eskuinera biratzeko
          esaten diona. Har dezagun kode zati osoa eta "errepikatu" bloke baten barruan
          habiaratu eta 3 errepikapen jarri. Eginda!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Orain zure lagunekin partekatzeko aukera izango duzun zure lehenengo
          errebote jokoa sortzeko zorian zaude. Mundiala!
      2:
        image: notes/C3_bounce_2.png
        text: Hasi ahal izateko erraketaren kontrolak teklatuaren gezidun teklekin
          lotu behar ditugu.
      3:
        image: notes/C3_bounce_3.png
        text: Hau egin dezakegu "ezkerreko gezia sakatzean" blokea "mugitu ezkerrera"
          blokera lotuz eta gauza bera "eskuineko gezia sakatzean" eta "mugitu eskuinera"
          blokeekin eginez. Saiatu zaitez eta gutxi barru zure errebote jokoa programatzen
          ariko zara!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Ikasgai honetan pentsamendu abstraktua landuko dugu. Batzuetan, jolas
          berri bat ikastea gogorra izan daiteke, ezta? Hasieran, nahasgarria dirudi
          eta, batzuetan, ez dago inor zure arauak azalduko dizkizunik, eta zure kabuz
          asmatu behar duzu nola jolastu.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Hemengo ozena da gero eta hobeagoa izan zaitezkela pentsamendu-trukoak
          jakinda. Truko hauek arazoak konpontzeko balio dute. Lekzio honetan, horrelako
          4 truko ikasi eta zure lagunekin praktikan jarriko dituzu, jokuaren erregelak
          zein diren imaginatzeko.
      3:
        image: notes/C3_computational_thinking_3.png
        text: 'Problema handi bat hainbat zati txikiagotan banatzen duzunean, zure
          burmuina erabiltzen ari zara problema handiaren zailtasuna deskonposatzeko.
          Behin hori eginda, hurrengo trukora pasa gaitezke: patroi-parekaketa.'
      4:
        image: notes/C3_computational_thinking_4.png
        text: Hau gertatzen da gauzen artean antzekotasunak bilatzen ditugunean. Behin
          berdinak diren gauzak bereizten dakigunean, gai gara konturatzeko ze gauzak
          diren diferenteak. Diferentzia horiek desagertzen direnean, horri abstrakzioa
          deitzen zaio.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Behin arazoa konpontzeko pausoak asmatu eta gero orden zehatz batean
          jarri ditzakezu algoritmoa izenekoa edozeinek erabili ahal izateko. Lau
          pauso hauek erabiliko ditugu joko arau gabe nola jolasten de asmatzeko.
          Jokoaren bukaeran horrelako itxura duen zerbait jolasteko gai izango zara!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Ikasgai hau talde lana deitzen da. ikasgai honetan, kartak erabiliko
          ditugu taldeko lanak nola lagun gaitzaken ikusteko. Beraz, bildu lagun batzuk
          eta egin zerbait ikaragarria. Talde lana taldean erabiltzen da, lana azkarrago
          egiteko.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: Informatikan talde-lana erabiltzen da uneoro. Milaka amateur eta profesionalek
          beraien konputagailuak konektatzen dituzte bilioika informazio-zatien artean
          bilatzeko. Marsenne-ren zenbaki bakoitia topatzeko edota alienekin komunikatzeko
          asmoarekin.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Film bat ikusten duzunean, filmaren segundo bakoitza 24 irudi independentez
          osatzen da. Irudi horiei fotograma esaten diegu. Irudi horietako bakoitzak
          behar du sortzea eta erreproduzitzea eta denak elkarrekin jartzea behar
          du. Nire taldea eta ni, denak software garatzaileak gara. Denok batera lan
          egiten dugu software pakete bat sortzeko irudi bat sortzen duena, pantailan
          ikusten duzun azken irudia sortzen duena hain zuzen ere. Artistek eta beste
          garatzaile batzuk haien talde laneko parte gisa erabil dezaketen tresna
          bat eta erabili dezaketena pantailan ikusi nahi dituzten irudiak irudiak
          sortzeko prozesuan.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Adibidez, Nemoren bilan, Crush eta Squirt eta bere lagunak hegan egiten
          ari dira Australiako Ekialdeko korrontean zehar. Mugitzen den uraren irudiak
          ikus daitezke, dortokaren bizkarrean ikusten dituzun koloreak arrainen aldeetan
          ikusten dituzu. Hori guztia matematika eta guk idazten ditugun ordenagailu
          programen bidez egiten da. Horiek gero artistari ematen dizkiogu eta erurek
          azken irudia egiten dute, findu eta eder eta dibertigarri bihurtzen dituzte.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Ikasgai hau labirinto karrera deitzen da. Ia pertsona guztiek gogoko
          dute ordenagailuan jokoetan jokatzea. Noizbait pentsatu al duzu nola konputagailuen
          programatzaileek egiten duten joko baten pausoa programa batean bihurtu?
          Lehenengo pausoa ordenagailuen jokoak egiteko eta edozein problema konpontzeko,
          pentsatzea eta plangintza bat egitea da.
      2:
        image: notes/C3_dice_race_2.png
        text: Problema bat nola konpondu pentsatzeak, algoritmo bat sortzen du, problema
          ebazteko pausoak definitzen dituena. Ikasgai honetan, dado jokoarentzako
          algoritmo bat diseinatuko duzu. Zure lagunek algoritmo hori jarraituz jokatu
          beharko dute. Programatzailea emandako pausoaz ziur dagoenean, algoritmoa
          programa bihurtzeko ordua da, ordenagailuak ulertu dezan.
      3:
        image: notes/C3_dice_race_3.png
        text: Egunean egiten dugun ia guztiak algoritmo bat behar du, pauso lista
          bat non ataza bukatzeko jarraitu dezakezuna. Pentsatu eskolara joateko prestatu
          nahi duzula edo egun dibertigarri bat planteatzen zaudela zure lagunekin
          edo otordu bat hartzeko. Ataza hauetako edozein aurrera eramateko, zatitan
          banatu beharko da eta batzuetan pausoak ordena zehatz batean egon behar
          dira.
      4:
        image: notes/C3_dice_race_4.png
        text: Pentsatu sandwich bat egin nahi duzula. Berdin dio zein osagai jartzen
          duzun lehenengo. Baina ezin duzu kakahuete gurina jarri honen edukiontzia
          ireki arte. Ordenagailuek algoritmoak behar dituzte eta programak erakusteko
          hauei nola eraman aurrera gauza sinpleak horretan pentsatu gabe.
      5:
        image: notes/C3_dice_race_5.png
        text: Algoritmo bat konputagailuari berak egin beharreko ekintzak programatu
          aurreko pentsatzeko pausoa da. Algoritmo bat makina-lengoia batera pasa
          beharko da berau exekutatzeko. Ekintza hori hainbat pausotan banatuz askotan
          zaila izaten da, baina edozein gauza berrietan bezala, praktikarekin asko
          errazten da.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: 'Begiztak eguneroko bizitzan egiten dugunaren oso antzekoak dira. Imajinatu
          zure autoa garbitzen ari zarela, hau garbitzen jarraituko duzu guztiz garbi
          egon arte. Beste modu batera esanda, garbi ez dagoen bitartean garbitzen
          jarraitu. Honelako kontuak uneoro ebaluatzen dituzu. '
      2:
        image: notes/C3_farmer_while_2.png
        text: Gauza berri bat dugu baserritarrari laguntzeko. "hile-block" deitzen
          da. Egia esan, erraza da. Goiko agindua egia den bitartean, zerbait egin.
          Adibidez, meta dagoen bitartean mugitu belra multzo bat. Aurrera eta probatu
          zure baserritarrarekin.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Eguzki-harrapatzaile erabilgarria egiteko ikasgaia. Funtzioak erabiliz
          egingo dituzu honako eguzki-harrapatzaileok. Urrats batzuk jarraitu beharko
          dituzu eta horietako batzuk maiz errepikatu beharko dituzu.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: Eguzki-harraptzaile apaingarria egiteko prozesua sinplifikatzeko lehenengo
          urratsa, errepikatu beharreko agindu segida funtzio batean sartzea da.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Eguzki-harrapatzaile ederra sortzea urrats zehatzak jarraitzetik areago
          doa. Batzutan, sortzaileak izateko apeta dugu eta erabiltzen ari garen aleen
          kolorea aldatu nahi izan ohi dugu. Eguzki-harrapatzailea berezia eta bakarra
          egin dezakegu ale-koloredun ezberdinak erabilita.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: 'Zure eguzki-harrapatzailea bakarra izango da munduan aleak aldagai
          gisa ikusteari ekiten diozunean. Aldagai bat zera da: informazioa duen kokapen-marka
          da, informazioa alda daiteke. Eguzki-harrapatzaile politak sor itzazu funtzio
          eta aldagiak erabiliz eta goza ezazu!'
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Ikasgai oso hau Internetaren ingurukoa da. Interneta oso lanpetuta dagoen
          lekua da, errepide baten antzekoa. Mezuak kotxearen antzekoak dira eta beraien
          helburura iritsi nahi dute. Mezuak Internetaren barnean oso azkar dabil.
      2:
        image: notes/C3_internet_2.png
        text: Interneta nola dabilen ikasten baduzu zuk erabiltzean zer egiten duen
          jakiteko lagunduko dizu. Zure mezuak zure lagunaren postara edo zure web
          gune gustokoenera nola bidaltzen diren ikasiko duzu ere. Behin errepide
          bat ezagututa bertatik gidatzea erreza den bezela behin interneta ezagututa
          bertan nabigatzea erraza izango da.
      3:
        image: notes/C3_internet_3.png
        text: 'Internetez mezuak bidaltzea eta postaz bidaltzea, antzekoak dira. Internetez
          bidaltzeak berezitasun batzuk ditu. Esaterako: hemen naiz, Google.com-en.
          Web orri honen IP helbidea zenbaki hau da. IP helbidea posta jasotzen duenaren
          helbidearearekin pareka daiteke. Demagun mezu bat bidali nahi diozula postaz
          beheko bulegoan dagoen norbaiti. URLa eta IP helbidea ikus ditzakezu bere
          atean? Mezua idatzi dut eta bidali sakatu.'
      4:
        image: notes/C3_internet_4.png
        text: Posta zerbitzu arruntean ez bezala, gertatzen den lehenengo gauza da
          Internetek mezua zati txikiagoetan banatzen duela errazago bidali ahal izateko.
          Zati txiki hauei paketeak deritze. Aldiro, pakete horietako bat bidaltzen
          da helburura. Ondoren, pakete guztiak elkartu eta ordenatu egiten dira jasotzaileak
          mezua behar bezala irakurtzeko aukera izan dezan. Noski Internetaren funtzionamenduaren
          inguruan gauza askoz gehiago dago ikasteko, baina hauxe, hasteko modu ona
          da. Internet erabiltzaile jakintsu bat bihurtzeko bidean zaude! Segi zure
          familia eta lagunei ikasi duzuna kontatzera!
      5:
        image: notes/C3_internet_5.png
        text: Nire izena Amanda Camp da eta Sotfware Ingeniaria naiz Google-en. Profilak
          eta kontaktuak gordetzen dituen zerbitzari batean lan egiten duen talde
          batean lan egiten dut. Nire lanean, asko pentsatzen dugu kontaktuan nola
          bidali dezakegun beste gailu batzuetara, ala nola zure mugikor zenbakia.
          Pertsona askok kontaktu asko dauzkate, 1000 kontaktu adibidez, eta ez dugu
          kontaktu hauek guztiak batera bidali oso mezu luzea baita. Internetak mezu
          luzeak paketetan banatzen dituen modura, kontzeptu bat erabiltzen dugu,
          orrikatzea deritzona, non zure mugikor zenbakia 100 kontakturi bakarrik
          bidaltzen zaien aldiro. Eta zure mugikorrari erantzuten dio hurrengo 100
          kontaktuekin.
      6:
        image: notes/C3_internet_6.png
        text: Softwareak duen gauzarik garrantzitsuena munduan izan dezakeen eragina
          da. Nire lehen hastapenak 19 urte nituela egin nituen. Unibertsitateko bigarren
          urtea egiten ari nintzela uste dut. Idatzi nuen lehen programak tenperaturak
          Fahrenheit formatutik Celsiusera eraldatzen zituen. Programazioak jendeari
          asko lagun diezaiokelakoan nago, horregatik gustatzen zait hainbeste. Googlen
          mundu osoari laguntzeko programak idatz ditzaket, oso interesgarria da,
          zalantzarik gabe.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Jendeak egunero erabakiak hartzen ditu. Adibidez, kalera joan aurretik
          baldintza bat erabiltzen duzu, euria ari badu xira hartu beharra daukat.
          Konputagailuak zoragarriak dira, behin horrelako gauzak erabakita abiadura
          sinestezinean exekuta ditzakete. Konputagailu programa bat, matematika pixka
          bat eta erabakiak hartzeko baliagarriak diren hainbat baldintzaz osatzen
          da.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: '"Baldin" blokeak zonbiari laguntzen dio erabakiak hartzen. Zerbait
          aztertzen du. Adibidez, ea ezkerraldean bide bat dagoen aztertzen duen blokea
          erabil dezagun, eta jarri bere barruan ezkerraldera bira egiteko agindua.
          Horrekin zonbiari esaten diogu bere ingurua aztertzeko, begiratzeko ea bide
          bat dagoen ezkerraldean eta horrela bada bira egiteko.'
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Gero, erabil ezazu "aurrera mugitu" blokea errepikapen bloke honen barruan,
          aurrera mugitzeko berak nahi duen heinean. Geroago, aldaketa bat dagoenean,
          if blokeak esango sizu noiz mugitu ezkerretara. Ikusiko duzu nola hori egiten
          badugu, ezkerratara giratu eta eta aurrera jarraitzen badugu, gure helburua
          lortuko dugu.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Adibide honek baldintzak nola erabili ulertarazten du, oinarrizko kontzeptua
          dena programazioaren munduan. Ikasi nuen lehenetariko gauza lerrokatu hiru
          motako joko bat nola idatzi izan zen. Baldintza batzuk zituen aurkaria irabaztear
          bazegoen beharrezko gelaxka blokeatzeko. Ondo pasa baldintzak nola erabili
          ikasten, hau oinarrizko kontzeptua da.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Adibide honetan, zure helburua da zonbia eramatea ekiloreraino. Erabil
          daitezke mugitu aurrera bost bloke edo esan diezaiokegu ordenagailuari aurrera
          mugitzeko eta bost aldiz errepikatzeko errepikatu behin blokea erabiliz.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Honi esker denbora aurreztuko duzu eta gainera errazagoa da. Hau erabiltzeko,
          sartu "mugitu aurrera" blokea "errepikatu" blokearen barruan. Sakatu "Exekutatu"
          eta zonbia aurrera mugituko da bost aldiz ekilore gozo-gozoraino.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Orain arte, animazio edo istorio bat egiten aritu zara, exekutatzean
          behin eta berriro gauza bera egiten duena. Orain , jolas interaktiboa egin
          dezakezu eta benetan jolastu ahal izango duzu.
      2:
        image: notes/playlab_2.png
        text: Probatzeko bloke berriak daude. "gezia sakatzean" eta "mugitu aktorea"
          bloke berriak ditugu. Jarri al ditzakezu bloke hauek batera aktoreak mugitzeko
          gezien bitartez? Badaude ere bloke batzuk erantzun bat emateko aktorea klikatzen
          denean edo talka egiten duenean. Proba itzazu eta jolastu hauekin!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Hau da abestiak idazten ikasteko unea. Musikak ordenagailu programa
          batekin antz handia du. Notek eta hitzek kantariari esaten diote zer egin
          behar duen zehatz mehatz. Musika zati batzuk behin eta berriro erabiltzen
          dira.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Honi abestiaren leloa deitzen diogu. Ordenagailu programa batean, behin
          eta berriro erabiltzen diren zatiei funtzio izena ematen zaie. Musika partitura
          bat irakurtzean, lelo hitza agertzen denean, kantatzen al duzu hitz hori?
          Ez, orrialdearen goiko aldera begiratzen duzu ikusteko zein hitzek osatzen
          duten leloa.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Ikasgai honetan, abesti txotxolo bat ikasiko duzu. Abestiak lelo bat
          dauka, behin eta berriro kantatzen dena. Funtzio bat kode zati bat da, behin
          eta berriro erabil dezakezuna. Programazioa errazagoa eta eraginkorragoa
          egiten du, eta horrela ez dituzu zure funtzioko urrats guztiak behin eta
          berriro idatzi behar. Behin bakarrik idatzi behar duzu!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Hau baldintzapeko blokea da. Lorean edo abaraskan baldin bazaude, zerbait
          egin beharko duzula adierazten du. Oso erabilgarria da ez dakigunean zenbat
          nektar edo ezti jaso behar dugun, hemen galdera markak adierazten duen bezala.
      2:
        image: notes/C4_bee_conditional_2.png
        text: 'Adibide honetan, hau idatziko dugu: lore bat baldin badago, eskuratu
          nektar guztia; eta abaraska bat baldin badago, egin eztia. Ta-txan!'
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Bloke berri bat daukagu, "baldin-bestela" izena duena. Baldintzapeko
          agindu bat da, aurreko puzzletan erabili duzun "baldin" blokearen antzekoa.
          Baina oraingo honetan, beheko aldean, badago atal berri bat "bestela" dioena.
          "Baldin-bestela" blokeari esker, erleak bi aukera desberdinen artean erabaki
          dezake zer egin. Erlea lore batean baldin badago, blokearen goiko zatian,
          "egin"-en ondoren jarri dituzun ekintzak egingo ditu. Erlea ez badago lore
          batean, "bestela"-ren ondoren jarri dituzun ekintzak egingo ditu.
      2:
        image: notes/C4_conditionals_2.png
        text: '"Baldin" aginduei esker, konputagailuek har ditzakete erabakiak. Programatzaileak
          ezartzen ditu baldintzak konputagailuarentzat: egoera jakin bat gertatzen
          bada, orduan konputagailuak ekintza jakin batzuk egin beharko ditu. Bestela,
          hau da, baldintza betetzen ez bada, orduan beste ekintza batzuk egin beharko
          ditu konputagailuak. Gure "baldin-bestela" blokearen goiko zatian <<baldin
          lore batean>> jartzen du. Baina beste edozer gauza jar genezakeen; adibidez:
          <<baldin 2 nektar>> edo <<baldin bidea libre aurrera>>, eta gure blokearen
          funtzionamendua berdina izango litzateke. Hau da, "baldin" blokearen baldintza
          egiazkoa bada (betetzen bada, alegia), lehenengo multzoko ekintzak egingo
          ditu. Faltsua bada (baldintza betetzen ez bada), berriz, bigarren multzoko
          ekintzak egingo ditu.'
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Begizta bat sortzeko zure kodean errepikatu bloke bat erabiltzen duzunean,
          nola daki konpatagailuak nahikoa aldiz errepikatu duela? errepikatu blokeak
          kode zati konplexuago bat izkutatzen du, "for" izeneko begizta, hasierako
          balio batetik amaierako baliorarte inkrementu zehatz batekin zenbatzen duena.
      2:
        image: notes/C4_for_loops_2.png
        text: Adibidez, errepikatu hiru blokeak 1etik 3arte zenbatzen du, banaka.
          Zenbatzen duen aldi bakoitzean, begiztaren barneko kodea exekutatzen du.
          "for" begiztak zenbat aldiz exekutatu den jakiteko kontagailu aldagai bat
          erabiltzen du, hasierako balioarekin hasieratzen dena begiztaren hasieran
          eta inkrementu zehatz batekin gehitzen dena begizta exekutatzen den bakoitzean.
          Kontagailu aldagaiaren balioa amaierako balioa baino handiagoa denean, begizta
          amaitzen da.
      3:
        image: notes/C4_for_loops_3.png
        text: Errepikatu blokearen ordez benetako begiztak erabiltzearen abantaila
          zera da, zure begiztan bertan kontagailua aldagaiaren balioa ikusi eta erabili
          dezakezula. Adibidez, lore batzuk badauzkat eta lehenengoak nektar bat badu,
          bigarrenak bi nektar eta hirugarrenak hiru, for begizta erabili dezaket
          erleari 'kontagailua' nektar biltzeko aldi bakoitzean, hau da, bat lehenengo
          lorean, bi bigarrenean, eta hiru hirugarrenean.
      4:
        image: notes/C4_for_loops_4.png
        text: For begiztan ere, kontagailua zenbaki batekin inkrementatu dezakezu
          aldi bakoitzean. 2naka, 4naka edo aldi bakoitzean aldatzen den kopuruka
          zenbatu dezakezu.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Begizta bat sortzeko zure kodean errepikatu bloke bat erabiltzen duzunean,
          nola daki konpatagailuak nahikoa aldiz errepikatu duela? errepikatu blokeak
          kode zati konplexuago bat izkutatzen du, "for" izeneko begizta, hasierako
          balio batetik amaierako baliorarte inkrementu zehatz batekin zenbatzen duena.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Adibidez, errepikatu hiru blokeak 1etik 3arte zenbatzen du, banaka.
          Zenbatzen duen aldi bakoitzean, begiztaren barneko kodea exekutatzen du.
          "for" begiztak zenbat aldiz exekutatu den jakiteko kontagailu aldagai bat
          erabiltzen du, hasierako balioarekin hasieratzen dena begiztaren hasieran
          eta inkrementu zehatz batekin gehitzen dena begizta exekutatzen den bakoitzean.
          Kontagailu aldagaiaren balioa amaierako balioa baino handiagoa denean, begizta
          amaitzen da.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Errepikatu blokearen ordez benetako begiztak erabiltzearen abantaila
          zera da, zure begiztan bertan kontagailua aldagaiaren balioa ikusi eta erabili
          dezakezula. Adibidez, lore batzuk badauzkat eta lehenengoak nektar bat badu,
          bigarrenak bi nektar eta hirugarrenak hiru, for begizta erabili dezaket
          erleari 'kontagailua' nektar biltzeko aldi bakoitzean, hau da, bat lehenengo
          lorean, bi bigarrenean, eta hiru hirugarrenean.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: For begiztan ere, kontagailua zenbaki batekin inkrementatu dezakezu
          aldi bakoitzean. 2naka, 4naka edo aldi bakoitzean aldatzen den kopuruka
          zenbatu dezakezu.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Begizta bat sortzeko zure kodean errepikatu bloke bat erabiltzen duzunean,
          nola daki konpatagailuak nahikoa aldiz errepikatu duela? errepikatu blokeak
          kode zati konplexuago bat izkutatzen du, "for" izeneko begizta, hasierako
          balio batetik amaierako baliorarte inkrementu zehatz batekin zenbatzen duena.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Adibidez, errepikatu hiru blokeak 1etik 3arte zenbatzen du. Zenbatzen
          duen aldi bakoitzean begiztaren barneko kodea exekutatzen du. zenbat aldiz
          exekutatu den jakiteko kontagailu aldagai bat erabiltzen du, hasierako balioarekin
          hasieratzen dena begiztaren hasieran eta inkrementu zehatz batekin gehitzen
          dena begizta exekutatzen den bakoitzean. Kontagailu aldagaiaren balioa amaierako
          balioa baino handiagoa denean, begizta amaitzen da. Errepikatu blokearen
          ordez benetako begiztak erabiltzearen abantaila zera da, zure begiztan bertan
          kontagailua aldagaiaren balioa ikusi eta erabili dezakezula.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Funtzio blokeak editatu dituzula, hutsetik funtzio berri bat sortzeko
          garaia da. Oso erraza da. Tresna-kutxak funtzioak izeneko kategoria du.
          Bertan klik egiten baduzu, sortu funtzioa izeneko botoi laranja ikusiko
          duzu. Botoian klik egin eta existitzen diren funtzio blokeak editatzeko
          erabili duzun funtzio editorea bistaratuko zaizu.
      2:
        image: notes/C4_function_create_2.png
        text: Lehen bezala, hasi funtzioari izena ematen, funtzioak egingo duenaren
          deskribapena idatziz. Adibidez, karratua edo triangelua marraztuko ditu
          eta, ondoren, tresna-kutxatik blokeak arrastatu beheko laneremu zurira.
          Gogoratu, bloke hauek funtzioa ixteko bloke berdearen barnera arrastatu
          behar dituzu.
      3:
        image: notes/C4_function_create_3.png
        text: Amaitu duzunean, egin klik gorde-n eta irten. Puzle nagusiaren laneremura
          itzuliko zara. Sortu berri duzun funtzioa bloke berde gisa azalduko zaizu
          zure tresna-kutxaren funtzioak kategoriaren barnean. Arrastatu eta askatu
          laneremu nagusian eta puzlea ebazteko beste blokeen gisa erabili ahal izango
          duzu.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Konputagailu programazioaren gauza onenetarikoa zera da, behin konputagailu
          bati gauza bat nola egin erakutsi diozunean, gauza hori berriz egin ahal
          izango duzu funtzio bati deituz. Funtzioari izen bat eman eta listo, dei
          egin diezaiokezu. Hau lengoaia zabaltzea bezala da.
      2:
        image: notes/C4_function_edit_2.png
        text: Eraiki dugun programan, karratu bat lau aldiz mugituz eta biratuz nola
          marraztu ikasi dugu. Funtzio hori hartu eta izena jar diezaiokegu, egin
          nahi dugun bakoitzean "karratua marraztu" esanda funtzio hori inboka dezan,
          kode hori. Egingo digu. Kontzeptu hori gehitu diogu gure programazio lengoaiari.
      3:
        image: notes/C4_function_edit_3.png
        text: Puzle hontan, zuretzat sortu dugu marraztu karratua funtzioa. Tresna-kutxan
          topatuko duzu bloke berde gisa. Karratu bat marrazteko lehen idatzi duzun
          kode bera idatzi behar duzu eta funzio hontan jarri. Horretarako, egin klik
          marraztu karratua bloke berdeko editatu aukeran. Honek funtzio editorea
          irekiko du. Funtzio editoreak 3 atal ditu. Funtzioari izena emateko lekua.
          Funzioaren aurretiko bloke berdean azalduko da hau. Ondoren idatzi zure
          funtzioak egingo duenaren deskribapen laburra.
      4:
        image: notes/C4_function_edit_4.png
        text: Kasu hontan, karratua marraztuko du. Hemen azpiko espazio zuria laneremua
          da eta orain arte erabili duzun laneremua bezalakoa da. Tresna-kutxako blokeak
          arrastatu eta askatu laneremuan. Gogoratu, karratua sortuko duten blokeak
          funtzioa itxiko duen bloke berdearen barruan jarri behar dira. Amaitutakoan,
          gorde eta irten. Honek puzle nagusiaren laneremura itzuliko zaitu. Aurrerantzean
          marraztu karratua funtzioa blokea erabili dezakezu puzlea ebazteko beste
          edozein blokeren gisan.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Hemen duzu 50 pixeleko aldeak dituen karratua marrazteko funzioa. Aparta
          baina eta 50 pixeleko karratu bat eta 100 pixeleko beste mat marraztu nahi
          baditugu? ez genituzke ia gauza bera egiten duten bi funtzio egin beharko.
          Parametro bat duen funtzioa erabili dezakegu.
      2:
        image: notes/C4_function_parameters_2.png
        text: |
          Parametroek funtzioetan aldagai gisa erabiliko diren balioak pasatzea ahalbidetzen dute. Funtzio honi Luzera izeneko parametroa gehitzen saiatuko gara tamaina desberdineko karratuak marraztu ahal izateko. Funtzio editorean, lehen bezala funtzioaren izena eta azalpena editatu ditzakezu baina
          parametro bat ere gehitu dezakezu. Idatzi parametroaren izena eremuan eta egin klik Gehitu Parametroa-n. Honek, sortu berri duzun parametroaren izena duen bloke gorri bat sortuko du. Orain, mugitu aurrera 100 blokea ordeztu dezakezu Luzera parametroarekin aurrera Luzera-k adierazten duen adina egin dezan.
      3:
        image: notes/C4_function_parameters_3.png
        text: Gorde eta irten, eta arrastatu tresna-kutxako funtzioak kategorian sortu
          berri duzun sortu karratua blokea. Luzera-n aldamenean espazio hutsa ikusiko
          duzu funtzioak Luzera parametroaren balioa jakin behar duelako. Matematika
          kategoritik arrastatu zenbakizko bloke bat eta espazio horretan kokatu.
          Funtzioa behin eta berriro erabili dezakezu luzera desberdinekin tamaina
          desberdineko karratuak marrazteko. Probatu zuk zeuk!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalean programazioa testuan soilik oinarritzen da, baina guk Blockly
          erabiliko dugu, honek bloke bisualak erabiltzen baititu eta hauek arrastatuz
          idatziko ditugu gure programak. Dena den, hau funtsean programazioa da!
          Hasteko, kode zati bat idatziko dugu Angry Birds-eko txori hau labirinto
          batean zehar mugi dadin, helburutzat bere arrautzak lapurtu dizkien zerriengana
          heltzea izango duelarik.
      2:
        image: notes/C4_intro_2.png
        text: Blockly hiru zati nagusitan dago banatuta. Ezkerraldean txoriaren labirintoa
          dago, non programa exekutatuko den. Maila bakoitzarentzat jarraibideak labirintoaren
          azpian daude idatzirik. Erdikaldea tresna kutxa da eta bloke horietako bakoitza
          txoriak uler dezakeen komando bat da. Eskuinaldeko espazio zuria lan eremua
          da eta bertan eraikiko dugu programa.
      3:
        image: notes/C4_intro_3.png
        text: Mugitu blokea gure laneremura arrastatu eta "abiarazi" sakatzen badut,
          zer gertatzen da? Txoriak gelaska bat egingo du aurrera. Eta aurrera egin
          ondoren txoriak beste zerbait egitea nahi badut? Gure programari beste bloke
          bat gehitu diezaioket.
      4:
        image: notes/C4_intro_4.png
        text: '"biratu eskuinera" blokea aukeratuko dut eta nire mugitu blokearen
          azpira arrastatuko dut gezi horia azaltzen den arte. Gero, askatu eta bi
          blokeek bat egingo dute. Berriro "Abiarazi" sakatzerakoan, txoriak gure
          lan eremuan dauden komando guztiak beteko ditu, goitik behera.'
      5:
        image: notes/C4_intro_5.png
        text: Inoiz bloke bat ezabatu nahi baldin baduzu, kendu pilatik eta arrastatu
          zakarrontzira. Behin "abiarazi" sakatu duzula, beti izango duzu aukera "berrezarri"
          botoia sakatzeko eta txoria hasierara bueltatzeko. Orain harrapa ditzagun
          txerri horiek!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: 50 pixeleko altuera eta zabaleran altueraren bikoitza duen laukizuzena
          marraztu nahi dut, nola programatu konputagailua hori egiteko? Tira, artistari
          50 gora, eskuinera bira, ondoren aurrera 100 egin eta gero guztia bi aldiz
          mugitzeko esatea daukat. Baina horrela kalkulu matematikoak nik egiten ditut
          konputagailuaren ordez.
      2:
        image: notes/C4_math_artist_2.png
        text: |
          Berrogeitamar bider bi egitea buruz agian ez da oso nekeza zure buruarentzat baina konputagailuak oso onak dira kalkulu matematikoak egiten eta,
          horregatik, ahal dugun neurrian haien esku utzi behar ditugu. Altuera izeneko aldagaia erabili izan banu, orduan, erraz aldatu ahal izango nule altuera berrogei eta hamarrera eta aldatu nire algoritmoa artistari altuera adina egiteko gora, eskuinera bira eta, gero, aurrera egiteko altuera 2 aldiz, zabalera altueraren bikoitza duen laukizuzena marrazteko.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Ikasgai honek Tangram Algoritmoak du izena. Tangram-a 7 piezako puzle
          bat da eta piezak hauek elkartu daitezke beste forma batzuk sortzeko. Algoritmo
          bat erabiliko duzu zure lagunari azaltzeko puzlea nola osatu.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Algoritmo bat ataza bat burutzeko urrats zerrenda bat baino ez da. Egunero
          erabiltzen ditugu erosketa zerrendak egin eta errezetak jarraitzeko adibidez.
          Algoritmo sinplea egiten baduzu, interpretatzeko aukera asko egongo dira
          eta algoritmoa exekutatzean lortzen den emaitza esperotakoaren desberdina
          izan daiteke. Mundu guztiak emaitza berdina lortzea nahi baduzu, orduan
          zure algoritmoak zehatza eta espezifikoa izan behar du.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Gaur, algoritmo bat erabiltzen ari naiz margolan bat amaitzeko. Otso
          batzuk margotu nahi nituen baina ez naiz oso margolari trebea. Zorionez,
          zenbaki bidez margotu daiteke. Berrogei kolore daude eta hizki eta zenbaki
          txikiak daude eskualde bakoitza ze kolorerekin margotu behar den esaten
          dizutena. Zenbaki bidez margotu aukerak ze kolore erabili eta non esaten
          dit zehatz mehatz.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Oso zehatza da, beraz, kapaz naiz norabideak jarraitzeko eta margolan
          zoragarria agertuko da. Algoritmo aparta da. Aginduak nahikoa espezifikoak
          izango ez balira, nire otsoak ez lirateke horren politak izango. Zerbait
          zehatz-mehatz pentsatutako moduan agertzea nahi baduzu, oso zehatza izan
          behar duzu.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Talde bakoitzean, argibideak ematen dituen pertsonak, paperari heltzen
          dionak, erabaki behar du zeintzuk izango diren "deskonektatuta" eta "konektatuta"
          ikurrak. Bitarrez, bi ikurreko alfabetoaren parekoa da. A eta B-k zure alfabeto
          osoa osatuko balute bezala, baina 0 eta 1 ikurrekin.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: Bitarra erabiltzeko modurik arruntena baldin agindua da. Programazio
          arloan klasikoa da. Programak aurrera egiten du eta zerbait egiazkoa bada,
          orduan beste hau egin esaten du. Edo ez da egia eta, orduan, beste zerbait
          egin. Eta zerbait konplexuagoa egin nahi baduzu? If agindu baten ordez,
          konputagailu bateko irudi edo hots batekin lan egin nahi duzu.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'Konputagailuak bitarrez ulertzen du baina irudiak ez dira bitarrak.
          Ez da 0 edo 1, orduan, nola? Hemen duzu adibide bat: irudi eder hau duzu,
          Irudia oinarrian informazioa da. Informazio guztia era batera edo bestera
          bitarrez kodetu daiteke, pentsatu behar duzu nola.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Imajinatu panda artz honen gainean lauki sarea jartzen dugula eta lauki
          bakoitza beltzetik edo zuritik gertuago dagoen erabaki behar dugula. Eta
          horrela margotzen dugula. Orain, lauki bakoitza zuria edo beltza izango
          da, demagun lauki beltzak zeroak direla (digitu bitarra) eta lauki zuriak
          batekoak, beste digitu bitarra, Amaieran, zeroko eta bateko mordoa izango
          duzu. Horrela adierazten da irudi hau bitarrez.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Ikasgai honek for begizta dibertigarria du izena. Ikasgai hontan, lerro
          zenbaki bat erabiliko dugu dado jolas batean aritzeko. Jokalari bakoitzak
          hiru aldiz botako du dadoa hasteko balioa, amaitzeko balioa eta gure tartea
          esleitzeko. Txanda bakoitzean, hasteko balioa inguratuko dugu zirkulu batez,
          eta baita gure tarteak adierazten duen adina pauso aurrera dauden zenbakiak
          ere. Amaitzeko balioa ateratzerakoan amaituko ditugu inguraketak. Puntuazio
          handiena lortzen duena da irabazlea!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For begiztak erabilgarriak dira leku askotan eta eguraldi iragarlea
          bazina, for begiztak nonahi erabiliko zenituzke. Kaixo, Becky naiz. Everpower
          Renewables-en egiten dut lan haize iragarle gisa. Haizearen abiadurak iragartzen
          ditut Columbia River Gorge zonaldean, enpresak bertan dituen haize-parkeekin.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Nolako haizea egongo den han ulertu nahi dug zenbat potentzia sortuko
          den jakiteko. Informazio hori energia salerosleei ematen diegu denbora errealean.
          Informazio horretan oinarrituz haiek potentzia saldu eta erosten dute ziurtatzeko
          sare energia orekatuta mantentzen dela, zure etxeko argiak piztuta daudela
          eta gure haize-parkeetatik ateratzen den energia maximizatzen dugula.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Hi, I'm Kathleen Kennedy and I'm the producer of Star Wars, The Force
          Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.
      2:
        image: notes/starwars_intro_2.JPG
        text: Hi I'm Rachel Rose, I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artists develop rigs which are the parts of the character
          that move that allow the character to look very believable in a galaxy far
          far away.
      3:
        image: notes/starwars_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game. We'll
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so that we can drag and drop to
          write the programs. Under the hood, you're still creating code. After you
          try the basics with blocks, we'll switch you to JavaScript, one of the most
          popular programming languages on the web.
      4:
        image: notes/starwars_intro_4.JPG
        text: To start off, we're going to work with Rey to program BB-8 to walk to
          collect all of the scrap parts. Your screen is split into three parts. On
          the left is the Star Wars game space, where code will run. The instructions
          for each level are written below the game space.
      5:
        image: notes/starwars_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_intro_6.JPG
        text: The white space on the right is called the workspace and this is where
          we are going to build our program.
      7:
        image: notes/starwars_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace and press run, what
          happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together.
      9:
        image: notes/starwars_intro_9.JPG
        text: When I press run again, BB-8 will perform the commands that are stacked
          from top to bottom on our workspace. If you ever want to delete a block,
          just remove it from the stack and drag it back into the tool box.
      10:
        image: notes/starwars_intro_10.JPG
        text: After you've hit run, you can always hit the reset button to get BB-8
          back to the start. Now let's get rolling!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Inside the blocks we've been using are JavaScript commands. JavaScript
          is the most popular programming language for professional developers today.
          Blocks are a great way to get started learning to code and in fact, top
          universities like Harvard and Berkeley start teaching this way. But once
          we learn the basics, engineers write code by typing because it allows us
          to go faster.
      2:
        image: notes/starwars_typing_2.JPG
        text: We can type hundreds of commands without having to find them in the
          toolbox or drag them out. Because you're learning typing may be slower at
          first but we wanted you to give it a try.
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show
          text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you
          so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force
          Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artist develop rigs, which are the parts of the character
          that move that allow the character to look very believable in a galaxy far,
          far away.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game that will
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so we can drag and drop to write
          the programs. To start off, we're going to work with Rey to program BB-8
          to walk to collect all of the scrap parts.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars
          game space where code will run. The instructions for each level are written
          below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together. When I press run
          again, BB-8 will perform the commands that are stacked top to bottom on
          our workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: After you hit run, you can always hit the reset button to get BB-8 back
          to the start. Now let's get rolling!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: My name is Jens Bergensten but I'm better known as Jeb. I'm the lead
          developer on Minecraft, here at Mojang in Stockholm. I think I was eleven
          or maybe twelve and I started programming because I wanted to make games.
          One of my father's friends told me that in order to make games, you need
          to learn how to program. That's how I got started. I like designing and
          figuring out the architecture of games. That's what I really like about
          Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Over the next hour, you're going to learn the basics of computer science
          by programming Alex or Steve to move through a simulated piece of a Minecraft
          world.
      3:
        image: notes/mc_intro_3.JPG
        text: Traditional programming is usually in text but today we'll use Blockly,
          a system which uses visual blocks that you can drag and drop to write programs.
          Under the hood, you're creating Javascript code.
      4:
        image: notes/mc_intro_4.JPG
        text: The concepts you'll be learning are what computer programmers use every
          day and are the foundation to computer science. Here at Mojang, we use these
          same concepts to make Minecraft work.
      5:
        image: notes/mc_intro_5.JPG
        text: Before you start, you'll pick your character. I'm going to choose Alex.
          Let's build code for a program that will help her move around the screen.
      6:
        image: notes/mc_intro_6.JPG
        text: Your screen is split into three main parts. On the left is the Minecraft
          playspace where your program will run. The instructions for each level are
          written below.
      7:
        image: notes/mc_intro_7.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that directs Alex's actions.
      8:
        image: notes/mc_intro_8.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      9:
        image: notes/mc_intro_9.JPG
        text: If we drag the moveForward(); block to our workspace and then click
          run, what happens? Alex moves forward one space on the grid.
      10:
        image: notes/mc_intro_10.JPG
        text: And what if we want to do something after she has moved forward one
          space? We can add another block to our program. I'm going to choose the
          turnRight(); block and I'll drag it underneath my moveForward(); block until
          this orange line appears. Then I'll drop it and the two blocks will snap
          together. When we press run again, Alex will perform the commands that are
          stacked from top to bottom in our workspace.
      11:
        image: notes/mc_intro_11.JPG
        text: If you ever want to delete a block, just drag it from the stack back
          to the toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: 'To undo your changes and get back to how the level started, use the
          Start Over button in the top right corner of the workspace. One more thing:
          you see the little triangle on the turn blocks? Anytime you see these triangles,
          it means that you can pick a different option. Let''s start coding!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: I'm Lydia Winters, Mojang's brand director and we made a little game
          called Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: My favorite thing to do in Minecraft is explore. I love adventuring
          in caves and seeing what I can find. As someone who isn't a programmer,
          I'm really excited to go through the Minecraft lesson and actually learn
          some coding myself.
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier
          if we could just tell the computer to perform the moveForward(); command
          four or five times. Luckily for us, computers are really good at repeating
          commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: When building Minecraft, we use repeat loops to place all the initial
          materials for creating a new world. That's thousands and thousands of blocks.
          We also use loops in little ways, for example to make Alex's feet move back
          and forth as she walks. Repeat loops are a powerful part of programming.
      5:
        image: notes/mc_repeat_5.JPG
        text: Night is coming so in the next couple of levels, we're going to build
          a house to stay safe. We're going to use the repeat block to do this very
          easily.
      6:
        image: notes/mc_repeat_6.JPG
        text: To build a wall of our house, we can either tell Alex to moveForward();
          and place planks four times or we can tell her to moveForward(); and place
          one plank, then take this command and use the repeat block to have her perform
          the action multiple times. Now we'll click on the repeat block and tell
          her how many times we want her to perform this action. Now let's build our
          house before night falls! Have fun.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Now we're going to learn about if statements. If statements are a fundamental
          part of learning to program. They help a computer make decisions.
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when
          I unlock my phone, it runs some code that says if I enter the password correctly,
          then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react
          to what they see in the world. For example, if there is a rock in front
          of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: In this case, we don't want to fall in the lava. It's easy to plan for
          the lava. We can see it on the screen. But what about the lava that we can't
          under the stone?
      5:
        image: notes/mc_if_statements_5.JPG
        text: After we mine the stone, we'll need to check if there's any lava in
          that place before moving forward. If there is lava there, we want to place
          a stone in front of our character before we can move forward. That way we
          can safely move on. Time for more mining! And remember to use the if statement
          to watch your step.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[students talking] It''s about to get real. Shear. I made an L out
          of torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: When you're done making your creation, choose share to get a link to
          share with your friends. Have fun!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[students talking] It''s about to get real. Shear. I made an L out
          of torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
