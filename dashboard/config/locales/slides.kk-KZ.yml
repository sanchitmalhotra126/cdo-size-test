"kk":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: 'Кодтың алғашқы сағатына қош келдіңіз! Өзіміздің алғашқы бағдарламалаудың
          дәм татуымызды батайық. '
      2:
        image: notes/hoc1_2.jpg
        text: Біз код жазу үшін блоктарды алып-қосуға болатын визуалды Blockly бағдарламалау
          тілін қолданатын боламыз.
      3:
        image: notes/hoc1_3.jpg
        text: Кодтардың көбісі теріліп жазылады, бірақ Blockly визуалды. Әрбір блок
          "шынайы" код жолына сәйкес.
      4:
        image: notes/hoc1_4.jpg
        text: Сіздер қосымшалар жасаудан бастап Марс бетінде жүруші аппараттарды басқаруға
          дейін барлық жерде қолданылатын информатиканың негіздерін, концепцияларын
          үйренесіздер.
      5:
        image: notes/hoc1_5.jpg
        text: Бағдарлама сіздің компьютеріңіз бағынатын нұсқаулар жиынтығы болып табылады.
      6:
        image: notes/hoc1_6.jpg
        text: Сіздің алғашқы бағдарламаңыздың мақсаты Ашулы Құсты лабиринт арқылы
          Жасыл Торайға дейін жеткізу.
      7:
        image: notes/hoc1_7.jpg
        text: Сол жақта лабиринт орналасқан, онда бағдарлама орындалады. Әр жұмбақ
          үшін нұсқаулар лабиринттің астында көрсетілген.
      8:
        image: notes/hoc1_8.jpg
        text: Ортадағы құралдар жинақтамасында Ашулы Құсқа арналған командалар орналасқан.
          Сіз оларды өз кодыңызды құру үшін қолданасыз.
      9:
        image: notes/hoc1_9.jpg
        text: Оң жақта жұмыс аймағы орналасқан, онда сіз құралдар жинақтамасынан блоктарды
          әкеліп қою арқылы өз бағдарламаңызды құрасыз. Блокты жою үшін, оны бұрыштағы
          себетке алып тастаңыз.
      10:
        image: notes/hoc1_10.jpg
        text: Әрбір блок бір нұсқаны білдіреді. Егер сіз "алға жылжу" блогын жұмыс
          аймағына қойып, "Бағдарламаны орындау" батырмасын бассаңыз, құс лабиринт
          бойымен бір орынға жылжиды.
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace
          and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: Егер сіз бағдарламаны орындап, оны түзетіп басынан орындағыңыз келсе,
          "Түсіру" батырмасын басыңыз.
      13:
        image: notes/hoc1_13.jpg
        text: Кеттік, торайларды табайық!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Сәлем, мен JR-мін! Әр жарыс машинасының командасына жеңіске жетуіне
          компьютер мамандары қажет. Олар автокөліктің тезірек болуы үшін одан келген
          деректерді сараптайды.
      2:
        image: notes/stage5_2.jpg
        text: Бұл жұмбақта сіз суретші боласыз, және олар жүрген жердің бәрінде артынан
          сызық саласыз.
      3:
        image: notes/stage5_3.jpg
        text: Бұл блок "100 пиксельге алға жылжы" дейді. Пиксельдер экрандағы әшейін
          кішкентай нүктелер.
      4:
        image: notes/stage5_4.jpg
        text: Бұл блок "90 градусқа оңға бұрыл" дейді. Ол сіздің суретшіні сонша мөлшерге
          бұрады, лабиринттегі "бұрылу" блогы сияқты.
      5:
        image: notes/stage5_5.jpg
        text: Суретшінің қаншалықты алға жылжитынын немесе бұрылатынын өзгерту үшін,
          блоктардағы нұсқарды басыңыз. Осы жаңа блоктармен жақынырақ танысу үшін,
          біраз ойнап көріңіз.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Сәлем, мен Паоламын! Бұл жұмбақта сіз фермерсіз, және дәндерді егу үшін
          сіз егіс алқабын түгел тегістеп шығуыңыз керек.
      2:
        image: notes/stage9_2.jpg
        text: Сіз оған қоқыс үйінділерін құртып, тесіктерді жамауға көмектесуіңіз
          керек.
      3:
        image: notes/stage9_3.jpg
        text: Жаңа блоктар үйіндіден 1 күрек қоқысты алады және тесікке 1 күрек қоқысты
          тастайды.
      4:
        image: notes/stage9_4.jpg
        text: Үйінділер мен тесіктердің өлшемдері әртүрлі, сондықтан сіз фермерге
          қанша күрек қолдану керектігін айтуыңыз керек.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Сәлем, мен Кэтимін! Информатикадағы ең қызықты нәрселердің бірі, ол
          компьютерлік бағдарламаның интерактивті бола алуында.
      2:
        image: notes/flappy02.jpg
        text: Әрдайым, біреудің компьютерді немесе телефонды басуы немесе теруі, ОҚИҒА
          туындатып, осы ОҚИҒА болған кезде не істеу керектігін шешетін қандай да
          бір код болып табылады.
      3:
        image: notes/flappy03.jpg
        text: Мысалы, сізде "тышқан басылғанда, әуен ойнату" дейтін ОҚИҒА БАПТАУШЫ
          болғанда.
      4:
        image: notes/flappy04.jpg
        text: Сіз FlappyBird ойыны туралы естіген бе едіңіз? Оқиға баптаушысы арқылы
          біз FlappyBird ойынының өз нұсқамызды бағдарламалауды үйренбекшіміз!
      5:
        image: notes/flappy05.jpg
        text: Сіз жазатын код компьютер үшін команда болып табылатын блоктарды жылжытып
          қоюды ұйғарады. Бұл блоктардың әрқайсысы нақты кодты білдіреді.
      6:
        image: notes/flappy06.jpg
        text: Егер сіз жұмыс аймағына қарасаңыз, онда жасыл түсті блоктарды көресіз,
          бұлар сіз үшін толтырылып қойған "оқиға баптауыштар".
      7:
        image: notes/flappy07.jpg
        text: Егер сіз тышқанды БАСҚАНДА құстың ҚАНАТ ҚАҒУЫН қаласаңыз, сіз мұны "ҚАНАТ
          ҚАҒУ" кодын сәйкес оқиға баптауышпен біріктіру арқылы істей аласыз, енді
          сіздің ойыныңызда сіз тышқанды басқан сайын құс қанатын қағады.
      8:
        image: notes/flappy08.jpg
        text: Осы жаттығу кезінде біз әр жұмбақта жұмыс аймағына жасыл блоктар секілді
          оқиғалардың жаңа түрлерін енгіземіз, және сіз оқиғаға сай қосатын блоктарды
          таңдай аласыз.
      9:
        image: notes/flappy09.jpg
        text: Сіз осындай ашылатын нұсқарды көрсеңіз, бұл сіз баптауларды өзгерте
          аласыз дегенді білдіреді – мысалы, Flappy жерге құлағанда, қандай әуен ойнайды.
      10:
        image: notes/flappy10.jpg
        text: Соңғы жұмбақта сіз өз ойыныңызды жасай аласыз және онымен достарыңызбен
          бөлісе аласыз. Көңіл көтеріңдер!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Сәлем, мен Маркпін! Тізбек туралы үйреніп білейік. Тізбекті қолдану
          арқылы сіз компьютерге әрекетті қайта-қайта, мыңдаған, тіпті миллиардтаған
          рет қайлала деп айта аласыз.
      2:
        image: notes/hoc2_2.jpg
        text: Бұл мәселеде біз құстың 5 орынға алға жылжып, торайға дейін жеткенін
          қалаймыз.
      3:
        image: notes/hoc2_3.jpg
        text: Біз көмекке жаңа "қайталау" блогын қолдана аламыз.
      4:
        image: notes/hoc2_4.jpg
        text: ' "Алға жылжу" блогын 5 рет қоюдың орнына ...'
      5:
        image: notes/hoc2_5.jpg
        text: Біз "алға жылжу" блогын "қайталау" блогының ішіне қойып оған қанша рет
          қайталау керектігін жазып көрсете аламыз.
      6:
        image: notes/hoc2_6.jpg
        text: 'Бұл маңызды: сіз "қайталау" блогының ішіне бірден көп командаларды
          қоя аласыз.'
      7:
        image: notes/hoc2_7.jpg
        text: Жаңа "қайталау" блогын қолданумен рақаттаныңыз!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Сәлем, мен Криспін. Майами Хитке келгенге дейін мен Джорджия технологиялық
          институтына Информатиканы оқуға бардым. Біздің жаңа блок, "дейін қайталау"
          блогын байқап көрейік.
      2:
        image: notes/hoc3_2.jpg
        text: Егер біз құстың торайға дейін қаншалықты ұзақ жүргенін білмесек ше?
      3:
        image: notes/hoc3_3.jpg
        text: Егер біз "алға жылжу" блогын "дейін қайталау" блогының ішіне қойсақ,
          құс торайға жеткенге дейін (немесе дуалға тірелгенше) алға жылжиды.
      4:
        image: notes/hoc3_4.jpg
        text: 'Бұл маңызды: алдындағыдай, біз "дейін қайталау" блогының ішіне бірнеше
          блоктарды қоя аламыз, және олардың барлығы қайталанады.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Сәлем, мен Биллмін! Жаңа іргелі ұғымды үйренейік: "Егер" операторы.
          Бұл компьютердің қалай таңдай жасайтыны.'
      2:
        image: notes/hoc4_2.jpg
        text: Сіз өзіңіз "Егер" операторын күнделікті қолданасыз. Әр таңда сіз сыртқа
          шықпастан бұрын, сіз ЕГЕР сыртта жауын жауып тұрса, мен күртемді киуім керек
          дейсіз.
      3:
        image: notes/hoc4_3.jpg
        text: Біз зомбиге ЕГЕР солға қарай жол барын тексеріп, және егер ол солға
          қарай жол тапса, біз оған осы бағытта бұрыл деп айта аламыз.
      4:
        image: notes/hoc4_4.jpg
        text: Осыған код жазу үшін, "егер" блогын қойып, оның ішіне "солға бұрылу"
          блогын салайық.
      5:
        image: notes/hoc4_5.jpg
        text: Енді, егер біз "алға жылжу" блогын соның үстінен қойып, оның бәрін "қайталау"
          блогымен қоршасақ, зомби әр алға жылжыған сайын, солға қарай жол барын тексереді
          және бұрылады. "Қайталау" командасы әр қадамда солға қарай бұрылысты тексеруге
          маңызды.
      6:
        image: notes/hoc4_6.jpg
        text: Егер операторының информатикадағы маңызы өте зор. Мен жазған алғашқы
          бағдарламалардың бірі крестиктер және ноликтер ойыны болатын, және онда
          ЕГЕР басқа ойыншы ұтайын деп жатса, оған ұтыс беретін жолды жабу керек дейтін
          егер операторы болған.
      7:
        image: notes/hoc4_7.jpg
        text: ' "Егер" блогын қолданып көңіл көтеріңдер!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Сәлем, менің есімім Салони. Мен информатиканы денсаулық сақтау және
          медицина саласындағы мәселелерді шешу үшін қолданамын. "Егер әйтпесе" блогы
          туралы оқып білейік. Ол "егер" блогына ұқсас, бірақ оның соңында "әйтпесе"
          дейтін қосымшасы бар.
      2:
        image: notes/hoc5_2.jpg
        text: Егер мен "алға жылжу" блогын "істе" деп тұрған ұяшыққа және "солға бұрылу"
          блогын "әйтпесе" деп тұрған ұяшыққа қойсам, бұл зомби 2 нұсқаның арасында
          таңдау жасайды дегенді білдіреді. ЕГЕР алға қарай жол болса, зомби алға
          жылжиды, ОЛАЙ БОЛМАҒАН ЖАҒДАЙДА (алға қарай жол жоқ), зомби солға бұрылады.
      3:
        image: notes/hoc5_3.jpg
        text: '"Егер" блогы сияқты, біз "егер әйтпесе" блоктарын "қайталау" блоктарының
          ішіне қоя аламыз, сондықтан да зомби жүрісін жалғастыра береді және "егер
          әйтпесе" блогы қандай да бір жерде бұрылу керектігін тексеріп тұрады.'
      4:
        image: notes/hoc5_4.jpg
        text: Енді, зомбилерді өз орындарына жайғастырайық!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Егер-әйтпесе операторы екі нәрсенің арасындағы таңдау болып табылады.
          Біз егер-әйтпесе операторын біздің досымыз тиін Скратпен бірге қалай қолдануға
          болатынын көрейік.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Бұл блок "егер" блогы сияқты көрінеді, бірақ оның астында "әйтпесе"
          дейтін қосымша бөлігі бар. Егер мен "алға жылжу" блогын "істе" деп тұрған
          жерге және "солға бұрылу" блогын "әйтпесе" деп тұрған жерге қойсам, бұл
          Скрат алға қарай жол болса алдыға жылжиды деген сөз. Егер алға қарай жол
          болмаса, Скрат солға бұрылады.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Ол шешім қабылдайды және сол шешімге негізделген екі әрекеттің бірін
          орындайды. Және "егер" блогтары сияқты, сіз, "егер-әйтпесе" блогтарын "қайталау"
          блогтарының ішіне сала аласыз.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Енді тиін Скатке мына емен жаңғағын алуға көмек көрсетейік!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Сәлем, мен Брина, Инстаграм инжеремін. Функция, сіз, тағы және тағыда
          пайдалануды қалайтын кодтың белгілі жолы болып табылады, сондықтан бір кодты
          әр жолы жазбай, сіз, бір ғана блокты пайдалана аласыз.
      2:
        image: notes/stage13_2.jpg
        text: Біз функцияларды анықтаудың білгіміз келеді. Функция анықтауыштарында
          бұрыштарында жұлдызы бар. Функция атауы жоғарғы жолда жазылады.
      3:
        image: notes/stage13_3.jpg
        text: Анықтауыштың ішінде келетін блоктар бізге өзінің не істейтінің айтады.
          Осылайша бұл функция анықтауышы "5-ті толтыру" және ол "қайталау"  блогы
          және "толтыру" блоктарынан тұрады.
      4:
        image: notes/stage13_4.jpg
        text: Анықтауыш жұмыс аймағында тұрады, бірақ біздің фермер, біз, функциялар
          санатынан "5-ті толтыру" блок функциясын алмайынша, функцияны іске қоса
          алмайды.
      5:
        image: notes/stage13_5.jpg
        text: Ендеше "көңілді" кері қарай "Функция!" ішіне салайық.
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Сәлем, менің атым Макинде! Ендеше "әлі блогы" жайлы білейік.
      2:
        image: notes/stage9_6.jpg
        text: Жоғырыдағы күй әлі АҚИҚАТ болып тұрғанда, "әлі блогы" ішіне, сіз, салғанның
          бәрін орындайды.
      3:
        image: notes/stage9_7.jpg
        text: Мысалы, егер фермер үйіндіге тұрып, астында ӘЛІ үйінді барда бір күректен
          алып тұруды жалғастырады.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: '"Сәлем, мен Трина, және мен Pixar үшін жұмыс істеймін. Мен көптеген
          фильмдерде жұмыс істедім, Шректі қоса алғанда".'
      2:
        image: notes/stage11_2.jpg
        text: Бұл біздің жаңа "есептеуіш" цикл. Ол әрекеттерді тағы және тағыда орындайды
          және сіз әр уақытта әрекеттердің кішкене өзгеруін істей аласыз.
      3:
        image: notes/stage11_3.jpg
        text: Бұл мысалда, біздің "есептеуіш" цикл "есептеуішпен 50-ден 90-ға 10 қадамы
          арқылы есепте" екенін көрсетеді және оның ішінде біздің "шаршы сыз" блогы
          бар. "Айнымалылар" бөлімінен "Есептеуіш" блогын "ұзындық" орнына көшір.
      4:
        image: notes/stage11_4.jpg
        text: Бұл біздің суретші қабырғасының ұзындығы 50 пиксель болатын шаршы салатының
          білдіреді, және ол оған 10-ды қосып қабырғалары 60 пиксель болатын шаршы
          салады. Кейін ол 10-ды қоса отыра 90-ға жеткенше шаршылар сал береді. Сонымен
          бізде 50, 60, 70, 80 және 90-дық шаршылар болады.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Сәлем, мен Джанет, және мен Zynga-да инженермін.
      2:
        image: notes/stage15_2.jpg
        text: Егер біз көптеген үшбұрыштар салғымыз келсе және олардың ұзындықтары
          әртүрлі өлшемді болса не істейміз?
      3:
        image: notes/stage15_3.jpg
        text: Біз сол барлық кодты қолмен теретін болсақ немесе біз параметрлары бар
          функцияны пайдалана аламыз.
      4:
        image: notes/stage15_4.jpg
        text: Мұны істеу үшін көк жұлдызды "үшбұрыш салу" функция анықтауышына басыңыз.
          Сосын "кіріс" блогына "кіріс атауы" блогын көшіріңіз.
      5:
        image: notes/stage15_5.jpg
        text: Сосын, егер сіз "х" деп көрсетілген жерде "ұзындық" жазып, "Enter" басатын
          болсаңыз, сіз функцияны енгізетін ұзындықты жасайсыз.
      6:
        image: notes/stage15_6.jpg
        text: Кейін жұлдызды басыңыз. Енді сіз айнымалылар санатына басып, "ұзындық"
          блогын "алдыға жүру" функция анықтауышы блогына көшіргіңіз келеді. Және
          ескі сан блогын сыртқа шығарғыңыз келеді.
      7:
        image: notes/stage15_7.jpg
        text: Параметрлі функцияңызды пайдалану үшін функциялар санатына басып сіздің
          "ұзындықты үшбұрышты салу" фуекциясын сыртқа көшіріңіз.
      8:
        image: notes/stage15_8.jpg
        text: Енді сіз математикалық блокты әртүрлі өлшемді үшбұрыштарды салу үшін
          әртүрлі сандарды енгізуге пайдалана аласыз.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Құттықтаймыз! Сіз осы соңғы бас қатырғышты шешумен бірге сіз қазір ғана
          роботтарға, мейлі ол зомби, құс, марс бетінде жүруші аппарат, тіпті көлікті
          жүргізудің өзі болса да "емес" лабиринт тармақтары арқылы кез келген ұзындықтағы
          түннелден шығуға мүмкіндік беретін код жазып шықтыңыз.
      2:
        image: notes/hoc6_2.jpg
        text: ' Сіз бір күндері кез-келген программаның немесе қосымшаның өзегінде
          пайдаланатын негізгі ұғымдарды көруіңіз керек. Біз егер күйлерінде және
          егер-ендеше күйлерінде қайталанатын қайталану циклы жайлы үйрендік.'
      3:
        image: notes/hoc6_3.jpg
        text: Егер сізге кодтың бірінші сағаты ұнаса, компьютер ғылымында өзіңіздің
          біліміңізді code.org сайтына кіру арқылы жалғастыра аласыз! Сіз 20 сағаттық
          курсты аяқтаған соң, сіз программалаудың түпкі ойларын біліп, ұялы телефон
          қосымшаларын, робот инструкцияларын, ойындарды қалай жазуды үйренесіз және
          оларға өзіңіз ат бере аласыз.
      4:
        image: notes/hoc6_4.jpg
        text: Технология біз істеп жүрген нәрсенің бәрін өзгертуде және сіз жассыз
          ба әлде кәрісіз бе маңызы жоқ, программалау көңілді, шығармашылықты және
          кез-келген адам үйрене алады.
    20_wrapup:
      1:
        image: notes/bird.png
        text: Жақын аралықта белгілерді көрсету!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Сәлем, менің есімім Линдси. Мен модельмін, фильмде ойнаймын және өзімнің
          қосымшаларымды жазамын. Қане Анна мен Эльзаның мұздың сиқыры мен әсемдігін
          зерттеуде қосылуға кодты пайдаланайық.
      2:
        image: notes/frozen1_2.jpg
        text: Сіз ақшақар мен оюларды, мұзда сырғанағанынды жасап және қыстық қиял
          әлемін құрып, кейін достарыңізбен бөлісе аласыз.
      3:
        image: notes/frozen1_3.jpg
        text: Келесі сағаттың ішінде сіз кодтаудың негіздерін үйренейін деп отырсыз.
          Дәстүрлі бағдарламалау, негізі мәтіндік түрде орындалады, бірақта біз бағдарлама
          жащу үшін орындарын ауыстыруға мүмкіндік беретін визуальді блоктарды қолданатын
          Blockly қолданамыз.Бұл студенттердің бағдарламалау негізін үйреніп отырғаны
          іспеттес, бірақ сіз әлі де код құрып отырсыз.
      4:
        image: notes/frozen1_4.jpg
        text: ' Бағдарлама дегеніміз компьютерге не істеу қажеттігін айтып отыратын
          нұсқаулар жиыны сияқты. Біз кейіннен күрделі модельдер құру кезінде қолдануға
          болатын және Эльзаға қарапайым сызықты құруға мүмкіндік беретін бағдарлама
          кодын жазайық.'
      5:
        image: notes/frozen1_5.jpg
        text: ' Экран үш негізгі бөлікке бөлінген. Сол жақ бөлігі мұз беті, сіз бағдарламаны
          қосуға арналған. Әр бір деңгейдің нұсқаулары сәйкесінше жазық бетінің астында
          көрсетілген.'
      6:
        image: notes/frozen1_6.jpg
        text: Бұл ортадағы аумақ құрал-жабдықтар аумағы , және бұл блоктардың әр қайсысы
          Эльза немесе Анна орындай алатын іс-әрекеттердің бірі болып табылады.
      7:
        image: notes/frozen1_7.jpg
        text: Оң жақтағы бос кеңістік біз бағдарламаны құруға қажет жұмыс кеңістігі
          деп аталады. Мұз бетінде орнын ауыстыру үшін сіз «Алдыға жүру» блогын қолданасыз.
      8:
        image: notes/frozen1_8.jpg
        text: 'Бұл жерде «Алдыға жүру» блогы сәйкесінше біз «орындау»-ды басқан кезде
          «100 пикселге алдыға жүр» деп айтады. Не болып жатыр? Эльза расында да экранда
          100 пикселге алдыға қозғалуда. Пиксельдер өз кезегнде компьютер экранындағы
          өте кішкентац шаршылар болып келеді. '
      9:
        image: notes/frozen1_9.jpg
        text: 'Бұл бас қатырғыштағы біздің басқа блок «сол жақа 90 градусқа бұрыл»
          деп айтуда. Және де біз бұл «Сол жақа бұрылу» блогын қолданған кезде,  Эльзаға
          қандайда бір анықталған мән қосылады. Сіз өзіңіз қалағаныңызша Элзаны алып
          кез келген бағытта жүргізіп ойнасаңыз болады. Жол Эльзаның алдыға жүретін
          жол бағытынан өзгертіледі, демек бұл 90 градус 120 градустық бұрылыс деген
          сөз. '
      10:
        image: notes/frozen1_10.jpg
        text: Сіз пикселдер саны мен бұрыштарды олардың қасында орналастырылған бағдарлар
          арқылы өзгерте алатыныңызды есте сақтаған жөн.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: ' Сәлем, мен Паоламын! Компьютерлер іс-әрекеттерді расында да жақсы
          қайталайды. Сіз 10, 20 немесе 100 дейін санай аларсыз, бірақ компьютер миллиардқа
          немесе трилионға дейін санайды. Ол зеріктірерлік емес, және бар болғаны
          бірнеше секунд уақыт қажет етеді. Бірнеше секундан соң компьютер ол санау,
          сурет салу, немесе басқа да бір іс-әрекет болса, компьютерлер амалдарды
          жүздеп немесе миллиардтап қайталай алады.'
      2:
        image: notes/frozen2_2.jpg
        text: Бағдарламалауда біз бұл әдісті цикл деп атаймыз. Цикл дегеніміз сіздің
          кодты қалай бірнеше рет қайталайтындығыңызды көрсетеді. Келесң бас қатырғыштағы
          сіздің мақсатыңыз Аннаға "«Қайталау» блогының көмегімен шаршы құруға көмектесу.
      3:
        image: notes/frozen2_3.jpg
        text: 'Сіз «Қайталау» блогының ішіне қосқан кез келген блоктар сіз қанша рет
          қаласаңыз сонша рет орындалады. '
      4:
        image: notes/frozen2_4.jpg
        text: Шаршыны салу үшін сіз «Алдыға жүру» және оңға бұрылу блоктарын 4 рет
          қайталап орындауыңыз қажет. Бірақ оңай жолы компьютерге «Алдыға жүру» және
          «Оңға 90 градусқа бұрылу» блоктарын орындау қажеттігін айтқаннан соң осы
          іс әрекеттерді 4 рет қайталап қажеттігін жеткізу. Ол үшін сіз «Алға жүру»
          және «Оңға бұрылу» блоктарын «Қайталау» блогының ішіне салуыңыз қажет.
      5:
        image: notes/frozen2_5.jpg
        text: Сіз «Қайталау» блогының ішіндегі санды кез келген мәнге қойсаңыз, ол
          блоктың ішіндегі іс әрекеттерді сонша рет қайталайтындығын есте сақтаңыз.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Сәлем, менің атым Крис Бош . Мен кәсіпқой баскетболшымын және мен колледжде
          кодталдым.
      2:
        image: notes/frozen3_2.jpg
        text: Информатикадағы ең маңызды ұғымдардың бірі жаңа командаларды қалай анықтау
          қажет деген сұрақ. Көптеген компьютер тілдерінде шамамен 100 шақты сөздер
          мен командалар ғана бар. Расында да осы негізгі құрылыс блоктарының көмегімен
          өзіңіздің жаңа сөздеріңіз бен командаларыңызды анықтау таңғажайып өнер болып
          келеді.
      3:
        image: notes/frozen3_3.jpg
        text: ' Сіз компьютерге осы тізбекетелген командалар көмегімен қандайда бір
          іс-әрекетті орындауды үйреткеннен кейін, болашақта оны оңай тексеруге мүмкіндік
          беретін сіз оған өзіңіз ат қоя аласыз.  Сіз өзіңіз анықтаған командалар
          және олардың аты функция деп аталады.'
      4:
        image: notes/frozen3_4.jpg
        text: Сәлем, менің атым Джесс. Бағдарламалау кезінде сізге бір іс-әрекеттер
          тобын бірнеше рет қайталап орындау қажет болса функцияларды қолданыңыз.
          Мысалы сіз шаршыны салудың кодын жаздыңыз.
      5:
        image: notes/frozen3_5.jpg
        text: Сіз бұны аты «Шаршы салу» деп көрсетілген функция ретінде көрсете аласыз.
      6:
        image: notes/frozen3_6.jpg
        text: Енді сізде бірнеше шаршыларды салу үшін қолдануға болатын жаңа блок
          бар.
      7:
        image: notes/frozen3_7.jpg
        text: Көптеген қарапайым модельдерді күрделі модельді құру үшін қолдануға
          болады. Келесі бас қатырғышта сіз әр түрлі өлшемдегі шеңбер салу үшін  жақында
          жазған код жаға функция ретінде қол жетімді болып келеді. Сіз оны Эльзаға
          қардың бетінде күрделі әрі әдемі болып келетін бейнелерді салуға көмектесу
          үшін қолдана аласыз ба?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Біз Ойындар лабараториясын қолана отырып ойын құрғалы жатырмыз. Жақсы
          ойынның тарихы болады. Ал әрбір тарихтың өзінің кейіпкерлері бар.  Біз осы
          сабақтың соңында жалмауыз кемпір, басқа планеталықтар секілді кейіпкерлерді
          қалай құруға болатындығын, қалай жануарлардың орындарын ауыстыруға, бір
          бірінің арасында ақпарат алмастыруға, сөйлесуге болатындығын үйренеміз.
          Сіз ойынды басынан бастап құра және достарыңызбен бөлісе аласыз.
      2:
        image: notes/playlab_intro_2.png
        text: Экран үш негізгі бөлікке бөлінген. Сол жақ бөлігінде сіздің бағдарламаңыздың
          жұмысы көрсетілетін кеңістік орналасқан. Әр бір деңгейдің нұсқаулары төменде
          көрсетілген.
      3:
        image: notes/playlab_intro_3.png
        text: Ортаңғы кеңістік құрал жабдықтар аумағы. Бұл блоктардың әрқайсысы кодтың
          бір бөлігі болып табылады. Оң жақтағы бос кеңістік біз өз бағдарламамызды
          құрастыруға қажет жұмыс аумағы.
      4:
        image: notes/playlab_intro_4.png
        text: Бастапқыда сізге өз блоктарыңызды сарғылт «Қосылу кезінде» блогымен
          байланыстыру қажет.Сіз бернеше блоктарды бірге сары сызық пайда болғанға
          дейңн орнын ауысытып көшіру арқылы байланыстыра аласыз. Бұл кезде олар бірін
          бірі өзара тартады.
      5:
        image: notes/playlab_intro_5.png
        text: Бұл бірінші бас қатырғышта біздің кейіпкер пингвин, және де мұнда бізге
          сөйлеу блогын орындалу блогымен байланыстыру, және «Сәлем!» мәтінін теру
          арқылы кейіпкерге «Сәлем!» деп айтқызуымыз қажет. Біз қосымша пингвинді
          оңға немесе сола қозғалу блоктарының көмегімен жүргізе аламыз, еген сізде
          орнында блогы бар болса, жүргізу батырмасын басып нені бағдарламағынызды
          көріңіз.
      6:
        image: notes/playlab_intro_6.png
        text: Бастап көріңіз, нәтижесінде сіз өзара тілдесе алатын, бақытты не көңілсіз
          бола алтын, ұпай немесе отты шарлары бар, тіпті бірін-бірі жойып жіберетін  барлық  кейіпкерлердің
          түрі бар ойын құра аларсыз. Барлығы да сізге және сіздің құрғыңыз келетін
          ойынға байланысты.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: ' Келесі кезекте біз барлық ойын құрушылары күн сайын қолданатын «Оқиғалар»
          жайлы оқып-үйренбекпіз. Оқиға сіздің бағдарламаңызға не болып жатқанын тыңдап
          отыру қажеттігін, және қандайда бір іс-әрекет орындалған кезде не орындау
          қажеттігін көрсетіді.'
      2:
        image: notes/playlab_events_2.png
        text: Кейбір оқиғалардың мысалдрары тышқанды, бағдары бар батырмаларды немесе
          экранды шертуді тыңдап әрекет жасайды.
      3:
        image: notes/playlab_events_3.png
        text: Бұл жерде біз шерткен кезде Жерліктерге сәлем беретін кеңістік ботын
          құрамыз. Ол үшін біз «Басу кезінде» блогына қосып «Сөйлеу» блогын пайдаланамыз.
          Ойыншы кеңістік ботын шерткен кезде «басу кезінде» блогында көрсетілген
          оқиға орындалады. Сіздің ойыңызға тағы не келеді?
      4:
        image: notes/playlab_events_4.png
        text: ' Мұнда және де «Бағдар болса» деген блок бар. Егерде «Қозғалту» блогын
          байланыстыратын  болсаңыз сіз кейіпкерді оңға, солға жоғары не төмен жүргізе
          аласыз. Әр қадам сайын сіздің ойыныңыздың интерактивтілігі артуда.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Бұл «Мәңгілікке қайталау» блогы, бұл блоктың ішіндегі барлық заттар
          бүкіл ойын барысында болады.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Егерде бізге кейіпкердің арнайы көрсетусіз бір әрекетті орындағандығы
          қажет болса біз бұл блоктарды «Мәңгілікке қайталау» блогының ішіне орналастырамыз.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Келесі бас қатырғыштағы біздің мақсат сиқыршыға хандықтың шекарасын  әрдайым
          оң және сол жақ беттерінен күзетуге көмектесу. Жұмыс командаларын қайталауды
          үйрену арқылы сізге болашақта өз ойыныңызды құру кезінде көптеген уақытыңызды
          үнемдеуге мүмкіндік береді.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Бұл сіздің шақыру блоктарыңыз. Кейіпкер барлық сұр жолақтарды толтыру
          үшін дұрыс қолданылуы қажет.
      2:
        image: notes/C1_artist_intro_2.png
        text: Бұл секіру блогы. Сіздің кейіпкеріңізді келесі сұр жолаққа өткізу үшін
          шақыртылуы қажет.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Аралар ең күштісі емес пе? Келесі басқатыру жиынтығында сіздің мақсатыңыз
          аралардың гүлдерге жетуіне және гүлдерден балшырын алуына және одан ара
          ұясына жетіп бал жасауына көмектесу. Сіз бұл жаттығуда "Балшырын алу" және
          "Бал жасау" блоктарын қолдануыңыз керек.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Әрбір гүл әртүрлі мөлшердегі балшырындарға ие: 1, 2, 3 немесе одан
          да көп. Бұрышта орналасқан кіші санға қарап қызыл түсті гүлдерде қанша балшырын
          бар екенін білеміз.  Алға қарай қозғалмастан бұрын гүлден барлық балшырындарды
          алу керек екендігіне көз жеткізіңіз. Сонымен қатар, әрбір бал ұясы 1, 2,
          3 немесе одан да көп балшырындардан тұруы мүмкін. '
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Егер сіз бүкіл балшырынды алу және олардың бүкілінен бал жасай алу жағдайында
          болсаңыз онда сіз үлгерудесіз және келесі деңгейге өте аласыз. Кері жағдайда,
          сізге бұл жұмбақты қайта шешуге тура келеді. Аралар секілді бағдарламалаушы
          болудың қандай екенін сезіну үшін біраз уақыт ойнап көріңіз!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Цикл әрекеттің қайталамасы болып табылады. Осылайша ара ұясына қарау
          үшін кіріп, мен оның жиектемесін алып қараймын және қайта қоямын, осылайша
          мен сол бір әрекетті бірнеше рет қайталаймын. Бұл айналу циклі, яғни сол
          бір әрекетті бірнеше рет жасау.
      2:
        image: notes/C1_bee_loops_2.png
        text: Бұл деңгейде біз аралардың гүлден үш балшырын жинағанын қалаймыз. "Балшырын
          алу" блогын үш рет қолданғанның орнына, сіз  балшырынды үш рет алу үшін
          қайталау блогын қолданасыз. "Орындау" және көру батырмасын басыңыз егер
          сіз бұл құқықты алған болсаңыз. Керемет!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: 'Бұл сабақ үлкен оқиға деп аталады. Бұның барлығы біздің бағдарламаны
          қалай басқара алатындығымызды және оқиғаларды жылдам қолдану арқылы бағдарламаны
          орындаудың ретін өзгертуді, яғни пернені басу мен тінтуірді шерту жайында. '
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Бұл сабақ сізді қағаз қашықтан басқару құрылғымен басқаратын болады.
          Бұл дегеніміз шынайы тірі видео ойын секілді.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Оқиға дегеніміз әрекет, ол бір нәрсенің болуын шақырады. Бұл сіз тінтуірді
          басасыз және интернет парақшасы жүктеле бастайды деген тәріздес. Бұл оқиға.
          Сіздің планшет экранына парақшаны жылжыту үшін қол тигізсеңіз де оқиға болып
          саналады. Оқиға сіздің бағдарламаңызды қолданушының мұқтаж немесе қалаған
          кезінде әрдайым бағыттап отыруына мүмкіндік беретін керемет тәсіл болып
          табылады.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Заттар орын алады, яғни біз барлығызмыз әсер ететін. Біз өзімізді аш
          сезінеміз және біз тоңазытқышқа қарай барамыз. Біз пошта тасушының келгенін
          естиміз, және ол біздің поштаны пошта жәшігіне қояды, содан соң біз поштаны
          алуға барамыз. Бұларда пернені басу немесе джостикті қозғалту секілді оқиға
          болып табылады. Олар болып жатқан қандай да бір нәрсе болып табылады және
          олар бізді сол нәрсені жасау үшін шақырады.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Бейне ойындарда"Жаңару" деп аталатын оқиға бар және ол секундына 30
          немесе 60 рет орын алады. Бейне ойындарды жасаушы бағдарламашылар үшін пернелер
          мен джостиктерге қарағанда бұл оқиға ретінде тіпті дерлік өте маңызды.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Ең негізгі біз бақылап отырған оқиға ретінде "Жаңару" сыртылдауы болып
          табылады. Содан соң біз джостикті сыртылдауға тексеріп көреміз. Осылайша
          біз айтамыз: "Ах, осы кадр батырмасын біреу басты ма? Ия немесе Жоқ?" Оқиғасыз
          ойыншы қозғала алмас еді, сіз секіре алмас едіңіз, сіз не болып жатқанын
          бақылай алатын жағдайында болмайтын едіңіз. Бейне ойын ешқандай нәрсе тірілту
          жағдайында болмас еді.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Құмды мүсінде сіз қателіктің бағдарламаның бір бөлігі екендігін білуіңіз
          керек. Бірақ сіз алған бетіңізден қайтпайтын болсаңыз, онда бұл сіз үшін
          тек қана керемет және әсерлі болады. Орнықтылық ойынның аты болып табылады.
          Онымен бірге қалыңыз, Сізге ол ұнайтын болады.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Бұл сабақ іргетас құрылысы деп аталады. Бұл сабақта біз шынында да қиын
          болып табылатын тапсырмалармен жұмыс істейтін боламыз. Сіз аз дегенде мына
          құрылымды қалай істеген жағдайда мына шынылардың біріндей сондай биік болатындығын
          анықтайсыз және бұл кітаптың салмағын көтере алатындай қажетті күштің болуы
          керек.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Біздің құруымызды орындай алмайтын уақыттың болуы мүмкін еді. Біз frusrated
          алып және берілуіміздің уақыты болуы мүмкін еді. Сол сәттердің көп болуы
          мүмкін еді. Бірақ біз тырысқан бетімізден қайтпайтын болсақ, оған өзіміздің
          керемет соққымызды бірнеше рет беретін болсақ, онда біз күмәнсіз оны аз
          уақыттың ішінде аламыз.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Табандылық үмітіңіз таусылғанда ұстап қалатын жалғыз нәрсе. Егер сіз
          жаңа және ерекше нәрсе ойлап тапқыңыз келсе, бұл бағытта сізді көптеген
          қиындықтар күтуде.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: 'Айлакерлік орнықтылықты таңдаудан құралады, жүруді жалғастыру үшін
          және өз қателіктеріңмен оқуды үйрену үшін, тастауды емес, себебі сіз ашулысыз.
          Қапалану негізінде бір кереметтің таудың артында бар еместігін білдіреді.
          Сол себепті оған жетпестен бұрын тастамау керек! УУУУ! '
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Сәлем, менің атым Мирал Котб және мен Iluminate-тің құрушысы боламын.
          Менің жұмысымда бір нәрсе бар және оны біз екі биде де және lightsuits бағдарламасында
          да қолданамыз. Және ол - циклдер! Цикл - әрекетті қайта-қайта қайталайды.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Менің әрекеттерім секілді хула-хупа айналысын ұстап тұру үшін сіздер
          бір нәрсені бірнеше рет қайталаған кезде мен сол әрекеттің циклін орындаймын.
          Ол - цикл. Ол - цикл. Және ол - цикл.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Бүгін біз би кешін ұйымдастырамыз. Біз жаңа билермен цикл ойнаймыз.
          Қайталау. Біз биді қолдану арқылы циклдің не екені туралы үйреніп жаттығамыз.
          Сіздер бірнеше жеңіл қадамдарды үйреніп және оны би біткенге дейін бірнеше
          рет қайталайсыздар.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Міне сізге зерттеу қажет қадамдар. Алақаныңызды соғыңыз. Қолдарыңызды
          желкеге қойыңыз. Қолдарыңызды белге қойыңыз. Сол қолыңызды онға көтеріңіз.
          Оң қолыңызды жоғары көтеріңіз. Оғай ғой, солай ма? Сіз кейбір би қимылдарын
          циклдың ішіне қою арқылы бағытты кішірейте алатыныңызы байқайсыз.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Негізінде біз циклдерді біздің биде қолданамыз. Бишілер компьютер киімдерін
          сол бір желі ішінде киіп жүр. Мен алау циклін сол бір бишілердің өзіне бірнеше
          рет бекіткенімде болатын еді. Циклде менде қайталау пайда болған болар еді,
          сіздер сол алты бишілер арқылы циклмен баруды қалайсыздар ма, содан соң
          циклде сіздер жарықтың жылдамдығын жоғарылатқанды қалайсыздар ма, деп айтқан
          кезде. Бұның барлығы цикл арқылы құрылды. Цикл информатикада маңызды, себебі
          олар біздің жұмысымызды қысқа әрі жеңіл етеді.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Бұл сабақ Бақытты Карталар деп аталады. Бүгін біз Флерб атты кішкентай
          мамық досымызға өзінің жеміс-жидектеріне жетуіне көмектесетін боламыз.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Жеміс-жидектеріңізге өтетін өзіңіздің Flurb-ді құрыңыз. Оны жасау үшін
          сіздер қандай жолды Flurb өтуі керек екендігін анықтауларыңыз керек және
          бағыттауыш сызықтар арқылы оны бағыттау керек. Алмаға жетуі үшін Flurb қандай
          бағыттарды жасағаны дұрыс? Сызық оны жоғарылату үшін.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Оны сол жерде алу үшін сіздер оның солай баратынындай бағытты дөңгелететін
          боласыздар.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Шешкелі отырған картаңыздың жанына нұсқағышты орналастыра отырып өз
          алгоритіміңізді құрыңыз. Екіншісі тура осы сияқты, тек қана төмен қарай.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: 'Бұл қағаз үстінде бағдарламалау сияқты! Және мінекей! '
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: 'Баптау бұл – қателіктерді табу мен түзеу. Қателіктерді баптаудың көп
          тәсілдері бар. Солардың қарапайымдарының бірі – қателікті таппайынша қадам-қадаммен
          жүру болып табылады.  Міне мен бөренеде арқаммен кері айналуға тырысудамын,
          бірақ әзірге құлауды тоқтата алар емеспін. '
      2:
        image: notes/C1_maze_debugging_2.png
        text: ' Мен әрбір бөліктен қадам-қадаммен өтіп ақыры қателіктің қайда екенін
          түсіндім. Мен қолдарымды бөренеге дұрыс қоймаған екенмін. Сондықтан кері
          айналудың басқа түрін жасап көрдім, бұл жолы қолдарым дұрыс орналасқандықтан
          қиналмай жасап кеттім.Бұл жолы шын ырза болдым, себебі арқам кері айналуға
          бапталды.'
      3:
        image: notes/C1_maze_debugging_3.png
        text: ' Баптау жайлы білу үшін деңгейге орналастырылып қойылған блоктар қатарынан
          бастаймыз. Бірақ бұл блоктардың сізді мақсатыңызға алып келмейтінін білгеніңіз
          жөн. Біз шешімді баптап қателіктерін түзеуіміз керек. Қай жерінде қателік
          бар екен? Что пошло не так ? Сіздің блоктан батыс блокқа өте беруіңіздің
          қажет екенін айта кеткен дұрыс'
      4:
        image: notes/C1_maze_debugging_4.png
        text: ' Батыстан тағы да блок қосу арқылы және жүгіру соққысын беру арқылы
          бұл жерді түзейік. Алақай! Сіз мұны жайсай алдыңыз! '
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Сіз блоктарды жабдықтар панелінен жұмыс облысына көшіруіңіз қажет. Блоктың
          ағымда тұрғанына көз жеткізіп алыңыз, дұрыс бағытты тапқаныңызға сенімді
          болған кезіңізде “Орындау ” пернесін басып, құстың доңызға барғанын көруіңізге
          болады.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: You need to drag the blocks over from the toolbox to the workspace.
          Make sure it's under the "when run" block and when you think you've got
          the right solution, then you can click "Run" and watch the bird go to the
          pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: 'Бір жақсысы, компьютерлер бұйрықтарды жақсы қайталайды. Адам ретінде,
          бір қимылды қайта-қайта қайталаудан шаршайтыныңыз анық.  Ал компьютер болса
          бір қимылды миллион мәрте, тіпті миллиард мәрте қайталай отырып шарашамайды,
          сонымен қатар әрі қарай да бұл қимылды жақсы сында қайталауға әзір тұрады.  '
      2:
        image: notes/C1_maze_loops_2.png
        text: Мысалы, егер де мен Facebook әлеуметтік желісіндегі достарымның әрқайсысын
          туған күнімен құттықтап хат жіберіп отырсам маған ғасырдан да ұзақ уақыт
          қажет болар еді. Алайда, бірнеше жол код арқылы, компьютер өзі достарымды
          туған күндерімен құттықтап хат жіберіп отыра беретін жетістікке жетуге болады.
      3:
        image: notes/C1_maze_loops_3.png
        text: Бұл деңгейде доңыз үшін құсты алу үшін үш блокты жекелеп жылжытқаннан
          гөрі, «қайталау» блогын қолданғаныңыз жөн. Ол үшін қайталау блогын жұмыс
          аймағына қойып, «3» санын енгізіп «Орындау» пернесін басуыңыз қажет. Егер
          де барлығын дқрыс жасасаңыз, онда сіз қажетті нәтижеге қол жеткіздіңіз.
          Құттықтаймыз!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: ' Бұл сабақтың аты – жылжыту. Бірлесе отырып компастан бастап көңілді
          смайликке дейін достарды табуға арналған бағдарлама жазуды бастағалы отырмыз. '
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: ' Бірақ смайлигіміз төмен қарап тұр және тек бір ғана адам оның қайда
          екенін біледі. Сонымен, бағдарламаны бастайық! '
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: ' Бағдарлама машинада орындала алатын алгоритімнен құрылған. Көпшілік
          бағдарламаны машина ұшін жазылатын код деп түсінеді. Шынымен де бағдарламаның
          мұндай да жақсы қыры бар, бірақ сонымен қатар оның басқа да пайдалары бар.
          Сіз өзіңіздің ойыныңызды немесе тіпті роботқа арналған бұйрыөтарды да жаза
          аласыз.'
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Сәлем! Менің есімім – Иеремия! Мен 7 жастамын. Мен анамның компьютерінде
          ойнағанды жақсы көремін! Алайда мен үнемі рұқсат сұраймын! «Ана, сіздің
          компьютеріңізді ойнасам болады ма? Әрине тәттім!»
      2:
        image: notes/C1_going_places_safely_2.png
        text: ' Маған анамның компьютері ұнайды, себебі мен ғаламторға кіре аламын.
          Ғаламтор бейне бір көршің сияқты. Әртүрлі ғажайып жерлерді көре аласың,
          отбасыңмен және достарыңмен сөйлесе аласың, басқа да жақсы заттарды оқып
          тани аласың.'
      3:
        image: notes/C1_going_places_safely_3.png
        text: ' Кеше мен үйімнің жанындағы зоо-баққа серуенге шықтым. Онда зебра құлынын
          көріп суретке түсіріп алдым. Кейінірек оның жолақшаларының түстерін өзгертіп,
          шляпа кигізіп өзімінің «ақымақ жануарлар »  коллекцияма қосып қойдым. Керемет!
          Кейінірек, мен алысқа сапар шектім. Кенияны аралап келдім, ол Африкада орналасқан.
          Бұл жақта өте көп зебралар мекендейді. '
      4:
        image: notes/C1_going_places_safely_4.png
        text: Кей кездері, ғаламтор арқылы көптеген адамдармен сөйлесемін. Мен өзімнің
          өзге мемлекетте тұратын әжемнің қал жағдайын жақсы білемін. Сәлем әже! Ол
          менің туылған күніме арнайы жіберуге тәтті күлше пісіріп жатыр. «Дәмді,
          мен ғаламторда дәм иіс сезу мүмкіндігі болғанын қалаймын». Мен ғаламторда
          менің нағашым секілді көптеген адамдармен сөйлес аламын, бірақ тек қана
          өзімнің таныстарыммен.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Ғаламтордағы менің ең қатты ұнататыным ол менің қызықты ойындарды ойнай
          алатыным. Гол! Және де мен жаңа заттарды ойдан шығарып немесе құрып достарыммен
          бөліскім келеді. Тамаша! Кейде мен жаңа заттар жайлы біле алатын веб-парақшаларға
          кіріп лтырамын. Алайда мен көбінде өзімнің жаныма жақын сайттарды ұнатамын.
          Мәссаған, динозаврлар!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Ғаламтор – өте көңілді жер. Алайда сіз тіпіті өз ауданыңыздағы көшеде
          жүрген кезде де сақ жүресіз, дәл осылай ғаламторда да сақ болған жөн. 3
          қағиданы есте сақтаңыз: 1. Әрқашан ата-анаңыздан рұқсат сұраңыз. 2. Тек
          қана танитын адамдармен қарым-қатынас жасаңыз. 3.Сізге қолайлы ғана жерлерде
          болыңыз.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: О бұл өте қызықты болды. Кешкі ас уақыты. Мен шығып келемін, өкінішке
          орай қайта кіріп келесі бара алатын жерімді көруге уақытым жоқ.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Бүгін біз жұптасып бағдарламалауды үйренгелі отырмыз. Жұптасып бағдарламалауда
          біз топ болып жұмыс жасаймыз, себебі екі бас бір бастан жақсы деген бар.
          Топтық бағдарламалауда сіз және сіздің серігіңіз екеуіңіз бір компьютерге
          отырып, бірлесіп бір жобада жұмыс жасайсыздар.
      2:
        image: notes/C1_pair_programming_2.png
        text: 'Жұптасып бағдарламалауда бір адам жүргізуші, ал екінші адам нұсқаушы
          рөлін атқарады. Жүргізуші компьютерге отырып пернетақтамен тышқанды қолына
          алады, ақпаратты компьютерге сол кіргізеді. Ал нұсқаушы болса жүргізушіні
          дұрыс жолға салып, мүмкін болған қателер мен қауіптерді ескертіп отырады. '
      3:
        image: notes/C1_pair_programming_3.png
        text: 'Жақсы қарым-қатынас – жұптасып бағдарламалаудың жақсы жемісіне жетуге
          кепілдік береді. Ешқандай балағаттау мен меңмеңшілдіктің жоқтығы арқасында
          жақсы жүргізуші мен жақсы нұсқаушы атына ие болуға болады. '
      4:
        image: notes/C1_pair_programming_4.png
        text: Жұптасып бағдарламалауда нұсқаушы жолды тұтас қарауы қажет және алдыдағы
          қауіптерді болжай білуі қажет. Ал жүргізуші болса алдыдағы кішкене бөліктерге
          көңіл аударуы тиіс. Екі рөлде өте маңызды. Топ болып жұмыс істей білуді
          қажет етеді.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: 'Бұл сабақтың аты – дән егу. Демек бұл сабақта біз алгоритмдерді түсінуге
          тырысамыз. Себебі алгоритмдер дегеніміз арнайы нұсқаулықтар және келесі
          іс-қимылдардың тізбектемесі болып табылады. Тіпті күнделікті, таңғы ас ішу
          немесе тістеріңізді тазалау сияқты іс-қимылдардың өзі қадамдап жасалатын
          алгоритм болып табылады. '
      2:
        image: notes/C1_planting_seed_2.png
        text: Егер сіз компьютерге өз алгоритіміңізді қажетті түрде түсіндіре алсаңыз,
          олар шыныменде өте пайдалы бола алады.  Егер сіз қандай да бір іс-қимылды
          нұсқаулыққа қарап отырып жасай алсаңыз, сіз өзіңіз бұрын соңды білмеген
          жаңалықтар мен білімге қол жеткізесіз. Бұл деген тағамды рецепт арқылы жасау
          сияқты ғой.
      3:
        image: notes/C1_planting_seed_3.png
        text: 'Бүгін біз өзіміздің дәндерімізді белгілі бір алгоритмді қолдана отырып
          еккелі отырмыз. Суреттерді кесе және қысқарта отырып өз алгоритмыңызды құрыңыз.
          Дән егу процессін дұрыс ретте көрсететін суреттерді таңдаңыз. '
      4:
        image: notes/C1_planting_seed_4.png
        text: Енді, сіздің алгоритміңіздің жұмыс істейтінін немесе істемейтінін тексеретін
          кез келді. Алгоритмдегі қадамдарды мұқият түрде орындаңыз. Олар дұрыс ретте
          тұрғанына көз жеткізіңіз. Бұл деген сурттерді құрау арқылы бағдарламалауға
          өте ұқсайды.
      5:
        image: notes/C1_planting_seed_5.png
        text: 'Мысалы шоколад жасаудың өзінің көп түрлі алгоритмдері бар. Бірнеше
          қадамдарға бөлінеді және ол қадамдардың өзі бірнеше қадамдардан құрылған,
          соңында шығарылатын шоколадтың дәміне байланысты алгоритмде өзгеріп отырады.
          Әрбір қадам өте маңызды, тіпті өте кшікентай қадам болса да. Болашақта түсінуге
          оғай болатын алгоритм құру өте маңызды. Сондықтан әрбір қадамға сипаттама
          беріліп отырылуы қажет. '
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Сізідің бағдарламалаудағы тәжірибеңізді сынап көретін кез келді. Сіз
          қандай да бір оқиғаны ойлап табуыңыз қажет, және актерлар және олардың ара-қатынастарын
          суреттеп білуіңіз қажет.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Мысық әрқашан да иттен қорқатын еді, ал енді мысық иттің оны қорқытқысы
          келмейтінін, керісінше, оның алдында жақсы болып көрінгісі келетінін білсе
          қалай болар еді? «Орындау» командасы кезінде блоктар орындалуды бастайды.
          Олар сіз берген бұйрықтардың және бұйрыққа тән сіз беріп кеткен іс-әрекеттерді
          орындайды
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Бір блок екінші блокқа келіп жанасқанда екеуін байланыстырып тастауға
          болады
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Мен итті жақындаған кезінде «Сәлем» деп айтатын қылып жасап қойдым.
          Бірақ мысығым «Ах!» деп шоышып қашып кетті, егер де уақытым көбірек болған
          кезде бұл оқиғаның аяғын қуанышты етіп жасар едім.
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Бұл деңгей орфография деңгейі. Араны жылжыту үшін пазл бөліктерін қолданыңыз.
          Ол қозғалған сайын арнайы сиқыр сөздің әріптері жинала бастайды.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Мұқият болыңыз! Әріптерді қате бағытта жинау сіздің жұмысыңызды қиындатып
          керек емес әріптерді қосып қояды.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: 'Бір жақсысы, компьютерлер бұйрықтарды жақсы қайталайды. Адам ретінде,
          бір қимылды қайта-қайта қайталаудан шаршайтыныңыз анық.  Ал компьютер болса
          бір қимылды миллион мәрте, тіпті миллиард мәрте қайталай отырып шарашамайды,
          сонымен қатар әрі қарай да бұл қимылды жақсы сында қайталауға әзір тұрады. '
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Мысалы, егер де мен Facebook әлеуметтік желісіндегі достарымның әрқайсысын
          туған күнімен құттықтап хат жіберіп отырсам маған ғасырдан да ұзақ уақыт
          қажет болар еді. Алайда, бірнеше жол код арқылы, компьютер өзі достарымды
          туған күндерімен құттықтап хат жіберіп отыра беретін жетістікке жетуге болады
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Бұл үлгіде сізлің мақсатыңыз доңыз алу үшін құсты жылжыту болып табылады.  Қазір
          біз «қайталау» блогын қолданып ұйренеміз. Оны қолдану өте оңай. Тек қана
          блокты таңдап «қайталау» бұйрығын таңдап «5» санын енгізсеңіз құс немесе
          доңыз сіз берген бағытта 5 рет қозғалады.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Мұны жасау үшін сіз бұйрықты жазып қайталау блогына орналастырасыз.
          Одан кейін сіз блогын таңдап қанша рет қайталау керек екенін енгізіп нәтижесін
          көрсеңіз болады.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Айта кетерлігі, сіз қайталау блогының ішіне сіз қанша бұйрық қаласаңыз
          сонша бұйрық орналастыра аласыз. Мына мысалда сіз алға жүру және солға бұрылу
          бұйрығын бердіңіз, сонымен қатар ол 5 рет орындалады. Көңіл көтеріңіз!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Компьютер ғылымдарын білетін арнайы адамдарыңыз болмаса сайысқа түсемін
          деп дәмеленбесеңіз де болады. Себебі жиналған ақпаратты оқи білу және келесі
          іс-әрекетті шеше білетін бағдарламалау тілін білетін адамдар қажет.
      2:
        image: notes/C2_artist_intro_2.png
        text: Бұл пазлда сіз қарындашты қолданып әртүрлі сурттер салатын суретші боласыз.
          Бұл суретші қайда жүрсе де өз артындағы көріністі суртеттеп жүреді.
      3:
        image: notes/C2_artist_intro_3.png
        text: Суретті ары-бері қозғалту үшін алға жүргізу блоктарын қолданамыз. Алға
          жүру ұшін алға блогын таңдап 100 пиксель деп енгіземіз. «Орындау» пернесін
          басқан кезде суретші 100 пиксельге алға жүреді. Пиксель дегеніміз компьютер
          бетіндегі өте кішкентай шаршылар.
      4:
        image: notes/C2_artist_intro_4.png
        text: Бұл бас қатырғышта бізде 90 градусқа оңға бұру блогы бар.  Арнайы бұйрықты
          жазып «Орындауды» басқан кезде кейіпкер  90 градусқа бұрылады. Осылайша
          бізге қанша рет бұру керек, сонша рет бұра аламыз. Бұл 90 градусқа бұрылу
          блогы
      5:
        image: notes/C2_artist_intro_5.png
        text: Және де бұл 120 градусқа бұрылу. 120 градусқа бұру үшін тек қана бұйрықтағы
          сан орнына 120 санын енгізсек болғаны. Суретшіңіздің шығармасымен сусындаңыз!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Бұл біз қанша нектар немесе қанша бал алу керек екендігін білмеген кезде
          пайдасы тиіп қалар.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Бұл мысалда біз мына күлгін гүлде нектар 0-ден көп көп болса, нектарды
          жинау  бұйрығын береміз. Демек, біздің ара, егер бұл күлгін гүлде нектар
          болса, оны біткенінше жинайды, демек 0 болғанынша жинайды. Та-дам!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Бұл сабақ бинарлы білезік деп аталады. Біз атымыздың бас әріптерін білезікке
          арнайы код арқылы жазып, білезікті қолымызға тағып, көпшілікке көрсетіп
          жүреміз.
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Бинарлы жүйе – ақпаратты тек қана екі айнымалы ғана қолдана отырып көрсету.
          Көбіне, адамдар оны тек 1 немесе 0 деп қана түсінеді. Бірақ сонымен қатар
          сіз «қосу» және «өшіру», «жоғары» және «төмен» деген сияқты комбинацияларды
          қолдана аламыз.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Сәлем! Мен – Орионмын. Бұл жер роботтарды бағдарламалайтын Play-im.
          Барлық компьютерлер мен роботтардың санасын фундаменталды түрде қарасақ,
          оларды кішкене электронды есік сияқты елестетуге болады. Егер ол есік ашық
          болса ол арқылы электр тогы жүреді, жабық болса жүрмейді.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Роботтағы бинарлы жүйе мысалы ретінде роботтың көздерін алуға болады.
          Олар LED-шамдар және олар «қосулы»  немесе «өшірулі» болады. Бұл бинарлы
          жүйе. Сонымен қатар олардың көздері сандарды бинарлы түрде көрсете алады.
          Мысалы біз бір роботты бірінші, екінші роботты екінші, үшіншіні  үшінші
          деп санай аламыз, ал бинарлы жүйеде ол қалай болады? Робот болса барлығын
          ешқандай қиындықсыз санап нәтижесін бізге шығарып бере алады.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Бұл сабақтың аты шартты карталар. Күнделікті, сіз көріп-естігендеріңізге
          негізделіп қандай да бір шешмідер қабылдайсыз.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Мен саябаққа барып серуендегім келеді, бірақ мен барар алдында қолшатыр
          алуым керек немесе керек емес екендігін шешіп алуым қажет. Демек мен терезеге
          қараймын, аспан бұлтты. Мен қолшатырымды аламын. Әлде күнге қарсы көзелдірік
          алайынба? Жоқ, қолшатыр алғаным дұрыс болар, міне мен көріп-естігеніме қарай
          шешім қабылдадым.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Шарттар әртүрлі ойындарда да қолданылады.  Бүгін біз шарттарды карта
          ойынында қолднып көрмекшіміз. Бұл ойында мен жылыжытқан карта менің достарымның
          жасайтын іс-әрекетін білдіретін болады. Егер мен жетіні таңдасам, олардың
          барлығы қол шапалақтайды. Басқа жағдайда «аууу» дейді. Олай болса бастайық!
          «Ауууу»
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Сіз бұдан да көп шарттары бар және әлдеқайда қызықтырақ ойындар ойлап
          таба аласыз. Тырысып көріңіз! Шарттарды қолдану компьютерді одан сайын ақылдырақ  етеді
          және қолданушы мен компьютер арасындағы қатынасты күшейтеді, іс-әрекеттің
          бағытын өзгертеді.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Өзіңіздің сүйікті компьютерлік ойыныңызды еске түсіріңіз. Шарттар қолданылатын
          ойында компьютер шешім қабылдайды. Мысалы сіз нысанаға дәл тисеңіз сізге
          10 ұпай беріледі, ал егер мүлт кетсеңіз 3 ұпай алынып тасталады. Шарттардың
          қалай жұмыс істейтінін түсіну сізге одан да көп ойындарды ойлап табуға мүмкіндік
          береді.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Ал енді біздің жұмыс аймағымызда бірнеше блоктар бар, бірақ бір жерде
          қателік орын алды.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Онда кодымызды қайтадан баптап көрейік. Асықпай  баптаудың әрбір блоктан
          қалай өтетінін мұқият бақылайық.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Қап, бұл күрделі мәселе болды ғой. Мысық мұртының ұзындығы 25 емес 75
          пиксель екен.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: 'Сіз бағдарламаны ретке келтіру туралы естіген бе едіңіз? Бұл ненің
          жұмыс істемей тұрғанын анықтау жолы. Сіз  кодты ретке келтіргенде, қателіктерді
          табасыз және оларды өшіріп тастайсыз. '
      2:
        image: notes/C2_bee_debugging_2.png
        text: Мұнда, біз қазірдің өзінде жұмыс орнымызда бірнеше блоктарды бердік.
          Біз қадам батырмасын қадам-қадаммен блоктарға жету  арқылы қолданбақшымыз,
          бұл бізге дұрыс шешімді қабылдауға көмектеседі және мүмкіндігінше қай жерде
          түзетулер жүргізу керек екенін көрсетеді.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Бұл біздің мәселе сияқты! Біз тағы бір қадам алға жылжуымыз керек. Қадам
          батырмасы қателіктің қайда екенін анықтауға және дұрыстауға болатын мүмкіндіктерді
          көрсету мәселесін ретке келтіруге көмектеседі.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Сіздің басыңызда қалпақ бар және сіздің ақылыңыз қайда екеніңізді айтады,
          хайуанаттар бағын ойлап және сіз және сізге сәлем ретінде бас изеледі.  Ғаламторда
          отырғанда қалай қауіпсіздікте болу керек екенін, өз өміріңізді жеке кеңістікке
          беру кезінде  ақылыңызды сақтауға және білуге өзіңіздің басыңызды қолданыңыз.
          Басыңыздан аяғыңызға дейін осы жайлы тоқтап ойланыңыз. Ғаламторда отырғанда
          тоқтап және аяғыңыздан мұрныңызға дейін ойланыңыз.
      2:
        image: notes/C2_digital_footprint_2.png
        text: Өз жүрегіңізді өсіп жетілу үшін, бетіңізде сау бояу қамтамасыз ету үшін,
          біреуге махаббат хатын жасу және оған мендіксін деп айту үшін қолданыңыз.
          Ғаламторда отырғанда, өз жүрегіңіздің ненің дұрыс екенін сезіну және әрдайым
          кеңпейіл болу, өзіңіздің достарыңызға құрмет көрсету үшін, ғаламторда  әділ
          және жақсы болу үшін қолданыңыз. Басыңыздан аяғыңызға дейін осы жайлы тоқтап
          ойланыңыз. Ғаламторда отырғанда тоқтап және аяғыңыздан мұрныңызға дейін
          ойланыңыз.
      3:
        image: notes/C2_digital_footprint_3.png
        text: Қолыңызды үй жануарыңызды құшақтауға, киіміңізді су болудан сақтауға,
          сүйікті жеңіңізді киюге және өзіңізді ұшуға  көмектесу мен соны сену үшін
          қолданыңыз. Ғаламторда отырғанда, қолыңызды үзіліс алуға, уақытты теңгерілеуге
          және өткенді тастап, жаңа ағаш тауып, сол арқылы көтерілуге қолданыңыз.
          Басыңыздан аяғыңызға дейін осы жайлы тоқтап ойланыңыз. Ғаламторда отырғанда
          тоқтап және аяғыңыздан мұрныңызға дейін ойланыңыз.
      4:
        image: notes/C2_digital_footprint_4.png
        text: Ішегіңізді асыңызды сақтау үшін,  қорытылып жатқандағы даусын есту үшін,
          ішіңізді тарсылдату үшін және газды сусынның газдылығын сезіну үшін қолданыңыз.
          Ғаламторда отырғанда, ішегіңізді белгілі бір белгілері бар құбылыстарды
          көргенде қадағалап және қай кезде дұрыс емес екенін айту үшін қолданыңыз.
          Басыңыздан аяғыңызға дейін осы жайлы тоқтап ойланыңыз. Ғаламторда отырғанда
          тоқтап және аяғыңыздан мұрныңызға дейін ойланыңыз.
      5:
        image: notes/C2_digital_footprint_5.png
        text: 'Сол себептi ғаламторда отырғанда басыңызбен ойланып, жүрегіңізбен сезініп,
          қолыңызбен баланста болып, ішегіңізді тындап, аяғыңызбен тұрыңыз. Аяғыңызды
          жүгіру мен тебу үшін және секіріп, таяқтарды жару үшін, блоктың айналасында
          билеу үшін және сасық шұлықтарыңызды алға жіберу үшін қолданыңыз.   Ғаламторда
          отырғанда, аяғыңызды желіні кесетін бұзақыларға қарсы тұру үшін қолданыңыз
          және жоғары болып тұруды ұмытпаңыз. '
      6:
        image: notes/C2_digital_footprint_6.png
        text: Басыңыздан аяғыңызға дейін осы жайлы тоқтап ойланыңыз. Ғаламторда отырғанда
          тоқтап және аяғыңыздан мұрныңызға дейін ойланыңыз.   Сол себепты басыңызбен
          ойланып, жүрегіңізбен сезініп, қолыңызбен баланста болып, ішегіңізді тындап,
          аяғыңызбен тұрыңыз. Басыңыздан аяғыңызға дейін осы жайлы тоқтап ойланыңыз.
          Ғаламторда отырғанда тоқтап және аяғыңыздан мұрныңызға дейін ойланыңыз.
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Cіз ғаламторда отырғанда әрдайым артыңыздан ізіңізді қалдырасыз, олар
          ізделуі, көшірілуі, жан жаққа тартылуы мүмкін. Қандай сандық іздерді калдырасыз?   Қандай
          сандық іздерді калдырғыңыз келеді?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Бұл сабақ «Миллиметрлік қағазды бағдарламалау» деп аталады және мұнын
          бәрі алгоритмдер туралы. Бүгін біз қарапайым ақ-қара суреттерді тек бейнеленген
          нұсқарлар арқылы бағдарламаны қалай жазу керек екенін білейік деп жатырмыз.
      2:
        image: notes/C2_graph_paper_2.png
        text: Алгоритм – тапсырманы толық аяқтау үшін арналған нұсқаулар тізімі. Біз
          кесені жасау үшін осы нұсқаулар жиынын қолданамыз. Алгоритм біреудің көмегінсіз
          бір затты қалай жасау керек екенін түсіну үшін шынымен пайдалы.
      3:
        image: notes/C2_graph_paper_3.png
        text: 'Егер сіз алгоритмді компьютер үшін жазсаңыз, онда оны кішкене қадамдарға
          бөліп тастауыңыз керек. Осы жолды аяқтаған соң келесіге өтіңіз, сөйтіп сіз
          барлығын жасап қоясыз. '
      4:
        image: notes/C2_graph_paper_4.png
        text: Мен өз жұмысымда алгоритмді қолданамын. Егер мен барлық қадамдарды жазсам,
          онда мен сол кішкене бір бөлікті қайта құра алам немесе басқа біреуді осыны
          жасау үшін үйрете алам. Пешке шыныны салыңыз, бірге құйып, келесе нұсқаулықтарды
          пайдаланып ыдысты жасаңыз. Алгоритм бір нәрсені аяқтап жасау үшін берілетін
          жол картасы
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Мұнда біз кейіпкерімізді бағдарламалау кезінде қайталанатын блоктарды
          қадамдарымызды сақтау үшін қолданбақшымыз. Қазірдің өзінде біздің қабырғада
          кейбір блоктар бар, бірақ олар біздің бастауымызды күтіп тұр.
      2:
        image: notes/C2_artist_loops_2.png
        text: Толық аудан жасау үшін осы блоктар 4 рет айналу керек, ол үшін  біз
          жай ғана қайталанатын блокты шығарып, оны алға қарай жылжытып және қайталанатын
          блоктар ішінде блоктарды оңға қарай бұрамыз. Біз жұмысты жібергенде, суретші
          шаршыны бітіру үшін осы қадамдарды қайталайды
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Цикл іс-әрекеттердің қайталануы болып табылады. Ара ұясын тексеру үшін
          мен  кірем және жақтауға қараймын, кейін қайта орнына қоямын. Мен бұл іс-әрекеттерді
          бірнеше рет қайталаймын. Бұл цикл бір іс-әрекетті бірнеше рет қайталайды.
      2:
        image: notes/C2_bee_loops_2.png
        text: Бұл қайталанатын блок болып табылады. Бұл блоктардың ішіне не салсаңыздар
          да, ол сол іс-әрекеттерді қанша рет айсаңыз да қайталай береді. Мысалы,
          осы деңгейде, шәрбатты үш рет алғымыз келеді , ол үшін тек бір рет шығарамыз
          кейін ол үш рет қайталайды.  Бұны жасау өте оңай!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Қадімгі жағдайда бағдарламалаудың барлығы тексте болады, бірақ біз визуалды
          блоктарды қолданатын және бағдарламаны бөліп жазатын Blockly-ды пайдаланамыз.
          Соның өзінде де, сіз сол бойы кодты жазасыз. Біріншіден, біз жұмыртқаларды
          ұрлаған мейірімсіз шошқаларға жету үшін Angry Bird-ты лабиринт арқылы жүруге
          көмектесетін бағдарлама кодын құрамыз.
      2:
        image: notes/C2_maze_intro_2.png
        text: 'Blockly үш негізгі бөліктерге бөлінген. Сол жағында біздің бағдарлама
          жұмыс істейтін құстық лабиринт бар. Әрбір деңгейдің нұсқауы лабиринттің
          төменгі бөлігінде жазылған. Ортадағы аудан toolbox болып табылады және әрбір
          блок  құс түсінетін команда болып есептеледі. Оң жақтағы ақ аудан жұмыс
          орны деп аталады және біз бұл жерде бағдарламамызды құрамыз. '
      3:
        image: notes/C2_maze_intro_3.png
        text: Егер мен блокты біздің жұмыс орнымызға сүйресем және "Run" батырмасын
          бассам, не болады? Құс тордың ішінде бір қорапқа алға жылжиды. Ал, егер
          мен құстың бір қорапқа алға жылжыған соң тағы бір басқа іс-әрекетті орындасын
          десем ше? Онда мен біздің бағдарламамызға тағы бір блок қосу керек боламын.
      4:
        image: notes/C2_maze_intro_4.png
        text: Мен блоктың орнын ауыстыру үшін «turn right» батырмасын таңдамақшымын
          және оны сары нұсқар пайда болмағанша блоктың орнын ауыстырайын деп жатырмын.
          Кейін блокты түсірген соң, екі блок  бір біріне тартыла бастайды. Мен «Run»
          батырмасын тағы да басқанда, жоғарыдан төмен қарай  командалар тізбегі жұмыс
          орнында орындала бастайды.
      5:
        image: notes/C2_maze_intro_5.png
        text: 'Егер сіз керек кезде блокты жойғыңыз келсе, жай ғана оны стектен өшіре
          салыңыз және қоқыс жәшігіне жіберіңіз. Шығып кеткеннен кейін жұмысты қайта
          бастау үшін қайта қосу батырмасын басуға болады. Ендігі кезекте  осы білімді
          торайларды ұстау үшін қолданып көріңіз!  '
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Бұл сабақ алгоритмдердің шынайы өмірі деп аталады. Алгоритмдер адамдардың
          күнделікті іс-әрекеттерін сипаттайды. Піспенан рецепті және құсқа ұя салу
          бағыттары күнделікті алгоритмдер болып табылады.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Бүгін, біз қағаз ұшақтарды жасап, құрып, алгоритмін тексермекшіміз.
          Бірақ, біріншіден, біз үлкен жобаны кішкене жеңіл қадамдарға бөлуіміз керек.
          Қағаз ұшақтарды жасау үшін қандай қадамдарды орындау керек екенімізді шешіп
          және олардың орындалу тәртібін қадағалау керек.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Сіз алгоритміңізді құру үшін біріншіден суреттерді кесуден бастайсыз.  Келесі,
          сіз қадамдарыңызды көрсететін 6 суретті таңдайсыз, олар қағаз ұшақтарды
          жасау және осы суреттерді дұрыс тәртіппен орналастыру  үшін қажет. Сіз үшін
          барлығы тәртіппен тұрғаннан кейін, алгоритмнің жұмыс істеп тұрғанын тексеру
          үшін  басқа студенттер тобымен алгоритмді салыстырасыз. Ең жақсы жобаланған
          алгоритм ең жақсы қағаз ұшағын жасауға маңызды.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Біз шоколад жасағымыз келгенде бұл процесс үшін үлкен  қадамдар талап
          етіледі. Және әрбір үлкен кадамдар өзінің ішінде кішкене қадамдар жиынынан
          тұрады. Және дәмі бойынша біздің қандай шоколад алғымыз келгеніне байланысты
          көптеген рецептер немесе алгоритмдер бар. Әрбір қадам маңызды, тіпті кішкене
          қадамдар. Себебі, әрбір қадамның аяқталуынсыз басқалар аяқтала алмайды.
          Басқалар түсінуі мүмкін алгоритмдерді жасау өте маңызды. Сол себепті әрбір
          қадам кім жасағанына байланысты болмай жазылуы керек, өйткені бір нәтиже
          болады.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Осыған дейін сіз қосқан сайын бір іс-әрекетті қайталап орындап отыратын
          анимация немесе тарих құрып келдіңіз. Келесі кезекте сіз өзіңіз ойнай алатын
          интерактивті ойындарды құра аласыз.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Бұл жерде «Бағдар бағыты болған кезде» және «Кейіпкер қадамы» деген
          блокатар көрсетілген. Сіз кейіпкердің қозғалысын бағдарлары бар пернелердің
          көмегемін басқару үшін осы блоктарды бірге қоюуыңызға болады.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Бүгін біз реле бағдарламалауын жасайтын боламыз. Бұл - қысым астындағы
          және қателіктері қайтару бағдарламалауы жайында, әдетте сіздердің жылдам
          жұмыс немесе командадамен жұмыс жасап жатқандарыңызда орын алады. Біз милиметрлік
          бағдарламалауды қолданатын боламыз, ол кодтауды және пайдалану эстафетасын
          модельдеу үшін, яғни қысқа уақытта қолдағы барды модельдеу үшін.
      2:
        image: notes/C2_relay_programming_2.png
        text: Реле бағдарламалауында милиметрлік бағдарламалауды аяқтау үшін командалар
          алға қарай зулайтын болады. Сіздер өздеріңіздің командалық әріптестеріңіздің
          жұмысын тексеріп отыруға тиіссіздер немесе оны қайтарып отыруға, егер қателік
          болса өздеріңіздің бағыттауыш сызықтарыңызды қосып, артқа қашыңыздар және
          командалық әріптесіңізді белгілеп қойыңыздар.
      3:
        image: notes/C2_relay_programming_3.png
        text: Бағдарламалаушылар кодекстердегі немесе алгоритмдердегі мәселелерді
          шешу және оларды табу үшін ретке келтірулерді көптеп орындайды.
      4:
        image: notes/C2_relay_programming_4.png
        text: Бұл жерде мен артқы дөңгелекті жасауға тырысудамын, бірақ мен азайып
          барамын. Мен әрбір қадам арқылы жүріп отырмын, қадам-қадаммен және мен қателігімнің
          қай жерде болғанын түсінудемін. Менің бапкерім көрсеткендей мен өз қолдарымды
          байламға дұрыс қоймадым. Осылайша, мен өзге артқы дөңгелекті байламда өзімнің
          дұрыс орналасқан қолдарыммен байқап көрдім, және мен оны бекіттім. Мен расында
          да артқы дөңгелектерді ретке келтіргеніме қатты қуандым. Біз оны түсіндік!
          Ретке келтіру мәселені тауады және оны шешеді. Керемет, жақсы жұмыс!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Компьютерлердің расында жақсы екендігін білдіретін бір зат бар, ол -
          командаларды қайталауы. Адам ретінде, сіздер расында бір қатар жұмысты ұзақ
          уақыт бойы жасап отырғанда жалығар едіңіздер. Бірақ сондай жұмыстарды компьютер
          миллион немесе миллиард уақыт жасай алады және ол жалықпайды, әрдайым оны
          жасай алу жағдайында болады, бұл расында да керемет!
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Мысалы, егер мен Facebook-те барлықтарыңызға туылған күндеріңізбен деп
          тілеген болатын болсам, онда ол электронды хатты жіберу мен үшін 1 ғасырдан
          ұзақ уақытта алған болар еді. Бірақ барлық бірнеше кодекс сызықтарымен менде
          бір жүйе болуы мүмкін, яғни Facebook-та оларға туылған күндеріңмен деген
          тілекті жібере алатын. Осылайша ол цикл болып табылады, неге олар құнды,
          және қандай да бір нәрсе компьютер өте жақсы істей алады.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Бұл мысалда сіздердің мақсаттарыңыз құсты ауыстыру арқылы шошқаны алу
          болып табылады. Енді біз "қайталау" блогын қолдана аламыз, яғни оны өте
          жеңіл жасай алу жағдайында болу үшін. Сіздің қолыңыздан келеді немесе оны
          компьютерге беру арқылы "алға жылжу" командасын бес рет беру арқылы, яғни
          құсқа айналдыру үшін бір қадамнан әрбір рет шошқа айналдыру үшін, орындай
          аласыз.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Немесе сіздер компьютерге жай ғана "жылжу" командасын бір рет айтуларыңызға
          болады, содан соң оған "қайталау" бес рет деп сол жұмысты орындап отыруын
          айта аласыз. Осылайша, осыны істеу үшін сіздер "қозғалыс" командасын беру
          арқылы соза аласыздар, және содан кейін сіздер оны "қайталау" блогына орналастырасыздар.
          Сіздер оны басып және оған блокты неше рет қайталап отыруын, яғни алда қанша
          қадам  орындау керектігін айта аласыздар.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Енді тағы бір зат, сіздер "қайталау" блогында қанша команда керек болса,
          сонша команда орналастыра аласыздар. Осылайша бұл мысалда сіздер бес рет
          орындауы керекті оған жылжы және сол жаққа бұрыл командасын айта аласыздар.
          Керемет керемет жұмыс және көңіл көтеріңіздер!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Компьютер ғылымдарын білетін арнайы адамдарыңыз болмаса сайысқа түсемін
          деп дәмеленбесеңіз де болады. Себебі жиналған ақпаратты оқи білу және келесі
          іс-әрекетті шеше білетін бағдарламалау тілін білетін адамдар қажет.
      2:
        image: notes/C3_artist_intro_2.png
        text: Бұл пазлда сіз қарындашты қолданып әртүрлі сурттер салатын суретші боласыз.
          Бұл суретші қайда жүрсе де өз артындағы көріністі суртеттеп жүреді.
      3:
        image: notes/C3_artist_intro_3.png
        text: Суретті ары-бері қозғалту үшін алға жүргізу блоктарын қолданамыз. Алға
          жүру ұшін алға блогын таңдап 100 пиксель деп енгіземіз. «Орындау» пернесін
          басқан кезде суретші 100 пиксельге алға жүреді. Пиксель дегеніміз компьютер
          бетіндегі өте кішкентай шаршылар.
      4:
        image: notes/C3_artist_intro_4.png
        text: Бұл бас қатырғышта бізде 90 градусқа оңға бұру блогы бар.  Арнайы бұйрықты
          жазып «Орындауды» басқан кезде кейіпкер  90 градусқа бұрылады. Осылайша
          бізге қанша рет бұру керек, сонша рет бұра аламыз. Бұл 90 градусқа бұрылу
          блогы
      5:
        image: notes/C3_artist_intro_5.png
        text: Және де бұл 120 градусқа бұрылу. 120 градусқа бұру үшін тек қана бұйрықтағы
          сан орнына 120 санын енгізсек болғаны. Суретшіңіздің шығармасымен сусындаңыз!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Бұл біз қанша нектар немесе қанша бал алу керек екендігін білмеген кезде
          пайдасы тиіп қалар.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Бұл мысалда біз мына күлгін гүлде нектар 0-ден көп көп болса, нектарды
          жинау  бұйрығын береміз. Демек, біздің ара, егер бұл күлгін гүлде нектар
          болса, оны біткенінше жинайды, демек 0 болғанынша жинайды. Та-дам!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: 'Сіз бағдарламаны ретке келтіру туралы естіген бе едіңіз? Бұл ненің
          жұмыс істемей тұрғанын анықтау жолы. Сіз  кодты ретке келтіргенде, қателіктерді
          табасыз және оларды өшіріп тастайсыз. '
      2:
        image: notes/C3_debugging_bee_2.png
        text: Мұнда, біз қазірдің өзінде жұмыс орнымызда бірнеше блоктарды бердік.
          Біз қадам батырмасын қадам-қадаммен блоктарға жету  арқылы қолданбақшымыз,
          бұл бізге дұрыс шешімді қабылдауға көмектеседі және мүмкіндігінше қай жерде
          түзетулер жүргізу керек екенін көрсетеді.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Бұл біздің мәселе сияқты! Біз тағы бір қадам алға жылжуымыз керек. Қадам
          батырмасы қателіктің қайда екенін анықтауға және дұрыстауға болатын мүмкіндіктерді
          көрсету мәселесін ретке келтіруге көмектеседі.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Осыған дейін сіз қосқан сайын бір іс-әрекетті қайталап орындап отыратын
          анимация немесе тарих құрып келдіңіз. Келесі кезекте сіз өзіңіз ойнай алатын
          интерактивті ойындарды құра аласыз.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: Бұл жерде «Бағдар бағыты болған кезде» және «Кейіпкер қадамы» деген
          блокатар көрсетілген. Сіз кейіпкердің қозғалысын бағдарлары бар пернелердің
          көмегемін басқару үшін осы блоктарды бірге қоюуыңызға болады.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: This is the conditional block. It says if you're at the flower or the
          honeycomb, then do something. This is useful when we don't know how much
          honey or nectar to get as we see here with this question mark.
      2:
        image: notes/C4_bee_conditional_2.png
        text: In this example, we're going to say, if it's a flower, get all the nectar
          and then use another one to say, if it's a honeycomb, make honey. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: We have a new block that's called the if/else block. It's a conditional
          statement just like the if block you've used in the puzzles before. But
          now there's a new part at the bottom that says else. The if/else block lets
          the bee make a decision between two sets of actions. If the bee is at a
          flower, the bee will do the set of actions you put in the first part where
          it says do. If the bee is not at a flower, the bee will do the set of actions
          you put in the slot where it says else.
      2:
        image: notes/C4_conditionals_2.png
        text: If statements are how computers are able to make decisions. Humans set
          up conditions for the computer that say if the computer is presented with
          a certain situation do this. Else, which just means otherwise, do that.
          The top of our if/else block says if at flower. But the top of our block
          could say other things, like if nectar equals 2 or if there's a path ahead,
          our block will behave in the same way. That if the statement at the top
          is true it will do the first set of actions. But if the statement at the
          top is false, it will do the second set of actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Қадімгі жағдайда бағдарламалаудың барлығы тексте болады, бірақ біз визуалды
          блоктарды қолданатын және бағдарламаны бөліп жазатын Blockly-ды пайдаланамыз.
          Соның өзінде де, сіз сол бойы кодты жазасыз. Біріншіден, біз жұмыртқаларды
          ұрлаған мейірімсіз шошқаларға жету үшін Angry Bird-ты лабиринт арқылы жүруге
          көмектесетін бағдарлама кодын құрамыз.
      2:
        image: notes/C4_intro_2.png
        text: 'Blockly үш негізгі бөліктерге бөлінген. Сол жағында біздің бағдарлама
          жұмыс істейтін құстық лабиринт бар. Әрбір деңгейдің нұсқауы лабиринттің
          төменгі бөлігінде жазылған. Ортадағы аудан toolbox болып табылады және әрбір
          блок  құс түсінетін команда болып есептеледі. Оң жақтағы ақ аудан жұмыс
          орны деп аталады және біз бұл жерде бағдарламамызды құрамыз. '
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: 'Егер сіз керек кезде блокты жойғыңыз келсе, жай ғана оны стектен өшіре
          салыңыз және қоқыс жәшігіне жіберіңіз. Шығып кеткеннен кейін жұмысты қайта
          бастау үшін қайта қосу батырмасын басуға болады. Ендігі кезекте  осы білімді
          торайларды ұстау үшін қолданып көріңіз!  '
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Сәлем, мен Кэтлин Кеннедимін. Мен «Жұлдызды жауынгер: Күштің Оянуы»
          фильмінің продюсерімін. Бүгін сіз біздің жұлдыздарымыздың бірі ВВ-8-бен
          жұмыс істейсіз. ВВ-8 – сфералық дроид. Оның істегенінің бәрі және әрбір
          жасаған қимылы бағдарламалық жасақтамамен басқарылады. Информатика ғылымы
          фильмнің әр саласына, маркетингтен бастап денсаулық сақтауға дейін ықпал
          етеді. Шынында, «Күштің Оянуы» секілді фильмді жасау үшін жүздеген компьютерлік
          инженерлер бірігіп жұмыс істеді.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Сәлем, мен Рэйчел Роузбін, мен ILM зерттеу және әзірлеу бойынша бас
          инженерімін және мен анимация және креатура әзірлеушілер тобын басқарамын.
          Фильмде мен суретшілерге кейіпкердің қозғалатын бөлшектері болып табылатын
          қондырғыларын әзірлеуге көмек үшін жауаптымын, бұл кейіпкерге алыс-алыс
          галактикада шынайы болып көрінуге мүмкіндік береді.
      3:
        image: notes/starwars_intro_3.JPG
        text: Келесі сағат бойы біз өзіміздің жеке Star Wars ойынын жасамақшымыз.
          Біз сізге бағдарламалаудың негізгі түсініктерін үйретеміз. Әдетте бағдарламалау
          түгел мәтіннен тұрады, бірақ біз бұл жерде блоктарды қолданамыз, сондықтан
          бағдарламаларды жылжытып қойып жаза аламыз. Астарында сіз бұрынғыша код
          құрасыз. Блок негіздерін байқап көргеннен кейін, біз сізді интернеттегі
          ең танымал бағдарламалау тілінің бірі JavaScript-ке ауыстырамыз.
      4:
        image: notes/starwars_intro_4.JPG
        text: Алдымен, біз Реймен бірге ВВ-8-ді сынық бөліктерін жинауға бағдарламалаймыз.
          Сіздің экраныңыз үш бөлікке бөлінген. Сол жағында Star Wars ойынының кеңістігі
          орналасқан, мұнда код орындалады. Әр деңгей үшін нұсқаулар ойын кеңістігінің
          астында жазылған.
      5:
        image: notes/starwars_intro_5.JPG
        text: Егер мен солға жүру блогын біздің жұмыс аймағымызға тастап, орындауды
          бассам, не болады? ВВ-8 торда бір блок солға жылжиды. Ал егер мен ВВ-8 солға
          жылжығаннан кейін тағы бір нәрсе істегенін қаласам ше? Мен біздің бағдарламаға
          басқа блок қоса аламын. Мен жоғарыға жүру блогын таңдамақшымын және мен
          оны солға жүру блогының астына белгіленген аймақ пайда болғанша ұстап жылжытамын.
          Мен оны тастаймын және екі блок бірігеді.
      6:
        image: notes/starwars_intro_6.JPG
        text: Оң жақтағы бос аймақ жұмыс аймағы деп аталады және осы жерде біз өз
          бағдарламамызды құрамыз.
      7:
        image: notes/starwars_intro_7.JPG
        text: Егер мен солға жүру блогын біздің жұмыс аймағымызға тастап, орындауды
          бассам, не болады? ВВ-8 торда бір блок солға жылжиды.
      8:
        image: notes/starwars_intro_8.JPG
        text: Ал егер мен ВВ-8 солға жылжығаннан кейін тағы бір нәрсе істегенін қаласам
          ше? Мен біздің бағдарламаға басқа блок қоса аламын. Мен жоғарыға жүру блогын
          таңдамақшымын және мен оны солға жүру блогының астына белгіленген аймақ
          пайда болғанша ұстап жылжытамын. Мен оны тастаймын және екі блок бірігеді.
      9:
        image: notes/starwars_intro_9.JPG
        text: Мен орындауды қайта басқан кезде, ВВ-8 біздің жұмыс аймағындағы жоғарыдан
          төменге қарай орналасқан командаларды орындайды. Егер сіз блокты жойғыңыз
          келсе, оны дестеден алып тастап құралдар жинақтамасына қайта тастасаңыз
          болғаны.
      10:
        image: notes/starwars_intro_10.JPG
        text: Орындауды басқаннан кейін, ВВ-8-ді бастапқы күйге қайта келтіру үшін
          сіз әрдайым түсіру батырмасын баса аласыз. Енді жұмысқа кірсейік!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Біз қолданған блоктардың ішінде JavaScript командалары бар. JavaScript
          кәсіпқой әзірлеушілер үшін бүгінгі ең танымал бағдарламалау тілі болып табылады.
          Блоктар кодтауды үйреніп бастаудың ең жақсы әдісі, шынында да, Гарвард және
          Беркли сияқты жетекші университеттер осы жолмен оқытуды бастауда. Бірақ
          біз негіздерін үйрене салысымен, инженерлер кодты енгізіп жазады, себебі
          бұл бізге тезірек жылжуға мүмкіндік береді.
      2:
        image: notes/starwars_typing_2.JPG
        text: Біз құралдар жинақтамасынан іздемей-ақ немесе әкелмей-ақ жүздеген командаларды
          енгізе аламыз. Сіз енгізуді үйреніп жатқандықтан басында ақырын болуы мүмкін,
          бірақ біз сіздің талпынып көруіңізді қалаймыз.
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show
          text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you
          so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force
          Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artist develop rigs, which are the parts of the character
          that move that allow the character to look very believable in a galaxy far,
          far away.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game that will
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so we can drag and drop to write
          the programs. To start off, we're going to work with Rey to program BB-8
          to walk to collect all of the scrap parts.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars
          game space where code will run. The instructions for each level are written
          below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Егер мен солға жүру блогын біздің жұмыс аймағымызға тастап, орындауды
          бассам, не болады? ВВ-8 торда бір блок солға жылжиды. Ал егер мен ВВ-8 солға
          жылжығаннан кейін тағы бір нәрсе істегенін қаласам ше? Мен біздің бағдарламаға
          басқа блок қоса аламын. Мен жоғарыға жүру блогын таңдамақшымын және мен
          оны солға жүру блогының астына белгіленген аймақ пайда болғанша ұстап жылжытамын.
          Мен оны тастаймын және екі блок бірігеді.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together. When I press run
          again, BB-8 will perform the commands that are stacked top to bottom on
          our workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: After you hit run, you can always hit the reset button to get BB-8 back
          to the start. Now let's get rolling!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: My name is Jens Bergensten but I'm better known as Jeb. I'm the lead
          developer on Minecraft, here at Mojang in Stockholm. I think I was eleven
          or maybe twelve and I started programming because I wanted to make games.
          One of my father's friends told me that in order to make games, you need
          to learn how to program. That's how I got started. I like designing and
          figuring out the architecture of games. That's what I really like about
          Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Over the next hour, you're going to learn the basics of computer science
          by programming Alex or Steve to move through a simulated piece of a Minecraft
          world.
      3:
        image: notes/mc_intro_3.JPG
        text: Traditional programming is usually in text but today we'll use Blockly,
          a system which uses visual blocks that you can drag and drop to write programs.
          Under the hood, you're creating Javascript code.
      4:
        image: notes/mc_intro_4.JPG
        text: The concepts you'll be learning are what computer programmers use every
          day and are the foundation to computer science. Here at Mojang, we use these
          same concepts to make Minecraft work.
      5:
        image: notes/mc_intro_5.JPG
        text: Before you start, you'll pick your character. I'm going to choose Alex.
          Let's build code for a program that will help her move around the screen.
      6:
        image: notes/mc_intro_6.JPG
        text: Your screen is split into three main parts. On the left is the Minecraft
          playspace where your program will run. The instructions for each level are
          written below.
      7:
        image: notes/mc_intro_7.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that directs Alex's actions.
      8:
        image: notes/mc_intro_8.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      9:
        image: notes/mc_intro_9.JPG
        text: If we drag the moveForward(); block to our workspace and then click
          run, what happens? Alex moves forward one space on the grid.
      10:
        image: notes/mc_intro_10.JPG
        text: And what if we want to do something after she has moved forward one
          space? We can add another block to our program. I'm going to choose the
          turnRight(); block and I'll drag it underneath my moveForward(); block until
          this orange line appears. Then I'll drop it and the two blocks will snap
          together. When we press run again, Alex will perform the commands that are
          stacked from top to bottom in our workspace.
      11:
        image: notes/mc_intro_11.JPG
        text: If you ever want to delete a block, just drag it from the stack back
          to the toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: 'To undo your changes and get back to how the level started, use the
          Start Over button in the top right corner of the workspace. One more thing:
          you see the little triangle on the turn blocks? Anytime you see these triangles,
          it means that you can pick a different option. Let''s start coding!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: I'm Lydia Winters, Mojang's brand director and we made a little game
          called Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: My favorite thing to do in Minecraft is explore. I love adventuring
          in caves and seeing what I can find. As someone who isn't a programmer,
          I'm really excited to go through the Minecraft lesson and actually learn
          some coding myself.
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier
          if we could just tell the computer to perform the moveForward(); command
          four or five times. Luckily for us, computers are really good at repeating
          commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: When building Minecraft, we use repeat loops to place all the initial
          materials for creating a new world. That's thousands and thousands of blocks.
          We also use loops in little ways, for example to make Alex's feet move back
          and forth as she walks. Repeat loops are a powerful part of programming.
      5:
        image: notes/mc_repeat_5.JPG
        text: Night is coming so in the next couple of levels, we're going to build
          a house to stay safe. We're going to use the repeat block to do this very
          easily.
      6:
        image: notes/mc_repeat_6.JPG
        text: To build a wall of our house, we can either tell Alex to moveForward();
          and place planks four times or we can tell her to moveForward(); and place
          one plank, then take this command and use the repeat block to have her perform
          the action multiple times. Now we'll click on the repeat block and tell
          her how many times we want her to perform this action. Now let's build our
          house before night falls! Have fun.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Now we're going to learn about if statements. If statements are a fundamental
          part of learning to program. They help a computer make decisions.
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when
          I unlock my phone, it runs some code that says if I enter the password correctly,
          then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react
          to what they see in the world. For example, if there is a rock in front
          of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: In this case, we don't want to fall in the lava. It's easy to plan for
          the lava. We can see it on the screen. But what about the lava that we can't
          under the stone?
      5:
        image: notes/mc_if_statements_5.JPG
        text: After we mine the stone, we'll need to check if there's any lava in
          that place before moving forward. If there is lava there, we want to place
          a stone in front of our character before we can move forward. That way we
          can safely move on. Time for more mining! And remember to use the if statement
          to watch your step.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[students talking] It''s about to get real. Shear. I made an L out
          of torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: When you're done making your creation, choose share to get a link to
          share with your friends. Have fun!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[students talking] It''s about to get real. Shear. I made an L out
          of torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
