"nn":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til din første kodetime! La oss dykke rett inn i ditt første
          møte med programmering.
      2:
        image: notes/hoc1_2.jpg
        text: Vi skal bruke Blockly, et visuelt programmeringsspråk hvor du drar og
          slipper blokkene for å skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: De fleste programmeringsspråk bruker tekst, men Blockly er visuelt.
          Hver blokk tilsvarer en "ekte" kodelinje.
      4:
        image: notes/hoc1_4.jpg
        text: Du vil lære grunnleggende informatikk, med begreper som brukes overalt,
          helt fra å skrive apper til å lage programmer for å styre Mars-roveren.
      5:
        image: notes/hoc1_5.jpg
        text: Et program er et sett med instruksjoner som datamaskinen skal følge.
      6:
        image: notes/hoc1_6.jpg
        text: Målet med det første programmet er å få en "Angry Bird" gjennom en labyrint
          slik at den treffer en grønn gris.
      7:
        image: notes/hoc1_7.jpg
        text: Til venstre er labyrinten der programmet kjøres. Instruksjonene for
          hver oppgave er under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: Den midtre verktøykassen har kommandoene for "Angry Bird". Du vil bruke
          disse for å bygge koden.
      9:
        image: notes/hoc1_9.jpg
        text: Til høyre er arbeidsområdet hvor du skal trekke blokker fra verktøykassen
          til å bygge programmet med. Hvis du vil slette en blokk, drar du den til
          papirkurven i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: Hver blokk er en instruksjon. Hvis du drar en "fremover" blokk til arbeidsområdet
          og trykker "Kjør programmet", flyttes fuglen en plass på labyrinten.
      11:
        image: notes/hoc1_11.jpg
        text: For å gjere meir enn ei handling, kan du dra mange blokker til arbeidsområdet
          og knytte dei til kvarandre. Fuglen vil gjere kommandoane frå topp til botn.
      12:
        image: notes/hoc1_12.jpg
        text: Hvis du kjører et program og ønsker å fikse det for å prøve på nytt,
          kan du trykke på "Reset"-knappen.
      13:
        image: notes/hoc1_13.jpg
        text: La oss gå og ta de grisene!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, jeg er JR! Alle racerbil-lag må ha programmerere for å vinne. De
          analyserer data fra bilen for å gjøre den raskere.
      2:
        image: notes/stage5_2.jpg
        text: I disse oppgavene vil du være en kunstner som tegner linjer bak deg
          når du flytter deg.
      3:
        image: notes/stage5_3.jpg
        text: Denne blokken sier "flytt frem 100 piksler." Piksler er bare veldig
          små prikker på skjermen.
      4:
        image: notes/stage5_4.jpg
        text: Denne blokken sier "sving 90 grader til høyre". Den vil dreie kunstneren
          like mye som "sving" blokken i labyrintoppgaven gjorde.
      5:
        image: notes/stage5_5.jpg
        text: Klikk på pilen i en av disse blokkene for å endre hvor mye kunstneren
          går fremover. Lek litt med dette for å bli kjent med de nye blokkene.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, jeg Paola! I disse oppgavene er du en bonde som trenger å gjøre
          jordet flatt for å kunne dyrke grønnsaker der.
      2:
        image: notes/stage9_2.jpg
        text: Du må hjelpe henne med å fjerne alle jordhaugene, og fyle alle hullene.
      3:
        image: notes/stage9_3.jpg
        text: Dei nye blokkene fjernar 1 skuffe med skitt frå ein haug og fyller ut
          1 skuffe med skitt i eit hol.
      4:
        image: notes/stage9_4.jpg
        text: Hauger og hull har forskjellige størrelse eller dybde, så du må fortelle
          bonden hvor mange spadetak som det er behov for.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei, eg er Katie! Ei av dei mest spennande tinga med datavitskap er
          at eit dataprogram kan vere interaktivt.
      2:
        image: notes/flappy02.jpg
        text: Kvar gong nokon klikkar eller trykkjer eller skriv på ei datamaskin
          eller ein telefon, genererer det ei HENDING, og det er kode som avgjer kva
          som skjer når ei HENDING inntreffer.
      3:
        image: notes/flappy03.jpg
        text: 'Du kan til dømes ha ein HENDINGSHANDSAMAR som seier "ved museklikk,
          spel ein lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du høyrt om spelet FlappyBird? Ved å bruke hendingshandsamarar,
          skal vi lære å programmere vår eigen tilpassa versjon av FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Koden du skal skrive inneber å dra og sleppe blokker som representerer
          kommandoar til datamaskina. Blokkene er ei visualisering, og "under" kvar
          av blokkene er det skrive inn "verkeleg kode".
      6:
        image: notes/flappy06.jpg
        text: 'Om du tek ein titt på arbeidsområdet, er nokre grøne blokker fylt ut
          for deg - desse er "hendingshandsamarar" '
      7:
        image: notes/flappy07.jpg
        text: Om du vil ha fuglen til å SLÅ med vengene når du klikkar med musa, kan
          du gjere det ved å knytte "SLÅ"-blokka til den rette hendingshandsamaren,
          og no vil fuglen slå med vengene kvar gong du klikkar med musa i spelet.
      8:
        image: notes/flappy08.jpg
        text: I kvar oppgåve i denne delen vil vi introdusere nye typar hendingar
          som grøne blokker på arbeidsområdet, og du kan bestemme kva blokker som
          er dei rette til å svare på desse hendingane.
      9:
        image: notes/flappy09.jpg
        text: Når du ser ei rullgardinpil som denne, tyder det at du kan endre innstillingane
          - som kva lyd skal spelast når flappy treffer bakken.
      10:
        image: notes/flappy10.jpg
        text: I den siste oppgåva vil du kunne lage ditt eiget spel og dele det med
          venene dine. Ha det gøy!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, jeg heter Mark! La oss lære om løkker. Med løkker kan du skal be
          datamaskinen om å gjenta et sett av handlinger igjen og igjen, tusenvis
          eller milliarder ganger.
      2:
        image: notes/hoc2_2.jpg
        text: I denne oppgaven ønsker vi å flytte fuglen frem 5 plasser for å ta grisen.
      3:
        image: notes/hoc2_3.jpg
        text: Vi kan bruke den nye "gjenta" blokken for å hjelpe oss.
      4:
        image: notes/hoc2_4.jpg
        text: I stedet for å dra ut 5 "fremover" blokker...
      5:
        image: notes/hoc2_5.jpg
        text: Vi kan sette "fremover" blokken inne i "gjenta"-blokken og skrive et
          nummer i blokken å fortelle den hvor mange ganger det skal gjentas.
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er viktig: Du kan sette mer enn én kommando i en "gjenta"-blokk.'
      7:
        image: notes/hoc2_7.jpg
        text: Kos deg med å bruke den nye "gjenta" blokken!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hei, er jeg Chris. Før jeg startet i Miami Heat, studerte jeg informatikk.
          La oss prøve våre ny blokk, "Gjenta til" blokken.
      2:
        image: notes/hoc3_2.jpg
        text: Hva hvis vi ikke visste hvor langt fuglen måtte bevege seg for å komme
          til grisen?
      3:
        image: notes/hoc3_3.jpg
        text: Hvis vi setter en "fremover" blokk inne i en "Gjenta til" blokk, vil
          fuglen bevege seg fremover til den når grisen (eller krasjer inn i en vegg).
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er viktig: Akkurat som før kan vi sette flere blokker inni
          "Gjenta til" blokken, og de vil alle bli gjentatt.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, er jeg Bill! La oss lære et nytt grunnleggende konsept: hvis-uttrykk.
          Dette er hvordan datamaskiner tar beslutninger.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du bruker "hvis"-uttrykk selv hver dag. Før du går ut hver morgen sier
          du: "HVIS det regner ute må jeg ta på meg jakke".'
      3:
        image: notes/hoc4_3.jpg
        text: Vi kan be zombien om å sjekke om det er en sti til venstre. Hvis han
          finner en sti der, kan vi be han snu i den retningen.
      4:
        image: notes/hoc4_4.jpg
        text: For å skrive koden for dette, må vi dra ut "Hvis"-blokken og sette en
          "venstre"-blokk inni den.
      5:
        image: notes/hoc4_5.jpg
        text: Hvis vi hver gang zombien flytter på seg setter en "fremover" blokk
          over den, og en "gjenta" blokk rundt alt, vil han nå sjekke om det er en
          sti til venstre og i så fall snu dit. Kommandoen "gjenta" er viktig for
          å se etter sti etter hvert skritt.
      6:
        image: notes/hoc4_6.jpg
        text: Hvis-setninger er veldig viktige i programmering. En av de første programmene
          jeg skrev, var et tripp-trapp-tresko-spill. Der var det det en hvis-setning
          som sa hvis den andre personen holdt på å vinne, måtte programmet blokkere
          posisjonen som ville la han seire.
      7:
        image: notes/hoc4_7.jpg
        text: Ha det gøy med hvis-blokker!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hei, eg heiter Saloni. Eg nyttar programmering for å løyse helseproblem.
          Lat oss lære om "viss-elles"-blokka. Ho ser ut som ei "viss"-blokk, men
          har ein ekstra del på slutten som seier "elles".
      2:
        image: notes/hoc5_2.jpg
        text: Viss eg set ei "framover"-blokk på plassen der det står "gjere" og ei
          "snu til venstre"-blokk der det står "elles", tyder det at zombien vil velje
          mellom to alternativ. VISS det er ein veg framover, vil han gå dit, og ELLES
          (viss det ikkje er ein veg framover) vil han svinge til venstre.
      3:
        image: notes/hoc5_3.jpg
        text: Nett som "viss"-blokka, kan me setje "viss-elles"-blokker innafor ei
          "gjenta"-blokk slik at zombien held fram med å flytte på seg og "viss-elles"-blokka
          vil halde fram med å sjå etter om det er mogeleg å snu seg.
      4:
        image: notes/hoc5_4.jpg
        text: No får du vise zombiene kvar dei høyrer heime!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: An if-else statement is a decision between two things. Let's see how
          we can use an if-else statement with our buddy Scrat the squirrel.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: This block looks the same as the "if" block, but there's an extra part
          at the bottom that says "else". If I put a "move forward" block where it
          says "do" and a "turn left" block where it says "else", that means Scrat
          the squirrel will move forward if there's a path ahead. If there's not a
          path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: It's making a decision and doing one of the two actions based on that
          decision. And just like "if" blocks, you can put "if-else" blocks inside
          "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Now let's help Scrat the squirrel get that acorn!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, jeg Brina, ingeniør ved Instagram. En funksjon er noen kodelinjer
          som du vil bruke igjen og igjen, så i stedet for å skrive den samme koden
          hver gang, kan du bare bruke en blokk.
      2:
        image: notes/stage13_2.jpg
        text: Vi skal lære å definere funksjoner. Blokker der vi definerer funksjoner
          har en stjerne i hjørnet. Navnet på funksjonen skrives på øverste linje.
      3:
        image: notes/stage13_3.jpg
        text: Blokkene inne i funksjonen forteller oss hva den gjør. Så denne funksjonen
          er kalt "fyll 5", og består av en "gjenta" blokk og en "fylle" blokk.
      4:
        image: notes/stage13_4.jpg
        text: Funksjonen finnes på arbeidsområdet, men bonden vil ikke kjøre den før
          vi drar ut "Fyll 5 funksjon" blokka fra funksjoner-kategorien.
      5:
        image: notes/stage13_5.jpg
        text: La oss ha det gøy med funksjoner!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, jeg Makinde! La oss lære om "gjenta så lenge"-blokken '
      2:
        image: notes/stage9_6.jpg
        text: '"Gjenta så lenge" blokken vil fortsette å gjøre det som er inne i den
          så lenge utsagnet på toppen er sant.'
      3:
        image: notes/stage9_7.jpg
        text: For eksempel, hvis bonden står på en haug, vil hun fortsette å fjerne
          spadetak med jord så lenge det er fortsatt en haug under henne.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, jeg er Trina, og jeg jobber for Pixar. Jeg har vært med å lage
          en rekke filmer, inkludert Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Dette er nye "teller" løkka. Det vil utføre handlingene igjen og igjen,
          og du kan endre handlingene litt hver gang.
      3:
        image: notes/stage11_3.jpg
        text: Dette eksemplet på en "teller"-løkke sier "Tell med teller fra 50 til
          90 med 10" og inni den har vi en "tegn en firkant"-blokk. Dra "teller" blokken
          fra "Variabler"-seksjonen til "lengde"-stedet.
      4:
        image: notes/stage11_4.jpg
        text: Dette betyr at kunstneren vår skal tegne et kvadrat med sidelengde 50
          piksler. Så legger vi til 10, og tegner et kvadrat med sidelengde 60 piksler.
          Slik holder vi på til sidelengden blir 90 piksler. Dermed har vi sidelengdene
          50, 60, 70, 80 og 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, jeg er Janete, og jeg er en ingeniør ved Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Hva hvis vi ønsker å tegne en haug med trekanter av forskjellig størrelse?
      3:
        image: notes/stage15_3.jpg
        text: Vi kan skrive all koden for hånd, eller vi kan bruke en funksjon med
          parametere.
      4:
        image: notes/stage15_4.jpg
        text: For å gjøre dette, må du klikke på den blå stjernen i "tegn en trekant"
          funksjonen. Dra så "Navn på parameter:" inn i "parametre"-blokka til høyre.
          NB! Ikke skriv navnet først.
      5:
        image: notes/stage15_5.jpg
        text: Så hvis du skriver "lengde" der det står "x" og så trykker "Enter",
          vil du opprette et lengde-parameter til funksjonen.
      6:
        image: notes/stage15_6.jpg
        text: Klikk på stjernen. Så klikker du på "variabler"-kategorien og drar "lengde"
          inn i "fremover" blokka til funksjonen. Så drar du bort den gamle nummer-blokken.
      7:
        image: notes/stage15_7.jpg
        text: For å bruke funksjonen med parametere. kan du klikke på kategorien funksjoner
          og dra ut "tegn en trekant med lengde"-funksjonen.
      8:
        image: notes/stage15_8.jpg
        text: Nå kan du bruke matematikk-blokken for å hente nye tall, og på den måten
          kan du tegne trekanter av forskjellige størrelse.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gratulerer! Med den siste oppgaven du løste, skrev du kode som kan fortelle
          roboter hvordan de finner vei gjennom enkle labyrinter eller tunneler uansett
          lengde. Dette gjelder uansett om det er en zombie, en fugl, en mars-rover
          eller om det er deg som kjører bil.
      2:
        image: notes/hoc6_2.jpg
        text: De grunnleggende konseptene som du brukte, danner utgangspunktet for
          alle programmene eller appene du ser. Vi har lært om gjentagende løkker,
          hvis-setninger, og hvis-ellers setninger.
      3:
        image: notes/hoc6_3.jpg
        text: Hvis du likte den første kodetimen, kan du gå til code.org for å fortsette
          å lære programmering! Når du har fullført 20-timers kurset vårt, behersker
          du grunnleggende programmering. Da kan du begynne å lære å skrive telefon-apper,
          robotinstruksjoner, spill - ja alt mulig!
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologien forandrer alt vi gjør, og det spiller ingen rolle om du
          er ung eller gammel: Programmering er morsomt og kreativt, og alle kan lære
          det!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Video-notater kommer snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use
          code to join Anna and Elsa as they explore the magic and beauty of ice.
      2:
        image: notes/frozen1_2.jpg
        text: You'll create snowflakes and patterns as you ice skate and make a winter
          wonderland that you can then share with your friends.
      3:
        image: notes/frozen1_3.jpg
        text: In the next hour, you're going to learn the basics of how to code. Traditional
          programming is usually in text, but we'll use Blockly, which uses visual
          blocks that you can drag and drop to write programs. This is how even university
          students learn the basics. Under the hood, you're still creating code.
      4:
        image: notes/frozen1_4.jpg
        text: A program is a set of instructions that tells a computer what to do.
          Let's build a code, or a program, that will help Elsa create a simple line.
          We will use this later to create more complex patterns.
      5:
        image: notes/frozen1_5.jpg
        text: Your screen is split into three main parts. On the left, is the ice
          surface where you'll run your program. The instructions for each level are
          written right below the surface.
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action
          that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: The white space on the right is called the workspace, and this is where
          we'll build our program. To move around the ice surface, you'll use the
          "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: Here, the "Move Forward" block says, "move forward by 100 pixels." When
          we press "Run", what happens? Elsa moves forward a certain amount on the
          screen, 100 pixels in fact! Pixels are basically very tiny squares on your
          computer screen.
      9:
        image: notes/frozen1_9.jpg
        text: The other block we have in this puzzle says "turn right by 90 degrees."
          And when we use this "Turn Right" block, that makes Elsa turn a certain
          amount. You can play around with how far you want Elsa to turn. The angle
          is measured from the path ahead of Elsa. So, this is a 90 degree turn. And
          this is a 120 degree turn.
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking
          the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I’m Paola! Computers are really good at repeating actions. You can
          count to 10, 20, or 100. But a computer can count to a billion or a trillion.
          It won't get bored and it will only take a few seconds. Whether it's counting,
          or drawing, or anything--computers can repeat things hundreds or even billions
          of times.
      2:
        image: notes/frozen2_2.jpg
        text: In programming, we call this a loop. A loop is how you repeat your code
          over and over again. For the next puzzle, your goal is to help Anna create
          a square with the "Repeat" block.
      3:
        image: notes/frozen2_3.jpg
        text: Any blocks of code you put inside the "Repeat" block will be repeated
          in sequence, as many times as you want.
      4:
        image: notes/frozen2_4.jpg
        text: To draw a square, you can use the "Move Forward" and "Turn Right" block
          4 times. But the easier way is to tell the computer to "Move Forward" and
          "Turn Right by 90 degrees" once, and then tell it to repeat this pair of
          actions 4 times. To do that, you need to put the "Move Forward" and "Turn
          Right" block inside a "Repeat" block.
      5:
        image: notes/frozen2_5.jpg
        text: Remember, you can change the number in the "Repeat" block to anything,
          and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded
          in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define
          new commands. Most computer languages have only about 100 words or commands.
          And really, the art and magic is in defining your own new words out of these
          building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: Once you've taught a computer how to do an action once using this sequence
          of commands, you can make up your own name for that action so it's easy
          to repeat it later. When you define your own command and give it a name,
          that's called a function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, I’m Jess. When programming with blocks, you would use functions
          if there are a set of actions you would like to use lots of times. For example,
          you've written code to create a square.
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple
          squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns.
          In the next puzzle, the code you recently wrote to make a circle is available
          to you as a new function that can make circles of different sizes. Can you
          use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We're going to create games using Play Lab. Good games have a story,
          and every story has actors. We'll learn how to make our actors like witches,
          alinens, and animals speak, move, and interact with each other. By the end
          of this tutorial, you can build a game from scratch and share it with your
          friends.
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space
          where your program will run. The instructions for each level are written
          below.
      3:
        image: notes/playlab_intro_3.png
        text: The middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace and this is
          where we'll build our program.
      4:
        image: notes/playlab_intro_4.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: In this first puzzle, our actor is a penguin and we'll be making it
          say "Hello!" by dragging the say block out, linking it to the when run block,
          and typing in "Hello." We can also make the penguin move by using the move
          right and move left blocks. Once you have your blocks in place, hit the
          run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: Get started and by the end, you'll be able to create your own game with
          all kinds of players that can interact, turn happy or sad, score points,
          or throw fireballs, or even vanish each other. It's all up to you and the
          game you want to make.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Now, we're going to learn about something that all game programmers
          use everyday. They're called events. An event tells your program to listen
          for when something happens. When that thing happens, it performs an action.
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button,
          or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: Here, we're going to make the space bot greet the earthlings when a
          player clicks on him. We'll use the "when clicked" block and attach the
          "say" block to it. When the player clicks on the space bot, everything attached
          to this "when clicked" event block will be performed. What does your alien
          say?
      4:
        image: notes/playlab_events_4.png
        text: There are also "when arrow" blocks. If you link the "move" blocks to
          these, you can start to move your actors up, down, left, or right. Step
          by step, your game is getting more interactive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: This is the "repeat forever" block. Anything inside this block will
          happen forever in the game.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: If we want an actor to do something repeatedly, without the player having
          to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries
          of the kingdom, left and right continuously. Learning how the repeat commands
          works, will save you a ton of time later when you build your own game.
