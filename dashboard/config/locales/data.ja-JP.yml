"ja":
  data:
    script:
      name:
        20-hour:
          desc: K-8(アメリカでの中学校）ではコンピューターサイエンスコースが紹介されている。
          Unplug1: "ステージ 1"
          Maze: "ステージ 2"
          Unplug2: "ステージ 3"
          Unplug3: "ステージ 4"
          Artist: "ステージ 5"
          Unplug4: "ステージ 6"
          Artist2: "ステージ７"
          Unplug5: "ステージ８"
          Farmer: "ステージ 9"
          Unplug6: "ステージ10"
          Artist3: "ステージ11"
          Unplug7: |
            ステージ12
          Farmer2: |
            ステージ13
          Unplug8: |
            ステージ14
          Artist4: |
            ステージ15
          Unplug9: "ステージ16"
          Farmer3: "ステージ17"
          Unplug10: "ステージ18"
          Artist5: "ステージ19"
          Unplug11: "ステージ20"
        Hour of Code:
          desc: "コードの時間(Hour of code)"
          Maze: "ステージ 1"
        Edit Code:
          desc: "コードの編集"
          MazeEC: "ステージ 1"
        2014 Levels:
          desc: 2014 Puzzles (beta)
          Bounce: "ステージ 1"
        Builder Levels:
          desc: User-Created Puzzles (beta)
          Custom: "ステージ 1"
        Flappy Levels:
          desc: "フラッピーバード"
          Flappy: "ステージ 1"
        Jigsaw Levels:
          desc: Jigsaw (beta)
          Jigsaw: "ステージ 1"
        Step Levels:
          desc: Maze (beta)
          MazeStep: Stage Step
        edit-code:
          desc: Edit Code (beta)
          MazeEC: "ステージ 1"
          Webapp: "ステージ 2"
        events:
          desc: Bounce (beta)
          Bounce: "ステージ 1"
          Studio: "ステージ 2"
        builder:
          desc: User-Created Puzzles (beta)
          Custom: "ステージ 1"
        flappy:
          desc: "フラッピーバード"
          Flappy: "ステージ 1"
        jigsaw:
          desc: Jigsaw (beta)
          Jigsaw: "ステージ 1"
        step:
          desc: Maze (beta)
          MazeStep: Stage Step
        wordsearch:
          desc: Spelling Bee (beta)
          WordSearch: "ステージ 1"
    game:
      name:
        Unplug1: "コンピューター・サイエンス入門"
        Maze: "迷路"
        Multi: Multiple Choice Stuffs
        Unplug2: "コンピュテーショナル・シンキング（コンピューターの様に考える）"
        Unplug3: "グラフ用紙のプログラミング"
        Artist: "アーティスト"
        Unplug4: "アルゴリズム"
        Artist2: "アーティスト 2"
        Unplug5: "関数"
        Farmer: "農民"
        Unplug6: "条件"
        Artist3: "アーティスト 3"
        Unplug7: "作曲する"
        Farmer2: "農民 2"
        Unplug8: "抽象化"
        Artist4: "アーティスト 4"
        Unplug9: "プログラミングをリレーします。"
        Farmer3: "農民 3"
        Unplug10: "インターネット"
        Artist5: "アーティスト 5"
        Unplug11: "ラップアップ"
        MazeEC: "迷路"
        Bounce: "バウンド"
        Flappy: "フラッピーバード"
        Jigsaw: Jigsaw
        MazeStep: Maze Step Mode
        Wordsearch: Wordsearch
        Webapp: Webapp
    trophy:
      name:
        Bronze: "銅"
        Silver: "銀"
        Gold: "金"
    concept:
      description:
        sequence: "連続"
        if: "もしもブロック"
        if_else: If else ブロック
        loop_times: "回ブロックを繰り返す"
        loop_until: "までブロックを繰り返します"
        loop_while: "の間にブロック"
        loop_for: "数える ブロック"
        function: "関数"
        parameters: "パラメーター付き関数"
    level:
      instructions:
        maze_2_2: "いたずら豚を捕まえるのを手伝って！私が豚にたどり着くように、「前に進む」ブロックをいくつか重ねてから「プログラムの実行」を押しましょう。"
        maze_2_1: "このブタは私の羽を逆立てます。私が彼を見つけられるよう助けて！"
        maze_2_2_5: "道をたどって、おばかなブタのところへ案内してください。TNTを避けないと、羽が飛びます！"
        maze_2_3: "緑の悪者に私を案内して！（TNTに気をつけよう）"
        maze_2_4: "落ち着いて、そして悪いブタを見つけるのを助けてください。でないと私は怒るかもよ！"
        maze_2_5: "ブロックを2つだけ使って、緑のブタにたどり着ける方法があります。分かりますか？"
        maze_2_6: "ブロックを３つだけ使って私を緑の侵入者のところへ行かせてください。"
        maze_2_7: "一番少ない数のブロックを使ってこの悪いブタを追放するのを手伝ってください。1 つ以上の「繰り返し」ブロックを使用してください。"
        maze_2_8: "「移動」、「移動」、「曲がる」の3つのブロックが中に入った「繰り返し」ブロックを使って、この問題を解きましょう。"
        maze_2_9: Ok, 新しい「まで繰り返し(Repeat until)」ブロックを試してください。私がムカつくブタに着くまで繰り返されます。
        maze_2_10: Ok、では 最後の１つになった練習です - これを 4 ブロックをだけ使って解決できますか？
        maze_2_11: "親愛なる人。私ゾンビ。私は空腹。。。ヒマワリを取らないといけない。5つの ブロックだけで私をそこまで連れて行ける事ができますか？"
        maze_2_12: Ok、 これは似ていますが、ちょっと違います。5つの ブロックだけでできますか？
        maze_2_13: '新しい"if"ブロックを使っていつ曲がるかを私に決めさせてください。ヒント: あともう１つのブロックが必要です、でも私たちがどう設定しているかを学んでください、そうしたら次回はあなたができるようになります。'
        maze_2_14: Ok,　これは最後のパズルと同じです、でもどうやって"if"ブロックと"repeat"ブロックを一緒に使ったかをもう一度思い出す必要があります。
        maze_2_15: ひまわりが欲しい！一番少ない数の"if"ブロックを使ってそこまで私を連れて行ってください
        maze_2_16: Ok,練習のためもう一度やりましょう ーそれほど違いはないけれど、 チャンパー達に気をつけて！
        maze_2_17: '"If-else"ブロックは条件をチェックし、そして１つの事もしくは別の事をします。サンフラワーを私にゲットさせるためにこの新しいブロックを試してください。'
        maze_2_18: '"if-else"ブロックをもう一度練習するよ、 最初のトライでそれを正しくゲットできる？'
        maze_2_19: "ブロックをあと3つ追加してこの難しい迷路を解決する手助けをしてくれますか？もしそれができれば、長さに関係なくどんなカーブした道でも歩く事ができるようになります。"
        turtle_1_1: "こんにちは、私はアーティストです。あなたはどんなものでも描かせられるコードが書く事ができます。いくつかのブロックを使って絵の中にあるグレイの線の上にそって私に描写をさせてください。"
        turtle_1_2: "正方形を描きます。注: 新しい「色の設定」ブロックで選択することにより好きな色を使用してください。"
        turtle_1_3: "ブロックを３つだけ使用して正方形を作成します。"
        turtle_1_4: 毎回違う色を選択してくれる"random color"オプションをつかって、色の異なる側面をもつ三角形を描きましょう。ヒント：回転ブロックの回数をクリックして、どのくらいの距離で曲がるかを考慮して解決するひつようがあります。
        turtle_1_5: "今、練習のために、三角形を描いて、そして封筒になるように正方形を描きます。"
        turtle_1_6: "どうやって、この三角形と正方形を描けるか解決できますか？ヒント：三角形を最初に、そして正方形を各前にどのくらい曲がればいいか考える。"
        turtle_1_7: Ok、もう少し難しくしてみましょう  -もしこれらの緑のメガネを描けるか試しましょう。正方形はそれぞれの側面が100 ピクセルで
          50 ピクセル離れています。緑色で描画くのを忘れないでね ！
        turtle_1_8: Ok,もしこのコードを実行 (または「実行する」それをしようとするキーを押します)したらら 何が起こるかを考えます。その後、描画が完了するように何回も繰り返します。色は毎回異なるようになります。
        turtle_1_9: "円を描くのにどの数字がクエスチョンマーク（疑問符）に置き換えられるか考えられますか？"
        turtle_1_10: |2

          よくできたね！あなたが描きたいものを何でもいいから描いてください。いくつかの楽しいアイデア： スティック図、雪片、またはスパイラル。また、新しい「設定幅」ブロックを試みてください。楽しんでね！
        turtle_4_1: "ブロック３つだけ （100 ピクセルのエッジ) で三角形を描くことができますか？ヒント:「リピート」のブロックを使用します。"
        turtle_4_2: "ブロックを1つ追加して、このパズルを完成させましょう。ヒント: 同じ2つの三角形を描くブロックが使えます。このブロックの間に「曲がる」を置きましょう。どのくらいで曲がるかは決める必要があります。"
        turtle_4_3: Ok、これはあなたが書いた単一の三角形を描画するコードです。かわいい花を作るために「繰り返し」と「ターン」のブロックを追加できますか？
        turtle_4_4: "これは前のパズルと同じコードです。でも各三角形を描画した後に36度だけ回転させました。何回これを繰り返す必要があるのでしょうか？（ヒント:
          360度回転した後は完全な円ができます。）"
        turtle_4_5: "前回のパズルと同じコードです、ただ回転を36回繰り返しました。回転角度は何度にすればよいですか？(ヒント: 360 度回転すると描画は完全な円になります。）"
        turtle_4_6: "ブロックを３つだけ使用して、20 ピクセルのエッジを持つ正方形を描くことができますか？"
        turtle_4_7: "これは最後のパズルで正方形を描画したときのコードです。これを10繰り返して隣同士の正方形をはしごのように描画できますか？ヒント:
          ブロックをあと2 つ使うだけです。"
        turtle_4_8: "ここでは、前のパズルを解決します。図面を完成させるためにブロックをあと 2つ追加できますか？"
        turtle_4_9: "ここでは、前のパズルを解決します。図面を完成させるのに角度をどのくらいにする必要がありますか？（解くのに多少時間がかかるでしょう。)"
        turtle_4_10: "ここでは、前のパズルを解決します。図面を完成させるのに何回繰り返すひつようがあるでしょう？"
        turtle_4_11: "違うパターンを作るのに「ターン」と「繰り返し」ブロックの中の数字を変えてください。または、自分で残りのコードを自分の好きに書き変えて実験してみてください。"
        maze_karel_1_1: "こんにちは、私は農民です。私の土地を平らにするのに助けが必要です、そうすれば根付けの準備ができます。私を泥山にうごかして「取り除く」ブロックで泥山を取り除いてください。"
        maze_karel_1_2: 次に、私を穴へ移動させて、"fill"ブロックを使って、TWOシャベル一杯の泥山で一杯にしてください。
        maze_karel_1_3: "私を泥山へ動かしてください、そしてできる限り少ないブロックを使って、シャベル何杯分で泥山をなくせるかを教えてください。"
        maze_karel_1_4: "泥山４つすべてをなくすのを手助けしてくれますか？ヒント: できるなら、繰り返しブロックを使う。"
        maze_karel_1_5: ５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます。
        maze_karel_1_6: 可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください。
        maze_karel_1_7: "うわー、すごく深い穴を発見 ！何杯分の泥が必要なのかわかりません。泥が地面に達するまで埋めるようなプログラムを書くことができますか？"
        maze_karel_1_8: "できる限り少ない数のブロックで、田んぼの最後で穴を埋めるのを手伝ってください。"
        maze_karel_1_9: |
          これらすべての泥山をなくさせてください。できる限り少ない数のブロックを使ってください。
          ヒント："while"ブロックを使用してみてください。
        maze_karel_1_10: "遅くまで仕事をしていたので外は真っ暗、なので積み上がった山がどのくらい大きいのかわかりません。Whileブロックにあったようなオプションが今はもうありません。田んぼにそって私を移動させ、もし山があったらそれを削除してください。"
        maze_karel_1_11: 外はまだ暗いです。私を田んぼにそって移動してください。山があったらどかす、穴があったら埋める。ヒント:"if"ブロックでオプションのドロップ
          ダウン メニューを使用します。
        turtle_2_1: "こんにちは。私ゾンビ アーティストです。私は描くのが大好き ！特別な色で正方形を描くを手伝ってください。重要な注記: ブロックはみんな同じですが、カテゴリーに分かれています。"
        turtle_2_2: "新しいブロックあなたにを定義させてくれる関数を使うところへようこそ ！新しい「正方形を加工」ブロックを試してみてください、「関数」カテゴリでは、小さな
          50 x 50 緑色の四角形を描画するを発見しました。"
        turtle_2_3: |
          サイズが100、それぞれ120度離れている正方形を３つ描くのに「繰り返し」ブロック (「ループ」カテゴリ) を使用してください。そして３つのランダムな色でそれを描いてください。
        turtle_2_4: "今もっとファンシーにしようと思います。コードを変更して、100 ピクセルの幅、および各 10 度を離れている３６個の正方形を描いてください。ヒント：スライダーを使用すると早くできます。"
        turtle_2_5: 50、60、70、80、90ピクセル の辺を持つ正方形を描きます。「正方形を描く」関数を５回使用する必要があります。
        turtle_2_6: Ok、 このプログラムは前回と同じ正方形を描画するのに、カウンターを使用します。あなたは正方形をカウンターと同じサイズにしたいです、ですので"Counter"ブロックを使ってください。ヒント：
          それは、変数カテゴリです。
        turtle_2_7: "ブロックが無効なので、スパイラルを描画するプログラムが起動しません。「カウント」ブロック(ループ カテゴリ）と「カウンター」ブロックの(変数のカテゴリ)
          を使用して同じスパイラルを描画する新しいプログラムを作ってください."
        turtle_2_7_5: "新しい「描画雪だるま」関数 (関数カテゴリ)をつかって高さ 250 と 長さ100 の 雪だるまを2 つ描いてください。"
        turtle_2_8: "この 1 つは少しトリッキーです。「描画雪だるま」関数と新しい「飛躍」ブロック (アクション カテゴリ)を使用して。雪だるまを三つ、100
          ピクセルを離れて、違う色を使って描画してください。"
        turtle_2_9: '" count "ループを使用して高さ70、80、90 100 110 の雪だるまの家族を描画してください。雪だるまわ、
          60 ピクセル離してください。'
        turtle_2_10: "こちらはさまざまなスパイラルを試しにつくるコードです。回転量を変更するとどうなりますか。または、ループのランダムな色を設定しみたらどうなりますか。お好きなものを自由に描画してください。"
        maze_karel_2_1: "ブロックを使って、山を全て取り除き地面の穴を全て埋めるのを手伝って下さい。たくさんのブロックを使う代わりにループを使いましょう。ヒント:
          ループの中に別のループを入れることも出来ます。"
        maze_karel_2_2: '"5を埋める"と呼ばれるブロックを作りました。関数カテゴリです。この穴を埋めるために使つかってください。'
        maze_karel_2_3: 私はすべての穴を埋めるように新しい「5を埋める」 関数ブロックを使用します。関数のカテゴリから"5 を埋める"ブロックをドラッグする必要があります。
        maze_karel_2_4: "七回シャベルする関数を作ってください。それを使ってすべての杭を削除することができますプログラムを書いてください。"
        maze_karel_2_5: |
          積山からシャベル６回分を取り除く新しい関数を作ってくださいそして、それを使ってすべての積山を平らにするのを手伝ってください。
        maze_karel_2_6: "「8 を埋める」、「8を削除する」の２つの新しい関数を使って、積山を平らにして、それを穴を埋めるのを手伝ってください。"
        maze_karel_2_7: |
          私のフィールドに牛が います！牛を避けながら積山を除去するのを助ける新しい関数を描いてください。新しい関数の中に全てのブロックを置きます。
        maze_karel_2_8: "この新しい関数を使用して、「牛を避けるため、1 を削除する」、すべての積山を削除するのを助けて。"
        maze_karel_2_9: |
          OK,ここでは縦に並ぶ４つの異なる泥を削除する関数です。ループ内にこの関数を入れてみてください、そうすればいくつかの新しいブロックだけを使えば泥の山を除去できます。
        maze_karel_2_10: "フィールドを越えて私を移動し、これら 2 つの関数を使用して、すべての積山を削除してすべての穴を埋めるのを手伝ってください。"
        turtle_3_1: "このパズルはどのように「正方形を描く」そして、「円を描く」関数がどう定義されるかを示してます。関数を定義づけはブロックそのものは実行されません。実際に正方形を描画する「正方形を描く」ブロックをプルする必要があります。"
        turtle_3_2: "例として「正方形を描く」関数を使用して、「三角形を描く」関数作成して、それを使用します。"
        turtle_3_3: "猫の周りに三角形のフェンス、そして牛の周りに正方形のフェンスを描いてください。ヒント: あなたがやりながらプログラムをテストしてください。"
        turtle_3_4: |
          ライオンの周りに家を描く事で「正方形を描く」と「三角形を描く」（そして他のいくつかのブロック）をどう使うかを把握しているかをみます。
        turtle_3_5: "今、新しい「家を描く」関数を作成し、それを使って猫の家を描きます。ヒント：「何かをする」ブロックを使い、新しい関数を作成する。ブロックに自分でつけた名前をテキスト入力します。"
        turtle_3_6: "「四角形を描画」を手本として、「三角形を描く」という関数をせいさくしてください。「長さ」という名前の入力を追加します。その後、様々なサイズの三角形を描画して見てくださ。
          （ヒント：関数に入力を追加するには、星をクリックしてください）"
        turtle_3_7: "「家を描画する」に「長さ」という名前の入力を追加します。そして、(エッジ 150 ピクセルの長さ) の大きな象の家を建て見てください。"
        turtle_3_8: "パズルからのブロック、すべてがあります。「家を描画する」を変更して新しい家を描画した後の右下隅で終了するようにしてください。この変更された関数を使用して、3
          つの家を描画します。"
        turtle_3_9: "自分だけで「家を描画する」機能を作成できますか。それを試して、住宅の行を描画します。"
        turtle_3_10: "あなたは多くのことを学んだ ！星、スパイイラル、または派手なスノーフレークなど自由に描画してください。"
        maze_karel_debug_seq_1: |
          デバッグの世界へようこそ ！私のコードは正しく動作されません。植物を植える準備するのに私が自分の土地を平らにできるよう、問題を発見してそれを修正してくれませんか？
        maze_karel_debug_seq_2: |
          このプログラムで何が間違ですか？私が積山を除去できるようにするにはどう修正すればいいですか？
        maze_karel_debug_repeat: "私の土地がすてきに平らになるようこのプログラムをデバグしてください。"
        maze_karel_debug_while: "どういうふうに、このプログラムを変化したら穴を埋めることができるでしょうか。"
        maze_karel_debug_if: "ヘルプ！私の土地が完璧に平らになるようこのプログラムを修正してください。"
        maze_karel_debug_if_else: |
          すべての積山を除去して穴を埋めルコとができるようこのプログラムをデバグしてください。
        maze_karel_debug_function_1: "どんな変更をすればプログラムに杭を削除できるでしょうか。"
        maze_karel_debug_function_2: "プログラムデバグしてもらえませんか。私のフィールドをひらっぺたくしたいんです。"
        maze_karel_debug_function_3: "このプログラムを編集して、フィールドのすべての杭を削除するようにしてください。"
        turtle_5_1: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_2: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_3: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_4: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_5: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_6: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        maze_3_1: "豚を捕まえないといけない。move(); を何回かコールして卵をとりかえしてください。"
        maze_3_2: "豚の居るとこに行けるようにプログラムを書いてください。"
        maze_3_3: "どうやって豚を捕まえたらいいでしょうか？TNT　爆弾にぶつからないようにきおつけてください。"
        maze_3_4: "なんてこった、TNT　を避けて豚が捕まえれるプログラム作って下さい。"
        bounce_1: "「左矢印のとき」ブロックにブロックを接続して、「プログラム実行」 を押します。最終目標に到達するために、左矢印を使用してラケットを移動します。"
        bounce_2: "「右矢印のとき」と「左矢印のとき」ブロックにブロックを接続します。両方の最終目標に到達するためにラケットを移動します。"
        bounce_3: "「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します。"
        bounce_4: "今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します。"
        bounce_5: "ラケットに飛んでおりるボールを送ります。最終目標にボールが確実に届くために「ラケットにボールがヒットするとき」ブロックにブロックをつけます。"
        bounce_6: "最終目標は上にあります。このパズルを解くために「バールがヒットしたとき」ブロックにブロックを接続する必要があります。"
        bounce_7: "「〜のとき」ブロックにブロックを接続します。最終目標にヒットするまでボールをバウンドさせます。"
        bounce_10: "一番上にゴールがあります。ゲームを作るために、「得点」と「敵の得点」ブロックを「ボールがゴールにあるとき」と「ボールがラケットに当たらなかったとき」ブロックに接続します。相手が2回得点する前に自分がどれだけ得点するか見てみましょう。"
        bounce_11: You can now attach blocks to the "when run" block. Try changing
          the speed of the paddle and the ball and see how many points you can score
          before your opponent scores twice.
        bounce_12: Create your own Bounce game. You can change all the visuals and
          the rules. When you're done, click Share to let friends try your game on
          their phones.
        Custom_builder: "作成したいレベルを描画するために、ツールボックスからブロックをワークスペースにドラッグします。準備ができたら「プログラム実行」を押します。"
        flappy_1: "「クリック時」ブロックにブロックを接続して「プログラム実行」を押します。フラッピーを目標に移動できるようクリックかスクリーンをタップします。"
        flappy_2: "いくつかの地面を追加します。「地面にヒットしたとき」ブロックに接続します。フラッピーがクラッシュしたとき「ゲームオーバー」のコードが必要です。"
        flappy_3: "「ゲーム開始時」ブロックはゲーム開始するときにコードを実行させます。目標に向かう速さやパタパタ飛ぶレベルの設定を試してください。"
        flappy_4: "もしクラッシュさせるためのコードを書かない場合、フラッピーは障害物を通り抜けて飛びます。「障害物にヒットしたとき」ブロックにブロックを接続します。フラッピーが最初に設置されtパイプにクラッシュするときに「ゲームエンド」のコードが必要になります。"
        flappy_5: "スコアボード（得点表）を追加してフラッピーが障害物を過ぎたときの得点を数えましょう。「障害物と過ぎたとき」ブロックを追加して、飛んでいるフラッピーが最初の設定したパイプを過ぎるたびに得点をさせてください。"
        flappy_6: "フラッピーのふらふら飛ぶ量を小さくや大きくした後、まだ得点しているかどうか見てください。"
        flappy_7: "次に、「ゲーム開始時」ブロックにもう一つブロックを接続して、状況を変えてみてください。"
        flappy_8: |
          ゲームが開始したときだけでなく、いつでもビジュアルを設定できます。例えば、障害物を過ぎたとき、などのイベントが発生時にランダムな状況を設定するようにしてください。
        flappy_9: "物事をミックスするため、障害物や地面にヒットした時に、ゲーム終了の代わりに得点を０に戻してください。"
        flappy_11: "あなた自信のフラッピーゲームを作ってください。すべてのビジュアルやすべてのルール（重力でさえ）を変えることができます。完成したら、友達に携帯であなたのゲームを試してもらえるよう「共有」ボタンをクリックしてください。"
        flappy_k1_1: Play Flappy
        flappy_k1_2: Attach a block to the "when click" block, then press "Run". Click
          or tap the screen to move Flappy to the target.
        flappy_k1_3: "いくつかの地面を追加します。「地面にヒットしたとき」ブロックに接続します。フラッピーがクラッシュしたとき「ゲームオーバー」のコードが必要です。"
        flappy_k1_4: The "when run" block allows you to run code when your game starts.  Try
          setting the level speed and flapping to the target.
        flappy_k1_5: "もしクラッシュさせるためのコードを書かない場合、フラッピーは障害物を通り抜けて飛びます。「障害物にヒットしたとき」ブロックにブロックを接続します。フラッピーが最初に設置されtパイプにクラッシュするときに「ゲームエンド」のコードが必要になります。"
        flappy_k1_6: "スコアボード（得点表）を追加してフラッピーが障害物を過ぎたときの得点を数えましょう。「障害物と過ぎたとき」ブロックを追加して、飛んでいるフラッピーが最初の設定したパイプを過ぎるたびに得点をさせてください。"
        flappy_k1_7: See if you can score multiple points for making it past an obstacle
        flappy_k1_8: Next, try changing the scene by attaching another block to the
          "when run" block.
        flappy_k1_9: Try changing the player by attaching a "set player" block to
          the "when run" block.
        jigsaw_1: Click the block
        jigsaw_2: Drag the block to the target
        jigsaw_3: Arrange the blocks to form the image
        jigsaw_4: Arrange the blocks to form the image
        jigsaw_5: Arrange the blocks to form the image
        jigsaw_6: Arrange the blocks to form the image
        jigsaw_7: Arrange the blocks to form the image
        jigsaw_8: Arrange the blocks to form the image
        jigsaw_9: Arrange the blocks to form the image
        jigsaw_10: Arrange the blocks to form the image
        jigsaw_11: Arrange the blocks to form the image
        jigsaw_12: Arrange the blocks to form the image
        jigsaw_13: Fix the puzzle!
        mazestep_1: Maze step description here
        mazestep_2: Maze step description here
        mazestep_3: Maze step description here
        mazestep_4: Maze step description here
        mazestep_5: Maze step description here
        studio_c2_1: Can you make this dog say "hello world"?
        studio_c2_2: Can you make the dog say something and then have the cat say
          something afterwards?
        studio_c2_3: Can you write a program to make this dog move to the cat?
        studio_c2_4: Can you write a program that makes the dog move to the cat, and
          have the cat say "hello" when the dog reaches him?
        studio_c2_5: Can you write a program to make the octopus say "hello" when
          it is clicked?
        studio_c2_6: Can you write a program to make this penguin move around using
          the up / down / left /right keys to hit all of the targets?
        studio_c2_7: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to move this dinosaur up and down repeatedly?
        studio_c2_8: Can you have the penguin say "Ouch!" and play a "hit" sound if
          he runs into the dinosaur, and then move him with the arrows to make that
          happen?
        studio_c2_9: Can you add a block to score a point when the penguin runs into
          the octopus, and then move him with the arrows until you score?
        studio_c2_10: Can you add blocks to change the background and the speed of
          the penguin, and then move him with the arrows until you score?
        studio_c2_11: Create your own story. When you're done, click Finish to let
          friends try your story on their phones.
        studio_c3_story_1: Can you make this dog say "hello world"?
        studio_c3_story_2: Can you make the dog say something and then have the cat
          say something afterwards?
        studio_c3_story_3: Can you write a program to make this dog move to the cat?
        studio_c3_story_4: Can you write a program that makes the dog move to the
          cat, and have the cat say "hello" when the dog reaches him?
        studio_c3_story_5: Can you add a block to make the octopus happy?
        studio_c3_story_6: Create your own story. When you're done, click Finish to
          let friends try your story on their phones.
        studio_c3_game_1: Can you write a program to make the octopus say "hello"
          when it is clicked?
        studio_c3_game_2: Can you write a program to make this penguin move around
          using the up / down / left /right keys to hit all of the targets?
        studio_c3_game_3: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to move this dinosaur up and down repeatedly?
        studio_c3_game_4: Can you have the penguin say "Ouch!" and play a "hit" sound
          if he runs into the dinosaur, and then move him with the arrows to make
          that happen?
        studio_c3_game_5: Can you add a block to score a point when the penguin runs
          into the octopus, and then move him with the arrows until you score?
        studio_c3_game_6: Can you add blocks to change the background and the speed
          of the penguin, and then move him with the arrows until you score?
        studio_c3_game_7: Create your own game. When you're done, click Finish to
          let friends try your story on their phones.
        studio_playlab_1: Can you make this dog say "hello world"?
        studio_playlab_2: Can you make the dog say something and then have the cat
          say something afterwards?
        studio_playlab_3: Can you write a program to make this dog move to the cat?
        studio_playlab_4: Can you write a program that makes the dog move to the cat,
          and have the cat say "hello" when the dog reaches him?
        studio_playlab_5: Can you write a program to make the octopus say "hello"
          when it is clicked?
        studio_playlab_6: Can you write a program to make this penguin move around
          using the up / down / left /right keys to hit all of the targets?
        studio_playlab_7: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to move this dinosaur up and down repeatedly?
        studio_playlab_8: Can you add a block to score a point when the penguin runs
          into the octopus, and then move him with the arrows until you score?
        studio_playlab_9: Can you add blocks to change the background and the speed
          of the penguin, and then move him with the arrows until you score?
        studio_playlab_10: Create your own game. When you're done, click Finish to
          let friends try your story on their phones.
        studio_full_sandbox: Create your own game. When you're done, click Finish
          to let friends try your story on their phones.
        studio_k1_1: Can you make this dog say "hello world"?
        studio_k1_2: Can you make the dog say something and then have the cat say
          something afterwards?
        studio_k1_3: Can you write a program to make this dog move to the target?
        studio_k1_4: Make the dog move to the cat and the cat say "hello" when he
          gets there.
        studio_k1_5: Can you add a block to make the octopus happy?
        studio_k1_6: Can you write a program to make this penguin move around using
          the up / down / left /right keys to hit all of the targets?
        maze_wordsearch_k_1: Move me to spell the word EAST
        maze_wordsearch_k_2: Move me to spell the word SOUTH
        maze_wordsearch_k_3: Move me to spell the word WEST
        maze_wordsearch_k_4: Move me to spell the word NORTH
        maze_wordsearch_k_6: Move me East and then South to spell the word JUMP
        maze_wordsearch_k_9: Move me one way, then another to spell the word CODE
        maze_wordsearch_k_13: Move me one way, then another to spell the word DEBUG
        maze_wordsearch_k_15: Move me one way, then another to spell the word ABOVE
        maze_wordsearch_k_16: Move me one way, then another to spell the word BELOW
        maze_wordsearch_k_20: This is a test! Move me one way, then another to spell
          the word STORY
    video:
      name:
        maze_intro: "迷路入門"
        artist_intro: "アーティスト紹介"
        farmer_intro: "農夫のイントロ"
        flappy_intro: "フラッピー入門編"
        loop_times: "回ブロックを繰り返す"
        loop_until: "までブロックを繰り返します"
        if: "もしもブロック"
        if_else: "もしも/他にブロック"
        function: "関数"
        loop_while: "の間にブロック"
        loop_for: "数える ブロック"
        parameters: "パラメーター付き関数"
        hoc_wrapup: "コードの時間終了"
        20_wrapup: |
          20 時間ラップアップ
        Unplug1: What is CS?
        Unplug2: "コンピュテーショナル・シンキング（コンピューターの様に考える）"
        Unplug3: "グラフ用紙のプログラミング"
        Unplug4: "アルゴリズム"
        Unplug5: "関数"
        Unplug6: "条件"
        Unplug7: Songwriting
        Unplug8: "抽象化"
        Unplug9: Relay programming
        Unplug10: Internet
        Unplug11: "ラップアップ"
        C1_happy_maps_unplugged: Happy Maps
        C1_moveitmoveit_unplugged: Move It, Move It
        C1_bigevent_unplugged: The Big Event
        C1_getting_loop: Getting Loopy
        C1_pair_programming: Pair Programming
        C1_maze_intro_sequencing: Maze Sequencing Intro
        C1_maze_debugging: Maze Debugging
        C1_bee_level_intro: Bee Level - Intro
        C1_artist_intro: "アーティスト紹介"
        C1_spelling_bee_intro: Spelling Bee Intro
        C1_zuck_repeat_loop: Maze Loops
        C1_bee_loops: Bee Loops
        C1_maze_loops: Maze Loops
        C1_playlab_storytelling: Play Lab - Create a Story
        C1_planting_seed: Planting a Seed
        C1_building_foundating: Building a Foundation
        C2_maze_intro: "迷路入門"
        C2_artist_intro: "アーティスト紹介"
        C2_zuck_repeat_loop: Maze Loops
        C2_artist_loops: Artist Loops
        C2_bee_conditionals: Bee Conditionals
        C2_playlab_createstory: Play Lab - Create a Story
        C2_graph_paper: "グラフ用紙のプログラミング"
        C2_conditionals_with_cards: "条件"
        C2_binary_bracelets: Binary Bracelets
        C2_replay_programming: "プログラミングをリレーします。"
        C2_paper_airplanes: Paper Airplanes
        C3_maze_intro: "迷路入門"
        C3_artist_intro: "アーティスト紹介"
        C3_artist_functions: Artist Functions
        C3_bee_functions: Bee Functions
        C3_bee_conditionals: Bee Conditionals
        C3_maze_conditionals: Maze Conditionals
        C3_artist_nested_loops: Nested Loops
        C3_farmer_while: While Loops
        C3_bee_nested_loops: Nested Loops
        C3_bee_debugging: Bee Debugging
        C3_bounce: "バウンド"
        C3_playlab_create_game: Play Lab - Create a Game
        C3_computational_thinking: "コンピュテーショナル・シンキング（コンピューターの様に考える）"
        C3_dice_race: Dice Race
        C3_internet: Internet
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Functional Suncatchers
        C3_songwriting_with_parameters: Songwriting With Parameters
    callout:
      text:
        drag_blocks: Drag a "move" block and snap it below the other block
        run: Hit "Run" to try your program
        watch_again: Click here to watch the video again
        gray_block_explanation: Blocks that are grey can't be moved or deleted. Can
          you solve the puzzle anyway?
        show_code_explanation: Click here to see the code for the program you're making
        instructions_repeat_explanation: The instructions for each puzzle are repeated
          here
        category_explanation: You have all the same blocks but they've now been arranged
          in categories
        set_sprite_image: Attach a "set actor to image" block to the "when story starts"
          block to enable an actor for this story
        studio_say_text: Type what you want your actor to say within these quotes
        jigsaw_click: Click this block!
