"sv":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Välkommen till din första Hour of Code! Vi kastar oss direkt in i ditt
          första smakprov på programmering.
      2:
        image: notes/hoc1_2.jpg
        text: Vi kommer använda Blocky, ett visuellt programmeringsspråk där du drar
          ut block och sätter ihop för att skriva kod.
      3:
        image: notes/hoc1_3.jpg
        text: Kod är mestadels skriven med Blocky är visuellt. Varje block representerar
          en rad med "riktig" kod.
      4:
        image: notes/hoc1_4.jpg
        text: Du kommer lära dig grunderna för datavetenskap, grunder som används
          för att göra allt från appar till instruktioner till marslandare.
      5:
        image: notes/hoc1_5.jpg
        text: Ett program är en grupp instruktioner som din dator kommer följa.
      6:
        image: notes/hoc1_6.jpg
        text: Målet för ditt första program är att få en Angry Bird genom en labyrint
          för att träffa en Grön Gris.
      7:
        image: notes/hoc1_7.jpg
        text: Till vänster är labyrinten där ditt program kommer köra. Instruktionerna
          för varje puzzel kommer vara nedanför labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: I mitten finns verktygslådan där alla kommandon för den Röda Fågeln
          finns. Du kommer använda de här för att sätta ihop din kod.
      9:
        image: notes/hoc1_9.jpg
        text: Till höger är arbetsytan dit du ska dra block från verktygslådan för
          att sätta ihop ditt program. För att ta bort ett block, dra det till papperskorgen
          i hörnet.
      10:
        image: notes/hoc1_10.jpg
        text: Varje block är en instruktion. Om du drar ett "gå framåt"-block till
          arbetsytan och trycker på "Kör programmet" så kommer fågeln gå ett steg
          fram i labyrinten.
      11:
        image: notes/hoc1_11.jpg
        text: För att utföra mer än en åtgärd kan du dra många block till din arbetsyta
          och sätta ihop dem tillsammans. Fågeln kommer att utföra kommandona från
          toppen till botten.
      12:
        image: notes/hoc1_12.jpg
        text: Om du kör ett program men vill fixa det och försöka igen, tryck på knappen
          "Återställ".
      13:
        image: notes/hoc1_13.jpg
        text: Låt oss gå och få tag på grisarna!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hej, jag heter JR! Varje racerbilslag behöver datavetare för att vinna.
          De analyserar data från bilen för att få den att bli snabbare.
      2:
        image: notes/stage5_2.jpg
        text: I dessa pussel, kommer du vara en konstnär som ritar en linje bakom
          dig där du går.
      3:
        image: notes/stage5_3.jpg
        text: Detta block säger "gå framåt 100 pixlar." Pixlar är riktigt små prickar
          på skärmen.
      4:
        image: notes/stage5_4.jpg
        text: Detta block säger "sväng åt höger 90 grader." Detta vänder din konstnär
          lika mycket som "sväng"-blocken i labyrintpusslen.
      5:
        image: notes/stage5_5.jpg
        text: Klicka på pilen i något av dessa block för att ändra hur mycket konstnären
          rör sig framåt eller svänger. Testa för att bekanta dig med dessa nya block.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hej, jag är Paola! I dessa pussel är du en bonde som måste få sitt område
          helt platt för att börja plantera grödor.
      2:
        image: notes/stage9_2.jpg
        text: Du måste hjälpa henne ta bort alla smutshögar och fylla i alla hål.
      3:
        image: notes/stage9_3.jpg
        text: De nya kuberna tar bort 1 skopa jord från en hög och fyller ett hål
          med en skopa jord.
      4:
        image: notes/stage9_4.jpg
        text: Högarna och hålen har olika storlekar, så du måste fråga bonden hur
          många skopor jord du behöver använda.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hej, jag heter Katie! En av de mest spännande sakerna med datavetenskap
          är att ett dataprogram kan vara interaktivt.
      2:
        image: notes/flappy02.jpg
        text: Varje gång nån klickar, pekar eller skriver på en dator eller telefon
          så skapas en HÄNDELSE och det finns kod som bestämmer vad som ska göras
          när en HÄNDELSE inträffar.
      3:
        image: notes/flappy03.jpg
        text: 'Till exempel skulle du kunna ha en HÄNDELSE-HANTERARE som säger "när
          det klickas med musen, spela upp ett ljud" '
      4:
        image: notes/flappy04.jpg
        text: Har du hört talas om spelet FlappyBird? Genom att använda händelse-hanterare
          ska vi lära oss att programmera vår egen version av FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Koden som du ska skriva innebär att dra och släppa block som representerar
          kommandon för datorn. Under huven representeras vart och ett av dessa block
          verklig kod.
      6:
        image: notes/flappy06.jpg
        text: 'Om du tar en titt på arbetsytan finns det några gröna block som fyllts
          i för dig - de är "händelse-hanterare" '
      7:
        image: notes/flappy07.jpg
        text: Om du vill att fågeln FLAXAR när du KLICKAR med musen, kan du göra det
          genom att fästa "FLAXA" blocket till händelse-hanteraren och när du nu,
          i ditt spel, klickar med musen, kommer fågeln att flaxa.
      8:
        image: notes/flappy08.jpg
        text: I varje uppgiften av denna aktivitet kommer vi att introducera nya typer
          av händelser som gröna block på arbetsytan, och du kan bestämma lämpliga
          block för att lägga till som hanterare på dessa händelser.
      9:
        image: notes/flappy09.jpg
        text: När du ser en listrutepil såhär, innebär det att du kan ändra inställningar
          - som vilket ljud som ska spela när flappy träffar marken.
      10:
        image: notes/flappy10.jpg
        text: I den sista uppgiften kommer du att kunna skapa ditt eget spel och dela
          det med dina vänner. Ha det så kul!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hej, är jag Mark! Låt oss lära oss om loopar. Med loopar kan du berätta
          för en dator att den ska upprepa en grupp med handlingar om och om igen,
          tusentals eller till och med miljarder gånger.
      2:
        image: notes/hoc2_2.jpg
        text: I detta pussel vill vi få fågeln att gå 5 steg framåt för att komma
          till grisen.
      3:
        image: notes/hoc2_3.jpg
        text: Vi kan använda det nya "Upprepa"-blocket för att klara det.
      4:
        image: notes/hoc2_4.jpg
        text: Istället för att dra ut 5 "gå framåt"-block...
      5:
        image: notes/hoc2_5.jpg
        text: Så kan vi sätta "gå framåt"-blocket inuti "upprepa"-blocket och skriva
          det nummer på blocket som representerar hur många gånger vi vill att handlingen
          ska upprepas.
      6:
        image: notes/hoc2_6.jpg
        text: 'Och detta är viktigt: du kan sätta mer än en handling i ett "Upprepa"-block.'
      7:
        image: notes/hoc2_7.jpg
        text: Lycka till med att använda ditt nya "upprepa"-block!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hej, är jag Chris. Innan jag gick med i Miami Heat, gick jag på Georgia
          Tech för att studera datavetenskap. Låt oss prova vårt nya block, "upprepa
          tills"-blocket.
      2:
        image: notes/hoc3_2.jpg
        text: Vad skulle hända om vi inte visste hur långt fågeln var tvungen att
          gå för att komma till grisen?
      3:
        image: notes/hoc3_3.jpg
        text: Om vi sätter ett "gå framåt"-block inuti "upprepa tills"-blocket så
          kommer fågeln att gå framåt TILLS den når grisen (eller kraschar in i väggen).
      4:
        image: notes/hoc3_4.jpg
        text: 'Och detta är viktigt: precis som tidigare, kan vi sätta flera block
          inuti blocket "upprepa tills", och de kommer alla att upprepas.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hej, är jag Bill! Låt oss lära oss ett nytt grundläggande koncept:
          "Om"-satser. Detta är hur datorer fatta beslut.'
      2:
        image: notes/hoc4_2.jpg
        text: Du använder "Om" uttalanden själv varje dag. Innan du går ut varje morgon,
          säger du OM det regnar ute,  behöver använda min jacka.
      3:
        image: notes/hoc4_3.jpg
        text: Vi kan säga till zombien att kolla om det finns väg till vänster, och
          om han hittar en väg till vänster så ska han vända i den riktningen.
      4:
        image: notes/hoc4_4.jpg
        text: 'För att skriva koden till detta: dra ut "om"-blocket och sätt ett "sväng
          vänster"-block inuti det.'
      5:
        image: notes/hoc4_5.jpg
        text: Om vi nu sätter en "gå framåt"-block ovanför det och en "upprepa"-block
          runt allt så kommer zombien varje gång den går kolla om det finns en väg
          till vänster och i så fall svänga. "Upprepa"-blocket är viktigt för annars
          skulle zombien bara ta ett steg.
      6:
        image: notes/hoc4_6.jpg
        text: '"Om"-satser är mycket viktiga i programmering. Ett av det första spelen
          jag skrev var ett tre-i-rad spel, och i det fanns en "Om"-sats som sa OM
          den andra spelaren håller på att vinna, stoppa honom.'
      7:
        image: notes/hoc4_7.jpg
        text: Ha kul med "om"-blocket!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hej, jag heter Saloni. Jag använder programmering för att lösa problem
          inom hälsa och medicin. Låt oss lära oss om "om/annars"-blocket. Det ser
          ut som "om"-blocket men den har en extra del i slutet som kallas "annars".
      2:
        image: notes/hoc5_2.jpg
        text: Om jag sätter ett "gå framåt"-block på platsen där det står "gör" och
          ett "sväng vänster"-block där det står "annars" innebär det att zombien
          kommer att välja mellan 2 alternativ. OM det finns en väg framåt så kommer
          zombien att gå framåt, och annars (det finns inte en väg framåt) kommer
          zombien svänga vänster.
      3:
        image: notes/hoc5_3.jpg
        text: Precis som "om" blocket, kan vi sätta "om-annars" block inuti ett "repetera"
          block så att zombien fortsätter gå och "om-annars" blocket kommer att kolla
          om det finns någonstans att svänga.
      4:
        image: notes/hoc5_4.jpg
        text: Nu, få de här zombisarna dit de hör hemma!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: En om-annars-sats är ett beslut mellan två saker. Låt oss se hur vi
          kan använda en om-annars-sats med vår kompis Scrat Ekorren.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Detta block ser likadan ut som blocket "om", men det finns en extra
          del längst ner som säger "annars". Om jag sätter ett "gå framåt" block där
          det står "gör" och ett "sväng vänster"  blockdär det står "annars", betyder
          det att Scrat ekorren går framåt om det finns en väg framåt. Om det inte
          finns en väg framåt, kommer Scrat svänga vänster.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Den fattar beslut och utför något av de två åtgärder som baseras på
          beslutet. Och precis som med "om" block, kan du sätta "om-annars" block
          inuti "Upprepa" block.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Låt oss hjälpa ekorren Scrat att få tag på ekollonet!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hej, jag är Brian, en av Instagrams ingenjörer. En funktion är en kodrad
          med olika koder som du vill använda om och om igen, så istället för att
          skriva ner var kod för sig så kan du istället använda en kub.
      2:
        image: notes/stage13_2.jpg
        text: Vi kommer att lära dig att definiera funktioner. Funktionsdefinitioner
          har en stjärna i hörnet. Namnet på funktionen är skriven på den översta
          raden.
      3:
        image: notes/stage13_3.jpg
        text: De block som är inuti definitionen berättar vad den gör. Så den här
          funktionsdefinitionen kallas "fyll 5" och den består av ett "upprepa" och
          ett "fyll" block.
      4:
        image: notes/stage13_4.jpg
        text: Definitionen finns i arbetsytan, men våra bönder kommer inte köra funktionen
          tills vi drar ut vårt "fyll 5"-funktionsblock från funktions-kategorin.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: '"Medan" blocket kommer att göra det du sätter inne i det SÅ LÄNGE uttrycket
          i toppen är SANT.'
      3:
        image: notes/stage9_7.jpg
        text: Till exempel, om bonden står på en hög, fortsätter hon att ta bort 1
          spadtag MEDAN det finns en hög under henne.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hej, jag heter Trina, och jag arbetar för Pixar. Jag har arbetat med
          en massa filmer, bland annat Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Det här är vår nya "räknare" loop. Den kommer att utföra kommandon om
          och om igen och du kan göra så att kommandona ändrar sig lite för varje
          gång.
      3:
        image: notes/stage11_3.jpg
        text: I det här exemplet säger vår "räknare"-loop "räkna med räknare från
          50 till 90 med 10-steg" och inuti den, har vi våra "Rita en fyrkant" block.
          Dra blocket "räknare" från avsnittet "Variabler" till "längd"-platsen.
      4:
        image: notes/stage11_4.jpg
        text: Detta innebär att vår konstnär kommer att rita en kvadrat som har 50
          pixlar långa sidor, sen lägger den till 10 till det och ritar en kvadrat
          med 60 pixlar långa sidor. Sen kommer den att hålla på att lägga till 10
          och rita kvadrater tills den når 90. Då har vi kvadrater som är 50, 60,
          70, 80 och 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hej, jag heter Janete, och jag är ingenjör på Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Tänk om vi vill rita en massa trianglar och att de ska ha olika längder
          på sidorna?
      3:
        image: notes/stage15_3.jpg
        text: Vi skulle kunna skriva all den koden för hand eller så kan vi använda
          en funktion med parametrar.
      4:
        image: notes/stage15_4.jpg
        text: För att göra det, klicka på den blå stjärnan på "rita en triangel"s
          funktionsdefinition. Dra sen "fyll i namn" in i "input" blocket.
      5:
        image: notes/stage15_5.jpg
        text: Sen om du skriver "längd" där det står "x" och trycker "Enter" så skapar
          du en längd inmatning till din funktion.
      6:
        image: notes/stage15_6.jpg
        text: Sen klicka på stjärnan. Nu, klicka på kategorin variabler och dra blocket
          "längd" in i "gå framåt" blocket i din funktionsdefinition. Och dra bort
          det gamla nummerblocket.
      7:
        image: notes/stage15_7.jpg
        text: För att använda din funktion med parametrar, klicka på kategorin funktioner
          och dra ut din "Rita en triangel med längd" funktion.
      8:
        image: notes/stage15_8.jpg
        text: Nu kan du använda matematikblocket för att mata in olika siffror för
          att rita trianglar i olika storlekar.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Grattis! Med senaste pusslet du löste skrev du kod som kan du få vilken
          robot som helst att hitta sin väg genom en labyrint eller tunnel utan förgreningar
          och oberoende längd. Oavsett om det är en zombie, en fågel, en marslandare
          eller även en självkörande bil.
      2:
        image: notes/hoc6_2.jpg
        text: De grundläggande koncept du använt är kärnan i varje program eller app
          som du någonsin kommer använda.  Vi lärt oss om "upprepa"-loopar, "upprepa
          tills"-loopar, "om"-satser, och om "om/annars"-satser.
      3:
        image: notes/hoc6_3.jpg
        text: Om du gillade din första Timme med Kod, besök code.org för att fortsätta
          din utbildning i programmering! När du är klar med våran 20 timmars kurs
          så kommer du ha behärskat grunderna i programmering. Då kan du börja lära
          dig skriva telefon appar, robot instruktioner, spel eller vad du än vill.
      4:
        image: notes/hoc6_4.jpg
        text: 'Tekniken förändras allt vi gör och det spelar ingen roll om du är ung
          eller gammal: programmering är kul, kreativt och alla kan lära sig!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Visa textning kommer snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hej, är mitt namn Lyndsey. Jag designar, programmerar och skriver min
          egen appar. Låt oss använda kod för att följa med Anna och Elsa när de utforskar
          magin och skönheten med is.
      2:
        image: notes/frozen1_2.jpg
        text: Du kommer att skapa snöflingor och mönster när du åker skridskor och
          gör ett vinterlandskap som du sedan kan dela med dina vänner.
      3:
        image: notes/frozen1_3.jpg
        text: Under nästa timme kommer du att lära sig grunderna i hur man kodar.
          Traditionell programmering är oftast i text, men vi kommer att använda Blockly,
          som använder block som du kan dra och släppa för att skriva program. Detta
          är även hur universitets studenter lära sig grunderna. Under blocken skapas
          fortfarande kod.
      4:
        image: notes/frozen1_4.jpg
        text: Ett program är en uppsättning instruktioner som talar om för en dator
          vad den ska göra. Låt oss bygga en kod eller ett program, som hjälper Elsa
          skapa en enkel linje. Vi kommer att använda detta senare för att skapa mer
          komplexa mönster.
      5:
        image: notes/frozen1_5.jpg
        text: Skärmen delas in i tre delar. Till vänster, är isytan där du ska köra
          ditt program. Instruktionerna för varje nivå är skrivna under isytan.
      6:
        image: notes/frozen1_6.jpg
        text: Mellersta området är verktygslådan, och vart och ett av dessa block
          är en åtgärd som Elsa och Anna kan utföra.
      7:
        image: notes/frozen1_7.jpg
        text: Det vita utrymmet till höger kallas arbetsytan, och det är där vi ska
          bygga våra program. Om du vill flytta runt på isytan, ska du använda blocket
          "gå framåt".
      8:
        image: notes/frozen1_8.jpg
        text: Här säger 'gå framåt'-blocket, "gå framåt 100 pixlar." När vi trycker
          på "Kör", vad händer? Elsa flyttar fram en viss bit på skärmen, 100 pixlar
          faktiskt! Pixlar är i grunden mycket små rutor på skärmen.
      9:
        image: notes/frozen1_9.jpg
        text: Det andra blocket som vi har i detta pussel säger "sväng höger med 90
          grader." Och när vi använder detta "sväng höger" block, svänger Elsa åt
          höger. Du kan leka med hur långt du vill att Elsa ska vända. Vinkeln mäts
          från vägen framför Elsa. Så detta är en 90 graders sväng. Och detta är en
          120 graders sväng.
      10:
        image: notes/frozen1_10.jpg
        text: Kom ihåg att du kan ändra antalet pixlar och grader genom att klicka
          på pilarna bredvid dem.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hej, är jag Paola! Datorer är riktigt bra på att upprepa åtgärder. Du
          kan räkna till 10, 20 eller 100. Men en dator kan räkna till en miljard
          eller en biljon. Den kommer inte bli uttråkad och det tar bara några sekunder.
          Om det är att räkna, eller att rita, eller vad som helst--datorer kan upprepa
          saker hundratals eller till och med miljarder gånger.
      2:
        image: notes/frozen2_2.jpg
        text: I programmering kallar vi detta en loop. En loop eller slinga upprepar
          din kod om och om igen. För nästa pussel är ditt mål att hjälpa Anna skapa
          en kvadrat med "Upprepa" blocket.
      3:
        image: notes/frozen2_3.jpg
        text: Varje kodblock du sätter inne i "Upprepa" blocket kommer att upprepas
          i sekvens, så många gånger du vill.
      4:
        image: notes/frozen2_4.jpg
        text: Om du vill rita en kvadrat, kan du använda "gå framåt" och "Sväng höger"
          blocket 4 gånger. Men det lättaste är att tala om för datorn att "gå framåt"
          och "sväng höger med 90 grader" en gång, och sedan tala om att datorn ska  upprepa
          detta par åtgärder 4 gånger. För att göra det, måste du sätta "gå framåt"
          och "sväng höger" blocken inuti ett "Upprepa" block.
      5:
        image: notes/frozen2_5.jpg
        text: Kom ihåg, att du kan ändra siffran i blocket "Upprepa" till en annan,
          och det kommer att upprepa vad som finns inuti blocket så många gånger.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hej, är jag Chris Bosh. Jag är en basketspelare och jag kodat i college.
      2:
        image: notes/frozen3_2.jpg
        text: En av de viktigaste begreppen inom datavetenskap är att definiera nya
          kommandon. De flesta datorspråk har endast omkring 100 ord eller kommandon.
          Och verkligen, konsten och magin är att definiera sina egna nya ord ur dessa
          byggstenar.
      3:
        image: notes/frozen3_3.jpg
        text: När du har lärt en dator hur den kan göra en åtgärd en gång med en viss
          följd av kommandon, kan du hitta på ditt eget namn för åtgärden så att det
          är lätt att upprepa den senare. När du definierar ditt eget kommando och
          ger det ett namn, kallas det en funktion.
      4:
        image: notes/frozen3_4.jpg
        text: Hej, är jag Jess. När du programmerar med block använder du funktioner
          om där finns en samling åtgärder du vill använda flera gånger. Du har till
          exempel skrivit kod för att skapa en kvadrat.
      5:
        image: notes/frozen3_5.jpg
        text: Du kan definiera detta som en funktion kallad "skapa en fyrkant."
      6:
        image: notes/frozen3_6.jpg
        text: Nu har du ett nytt block som du kan använda flera gånger för att skapa
          flera fyrkanter.
      7:
        image: notes/frozen3_7.jpg
        text: En hel del enkla former kan användas för att skapa mer komplexa mönster.
          I nästa pussel är koden du skrev nyligen för att göra en cirkel tillgänglig
          för dig som en ny funktion som kan göra cirklar i olika storlekar. Kan du
          använda den för att låta Elsa skapa intrikata och vackra mönster i snön?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vi kommer att skapa spel med Play Lab. Bra spel har en historia, och
          varje historia har skådespelare. Vi lär oss hur man får skådespelare såsom
          häxor, utomjordingar, och djur att tala, röra sig och interagera med varandra.
          I slutet av denna övning kan du bygga ett spel från grunden och dela det
          med dina vänner.
      2:
        image: notes/playlab_intro_2.png
        text: Skärmen är uppdelad i 3 delar. Till vänster är spelutrymmet där ditt
          program kommer att köras. Instruktionerna för varje nivå står nedanför.
      3:
        image: notes/playlab_intro_3.png
        text: Utrymmet i mitten är verktygslådan, och varje block är en bit kod. Det
          vita utrymmet till höger kallas arbetsytan och det är där vi ska bygga vårt
          program.
      4:
        image: notes/playlab_intro_4.png
        text: Till att börja med måste du koppla ihop dina block med det oranga "när
          startar"-blocket. Du kan koppla ihop flera block genom att dra dem tills
          du ser den gula linjen, och sedan kommer de att fästas ihop.
      5:
        image: notes/playlab_intro_5.png
        text: I det första pusslet är vår skådespelare en pingvin och vi kommer att
          få den att säga "Hej!" genom att dra ut "säg"-blocket, koppla ihop det med
          "när startar"-blocket, och skriva in "Hej." Vi kan också får pingvinen att
          flytta sig med "flytta höger" och "flytta vänster"-blocken. När du har satt
          ihop block, tryck knappen Kör för att se vad du har programmerat.
      6:
        image: notes/playlab_intro_6.png
        text: Kom igång  nu och i slutet kommer du att kunna skapa ditt eget spel
          med alla typer av spelare som kan interagera, vara glada eller ledsna, samla
          poäng, eller kasta eldklot eller till och med låta varandra försvinna. Det
          är upp till dig och det spel du vill göra.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Vi ska nu lära oss om något som alla spel programmerare använder varje
          dag. Det kallas händelser. En händelse talar om för ditt program att lyssna
          efter när något händer. När det där händer, utför det en åtgärd.
      2:
        image: notes/playlab_events_2.png
        text: Några exempel på händelser är att lyssna efter ett musklick, en pilknapp
          eller ett tryck på skärmen.
      3:
        image: notes/playlab_events_3.png
        text: Här ska vi göra så att spacebot hälsar på jordbor när en spelare klickar
          på honom. Vi använder "vid klickning" blocket och bifogar blocket "säger"
          till det. När spelaren klickar på spacebot, kommer allt som är kopplat till
          "vid klickning" händelseblocket  att utföras. Vad säger din alien?
      4:
        image: notes/playlab_events_4.png
        text: Det finns också "när pilen" block. Om du länkar "flytta" block till
          dessa, kan du börja flytta ditt aktörer upp, ner, vänster, eller till höger.
          Steg för steg blir dina spel mer interaktiva.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Detta är blocket "Upprepa för alltid". Allt inuti detta block kommer
          att hända för alltid i spelet.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Om vi vill att en aktör skagöra något flera gånger, utan att spelaren
          behövergöra något, ska vi lägga dessa block inuti blocket "Upprepa forever".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: I nästa pussel, är vårt mål att hjälpa trollkarlen patrullera gränserna
          av kungariket, vänster och höger kontinuerligt. Lära sig hur upprepnings
          kommandon fungerar, kommer att spara dig massor av tid senare när du gör
          ditt eget spel.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Det här är dina ritblock. Använd det rätta för att flytta konstnären
          dit han måste gå för att fylla i de grå linjerna.
      2:
        image: notes/C1_artist_intro_2.png
        text: Det här är dina hopp-block. När du använder dessa flyttar din konstnär
          på sig, men ritar inget, så använd dem för att hoppa till nästa gråa rad.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |
          Är inte bin supercoola? I nästa uppsättning av pussel är ditt mål att hjälpa biet att komma till blommorna, hämta nektar från blommorna och flyga över till honungskakan för att göra honung.
          Du behöver använda blocken "hämta nektar" och "gör honung" i den här övningen.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Varje blomma har olika antal nektar: 1, 2, 3 eller mer. Den lilla siffran
          i hörnet visar hur mycket nektar det är i de röda blommorna. Var noga med
          att du hämtar all nektar från blomman innan du går framåt. Dessutom rymmer
          varje honungskaka bara en viss mängd honung: 1, 2, 3 eller mer. Gör bara
          så mycket honung som honungskakan rymmer.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Om du lyckas hämta all nektar och gör all honung kommer du att gå till
          nästa nivå. Annars behöver du göra ett nytt försök med pusslet igen. Prova
          ett tag och se hur det känns att vara en programmerare!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: En loop är att göra om en sak flera gånger. Så när jag inspekterar en
          bikupa, så tittar jag på en ram och stoppar tillbaka den, det upprepar jag
          flera gånger. Det kallas på programmeringsspråk att loopa.
      2:
        image: notes/C1_bee_loops_2.png
        text: I den här övningen vill vi att vårt bi ska samla ihop 3 nektar från
          blomman. Istället för att använda tre "samla nektar" block så använder vi
          ett repetitions block för att samla nektar tre gånger. Klicka på "Kör" och
          se om det blev rätt. Bra!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Denna lektion kallas den stora händelsen. Det är allt om hur vi kan
          styra våra program och faktiskt ändra hur ett program körs i farten med
          hjälp av händelser, som att trycka på en knapp eller ett musklick.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: I den här lektionen ska du styras med en fjärrkontroll av papper. Det
          är precis som ett real-live spel.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: En händelse är en åtgärd som gör så att något händer. Det är som när
          du klickar på knappen på en mus och en webbsida laddas. Det är en händelse.
          När du rör skärmen på en surfplatta för att scrolla, är det en händelse
          också. Händelser är ett bra sätt att låta användaren dirigera ditt program
          när de behöver eller vill.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Saker händer som vi alla svarar på. Vi känner oss hungriga och går till
          kylskåpet. Vi hör brevbäraren komma och han lägger vår post i brevlådan
          och sedan går vi för att hämta våra brev. De är precis som händelserna  trycka
          på en dator tangent eller röra en joystick. De är något som händer som triggar
          oss att göra något.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: I Tv-spel finns en händelse kallas "Uppdatera" och sker 30 eller 60
          gånger per sekund. För videospels- programmerare är den nästan ännu viktigare
          som en händelse än knapparna eller joysticken.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Den viktigaste händelsen vi tittar efter är att "Uppdatera" ticket var
          eller varannan sekund sker. I varje tick kontrollerar vi joysticken. Så
          vi säger, "Åh, har någon tryckt på knappen under denna 'frame'? Ja eller
          nej?" Utan händelser, kan inte spelaren gå, du kunde inte hoppa, du skulle
          inte kunna kontrollera vad som händer. Videospelet skulle inte kunna animera
          något.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Med sandskulpturer vet du att misslyckande är en del av det hela. Men
          om du håller ut, kommer det bara att bli bättre och mer spännande. Uthållighet
          är namnet. Håll ut, du kommer att älska det.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Denna lektion kallas bygga en grund. I den här lektionen ska vi arbeta
          med en aktivitet som är tänkt att vara riktigt svårt. Du ska räkna ut hur
          man gör en struktur som är minst lika lång som en av dessa koppar och den
          måste vara stark nog att hålla vikten på en bok.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Det kan finnas tillfällen då vår skapelse inte fungerar. Det kan finnas
          tillfällen när vi blir frustrerade och vill ge upp. Det kan finnas en hel
          del av dessa stunder. Men om vi fortsätter försöka, ge det vårt bästa om
          och om igen, då kan vi vara säkra på att få till det snart.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Envishet handlar om hänga i när du verkligen vill ge upp. Om du vill
          skapa något nytt och annorlunda, kommer det att finnas en hel del missar
          längs vägen.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Uthållighet är att välja att hålla ut och lära av dina misslyckanden
          i stället för att sluta för att du är frustrerad. Frustration innebär egentligen
          bara att det något underbart runt hörnet. Så sluta inte innan du kommer
          till den. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hej, mitt namn är Miral Kotb och jag är skaparen av Illuminate. I mitt
          arbete är det något vi använder i både danserna och programmeringen av ljusdräkter.
          Och det är slingor! Loopar upprepar en åtgärd om och om igen.
      2:
        image: notes/C1_getting_loopy_2.png
        text: När du upprepar något flera gånger, som när jag håller en rockring i
          spinn, utför jag en slinga med den handlingen. Detta är en loop. Detta är
          en loop. Och detta är en loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Idag ska vi ha ett dansparty. Vi ska agera ut loopar med en ny dans.
          Upprepningen. Vi kommer att lära sig om loopar genom en dans. Du kommer
          att lära dig ett par enkla steg och upprepa dem om och om igen för att slutföra
          dansen.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Här är de steg du behöver lära dig. Klappa händerna. Upp med händerna
          bakom huvudet. Upp med händerna på midjan. Lyft vänster hand upp. Lyft din
          högra hand upp. Ganska enkelt, eller hur? Du kommer att upptäcka att du
          kan förkorta anvisningarna genom att sätta några danssteg i loopar.
      5:
        image: notes/C1_getting_loopy_5.png
        text: 'Vi använder faktiskt loopar i vår dans. Dansarna bär datorer, alla
          i samma nätverk. Jag kan loopa ljusen genom samma dansare om och om igen.
          I slingan kan jag ha en upprepning där jag säger: loopa genom dessa sex
          dansare om och om igen och sedan inom loopen öka hastigheten på ljuset.
          Och det skapas med loopar. Loopar är viktiga i datavetenskap eftersom de
          gör vårt arbete snabbare och lättare.'
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Denna lektion kallas Happy Maps. Idag ska vi hjälpa våra lurviga lilla
          vän Flurb komma till sin frukt.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Gör så att din Flurb går till din frukt. För att göra detta måste du
          räkna ut vilken väg Flurb behöver gå och dirigera henne med pilar. I vilken
          riktning behöver Flurb gå för att komma till äpplet? Linje för att få det
          gå upp.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: För att få den dit gör du riktningen till en cirkel som den måste gå.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Skapa din algoritm genom att limma pilar bredvid kartan som du försöker
          lösa. Den andra är samma men går nedåt.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Det är som programmering med papper. Och det är allt!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Felsökning är att hitta och åtgärda problem. Det finns många sätt att
          felsöka problem. Ett av de enklaste är att gå steg för steg tills du hittar
          där något går fel. Jag försöker här göra en bakåtvolt på balken men jag
          faller av hela tiden.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Jag gick igenom varje del steg och insåg var mitt misstag var. Jag satte
          inte mina händer korrekt på balken. Så jag provade en bakåt volt på balken
          med min nya handposition och jag klarade den. Jag var verkligen glad att
          jag felsökte min bakåtvolt.
      3:
        image: notes/C1_maze_debugging_3.png
        text: För att läsa oss om felsökning börjar vi med en uppsättning block på
          ytan. Du kommer att märka att dessa block inte kommer att få dig till målet.
          Vi måste felsöka och fixa det. Vad gick fel? Du kommer att märka att du
          behöver gå väst ett block ytterligare.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Låt oss fixa detta genom att lägga till ett annat 'väster' block och
          trycka på kör för att se om det blev rätt. Yay, du klarade det!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: I detta pussel måste du få fågeln till grisen. Titta på pusslet och
          se vilka riktningar fågeln behöver välja.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Du måste dra blocken från verktygslådan till arbetsytan. Se till att
          det är under "när kör" blocket och när du tror att du har den rätta lösningen,
          då du kan klicka på "Kör" och titta på när fågeln går till grisen.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Något som datorer är riktigt bra på är att upprepa kommandon. Som person
          blir du verkligen uttråkad om du gör samma sak massor och massor av gånger
          i rad. Men en dator kan göra samma sak miljoner eller miljarder gånger och
          inte bli uttråkad och utföra den väl.
      2:
        image: notes/C1_maze_loops_2.png
        text: Till exempel, om jag ville önska alla på Facebook en fin födelsedag
          genom att skicka dem ett mail, skulle det ta mig mer än ett århundrade att
          faktiskt skriva ut alla dessa e-postmeddelanden till alla. Men med bara
          några rader kod, kan jag skicka ett mail till alla på Facebook, ett mail
          som önskar dem en glad födelsedag.
      3:
        image: notes/C1_maze_loops_3.png
        text: För att få fågeln till grisen i denna nivå... snarare än att dra tre
          norr- block till arbetsytan, använder du "Upprepa" blocket. Dra "Upprepa"
          blocket till arbetsytan och ange nummer 3. Sedan dra blocket "flytta norrut"
          in i "Upprepa" blocket och tryck på "Kör" för att se om du fick det rätt.
          Grattis, du klarade det!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Denna lektion kallas flytta det, flytta den. Tillsammans kommer vi att
          skriva ett program för att få våra vänner från starten med kompassrosen
          till målet med smiley ansiktet.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Men smileyn är upp och ner och endast en person vet hur man kommer dit.
          Låt oss starta programmet.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Ett program är en algoritm som har kodats in i något som kan köras av
          en maskin. De flesta av oss tänker på ett program som något som vi skriver
          för en dator. Program är riktigt bra för det men de är också bra på andra
          ställen. Du kan göra dina egna spel eller programmera en robot att göra
          saker för dig.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Mitt namn är Jeremia. Hej! Jag är sju år gammal. Jag älskar att spela
          på min mammas dator men jag får alltid tillstånd först. "Mamma, kan jag
          få vara på datorn? Javisst, vännen!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Jag älskar min mammas dator eftersom jag kan gå ut på Internet. Internet
          är ungefär som ditt grannskap. Du kan besöka coola ställen, du kan prata
          med familj och vänner och du kan lära dig massor av nya saker.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Igår besökte jag en djurpark som är nära mitt hus. Jag såg ett zebraföl.
          Jag tog en bild och ändrade färgen på hennes ränder, och sedan lade jag
          till en hatt och lade till bilden till min samling av galna djur. Toppen!
          Senare gick jag till ett ställe långt långt bort. Jag besökte Kenya. Det
          är ett land i Afrika. Massor av zebror lever där.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Ibland på Internet pratar jag med folk som jag, som min mormor som bor
          i en annan stat. Hej mormor! Hon bakar kakor som hon ska skicka mig på min
          födelsedag. "Mums, jag önskar att Internet hade luktorama!" Jag kan prata
          med olika människor på Internet, som min kusin men jag pratar bara med människor
          jag känner.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Vad jag gillar mest på internet är att jag får spela roliga spel. Poäng!
          Jag gillar även att rita och skapa nya saker och dela det med mina vänner.
          Häftigt! Ibland besöker jag webbplatser där jag lär mig nya saker men jag
          håller mig alltid till webbplatser som är rätt för mig. Wow, dinosaurier!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internet är en superkul ställe. Men precis som när du korsar en gata,
          måste du också vara försiktig när du går online. Här är tre regler att komma
          ihåg. Regel nummer 1: fråga alltid dina föräldrar först. Regel nummer 2:
          prata endast med folk du känner. Regel nummer 3: håll dig till platser som
          är precis rätt för dig.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, det var kul! Middagstid. Jag loggar ut nu. Jag kan inte vänta med
          att logga in igen för att se vart jag kan gå.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Idag ska vi lära oss om par-programmering. I par-programmering arbetar
          du som ett team. Varför ska två personer använda en dator? Eftersom två
          huvuden är bättre än ett. I par-programmering kommer du och din partner
          att sitta tillsammans vid en dator och ni kommer både att arbeta i samma
          projekt.
      2:
        image: notes/C1_pair_programming_2.png
        text: I par programmering, är en person föraren och den andra personen är
          navigatör, precis som att köra en bil. Föraren sitter vid datorn och är
          den som med hjälp av tangentbord och mus eller pekskärm kontrollerar de
          viktigaste åtgärderna av datorn. Den andra personen är navigatör. Navigatören
          hjälper föraren genom svara på förarens frågor och peka ut potentiella problem
          eller misstag.
      3:
        image: notes/C1_pair_programming_3.png
        text: Kommunikation är nyckeln till framgångsrik par-programmering. Inga förolämpningar,
          var respektfull, inte vara en diktatorisk navigatör eftersom ingen gillar
          en baksäteschaufför. Du och din partner bör alltid prata. Föraren kan förklara
          vad hon eller han gör. Och navigatören kan föreslå vad man ska göra härnäst.
      4:
        image: notes/C1_pair_programming_4.png
        text: Navigatören bör tänka på den stora bilden och föraren fokuserar på detaljer.
          Båda rollerna är viktiga. Par-programmering handlar om att arbeta tillsammans
          som ett team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Denna lektion kallas plantera ett frö och det kommer att hjälpa oss
          att förstå algoritmer. Algoritmer är specifika instruktioner som förklarar
          ordningen för att göra något. Även vardagliga saker som att äta frukost
          eller borsta tänderna är algoritmer som kräver små steg för att få jobbet
          gjort.
      2:
        image: notes/C1_planting_seed_2.png
        text: Datorer kan vara riktigt smarta, men de kan endast förstå dig om du
          berätta exakt vad du vill steg för steg. Det fina med algoritmer är att
          om du följer instruktionerna i ordning, kan du göra något som du inte visste
          hur man gör innan. Det är som att följa ett recept.
      3:
        image: notes/C1_planting_seed_3.png
        text: Idag ska vi plantera våra egna frön genom att använda en algoritm. Skapa
          din egen algoritm genom att klippa isär bilderna. Markera de bilder som
          visar stegen för att plantera ett frö och ordna dessa bilder i rätt ordning.
      4:
        image: notes/C1_planting_seed_4.png
        text: Nu är det dags för dig att se om din algoritm fungerar. Följ stegen
          i algoritmen mycket noga. Är de i rätt ordning? Lyckades du plantera ett
          frö genom att följa algoritmen? Det är som programmering med bilder!
      5:
        image: notes/C1_planting_seed_5.png
        text: När vi vill göra choklad, finns det många stora steg till denna process
          och alla dessa stora steg har en uppsättning mindre steg och det finns olika
          recept eller algoritmer beroende på hur vi vill ha chokladen efter smak.
          Varje steg är viktigt, även de små, så att resten av dem inte kan fullföljas
          om ett steg fattas. Det är verkligen viktigt att skapa algoritmer som andra
          kan förstå. Det är därför varje steg måste skrivas så att vem som än gör
          det, blir resultatet detsamma.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Dags att vara kreativ och använda din kodningsförmåga till att berätta
          en historia. Din berättelse kommer att ha skådespelare och du kommer att
          kunna göra så att dessa aktörer talar och interagerar med varandra. Börja
          tänka på vilken typ av berättelse du vill berätta.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Katten har alltid varit rädd för hunden och vad händer om katten klurar
          ut att hunden försöker vara trevlig? "När kör" blocket startar allt. "Flytta"
          blocket kommer att flytta din karaktär och "säger" blocket kommer att göra
          så att din karaktär säger vad du skriver.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Detta är "när aktörer kolliderar" blocket som du kan länka till andra
          block.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Jag gjorde så att hunden kommer och säger "Hej" men då blev katten rädd
          och sprang iväg. "Ahh" om det fanns mer tid, skulle ha blivit ett lyckligt
          slut. Slut!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Detta är 'spelling bee' nivån. Använd pusselbitar för att flytta biet.
          När det flyttar sig, samlar det in bokstäver för att stava ord.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Se om du kan stava ordet de ger dig i rutan nedanför scenen. Men var
          försiktig! Flytta åt fel håll kommer att lägga till bokstäver du inte vill.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Något som datorer är riktigt bra på är att upprepa kommandon. Som person
          blir du verkligen uttråkad om du gör samma sak massor och massor av gånger
          i rad. Men en dator kan göra samma sak miljoner eller miljarder gånger och
          inte bli uttråkad och utföra den väl.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Till exempel, om jag ville önska alla på Facebook en fin födelsedag
          genom att skicka dem ett mail, skulle det ta mig mer än ett århundrade att
          faktiskt skriva ut alla dessa e-postmeddelanden till alla. Men med bara
          några rader kod, kan jag skicka ett mail till alla på Facebook, ett mail
          som önskar dem en glad födelsedag.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: I det här exemplet ska ditt mål vara att flytta fågeln för att få grisen.
          Vi i kommer att kunna använda upprepa blocket för att kunna göra detta mycket
          enkelt. Du kan antingen göra detta genom att ge datorn en kommandot Flytta
          framåt fem gånger för att föra fram fågeln ett steg varje gång till grisen
          eller bara tala om för datorn att gå framåt en gång och sedan att upprepa
          det fem gånger och den kommer att göra samma sak.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: För att göra detta drar du ditt flyttaframåt kommando och lägger inuti
          upprepa blocket. Du kan klicka på det och tala om hur många gånger det ska
          upprepa kommandot.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: En annan sak är du kan sätta så många kommandon som du vill ha inuti
          upprepa blocket. Så i det här exemplet säger du åt den att gå framåt och
          sväng vänster, vilket det kommer att göra fem gånger. Ha det så kul!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Du skulle inte ens kvalificera för racet om du inte har människor som
          är kunniga i datavetenskap på grund av hur mycket data bilarna samlar och
          behovet av att kunna ha folk som kan skriva program för att räkna ut hur
          du fortsätter att räkna ut hur man bygger prestanda.
      2:
        image: notes/C2_artist_intro_2.png
        text: I dessa pussel, kommer du vara en konstnär som använder en penna för
          att rita olika figurer. Vart din artist går, kommer den att det dra en linje
          bakom dig.
      3:
        image: notes/C2_artist_intro_3.png
        text: Om du vill flytta runt scenen, ska du använda flytta framåt blocket.
          Här säger flytta framåt blocket 'flytta framåt 100 pixlar'. När vi trycker
          på kör, vad händer? Konstnären rör sig framåt en viss sträcka och den 100
          bildpunkter. Pixlar är i grunden mycket små rutor på skärmen.
      4:
        image: notes/C2_artist_intro_4.png
        text: Det andra blocket som vi har i detta pussel säger' sväng höger 90 grader'.
          Och när vi drar ut det gör det så att vår konstnär vänder vissa grader.
          Så du kan leka med hur långt du vill att konstnären ska vända. Detta är
          en 90 graders sväng.
      5:
        image: notes/C2_artist_intro_5.png
        text: Och detta är en 120 graders sväng. Och kom ihåg, du kan ändra dessa
          värden genom att klicka på pilarna bredvid siffrorna för pixlar och grader.
          Njut av att rita med din artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Detta är villkorsblock. Det står OM det finns nektar eller honung som
          är mindre än, lika med eller större än ett tal, GÖR något.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Detta är användbart när vi inte vet hur mycket nektar eller honung där
          finns att få, som vi ser här med detta frågetecken.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: I det här exemplet ska vi säga OM den lila blomman har nektar större
          än 0, få nektar. Det säger till vårt bi att fortsätta så länge det finns
          nektar där. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Detta är den 'binära- armband' läxan. Vi ska koda våra initialer på
          ett armband vi kan bära och visar alla våra vänner!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: 'Binärt är ett sätt att representera information med hjälp av endast
          två alternativ. Ibland tänker människor på detta som endast 1: or och 0:
          or. Men du kan representera binär med kombinationer av på eller utanför,
          upp eller ner, in eller ut eller vilken uppsättning av motsatser som helst.'
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hej, jag är Orion och jag programmera robotar här på Play-im. Alla datorer
          och robothjärnor är på den mest grundläggande nivån små elektroniska grindar.
          När porten är öppen, kan elektricitet flöda genom och när den är stängd
          kan den inte.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Ett exempel på binär på robot är robotens ögon. Robotens ögon är lysdioder
          och de är lampor som är antingen på eller av. Det är ett binärt system,
          ena eller andra. Vi kan använda lamporna för att representera binära tal.
          Om vi har en uppsättning av robotar, kan vi säga att den första roboten
          är 1a plats och andra roboten är 2a, tredje roboten är 4e plats och så vidare.
          Det är hur du representerar ett binärt tal. Robotar kommer att göra det
          med sina binära ögon och räkna ut det åt dig.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Denna lektion kallas villkorssatser med kort. Varje dag fattar du beslut
          baserat på vad du ser och hör.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Jag vill gå till parken men först måste jag bestämma om jag ska ta ett
          paraply eller inte. Så jag ser ut genom fönstret. Om det är molnigt, ska
          jag ta mitt paraply. Annars tar jag solglasögon. Jag tror jag tar paraplyet.
          Vad jag ser och hör avgör vad jag tar med till parken.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Villkorssatser används i spel också. Idag ska vi öva med villkorssatser
          med ett kortspel. I detta spel avgör det kortet som jag drar vad mina vänner
          ska göra. Om jag drar en sjua, klappar alla. Annars, säger alla "aww." Låt
          oss prova det! "aw" skål""
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Jag slår vad du kan komma på spel som är ännu roligare med villkorssatser.
          Ge det ett försök! Villkorssatser är vad som göratt datorer verkar smarta.
          Ett datorprogram som innehåller villkorssatser kan reagera på användaren
          och ändra sitt tillvägagångssätt.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Tänk på ditt favorit videospel. Fårdu mer poäng för vissa åtgärder än
          för andra? Detta beror på att datorn använder villkorssatser. Det är på
          det sättet som en dator tar ett beslut. Vad sägs om att du tjänar tio poäng
          om du träffar målet. Annars förlorar du tre. När du vet hur villkorssatser
          fungerar, kan du skapa alla typer av spännande spel.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Här har vi redan några block på vår arbetsyta. Men det är något fel.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Låt oss felsöka denna kod genom att sakta ner hastigheten och titta
          på den när den går igenom varje block steg för steg.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Åh, där är problemet! Kattens morrhår är 75 bildpunkter långa, inte
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Har du någonsin hört talas om felsökning av ett program? Detta är hur
          du tar reda på vad som inte fungerar. När du felsöker kod, kan du identifiera
          och ta bort fel.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Här är vi fått några block på vår arbetsplats redan. Vi kommer att använda
          knappen steg för att gå igenom blocken, steg för steg, för att se om detta
          är den rätta lösningen och var vi kan behöva fixa det.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Ser ut som det är vårt problem! Vi behöver ett till flytta framåtblock.
          Knappen steg hjälper oss att felsöka vårt problem genom att identifiera
          var felet är så att vi kan fixa det.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: På ditt huvud håller du din hatt och din smarthet kommer att berätta
          var du är och att tänka på djurparken samt att nicka Hej till dig och dig!
          Använd huvudet när du online för att hålla det som är ditt inuti ditt sinne
          och veta hur man ska vara säker, hur du ger ditt liv privat utrymme! Från
          huvudet ner till tårna, pausa, tänk på det. Från fötterna upp till näsan,
          stanna upp och tänk online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Använd ditt hjärta för att växa och växa, och att ge dig själv en hälsosam
          lyster och att göra en valentine, berätta för någon att du blir min! Använd
          ditt hjärta när du är online, känn vad som är rätt och alltid snällt och
          visa respekt för dina vänner, för att vara rättvis och trevlig på Internet.
          Från huvudet ner till tårna, pausa, tänk på det. Från fötterna upp till
          näsan, stanna upp och tänk online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Använd dina armar för att krama ditt sällskapsdjur, för att hålla dina
          kläder torra, och att bära dina favoritärmar och att hjälpa dig att flyga
          och tro. Använd dina armar när du är online, att ta paus och balansera tid
          och lämna din tech bakom och hitta dig själv ett träd att klättra i. Från
          huvudet ner till tårna, pausa, tänk på det. Från fötterna upp till näsan,
          stanna upp och tänk online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Använd din mage att lagra din mat och att lyssna till dess morrande
          humör, att göra en magflopp, och att känna bubblorna i läsk. Använd din
          mage när du är online, att veta hur man hittar vissa tecken, och låta det
          styra vägen och berätta när det inte är ok. Från huvudet ner till tårna,
          pausa, tänk på det. Från fötterna upp till näsan, stanna upp och tänk online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Så tänk med huvudet, och känn med ditt hjärta, balansera med armarna,
          lyssna på magkänslan, online. Använd dina ben att springa och sparka, och
          att hoppa och studsa på en Hoppstylta, och dansa runt kvarteret och hoppa
          i dina luktande strumpor. Använd benen när du är online, att stå upp mot
          översittare som passerar linjen, och kom ihåg att stå hög, vara trevlig
          mot varelser stora och små.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Från huvudet ner till tårna, pausa, tänk på det. Från fötterna upp till
          näsan, stanna upp och tänk online! Så tänk med huvudet, och känn med ditt
          hjärta, balansera med armarna, lyssna på magkänslan, stå upp med benen.
          Från huvudet ner till tårna, pausa, tänk på det. Från fötterna upp till
          näsan, stanna upp och tänk online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Varje gång du går online, lämnar du ett fotavtryck som kan sökas, kopieras,
          delas, sändas och är permanent. Vilken typ av digitala fotavtryck lämnar
          du? Vilken typ av digitala fotavtryck vill du lämna?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Denna lektion kallas "Rutat papper programmering" och det handlar om
          algoritmer. Idag kommer vi att lära dig hur du skriver program som visar
          andra hur man återskapar enkla svartvita bilder, genom att bara använda
          handritade pilar.
      2:
        image: notes/C2_graph_paper_2.png
        text: En algoritm är en lista med instruktioner för att slutföra en aktivitet.
          Vi ska följa denna uppsättning instruktioner för att göra skålen. Algoritmer
          är verkligen hjälpsamma när du behöver få någon annan att förstå hur man
          gör något.
      3:
        image: notes/C2_graph_paper_3.png
        text: Om du skriver en algoritm för en dator, måste du bryta den ner till
          små små steg. Så avsluta denna rad och gå till nästa och nästa och du kommer
          att bli klar.
      4:
        image: notes/C2_graph_paper_4.png
        text: Jag använder algoritmer i mitt arbete. Om jag skriver ner alla steg
          kan jag återskapa samma bit igen, eller jag kan lära någon annan att göra
          det. Sätta glaset i ugnen, smälta samman, följ resten av instruktionerna
          för att göra skålen. Algoritmer ger dig en färdplan för att få något gjort.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Här ska vi använda upprepa blocket för att hjälpa oss att spara steg
          när vi programmerar vår artist. Vi har redan några block på vår arbetsyta
          men de är bara där för att få oss igång.
      2:
        image: notes/C2_artist_loops_2.png
        text: För att loopa dessa block fyra gånger för att rita hela rutan, drar
          vi bara ut upprepa blocket och lägger flytta framåtblocket och vänd högerblocket
          inuti upprepa blocket. När vi trycker på kör, kommer konstnären att upprepa
          dessa steg fyra gånger för att slutföra fyrkanten.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: En loop är att göra om en sak flera gånger. Så när jag inspekterar en
          bikupa, så tittar jag på en ram och stoppar tillbaka den, det upprepar jag
          flera gånger. Det kallas på programmeringsspråk att loopa.
      2:
        image: notes/C2_bee_loops_2.png
        text: Detta är upprepa blocket. Vad du än sätter inne upprepa blocket kommer
          det att upprepa dessa åtgärder antalet gånger som du sagt. På den här nivån
          t ex, snarare än dra gå framåt och få nektar tre gånger, ska vi bara dra
          dem en gång var och upprepa det tre gånger. Det gjorde det lätt!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Vanligtvis är programmering i text men vi använder Blockly som använder
          visuella block som du dra och släppa för att skriva program. Under huven
          skapar du fortfarande kod. Till att börja med ska vi bygga koden för ett
          program som kommer att hjälpa denna arga fågel flytta genom en labyrint
          för att ta sig till de elaka grisar som stal hans ägg.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: Om jag drar flytta blocket till vår arbetsyta och trycker på "Kör",
          vad händer? Fågeln flyttas framåt en ruta på nätet. Och vad händer om jag
          vill att fågeln ska göra något när den rör sig framåt en ruta? Jag kan lägga
          ett annat block till vårt program.
      4:
        image: notes/C2_maze_intro_4.png
        text: Jag kommer att välja "sväng höger" blocket och jag ska dra det under
          mitt Flytta blocke tills den gula pilen visas. Sedan ska jag släppa det
          och de två blocken kommer att knäppa ihop. När jag trycker på "Kör" igen,
          utför fågeln de kommandon som är staplade från toppen till botten på vår
          arbetsyta.
      5:
        image: notes/C2_maze_intro_5.png
        text: Om du någonsin vill ta bort ett block, bara ta bort det från stacken
          och dra det till papperskorgen kan. När du har tryckt på kör, kan du alltid
          trycka på omstarts-knappen för att få fågeln tillbaka till starten. Nu låt
          oss få dessa grisar!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Denna lektion kallas verkliga livet algoritmer. Algoritmerna beskriver
          saker som människor gör varje dag. Kakrecept och riktningar för att bygga
          en fågelholk är båda vardagliga algoritmer.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Idag ska vi göra, skapa och testa en algoritm för ett pappersflygplan.
          Men först måste vi bryta ner detta stora projekt i små steg som är lätta
          att följa. Vi måste bestämma vilka åtgärder vi ska utföra för att för att
          göra ett pappersflygplan, och i vilken ordning.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Du ska skapa din algoritm genom att första skära isär bilderna. Därefter
          ska du välja de 6 bilder som visar de steg som behövs för att göra ett pappersflygplan
          och ordna dessa bilder i rätt ordning. Efter att du har allt i ordning,
          ska du byta algoritmer med ett annan elev-lag för att testa algoritmen och
          se om algoritmen fungerar. En väl utformad algoritm är superviktig för att
          göra det bästa pappersflygplanet.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: När vi vill göra choklad, finns det många stora steg i denna process
          och alla dessa stora steg har en uppsättning mindre steg och det finns olika
          recept eller algoritmer beroende på hur vi vill ha chokladen efter smak.
          Varje steg är viktigt, även de små, så att resten av dem inte kan fullföljas
          om ett steg fattas. Det är verkligen viktigt att skapa algoritmer som andra
          kan förstå. Det är därför varje steg måste skrivas så att vem som än gör
          det, blir resultatet detsamma.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Du har hittills gjort en animation eller en berättelse som gör exakt
          samma sak varje gång du kör den. Nu kan du göra ett interaktivt spel som
          du faktiskt kan spela.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Där finns "när pilen" block och "flytta figur" block. Du kan sätta dessa
          block tillsammans för att flytta figurerna runt med piltangenterna.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Idag ska vi göra stafett-programmering. Det handlar om programmering
          under stress och felsökning av de misstag som ibland händer när du arbetar
          verkligt snabbt eller i lag. Vi kommer använda rutpappers- programmering
          för att simulera kodning och använda stafettlopp för att simulera en deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: I stafett programmering, tävlar lagen om att slutföra en rutat-papper
          -program. Du måste kolla dina lagkamraters arbete, eller felsöka det, fixa
          det om det finns ett fel, lägga till din pil, och springa tillbaka och tagga
          din lagkamrat.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmerare använder felsökning mycket för att hitta och åtgärda problem
          i sina algoritmer eller kod. Det finns många sätt att felsöka problem. En
          av de enklaste är att gå steg för steg tills du hittar där något går fel,
          sedan fixa det.
      4:
        image: notes/C2_relay_programming_4.png
        text: Här, jag försöker göra en bakåtvolt, men jag bara faller av. Jag går
          igenom varje del, steg för steg, och inser var mitt misstag är. Min tränare
          visade mig att jag inte satte mina händer på balken korrekt. Så jag försökte
          en annan bakåtvolt på balken med min nya hand sättning, och jag klarade
          det! Jag var verkligen glad att jag felsökte min bakåtvolt. Vi kom på det!
          Felsökning är att hitta och åtgärda problem. Nice, bra jobb!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Något som datorer är riktigt bra på är att upprepa kommandon. Som person
          blir du verkligen uttråkad om du gör samma sak massor och massor av gånger
          i rad. Men en dator kan göra samma sak miljoner eller miljarder gånger och
          inte bli uttråkad och utföra den väl.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Så till exempel om jag ville önska alla på Facebook en fin födelsedag
          genom att skicka dem ett mail, skulle det ta mig mer än ett sekel att faktiskt
          skriva alla dessa e-postmeddelanden till alla. Men med bara några rader
          kod, kan jag skicka ett mail till alla på Facebook, ett mail som önskar
          dem en glad födelsedag. Så det är vad loopar är, och varför de är värdefulla,
          och något som datorer kan göra mycket bra.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: I det här exemplet är ditt mål att flytta fågeln för att få grisen.  Vi
          ska nu kunna använda blocket "Upprepa" för att kunna göra detta mycket enkelt.
          Du kan antingen göra detta genom att ge datorn ett "gå vidare" kommando
          fem gånger för att fågeln ska gå ett steg i taget fram  till grisen.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Eller så du kan bara tala om för datorn att "gå vidare" en gång och
          sedan tala om för den att "Upprepa" det 5 gånger och den kommer att göra
          samma sak. Så du drar ditt "gå vidare" kommando för att göra detta och lägger
          det inuti blocket "upprepa". Och du kan klicka på det och tala om hur många
          gånger du vill upprepa blocket för att tala om för det hur många steg du
          vill gå fram.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: En till sak är du kan sätta så många kommandon du vill ha inne i "Upprepa"
          blocket. Så i det här exemplet säger du åt den att gå framåt och svänga
          vänster, som det att göra fem gånger. Bra jobbat och ha kul!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: En av de stora sakerna i datorprogrammering är när du har lärt en dator
          hur den ska utföra en åtgärd, kan du anropa funktionen igen. Du ge den ett
          namn och sedan kan du anropa den. Det är verkligen som att utvidga språket.
      2:
        image: notes/C3_artist_functions_2.png
        text: I programmet vi byggde lärde vi oss hur man ritar en fyrkant genom att
          flytta och vrida fyra gånger. Vi kan ta denna funktion och ge den ett namn,
          rita en kvadrat, så att när vi vill göra det, säger vi bara rita en kvadrat
          och programmet kommer att gå tillbaka och anropa funktionen, koden. Den
          får det gjort åt oss. Vi har lagt detta begrepp till vårt programmeringsspråk.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Du skulle inte ens kvalificera för racet om du inte har människor som
          är kunniga i datavetenskap på grund av hur mycket data bilarna samlar och
          behovet av att kunna ha folk som kan skriva program för att räkna ut hur
          du fortsätter att räkna ut hur man bygger prestanda.
      2:
        image: notes/C3_artist_intro_2.png
        text: I dessa pussel, kommer du vara en konstnär som använder en penna för
          att rita olika figurer. Vart din artist går, kommer den att det dra en linje
          bakom dig.
      3:
        image: notes/C3_artist_intro_3.png
        text: Om du vill flytta runt scenen, ska du använda flytta framåt blocket.
          Här säger flytta framåt blocket 'flytta framåt 100 pixlar'. När vi trycker
          på kör, vad händer? Konstnären rör sig framåt en viss sträcka och den 100
          bildpunkter. Pixlar är i grunden mycket små rutor på skärmen.
      4:
        image: notes/C3_artist_intro_4.png
        text: Det andra blocket som vi har i detta pussel säger' sväng höger 90 grader'.
          Och när vi drar ut det gör det så att vår konstnär vänder vissa grader.
          Så du kan leka med hur långt du vill att konstnären ska vända. Detta är
          en 90 graders sväng.
      5:
        image: notes/C3_artist_intro_5.png
        text: Och detta är en 120 graders sväng. Och kom ihåg, du kan ändra dessa
          värden genom att klicka på pilarna bredvid siffrorna för pixlar och grader.
          Njut av att rita med din artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: När du sätter en slinga i en annan slinga, kallar vi det en kapslad
          loop. Till exempel här har vi fått koden för att rita en triangel med sid
          längd av 100 pixlar genom att använda upprepa-blocket, satt till 3, en gång
          för varje sida i en triangel.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Men vi vill ritasex trianglar. För att göra det, ska vi ta loopen och
          placera den inuti ett annat upprepa- gånger block. Grymt!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Detta är villkorsblock. Det står OM det finns nektar eller honung som
          är mindre än, lika med eller större än ett tal, GÖR något.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Detta är användbart när vi inte vet hur mycket nektar eller honung där
          finns att få, som vi ser här med detta frågetecken.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: I det här exemplet ska vi säga OM den lila blomman har nektar större
          än 0, få nektar. Det säger till vårt bi att fortsätta så länge det finns
          nektar där. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Har du någonsin hört talas om felsökning av ett program? Detta är hur
          du tar reda på vad som inte fungerar. När du felsöker kod, kan du identifiera
          och ta bort fel.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Här är vi fått några block på vår arbetsplats redan. Vi kommer att använda
          knappen steg för att gå igenom blocken, steg för steg, för att se om detta
          är den rätta lösningen och var vi kan behöva fixa det.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Ser ut som det är vårt problem! Vi behöver ett till flytta framåtblock.
          Knappen steg hjälper oss att felsöka vårt problem genom att identifiera
          var felet är så att vi kan fixa det.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: En av de viktigaste begreppen inom datavetenskap är hur man definierar
          nya kommandon, hur man lägger till egna ord till ett datorspråk. De flesta
          datorspråk har endast omkring hundra ord eller kommandon. Konsten och magin
          är att definiera dina egna nya ord ur dessa byggstenar.
      2:
        image: notes/C3_bee_functions_2.png
        text: Vi gör detta hela tiden i sport. T ex basket, du börjar med att lära
          dig att dribbla, hur man gör ett uppställningsspår, hur man gör rebound.
          När du lärt dig dessa riktigt grundläggande drag, kan du lära dig nya rörelser
          och sätta ihop dessa byggstenar. Du kan sedan därifrån göra mer komplexa
          spel. När du lärt dig att spela det spelet och gett det ett namn, vet alla
          i laget hur man gör.
      3:
        image: notes/C3_bee_functions_3.png
        text: På samma sätt när du väl har lärt en dator hur en åtgärd ska utföras
          med dessa sekvenser av kommandon, kan du hitta på ditt eget namn för åtgärden
          så det är lätt att upprepa det senare. När du definierar ditt eget kommando
          och ger det ett namn, kallas det en funktion. Nu ska vi använda funktioner
          för att hjälpa biet.
      4:
        image: notes/C3_bee_functions_4.png
        text: I det här exemplet kallas vår funktionen 'få 2 nektar', detta gröna
          block här. Vi vet vad' få 2 nektar' gör genom att titta på den här grå boxen
          som är funktionsdefinitionen. Om vi tittar in där, ska 'få 2 nektar' få
          nektar och sedan få nektar igen. Titta alltid efter vad som finns inuti
          den grå rutan så att du vet vad dessa gröna funktionsblock kan göra.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Vi ska nu använda kapslade slingor med biet. Vi har fått lite start
          kod som talar om för biet att gå vidare och få nektar tre gånger och sedan
          svänga höger. Låt oss ta det hela biten kod och kapsla in det inuti ett
          annat upprepa block och ange upprepa tre gånger. Gjort!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Du kommer att skapa ditt alldeles egna studsa spel som du kommer att
          kunna dela med dina vänner! Så coolt!
      2:
        image: notes/C3_bounce_2.png
        text: För att komma igång, måste vi länka paddel kontrollerna till piltangenterna
          på vårt tangentbord.
      3:
        image: notes/C3_bounce_3.png
        text: Vi kan göra detta genom att länka 'när-vänsterpil' blocket till 'flytta
          vänster' blocket och' när- högerpil' blocket till 'flytta höger' blocket.
          Ge det en chans och du kommer att programmera egna studsa spel på nolltid!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Denna lektion är datorbaserat tänkande. Ibland kan det vara tufft att
          lära sig ett nytt spel, eller hur? Först kan det verka förvirrande och ibland
          finns det ingen där för att lära dig reglerna, så du måste lista ut på egen
          hand.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Den goda nyheten är att du kan bli bättre på räkna ut saker på egen
          hand när du vet några tänkarknep. Dessa trick är unika sätt för att titta
          på och lösa problem. I den här lektionen ska du lära dig om fyra knep och
          öva dem med dina vänner för att ta reda på reglerna till ett spel.
      3:
        image: notes/C3_computational_thinking_3.png
        text: När du bryter ner ett stort problem i mindre bitar, använder du din
          hjärna att bryta ner det stora problemet. När vi har fördelat det stora
          problemet i flera mindre problem, kan vi gå till vårt nästa trick som kallas
          mönstermatchning.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Det är då vi letar efter likheter mellan saker. När jag hittar saker
          som är lika, kan jag räkna ut vilka saker som är olika. När jag tar bort
          dessa skillnader kallas det abstraktion.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Efter att jag har listat ut åtgärderna för att lösa ett problem, kan
          jag sätta dessa steg i en viss ordning som kallas en algoritm så att någon
          kan använda mina anvisningar för att lösa det problemet. Vi kommer att använda
          dessa fyra steg för att lista ut hur man spelar spelet med inga regler.
          I slutet av spelet, kommer du att kunna spela något som ser ut så här!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Denna lektion kallas crowdsourcing. I den här lektionen ska vi använda
          en kortlek för att lära oss om hur mycket lättare vissa saker kan vara att
          göra i grupper istället för att försöka göra dem ensam. Så ta några vänner
          och gör något fantastiskt. Crowdsourcing är att få hjälp från en stor grupp
          människor för att kunna avsluta något snabbare.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: I datavetenskap använder vi crowdsourcing hela tiden. Tusentals amatörer
          och proffs länkar ihop sina datorer för att söka igenom miljarder och åter
          miljarder av bitar av information. Leta efter saker som nästa Marsenne primtal,
          eller röster från rymden.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: När du ser en film, är varje sekund av filmen 24 enskilda bilder, vi
          kallar dem frames. Så var och en av dessa bilder måste skapas och återges
          och sättas tillsammans. Mitt team och jag, vi är alla programutvecklare.
          Vi arbetar tillsammans för att skapa en bit av programvara som faktiskt
          skapar en bild, som skapar den slutliga bilden som du ser på skärmen. Det
          är ett verktyg som konstnärer och andra utvecklare kan använda som en del
          av deras lagarbete och sin process för att kunna skapa bilder som de vill
          ha på skärmen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Till exempel i Hitta Nemo, när Crush och Squirt och alla deras vänner
          flyger genom östra australiska strömmen. Du ser bilder av vatten som rinner
          förbi, du ser färgerna på baksidan av sköldpaddan, du ser sidorna av fisken.
          Alla dessa saker genereras genom matte och dator program som vi skriver,
          och som vi ger till konstnären som använder det för att skapa den slutliga
          bilden och justera den och göra den vacker och ser roligt.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Du har hittills gjort en animation eller en berättelse som gör exakt
          samma sak varje gång du kör den. Nu kan du göra ett interaktivt spel som
          du faktiskt kan spela.
      2:
        image: notes/playlab_2.png
        text: Där finns "när pilen" block och "flytta figur" block. Du kan sätta dessa
          block tillsammans för att flytta figurerna runt med piltangenterna.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Detta är en låtskrivarlektion. Musik är väldigt lik ett datorprogram.
          De skrivna anteckningarna och orden berättar för sångaren exakt vad den
          ska göra. Vissa delar av musiken används om och om igen.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Vi kallar detta refrängen. I ett datorprogram kallas de delar av programmet
          som används om och om igen funktioner. När du läser texter och det säger
          ordet refräng, sjunger du ordet refräng? Nej, du tittar högst upp på sidan
          för att se vilka ord som är refräng.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: I den här lektionen lär du dig en dum liten låt som heter little bunny
          foo foo. Låten har en refräng som du kommer att sjunga flera gånger om och
          om igen. En funktion är en bit kod som du kan kalla på och använda om och
          om igen. Det gör programmering enklare och effektivare så att du inte behöver
          skriva ut stegen i din funktion om och om igen. Du kan bara skriva det en
          gång!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Detta är villkorsblock. Det säger att om du är vid blomman eller honumgskakan,
          gör något. Detta är användbart när vi inte vet hur mycket honung eller nektar
          som finns att få, som vi ser här med detta frågetecken.
      2:
        image: notes/C4_bee_conditional_2.png
        text: 'I det här exemplet ska vi säga: om det är en blomma, få all nektar,
          och sedan använda en annan för att säga: om det är en honungskaka, gör honung.
          Ta-dah!'
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Vi har ett nytt block som kallas den om/annars block. Det är en villkorssats
          precis som om-blocket du har använt i pussel innan. Men nu finns en ny del
          längst ner som säger annat. Om/annars-blocket låter biet välja mellan två
          uppsättningar av åtgärder. Om biet är på en blomma, kommer biet att utföra
          uppsättningen åtgärder du sätter i den första delen där det står gör. Om
          biet inte är i en blomma, kommer biet utföra uppsättningen åtgärder som
          du sätter i facket där det står annars.
      2:
        image: notes/C4_conditionals_2.png
        text: Om-satser är hur datorer kan fatta beslut. Människor ställer villkor
          för datorn som säger att om datorn presenteras med en viss situation gör
          detta. Annars, vilket bara innebär annars gör det. Toppen av vårt om/annars-block
          säger 'om på blomma'. Men toppen av vårt block kunde säga andra saker, som
          om nektar är lika med 2 eller om det finns en väg framåt, kommer vårt block
          att bete sig på samma sätt. Så att om uttalandet överst stämmer kommer det
          att utföra den första uppsättningen åtgärder. Men om uttrycket överst är
          falskt, så utför det den andra gruppen av åtgärder.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: När du använder ett upprepa-block för att loopa din kod, hur vet datorn
          när det har upprepats tillräckligt många gånger? Upprepa blocket gömmer
          faktiskt en mer sofistikerad bit kod som kallas en for-loop som räknas från
          ett startvärde upp till slutvärdet i specifika steg.
      2:
        image: notes/C4_for_loops_2.png
        text: Till exempel räknar en upprepa-tre-block från 1 till 3 med 1 i taget.
          Varje gång det räknar, körs koden inuti loopen. För-loopen vet hur många
          gånger det har körts genom att använda en räknar-variabel som är satt till
          startvärdet i början av loopen och har ökningen tillagd till det för varje
          gång loopen körs. Så snart variabeln är större än slutvärdet, avbryts loop
          körningen.
      3:
        image: notes/C4_for_loops_3.png
        text: Fördelen med att använda en riktig 'för-loop' istället för upprepa-
          blocket är att du faktiskt kan se räkne-variabel och använda den i din loop.
          T ex om jag har en serie av blommor och den första har en nektar, den andra
          har två nektar och den tredje en har tre, kan jag använda 'för- loopen'
          för att berätta för biet att samla "räknar" nektar varje gång, det skulle
          bli en på första blomman, två på andra och tre på tredje.
      4:
        image: notes/C4_for_loops_4.png
        text: Också i en for-loop kan du få räknaren att öka med ett antal annat än
          ett varje gång. Du kan räkna med 2or, 4or eller t o m ett antal som ändras
          varje gång.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: När du använder ett upprepa-block för att loopa din kod, hur vet datorn
          när det har upprepats tillräckligt många gånger? Upprepa blocket gömmer
          faktiskt en mer sofistikerad bit kod som kallas en for-loop som räknas från
          ett startvärde upp till slutvärdet i specifika steg.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Till exempel räknar en upprepa-tre-block från 1 till 3 med 1 i taget.
          Varje gång det räknar, körs koden inuti loopen. För-loopen vet hur många
          gånger det har körts genom att använda en räknar-variabel som är satt till
          startvärdet i början av loopen och har ökningen tillagd till det för varje
          gång loopen körs. Så snart variabeln är större än slutvärdet, avbryts loop
          körningen.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Fördelen med att använda en riktig 'för-loop' istället för upprepa-
          blocket är att du faktiskt kan se räkne-variabel och använda den i din loop.
          T ex om jag har en serie av blommor och den första har en nektar, den andra
          har två nektar och den tredje en har tre, kan jag använda 'för- loopen'
          för att berätta för biet att samla "räknar" nektar varje gång, det skulle
          bli en på första blomman, två på andra och tre på tredje.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Också i en for-loop kan du få räknaren att öka med ett antal annat än
          ett varje gång. Du kan räkna med 2or, 4or eller t o m ett antal som ändras
          varje gång.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: När du använder ett upprepa-block för att loopa din kod, hur vet datorn
          när det har upprepats tillräckligt många gånger? Upprepa blocket gömmer
          faktiskt en mer sofistikerad bit kod som kallas en for-loop som räknas från
          ett startvärde upp till slutvärdet i specifika steg.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Till exempel räknar ett 'upprepa-tre' block från 1 till 3 med 1 i taget.
          Varje gång det räknar, körs koden inuti loopen. För-loopen vet hur många
          gånger det har körts genom att använda en variabel som är satt till startvärdet
          i början av loopen och har ökningen tillagd till det varje gång loopen körs.
          Så snart variabeln är större än slutvärdet, avbryts loop körningen. Fördelen
          med att använda en riktig för-loop istället för upprepa-blocket är att du
          faktiskt kan se räknar- variabeln och använda det i din loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Nu när du har redigerat funktionsblock, är det dags att skapa en nya
          funktionsblock från grunden. Det är verkligen enkelt. Du ser att verktygslådan
          har en kategori som kallas funktioner. Om du klickar på det, ser du en orange
          knapp som heter 'skapa en funktion'. Klickar du på den öppnas den funktion
          editor som du redan har använt för att redigera befintliga funktionsblock.
      2:
        image: notes/C4_function_create_2.png
        text: Precis som innan, började du med att namnge din funktion, och skriva
          ner en beskrivning av vad funktionen är tänkt att göra. Till exempel är
          det tänkt att rita en fyrkant eller rita en triangel och sedan dra block
          från verktygslådan till den vita arbetsytan nedan. Kom ihåg att dra dessa
          block inuti den gröna omslag- block för funktionen.
      3:
        image: notes/C4_function_create_3.png
        text: När du är klar, klicka på Spara och avsluta. Detta tar dig tillbaka
          till det huvudpusslets arbetsyta. Den nya funktionen som du skapat visas
          som ett grönt block i funktionskategorin i din verktygslåda. Dra detta till
          arbetsytan och använd den som alla andra block för att lösa pusslet.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: En av de stora sakerna i datorprogrammering är när du har lärt en dator
          hur den ska utföra en åtgärd, kan du anropa funktionen igen. Du ge den ett
          namn och sedan kan du anropa den. Det är verkligen som att utvidga språket.
      2:
        image: notes/C4_function_edit_2.png
        text: I programmet vi byggde lärde vi oss hur man ritar en fyrkant genom att
          flytta och vrida fyra gånger. Vi kan ta denna funktion och ge den ett namn,
          rita en kvadrat, så att när vi vill göra det, säger vi bara rita en kvadrat
          och programmet kommer att gå tillbaka och anropa funktionen, koden. Den
          får det gjort åt oss. Vi har lagt detta begrepp till vårt programmeringsspråk.
      3:
        image: notes/C4_function_edit_3.png
        text: I detta pussel, har vi redan skapat en 'rita en fyrkant- funktion' åt
          dig. Du ser den i verktygslådan som ett grönt block. Vad du behöver göra
          är att skriva samma kod du skrev innan för att rita en fyrkant och lägga
          den i denna funktion. För att göra det, klicka på alternativet Redigera
          i det gröna 'rita en fyrkant' blocket. Detta öppnar upp funktionens redaktör.
          Funktionseditorn består av tre delar. En plats där du namnger din funktion.
          Detta visas på det gröna blocket före funktionen. Sedan skriver duen kort
          beskrivning av vad din funktion är tänkt för att göra.
      4:
        image: notes/C4_function_edit_4.png
        text: I det här fallet är det tänkt att rita en fyrkant. Det vita utrymmet
          under detta är arbetsytan och fungerar precis som arbetsytan du redan har
          använt. Dra och släpp block från verktygslådan på denna arbetsyta. Kom ihåg
          att sätta blocken som skapar en fyrkant inuti det gröna omslag-block för
          funktionen. När du är klar, klicka på Spara och avsluta. Detta tar dig tillbaka
          till huvudpusslets arbetsyta. Nu kan du använda rita fyrkant funktions-blocket
          precis som alla andra block för att lösa pusslet.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Här är en funktion som ritar en fyrkant med 50 pixlar långa sidor. Det
          är bra men vad händer om jag vill rita en fyrkant med sidorna 50 pixlar
          och en annan fyrkant med sidan 100 pixlar? Vi ska inte behöva göra två separata
          funktioner som gör nästan samma sak. Vi kan i stället använda en funktion
          med en parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Med parametrar kan vi skicka värden till en funktion som kan användas
          som variabler inuti funktionen. Låt oss försöka att lägga till en parameter
          som kallas 'längd' till den här funktionen som vi kan använda för att skapa
          rutor i olika storlekar. I funktions-redigeraren kan du redigera namn och
          beskrivning som förr men nu kan du också lägga till en parameter. Skriv
          namnet på parametern i utrymmet och klicka på Lägg till Parameter. Detta
          skapar ett rött block med namnet på parametern som du just har skapat. Nu
          kan vi ersätta vägen framåt av 100 block med parametern längd så det kommer
          att gå framåt just denna sträcka.
      3:
        image: notes/C4_function_parameters_3.png
        text: Klicka på Spara och stäng och dra ut ditt nya 'skapa ett fyrkant'- block
          från kategorin funktioner i verktygslådan. Du kommer att märka det finns
          en tom plats bredvid längd eftersom funktionen vill veta vad värdet parametern
          längd bör ha. Dra ett antal-block från kategorin matematik och placera det
          i detta utrymme. Se hur du kan använda funktionen igen och igen med olika
          längder för att göra rutor i olika storlekar? Prova själv!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Vanligtvis är programmering i text men vi använder Blockly som använder
          visuella block som du dra och släppa för att skriva program. Under huven
          skapar du fortfarande kod. Till att börja med ska vi bygga koden för ett
          program som kommer att hjälpa denna arga fågel flytta genom en labyrint
          för att ta sig till de elaka grisar som stal hans ägg.
      2:
        image: notes/C4_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C4_intro_3.png
        text: Om jag drar flytta blocket till vår arbetsyta och trycker på "Kör",
          vad händer? Fågeln flyttas framåt en ruta på nätet. Och vad händer om jag
          vill att fågeln ska göra något när den rör sig framåt en ruta? Jag kan lägga
          ett annat block till vårt program.
      4:
        image: notes/C4_intro_4.png
        text: Jag kommer att välja "sväng höger" blocket och jag ska dra det under
          mitt Flytta block tills den gula pilen visas. Sedan ska jag släppa det och
          de två blocken kommer att knäppa ihop. När jag trycker på "Kör" igen, utför
          fågeln de kommandon som är staplade från toppen till botten på vår arbetsyta.
      5:
        image: notes/C4_intro_5.png
        text: Om du någonsin vill ta bort ett block, bara ta bort det från stacken
          och dra det till papperskorgen kan. När du har tryckt på kör, kan du alltid
          trycka på omstarts-knappen för att få fågeln tillbaka till starten. Nu låt
          oss få dessa grisar!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Om jag vill rita en rektangel 50 pixlar hög och som är dubbelt så bred
          som den är lång, hur jag programmerar datorn för att göra det? Tja, jag
          skulle kunna be artisten att gå upp 50, svänga höger, och sedan gå över
          100 och flytta det hela två gånger. Men då jag gör matten åt datorn.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Studenter kommer att dela sig i grupper för att skriva instruktioner
          och sedan kommer de att byta dem med en annan grupp som kommer att rita
          monster. Grupper kommer att skriva instruktioner med hjälp av de fyra stegen
          i datoriellt tänkande: nedbrytning, mönster letning, abstraktion och algoritmer.'
      3:
        image: notes/unplug2_3.png
        text: Först kommer grupperna att bryta ner uppgiften vilket innebär att göra
          en spelplan. De ska leta efter mönster mellan alla monster i katalogen.
          När de hittar skillnaderna mellan monstren, kommer de att abstrahera eller
          ta bort dessa detaljer. Till exempel, ett monster i katalogen har vegitas
          ögon och en annan har spritem ögon. Men de båda har ögon så att vi kan skriva
          en rad som säger att monster har tomma ögon.
      4:
        image: notes/unplug2_4.png
        text: Så eleverna kommer att kunna skriva en uppsättning instruktioner, kallat
          en algoritm, som listar monstrens delar med tomma fält för vilka stilarna
          är. Detta är uppsättningen instruktioner de ska ge till andra lever som
          ska återskapa sina alldeles egna monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: Med rutat- papper- programmering hjälper vi till att förklara hur kodning
          fungerar genom att försöka hjälpa människor att återskapa teckningar med
          endast pilar och klotter. En person får en liten ritning på rutat papper
          som den behöver gå igenom för att med hjälp av endast speciella pilar försöka
          beskriva hur man återskapa denna ritning.
      2:
        image: notes/unplug3_2.png
        text: 'I denna aktivitet, är de enda symboler som du kan använda dessa: flytta
          en fyrkant framåt, en fyrkant bakåt, flytta en ruta upp, flytta en ruta
          ner, ändra till nästa färg och fyll i din fyrkant med färg. När vi har kodat
          det, kan vi lämna över det till en annan person som kan läsa koden och försöka
          återskapa bilden.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: Med rutat- papper- programmering hjälper vi till att förklara hur kodning
          fungerar genom att försöka hjälpa människor att återskapa teckningar med
          endast pilar och klotter. En person får en liten ritning på rutat papper
          som den behöver gå igenom för att med hjälp av endast speciella pilar försöka
          beskriva hur man återskapa denna ritning.
      2:
        image: notes/unplug4_2.png
        text: Under andra hälften av aktiviteten frågar vi eleverna hur många olika
          sätt de kan vika en bit papper för att skapa sexton identiska rektanglar.
          Sedan diskuterar ni hur flera lösningar kan leda till samma slutresultatet
          och varför vissa lösningar är bättre i vissa situationer.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: Med rutat- papper- programmering hjälper vi till att förklara hur kodning
          fungerar genom att försöka hjälpa människor att återskapa teckningar med
          endast pilar och klotter. En person får en liten ritning på rutat papper
          som den behöver gå igenom för att med hjälp av endast speciella pilar försöka
          beskriva hur man återskapa denna ritning.
      2:
        image: notes/unplug5_2.png
        text: Under andra hälften av aktiviteten frågar vi eleverna hur många olika
          sätt de kan vika en bit papper för att skapa sexton identiska rektanglar.
          Sedan diskuterar ni hur flera lösningar kan leda till samma slutresultatet
          och varför vissa lösningar är bättre i vissa situationer.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: Denna aktivitet kallas' kodning med kort' och den är bra för alla åldrar.
          Som du lärt dig med om-satser i tidigare lektioner, när du arbetade med
          Blockly, har om-uttalandet en bit inuti sig som du måste utvärdera om den
          är sann eller falsk.  Det är villkoret och det kan användas på många olika
          sätt.
      2:
        image: notes/unplug6_2.png
        text: Vi drar nytta av det genom att skapa program på papper som du kör med
          en slumpmässig dragning av spelkort. Du kanske har en om-sats som säger
          något som 'om kortet du drar är större än 8 får du en poäng'. Annars får
          din motståndare en poäng. Du kan göra det så enkelt eller så komplicerat
          som du känner dig bekväm med.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: Du vet när du tittar på texterna till en låt och de definierar refrängen
          i början och sedan för resten av sången, hänvisas du tillbaka till refrängen?
          Det är så du anropar en funktion.
      2:
        image: notes/unplug7_2.png
        text: I den här lektionen definierar vi refrängen i början av vår sång och
          sedan sjunger vi igenom vår sång och går tillbaka och vi märker att klassen
          inte sjunger ordet refräng, de går automatiskt upp till toppen där vi skrev
          refrängen och sjunger igenom den. Vi använder det som en bra introduktion
          till hur man ska förstå vad ett program gör när det definierar och anropar
          en funktion.
      3:
        image: notes/unplug7_3.png
        text: Vi använder välkända låtar inklusive Old Macdonald för att tala om hur
          en refräng kallas om och om igen och hur en refräng kan ändras. När du har
          en låt som Old Macdonald, där vissa ord ändras, är den ett bra tillfälle
          att införa idén om parametrar. Skickarvissa ord igenom så att du kan skicka
          extra information till din funktion. När vi är säkra på att alla förstår
          det, kan du ta egna välkända låtar och bryta upp dem själv. Se om ni kan
          lista ut det tillsammans.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Vår lektion om abstraktion använder det välkända begreppet lucktext,
          där du i princip sätter in en tom bit i en berättelse som kan fyllas med
          massor av olika ord. Vi tar denna idé, utmanar barn att hitta på egna ord
          till sina egna historier, och verkligen förklara begreppet abstraktion.
      2:
        image: notes/unplug8_2.png
        text: Det handlar om funktioner och hur du kan ha en funktion, som i gamla
          Macdonald, där du har en struktur för din refräng men du har något litet
          som ändras och du har abstraherat ut den lilla sak som ändrar och du kan
          fylla den med dina egna ord varje gång. Men ibland har du tre ord som ändras
          så du fyller dem med tre parametrar, det är fortfarande ganska bra.
      3:
        image: notes/unplug8_3.png
        text: Du kan ha en funktion som hanterar massor av olika problem. Massor av
          gånger kommer människor att skriva separata funktioner för alla dessa problem,
          utan att inse det är bara en liten skillnad. Om de bara kunde hitta ett
          sätt att hantera den enda lilla skillnaden, kunde de bara återanvända en
          funktion om och om igen, istället för att ha 14 olika funktioner.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Stafett- programmering är en extremt rolig lektion som fungerar bättre
          än bara datavetenskap. Ibland alla blir lite trötta och du vill få dem upp
          på fötter. Detta är ett bra sätt att lägga till lite spänning i datavetenskap.
      2:
        image: notes/unplug9_2.png
        text: Du delar in alla i två grupper där de ska stå i en rad och köra stafett
          stil. Den första personen i varje grupp springer till andra sidan av rummet
          där du har en rutat papper teckning och ett tomt papper som väntar på dem.
          De skriver ner det första steget för att skapa teckningen, springer tillbaka
          till sin rad, taggar nästa spelare som springer tillbaka för att skriva
          nästa steg.
      3:
        image: notes/unplug9_3.png
        text: Detta är ett bra sätt att få in idén om felsökning, behovet av att korrekturläsa
          ditt eget arbete och att kontrollera arbetet människor gjort före dig. Du
          kommer snabbt att förstå hur viktigt det är att vara försiktig i din kodning
          när ett helt lag är beroende av dig.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: Denna aktivitet förklarar på ett lätt sätt hur internet fungerar. Vi
          förklarar all terminologi du behöver med enkla uttryckt så att eleverna
          kan simulera att sända meddelanden, som en e-post.
      2:
        image: notes/unplug10_2.png
        text: Eleverna kommer att överföra meddelanden samtidigt som låtsas vara en
          av tre överföringsmetoder. Trådlöst internet, DSL eller fiber. De elever
          som representerar wi-fi måste att bära det budskap de föra över på huvudet
          eftersom wifi är det mest sannolika att släppa någon information av de tre.
      3:
        image: notes/unplug10_3.png
        text: De elever som låtsas vara DSL eller kabel kommer att överföra budskapet
          på baksidan av sin hand, där de är något mindre benägna att släppa information.
          Och eleverna som representerar fiberoptiska får bära dem med båda händerna.
          Denna verksamhet är ett bra sätt att förstå något som många av oss använder
          varje dag.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: Så nu är det dags att steg tillbaka och ta ett fågelperspektiv av allt
          du gjort i de senaste nitton lektionerna. Detta är ett bra tillfälle att
          berätta för eleverna att vad de gjort är en enorm prestation. De har lärt
          sig mer under dessa lektioner än de flesta vuxna vet om datavetenskap.
      2:
        image: notes/unplug11_2.png
        text: Diskutera deras favorit lektioner i klass eller i små grupper om. När
          du tar en titt tillbaka på allt du har lärt dig, är det här elevernas kreativitet
          kan lysa. Dela in dem i grupper och låt dem skapa en egen ouppkopplad lektion.
          Tilldela varje grupp ett nyckelbegrepp, som funktioner eller algoritmer
          och ha massor av pysselmaterial till hands för dem att använda. Låt varje
          grupp presentera sin nya ouppkopplade aktivitet eller boka en annan dag
          för att göra några av aktiviteterna som eleverna skapat.
      3:
        image: notes/unplug11_3.png
        text: Från alla hoppas här på Code.org, vi hoppas du har haft massor av kul
          under kursen. Och om din dröm är att skapa den bästa nya appen, att använda
          programmering för att bota sjukdomar, eller bara vill vara en bra problemlösare,
          var kursen det första steget i att uppnå dessa drömmar.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Hej, jag är Kathleen Kennedy och jag är producenten av Star Wars: The
          Force Awakens. Idag kommer du att arbeta med en av våra stjärnor, BB-8.
          BB-8 är en sfärisk droid. Allt han gör och varje rörelse som han gör styrs
          av datorprogram. Datavetenskap påverkar alla branscher, från marknadsföring
          till sjukvård till film. I själva verket har hundratals datatekniker arbetat
          tillsammans för att göra en film som The Force Awakening.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Hej jag är Rachel Rose, jag är en senior R&D ingenjör på ILM och jag
          leder utvecklingsteamet för animationer ochkaraktäre. I The Force Awakens
          är jag ansvarig för att hjälpa konstnärer utveckla riggar som är de delar
          av karaktären som får den att röra sig och ge ett trovärdigt intryck av
          att den kommer från en galax långt, långt borta.
      3:
        image: notes/starwars_intro_3.JPG
        text: Under nästa timme kommer vi att bygga vårt eget Star Wars spel. Vi kommer
          att lära dig de grundläggande begreppen i programmering. Vanligtvis är programmering
          bara text, men vi kommer att använda block här som vi kan dra och släppa
          för att skriva program. Under 'huven' skriver du fortfarande kod. När du
          har provat grunderna med block, kommer vi att byta till JavaScript, en av
          de mest populära programmeringsspråken på webben.
      4:
        image: notes/starwars_intro_4.JPG
        text: Till att börja med, kommer vi att arbeta med Rey för att programmera
          BB-8 att gå och samla in alla skrotdelar. Skärmen är uppdelad i tre delar.
          Till vänster är Star Wars spelyta, där koden körs. Under spelytan skrivs
          instruktionerna för varje nivå.
      5:
        image: notes/starwars_intro_5.JPG
        text: Detta område i mitten är verktygslådan och vart och ett av dessa block
          är ett kommando som BB-8 kan förstå.
      6:
        image: notes/starwars_intro_6.JPG
        text: Det vita utrymmet till höger kallas arbetsytan och det är där vi ska
          bygga våra program.
      7:
        image: notes/starwars_intro_7.JPG
        text: Om jag drar flyttaVänster(); blocket till vår arbetsyta och trycker
          på Kör, vad händer? BB-8 flyttar vänster ett steg på skärmen.
      8:
        image: notes/starwars_intro_8.JPG
        text: Och vad händer om jag vill att BB-8 ska göra något efter flyttaVänster();
          blocket? Jag kan lägga till ett annat block till vårt program. Jag kommer
          att välja flyttaUpp(); blocket och jag ska dra det under mitt flyttaVänster();
          block tills linjen visas. Sedan ska jag släppa det och de två blocken kommer
          att knäppa ihop.
      9:
        image: notes/starwars_intro_9.JPG
        text: När jag trycker på kör igen, utför BB-8 de kommandon som är staplade
          från toppen till botten på vår arbetsyta. Om du någonsin vill ta bort ett
          block, ta bort det från stacken och dra tillbaka det in i verktygslådan.
      10:
        image: notes/starwars_intro_10.JPG
        text: Efter du har tryckt på Kör, kan du alltid trycka på Omstart-knappen
          för att få BB-8 tillbaka till starten. Nu låt oss börja!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Inuti blocken vi har använt finns JavaScript-kommandon. JavaScript är
          det populäraste programmeringsspråket för professionella utvecklare idag.
          Block är ett bra sätt att börja lära sig koda. I själva verket börjar toppuniversitet
          som Harvard och Berkeley undervisa detta sätt. Men när de väl lärt sig grunderna,
          skriver ingenjörerna sin kod därför att det går fortare.
      2:
        image: notes/starwars_typing_2.JPG
        text: Vi kan skriva hundratals kommandon utan att vi måste hitta dem i verktygslådan
          eller dra ut dem. Eftersom du håller på och lär dig kan skrivandet vara
          långsammare till en början men vi vill att du ska göra ett försök.
      3:
        image: notes/starwars_typing_3.JPG
        text: I det övre högra hörnet på din arbetsyta kan du klicka på knappen Visa
          text på vilket pussel som helst för att byta från block till att skriva
          kod som text.
      4:
        image: notes/starwars_typing_4.JPG
        text: I nästa lektion startar vi dig i skrivarläge. Här kan du fortfarande
          dra block från verktygslådan eller skriva kommandonamnet. När du börjar
          skriva, ser du namnen på möjliga kommandon visas under där du skriver. Istället
          för att skriva hela kommandonamn, kan du välja ett av dessa. I mitt jobb
          använder jag den här funktionen' Komplettera automatiskt' hela tiden när
          jag skriver kod.
      5:
        image: notes/starwars_typing_5.JPG
        text: När du skriver kod, måste du vara mycket exakt. Du måste stava och Kapitalisera
          kommandonamn exakt korrekt, inklusive parenteserna och semikolon. Även med
          ett litet maskinskrivningsmisstag, kan BB-8 inte förstå koden och kommer
          inte att kunna flytta.
      6:
        image: notes/starwars_typing_6.JPG
        text: När du gör ett fel på raden, belyser redaktör det åt dig så att du kan
          prova att ändra din text för att fixa det.
      7:
        image: notes/starwars_typing_7.JPG
        text: Om du fastnar, kan du alltid börja om med Omstartsknappen och du kan
          växla tillbaka till blockläge när som helst genom att klicka i det övre
          högra hörnet. Ok, låt oss göra ett försök att skriva kod! Och om du gör
          misstag, bli inte frustrerad. Det tar oss alla några försök innan det blir
          rätt.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hej, mitt namn är Charita Carter och jag är en senior kreativ producent
          här på Walt Disney Imagineering. Jag är ansvarig för att leda grupper som
          faktiskt producerar de attraktioner som våra gäster får uppleva. Vi letar
          alltid efter sätt att vi kan förbättra oss och skapa en bättre upplevelse
          för våra gäster och teknik är kärnan i det.
      2:
        image: notes/starwars_events_2.JPG
        text: Grattis, gjorde du det! Du har programmerat BB-8. Nu tror jag att är
          vi redo för något svårare. Låt oss göra det. Nu när du har lärt dig grunderna
          i programmering, ska vi tillbaka i tiden att bygga ditt eget spel, med R2-D2
          och C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'För att göra ett spel måste vi lära oss om något som spelprogrammerare
          använder varje dag: dte kallas händelser. Händelser säger till ditt program
          att lyssna eller vänta på att något händer och då utföra en åtgärd.'
      4:
        image: notes/starwars_events_4.JPG
        text: Några exempel på händelser är att lyssna efter ett musklick, en pilknapp
          eller ett tryck på skärmen.
      5:
        image: notes/starwars_events_5.JPG
        text: Här kommer vi att göra så att R2-D2 går uppåt för att leverera ett meddelande
          till en rebel pilot och sedan går ned till den andra rebel pilot. Vi använder
          händelser för att få honom att flytta när spelaren använder upp/ner piltangenterna
          eller upp/ner knapparna.
      6:
        image: notes/starwars_events_6.JPG
        text: Vi använder närUpp() händelse blocket och fäster det under flyttaUpp()
          blocket. När spelaren trycker på uppåt-piltangenten, körs koden som fästs
          vid närUpp() blocket. Och vi ska göra samma sak för att få R2-D2 att flytta
          nedåt.
      7:
        image: notes/starwars_events_7.JPG
        text: För att göra det ska vi använda ett kommando som kallas närUpp(). När
          du drar kommandot ur verktygslådan, ser du att det börjar och slutar med
          en lockig klammer istället för semikolon. Detta ger oss utrymme att sätta
          andra kommandon i mitten. Varje kommando som vi placerar inuti dessa klamrar
          kommer att köras när spelaren trycker på uppåt-pilen.
      8:
        image: notes/starwars_events_8.JPG
        text: Vi vill att R2-D2 ska gå upp så låt oss sätta ett gåUpp(); block inuti
          kommandot. Och vi ska göra samma sak fär att få R2-D2 att gå ner.
      9:
        image: notes/starwars_events_9.JPG
        text: Istället för att skriva all kod för att styra vår droid i förväg, kan
          vi låta R2-D2 vänta på knapptryckningar för att gå runt på skärmen. Steg
          för steg blir dina spel mer interaktiva.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hej, jag är Kathleen Kennedy och jag är producenten av Star Wars: The
          Force Awakens. Idag kommer du att arbeta med en av våra stjärnor, BB-8.
          BB-8 är en sfärisk droid. Allt han gör och varje rörelse som han gör styrs
          av datorprogram. Datavetenskap påverkar alla branscher, från marknadsföring
          till sjukvård till film. I själva verket har hundratals datatekniker arbetat
          tillsammans för att göra en film som The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hej jag är Rachel Rose, jag är en senior R&D ingenjör på ILM och jag
          leder utvecklingsteamet för animationer och karaktärer. I The Force Awakens
          är jag ansvarig för att hjälpa konstnärer utveckla riggar som är de delar
          av karaktären som får den att röra sig och ge ett trovärdigt intryck av
          att den kommer från en galax långt, långt borta.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: I nästa timme kommer vi att bygga vårt eget Star Wars spel som kommer
          att lära dig de grundläggande begreppen i programmering. Vanligtvis är programmering
          bara text men vi kommer att använda block här som vi kan dra och släppa
          för att skriva program. Till att börja med kommer vi att arbeta med Rey
          för att programmera BB-8 att samla in alla skrotdelar.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars
          game space where code will run. The instructions for each level are written
          below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Detta område i mitten är verktygslådan och vart och ett av dessa block
          är ett kommando som BB-8 kan förstå.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together. When I press run
          again, BB-8 will perform the commands that are stacked top to bottom on
          our workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: After you hit run, you can always hit the reset button to get BB-8 back
          to the start. Now let's get rolling!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hej, mitt namn är Charita Carter och jag är en senior kreativ producent
          här på Walt Disney Imagineering. Jag är ansvarig för att leda grupper som
          faktiskt producerar de attraktioner som våra gäster får uppleva. Vi letar
          alltid efter sätt att vi kan förbättra oss och skapa en bättre upplevelse
          för våra gäster och teknik är kärnan i det.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Grattis, gjorde du det! Du har programmerat BB-8. Nu tror jag att är
          vi redo för något svårare. Låt oss göra det. Nu när du har lärt dig grunderna
          i programmering, ska vi tillbaka i tiden att bygga ditt eget spel, med R2-D2
          och C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'För att göra ett spel måste vi lära oss om något som spelprogrammerare
          använder varje dag: dte kallas händelser. Händelser säger till ditt program
          att lyssna eller vänta på att något händer och då utföra en åtgärd.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Några exempel på händelser är att lyssna efter ett musklick, en pilknapp
          eller ett tryck på skärmen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Här kommer vi att göra så att R2-D2 går uppåt för att leverera ett meddelande
          till en rebel pilot och sedan går ned till den andra rebel pilot. Vi använder
          händelser för att få honom att flytta när spelaren använder upp/ner piltangenterna
          eller upp/ner knapparna.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[students speaking] We made a game where you can''t lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It''s really hard! Sometimes you just get an advantage, an unfair
          advantage if you''re the developer of the game. Did I get it? Yay!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Mitt namn är Jens Bergensten men jag är mer känd som Jeb. Jag är den
          ledande utvecklaren av Minecraft, här på Mojang i Stockholm. Jag tror jag
          var elva eller kanske tolv och jag började programmera eftersom jag ville
          göra spel. En av min fars vänner berättade för mig att för att göra spel,
          måste du lära dig hur man programmerar. Det är hur jag kom igång. Jag gillar
          att utforma och räkna ut arkitekturen av spel. Det är vad jag verkligen
          tycker om Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Under nästa timme kommer du att lära dig grunderna i datavetenskap genomatt
          programmera Alex eller Steve att flytta genom en simulerad bit av en Minecraft
          värld.
      3:
        image: notes/mc_intro_3.JPG
        text: Traditionell programmering är oftast i text men idag använder vi Blockly,
          ett system som använder visuella block som du kan dra och släppa för att
          skriva program. Under ytan skapar du Javascript-kod.
      4:
        image: notes/mc_intro_4.JPG
        text: De begrepp du kommer att lära är vad programmerare använder varje dag
          och är grunden till datavetenskap. Här på Mojang använder vi dessa samma
          begrepp för att få Minecraft att fungera.
      5:
        image: notes/mc_intro_5.JPG
        text: Innan du börjar, ska du välja din karaktär. Jag kommer att välja Alex.
          Låt oss bygga koden för ett program som kommer att hjälpa henne att flytta
          runt på skärmen.
      6:
        image: notes/mc_intro_6.JPG
        text: Skärmen delas in i tre delar. Till vänster är Minecraft spelyta där
          programmet körs. Instruktionerna för varje nivå skrivs nedanför.
      7:
        image: notes/mc_intro_7.JPG
        text: Det mellersta området är verktygslådan och vart och ett av dessa block
          är ett kommando som instruerar Alex att utföra något.
      8:
        image: notes/mc_intro_8.JPG
        text: Det vita utrymmet till höger kallas arbetsytan och det är där vi ska
          bygga våra program.
      9:
        image: notes/mc_intro_9.JPG
        text: Om vi drar gå framåt(); blocket till vår arbetsyta och sedan klickar
          på kör, vad händer? Alex flyttar framåt ett steg.
      10:
        image: notes/mc_intro_10.JPG
        text: Och om vi vill göra något när hon har flyttats framåt ett steg? Vi kan
          lägga till ett annat block i vårt program. Jag kommer att välja sväng höger();
          blocket och jag ska dra det under mitt gå framåt(); block tills denna orange
          linje visas. Sedan ska jag släppa det och de två blocken kommer att knäppa
          ihop. När vi trycker på kör igen, utför Alex de kommandon som är staplade
          från toppen till botten på vår arbetsyta.
      11:
        image: notes/mc_intro_11.JPG
        text: Om du någonsin vill ta bort ett block, dra den bara från stacken tillbaka
          till verktygslådan.
      12:
        image: notes/mc_intro_12.JPG
        text: 'För att ångra dina ändringar och komma tillbaka till hur den nivån
          startade, använd knappen ''börja om'' i det övre högra hörnet av arbetsytan.
          En sak till: du ser den lilla triangeln på sväng-blocket? När du ser dessa
          trianglar, betyder det att du kan välja ett annat alternativ. Låt oss börja
          koda!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Jag är Lydia Winters, Mojangs varumärkesdirektör och vi gjorde ett litet
          spel som heter Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Min favorit sak att göra i Minecraft är utforska. Jag älskar äventyr
          i grottor och att se vad jag kan hitta. Som någon som inte är programmerare,
          är jag verkligen glad över att få gå igenom Minecraft lektionen och faktiskt
          lära mig en del kodning själv.
      3:
        image: notes/mc_repeat_3.JPG
        text: Den sista nivån behöver massor av gå framåt(); block. Det skulle vara
          lättare om vi bara kunde berätta för datorn att utföra gå framåt(); kommandot
          fyra eller fem gånger. Lyckligtvis för oss är datorer riktigt bra på upprepa
          kommandon med hjälp av upprepade loopar.
      4:
        image: notes/mc_repeat_4.JPG
        text: När man bygger Minecraft, använder vi upprepa -loopar' för att placera
          allt inledande materialsom behövs för att skapa en ny värld. Det är tusentals
          block. Vi använder också loopar på små sätt, till exempel att få Alexs fötter
          röra sig fram och tillbaka när hon går. Upprepa- loopar är en kraftfull
          del av programmering.
      5:
        image: notes/mc_repeat_5.JPG
        text: Natten kommer så under de nästa nivåerna, ska vi bygga ett säkert hus.
          Vi kommer att använda upprepa- blocket för att göra detta mycket enkelt.
      6:
        image: notes/mc_repeat_6.JPG
        text: För att bygga en mur av vårt hus, kan vi antingen säga till Alex att
          'gå framåt'(); och placera plankor fyra gånger, eller vi kan säga till henne
          att gå framåt(); och placera en planka, sedan ta det kommandot och använda
          upprepablocket för att få henne att utföra åtgärden flera gånger. Nu ska
          vi klicka på upprepa blocket och tala om för henne hur många gånger vi vill
          att hon ska utföra den här åtgärden. Låt oss bygga vårt hus nu innan natten
          faller på! Ha det så kul.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Nu ska vi lära oss om uttalanden. Om-uttalanden är en grundläggande
          del av att lära sig programmera. De hjälper en dator fatta beslut.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Alla datorer använder om-uttalanden, inklusive min telefon. Till exempel
          när jag låser upp min telefon kör den lite kod som sägeratt om jag anger
          lösenordet korrekt ska den låsa upp. Annars visas ett felmeddelande.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Du kan använda om-uttalanden i din kodför att göra så Steve och Alice
          reagerar på vad de ser i världen. Till exempel om det finns en sten framför
          dem, kan de svänga vänster. Eller svänga höger om de går in i ett träd.
      4:
        image: notes/mc_if_statements_4.JPG
        text: I det här fallet vill vi inte att falla i lava. Det är lätt att planera
          för lavan. Vi kan se det på skärmen. Men hur är det med lavan som vi inte
          ser under stenen?
      5:
        image: notes/mc_if_statements_5.JPG
        text: När vi har grävt upp stenen, måste vi kontrollera om det finns någon
          lava på denna plats innan vi går vidare. Om det finns lava där, vill vi
          placera en sten framför vår karaktär innan vi kan gå framåt. På så sätt
          kan vi tryggt gå. Dags för mer gruvdrift! Och kom ihåg att använda om-uttalande
          att för att inte gå fel.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Grattis! Du just lärt dig de grundläggande byggstenarna i datavetenskap.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Nu kan du använda dessa block för att bygga din egen skapelse. Det finns
          inga fler instruktioner och inga fler pussel att lösa. Du kan bygga vad
          du vill. Du får välja.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[studenter talar] Det handlar om att få det verkligt. Klippa av. Jag
          gjorde ett L av facklor. Jag gjorde ett A av björkplankor. Det fungerade,
          det fungerade. Vi byggde ett hus av ull!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: När du är klar med din skapelse, välj Dela att få en länk att dela med
          dina vänner. Ha det så kul!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Grattis! Du just lärt dig de grundläggande byggstenarna i datavetenskap.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Nu kan du använda dessa block för att bygga din egen skapelse. Det finns
          inga fler instruktioner och inga fler pussel att lösa. Du kan bygga vad
          du vill. Du får välja.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[studenter talar] Det handlar om att få det verkligt. Klippa av. Jag
          gjorde ett L av facklor. Jag gjorde ett A av björkplankor. Det fungerade,
          det fungerade. Vi byggde ett hus av ull!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Nu kan du bygga vad du vill. Ha det så kul!
