"gl":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Oes, eu son un artista. Vostede pode escribir
        códigos para me facer deseñar case calquera cousa. Use algúns bloques para
        me facer deseñar sobre as liñas cinzas na imaxe. (Cada liña ten a lonxitude
        de 100 pixels)
      2-3 Artist 11_instruction: |
        Faga un borde na placa de parede creando un octógono
        con 8 lados, con 100 pixels de lonxitude cada un. Cantos graos vostede debe virar? (Pista:
        canto é 360 divido por 8?)
      2-3 Artist 12_instruction: |
        Configure o bloque "repita veces" para que cree
        un "círculo" para terminar o globo ocular. Se cada movemento virase un grao para a dereita,
        cantas veces vostede precisa repetir para completar o círculo? 180? 360? 500?
      2-3 Artist 2 new_instruction: |
        Esta casa ten unha parede inacabada. Cada lado
        ten 100 pixels de lonxitude, pero a parede inacabada ten só 50. Complete a parede.
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: |
        O bloque puxe move o artista sen debuxar.
        Debuxe a liña trazada usando os bloques puxe e deseñe.
      2-3 Artist 3_instruction: Este pucho ten 100 pixels de altura. Debuxe un pucho
        que teña 70 pixels polo menos.
      2-3 Artist 3new_instruction: |
        O pucho vermello ten 100 pixels de altura. Termine o debuxo
        dun pucho negro que sexa 70 pixels menor. O longo do pucho negro é de 50 pixels.
      2-3 Artist 4_instruction: Axúdeme a completar a casa para o gato.
      2-3 Artist 5_instruction: |
        Substitúa este código por un bloque "repita veces"
        para debuxar a mesma casa usando só 3 bloques.
      2-3 Artist 6_instruction: 'Esta casa precisa dun tellado! Debuxe o triángulo.
        Pista: todos os 3 lados teñen a mesma lonxitude.'
      2-3 Artist 7_instruction: |
        Termine de debuxar a metade dereita da última xanela.
        Cada cadrado da xanela ten 25 pixels.
      2-3 Artist 8_instruction: |
        Complete os cuartos para cada un dos animais dividindo
         o rectángulo en 2 cadrados de mesmo tamaño. O rectángulo ten 200 pixels de longo
        e 100 pixels de altura.
      2-3 Artist 9_instruction: Termina este papaventos
      2-3 Artist Assessment 1_instruction: 'Avaliación: termine de debuxar o último
        dente, 25 pixels de longo e 25 pixels de altura.'
      2-3 Artist Debugging 1_instruction: Vostede consegue facer este pucho con 100
        pixels de altura?
      2-3 Artist Debugging 10_instruction: |
        O controlador de dirección do control do meu xogo
        é moito estreito. Pista: fágao 10 pixels máis largo
      2-3 Artist Debugging 11_instruction: Axúdeme a terminar a miña linda folerpa
        de neve. Cantas veces preciso "repetir" para terminalo?
      2-3 Artist Debugging 12_instruction: Eu debo agregar unha onda do mar nesta
        cena. Vostede pode me axudar?
      2-3 Artist Debugging 2_instruction: 'O código para os tres bigodes que vostede
        ve está errado. Pista: cada bigode ten a lonxitude de 75 pixels. Corrixa este
        código para debuxar os bigodes.'
      2-3 Artist Debugging 3_instruction: |
        O meu barco ten un buraco! Vostede consegue corrigilo
        alterando o ángulo da liña? Pista: o último ángulo está 15 graos fora de lugar.
      2-3 Artist Debugging 4_instruction: |
        Cal é a imaxe que estamos tentando
        debuxar? Termine de conectar os pontos usando as liñas e ángulos apropiados.
      2-3 Artist Debugging 5_instruction: |
        O código para a perna e para o pé que vostede ve
        está errado. Pista: o pé está moi longo, pode ser necesario excluír un paso (pé... paso... trocadiño)
      2-3 Artist Debugging 6_instruction: |
        Parece que estou sentado en unha cadeira
        sen unha perna. Edite os bloques para debuxar a perna.
      2-3 Artist Debugging 7_instruction: |
        Parece que o C no código está debuxado ao contrario.
        Vostede consegue facelo parecer cun C?
      2-3 Artist Debugging 8_instruction: |
        Meu cataventos non está preparado. Cantas
        veces eu preciso repetir para terminalo?
      2-3 Artist Debugging 9_instruction: |
        O código para este tronco está incorreto. Pista:
        o ángulo está 60 graos fora de lugar
      2-3 Artist Debugging Assessment 1_instruction: 'Esta figura é moi pequena. Pode
        facela maior? Indicacuón: debe ter 75 pixels de máis de cada lado.'
      2-3 Artist Free Play_instruction: Atividade libre! Debuxe o que vostede queira.
      2-3 Artist Functions 1_instruction: |
        Olá. Min artista zumbi. Min ama debuxar!
        Axúdeme a debuxar os óculos cadrados. Pista: a haste entre as lentes é
        25 pixels menor que a lonxitude do cadrado.
      2-3 Artist Functions 10_instruction: |
        Aqui temos duas funcións, unha para debuxar unha
        engrenaxe grande e outra para debuxar unha engrenaxe pequena. Úseas para debuxar o interior dunha máquina!
      2-3 Artist Functions 11.5_instruction: |
        Aquí está a mesma función "Deseñe un hexágono".
        O que acontece se vostede virase só 60 graos en cada repetición?
      2-3 Artist Functions 11_instruction: |
        Renomeamos a función "debuxe un cadrado"
        como "debuxe un hexágono", pero ela aínda debuxa só cadrados! Vostede consegue
        modificar a función "debuxe un hexágono" para debuxar un hexágono con lados de 50 pixels, e
        debuxar a imaxe usando a función?
      2-3 Artist Functions 12_instruction: |
        As funcións son óptimas para debuxar
        cousas complexas varias veces. Vostede consegue usar a función "debuxe unha flor"
        para cubrir o resto de plantas? (Pista: as plantas están todas separadas
        por unha lonxitude de 100 pixels)
      2-3 Artist Functions 13_instruction: |
        Fornecemos catro funcións para vostede.
        Useas da forma que queira dentro de un ou máis bucles para crear imaxes que
        vostede pode compartir cos seus amigos. Prema "Executar" para ver un exemplo.
      2-3 Artist Functions 2_instruction: |
        As funcións permiten que vostede defina novos bloques! Movemos
        os bloques para debuxar un cadrado para dentro dunha función chamada "debuxe un cadrado".
        Vostede consegue usar a función "debuxe un cadrado" para crear os óculos? Os cadrados están separados
        por 75 pixels.
      2-3 Artist Functions 3_instruction: |
        Edite a función para debuxar un cadrado con
        lados de 115 pixels de lonxitude e debuxe os óculos maiores. Agora, os cadrados están separados por 45 pixels.
      2-3 Artist Functions 4_instruction: |
        Use o bloque "repita" para debuxar estes
        3 cadrados.
      2-3 Artist Functions 7_instruction: |
        Use a función "debuxe unha casa" para debuxar
        dúas casas usando dous parámetros diferentes. (Pista: a primeira casa ten 100 pixels).
      2-3 Artist Functions 9_instruction: |
        Esta é unha función para folerpas de neve. Probe
        usala para crear unha escena de inverno! Este nível é libre, entón non hai
        desafíos para resolver. Divírtase!
      2-3 Artist Loops 1_instruction: |
        Vostede consegue facer un hexágono con lados de
        100 pixels de lonxitude para terminar a célula? Lémbrese, iso significa que vostede só vai
        precisar virar 60 graos!
      2-3 Artist Loops 10_instruction: |
        O que acontece co debuxo cando facemos a nosa
        etapa final coa metade da lonxitude?
      2-3 Artist Loops 11_instruction: |
        Agora, imos colocar *outro* bucle en torno de toda
        a creación! Non se esqueza de agregar un ángulo ao final do bucle externo.
      2-3 Artist Loops 2_instruction: |
        Now use a repeat block to make the cell a
        shell.
      2-3 Artist Loops 4_instruction: |
        Quere ver o que acontece cando repetimos esa
        forma varias veces usando un bucle?
      2-3 Artist Loops 5_instruction: |
        Agora, vamos facer unha pequena alteración no bucle
        e ver como as nosas imaxes fican diferentes.
      2-3 Artist Loops 6_instruction: |
        Adicione máis un movemento e outra acción de virar dentro
        do bucle e vexa como o seu debuxo muda.
      2-3 Artist Loops 7_instruction: |
        Podemos usar bucles para crear todos os tipos de polígonos. Vostede
        consegue crear un rombo dentro dese hexágono?
      2-3 Artist Loops 8_instruction: Imos colocar ambos os elementos dentro dun bucle.
      2-3 Artist Loops 9_instruction: "Imos repetir os mesmos elementos, pero \nagora
        imos agregar algunha distancia entre eles.\r\nUse o mesmo código usado \nanteriormente,
        pero agregue un paso en frente no final do bucle externo."
      2-3 Artist Loops New 1_instruction: |
        Imos debuxar a cabeza do robot! Vostede pode
        facer un cadrado con lados de 100 pixels?
      2-3 Artist Loops New 10_instruction: |
        Agora imos conectar un monte de V's,
        debuxándoos nun bucle.
      2-3 Artist Loops New 11_instruction: |
        Desta vez, imos debuxar 24 veces. Agregue
        unha acción de virar á esquerda en 30 graos ao código e coloque todo nun bloque repita.
      2-3 Artist Loops New 12_instruction: Debuxe un diamante con lados de 100 pixels.
      2-3 Artist Loops New 13_instruction: Agora, debuxe o diamante 3 veces en un
        bucle.
      2-3 Artist Loops New 14_instruction: |
        Agora, imos debuxar o diamante 10 veces,
        pero imos rotar 90 graos entre cada diamante.
      2-3 Artist Loops New 15_instruction: Debuxe algo divertido.
      2-3 Artist Loops New 2_instruction: |
        Aquí temos algúns dos códigos que vostede usou para debuxar
        aquele cadrado. O que acontece se vostede usase o bloque repita para executar este código 4 veces?
      2-3 Artist Loops New 9_instruction: |
        Debuxe un V simple con ambos os lados con 50
        pixels para completar a frecha.
      2-3 Artist Match Hex Pic_instruction: 'Correspondencia: axude a terminar o hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondencia: termine o código que
        falta.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondencia: complete o código que
        falta'
      2-3 Artist Match Tri pic_instruction: 'Correspondencia: cubra o código que falta.'
      2-3 Artist Nested Loops 1_instruction: "Vostede usou bucles para debuxar formas
        antes,\npero vostede sabía que pode colocar un bucle dentro de outro bucle?\r\nRepita
        este bloque\nde código enteiro 3 veces para debuxar o padrón."
      2-3 Artist Nested Loops 10_instruction: |
        Repita este código 12 veces para completar
        o padrón.
      2-3 Artist Nested Loops 11_instruction: |
        Repita este código 4 veces para completar
        o padrón, vire 90 graos despois de cada círculo.
      2-3 Artist Nested Loops 12_instruction: |
        Repita este código 12 veces para completar
        as espirais.
      2-3 Artist Nested Loops 2_instruction: |
        Agora, repita o triángulo 6 veces. Depois
        de cada triángulo, vostede precisa virar 60 graos antes de debuxar o próximo.
      2-3 Artist Nested Loops 3_instruction: |
        Vostede vai precisar repetir o triángulo 12
        veces para debuxar este padrón. Divida o número de graos nun círculo (360)
        polo número de formas que vostede está a debuxar (12) para descobrir canto virar
        depois de cada forma.
      2-3 Artist Nested Loops 4_instruction: |
        Repita este diamante 12 veces para debuxar
        unha flor. Pista: 12 diamantes son como os 12 triángulos que vostede fixo - canto
        vostede precisa virar depois de cada forma?
      2-3 Artist Nested Loops 5_instruction: |
        Cubra as xanelas deste edifício con
        un bucle aniñado. As xanelas teñen 20 pixels de lonxitude e están separadas por 20 pixels.
      2-3 Artist Nested Loops 6_instruction: |
        Este dinosauro ten 8 espiños ao longo
        da súa cauda. Cada espiño ten 30 pixels de lonxitude. Repita o triángulo 8 veces, pero
        lémbrese de avanzar despois de cada un.
      2-3 Artist Nested Loops 7_instruction: |
        Repita este triángulo 10 veces para debuxar
        o sol. Vostede vai precisar mover e virar despois de cada triángulo. Vostede pode descobrir
        canto virar dividindo o número de graos nun círculo polo
        número de formas que o compoñen.
      2-3 Artist Nested Loops 8_instruction: |
        Agora, imos agregar un pouco de herba á imaxe.
        Cada mechón de herva está separado por 50 pixels.
      2-3 Artist Nested Loops 9_instruction: |
        Imos terminar esta imaxe agregando
        unha flor. Repita o diamante 12 veces para debuxar a súa flor.
      2-3 Artist Nested Loops Free Play_instruction: |
        Actividade libre. Debuxe algo legal
        con bucles aniñados.
      2-3 Bee Conditionals 1_instruction: |
        Olá! Eu son unha abella. Axúdeme a recoller o néctar
        da flor.
      2-3 Bee Conditionals 10_instruction: "As flores moradas poden ter 1 ou 0 néctar.\nTeña
        coidado para non recoller néctar dunha flor morada se ela non\ntivese néctar.\r\n"
      2-3 Bee Conditionals 11_instruction: Recolla néctar onde as flores teñen néctar.
      2-3 Bee Conditionals 12_instruction: |
        Use un bucle para verificar e recoller o néctar
        de todas esas flores.
      2-3 Bee Conditionals 13_instruction: |
        Recolla néctar e produza mel. Pista:
        o que acontece se vostede usase a condición "se houvese néctar" nunha flor vermella? Vostede pode
        completar iso cun bucle?
      2-3 Bee Conditionals 14_instruction: |
        Recolla néctar e produza mel. Teña coidado
        para non recoller néctar dunha flor morada se ela non tivese néctar.
      2-3 Bee Conditionals 15_instruction: Recolla néctar das catro flores.
      2-3 Bee Conditionals 2_instruction: |
        Olá, eu son unha abella! Axúdeme a recoller todo
        o néctar das flores. Use un bucle.
      2-3 Bee Conditionals 3_instruction: |
        Axúdeme a recoller todo o néctar das
        flores e a producir mel. Use un bucle.
      2-3 Bee Conditionals 4_instruction: |
        Axúdeme a recoller todo o néctar das
        flores e a producir todo o mel.
      2-3 Bee Conditionals 5_instruction: |
        As flores moradas poden ter 1 ou 0
        néctar, pero vostede non sabe canto! Teña coidado para non recoller néctar de
        unha flor morada se ela non tivese néctar. Verifique se o néctar é igual a 1
        usando o bloque se.
      2-3 Bee Conditionals 6_instruction: |
        Verifique esa flor cun bloque "se"
        para ver se hai algún néctar dispoñíbel.
      2-3 Bee Conditionals 7_instruction: |
        Recolla o néctar de cada flor que
        tivese néctar dispoñíbel.
      2-3 Bee Conditionals 8_instruction: |
        Este campo ten flores vermellas e moradas.
        As flores vermellas teñen unha cantidade de néctar coñecida, pero o néctar das flores moradas é descoñecido.
        Recolla todo o néctar.
      2-3 Bee Conditionals 9_instruction: Recolla todo o néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: |
        Avaliación: Recolla todo o
        néctar. Teña coidado para non recoller néctar de unha flor morada se non
        ten néctar.
      2-3 Bee Debugging 1_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 10_instruction: |
        Estes bloques están me incomodando. Corrixa
        o(s) erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 2_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 3_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 4_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 5_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel. Agora vostede pode
        usar os botóns Executar e Paso.
      2-3 Bee Debugging 6_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar.
      2-3 Bee Debugging 7_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 8_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging 9_instruction: |
        Estes bloques están me incomodando. Corrixa o(s)
        erro(s) para recoller todo o néctar e producir todo o mel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Avaliación:  Estes bloques están
        me incomodando. Corrixa o(s) erro(s) para recoller todo o néctar e producir
        todo o mel.
      2-3 Bee Functions 1_instruction: |
        As funcións son bloques de código que realizan
        unha tarefa. Use a función "obteña 2 néctares" para recoller o néctar de cada
        flor.
      2-3 Bee Functions 10_instruction: |
        As flores moradas poden ter 1 ou 0 néctar.  Cree
        unha función que recolle néctar só das flores que teñen néctar.
      2-3 Bee Functions 2_instruction: |
        As funcións son bloques de código que realizan
        unha tarefa. Use a función "obteña 5" para recoller 5 néctares dunha vez. Lémbrese tamén
        de usar un bucle para obter un contador de bloque ideal.
      2-3 Bee Functions 3_instruction: Recolla todo o néctar de cada flor.
      2-3 Bee Functions 4_instruction: |
        A función "mova e obteña néctar" vira
        a abella, recolle néctar, e entón retorna a abella para onde ela comezou. Use
        a función para recoller todo o néctar.
      2-3 Bee Functions 5_instruction: |
        Agora hai máis néctar nas flores.
        Edite a función dada para que ela recolla 4 néctares e úsea para recoller
        todo o néctar das flores.
      2-3 Bee Functions 6_instruction: |
        Agora, use a mesma función para recoller néctar
        das tres flores.
      2-3 Bee Functions 7_instruction: |
        Agora as flores están máis lonxe. Edite a
        función dada e úsea para recoller todo o néctar das flores.
      2-3 Bee Functions 8_instruction: |
        Cree a súa propia función que recolle 7 néctares,
        avanza e produce 7 unidades de mel. Use a función para recoller néctar en todas as
        flores e producir mel en todas as colmeas.
      2-3 Bee Functions 9_instruction: |
        Cree a súa propia función que vai por un
        camiño, obtén néctar, produce mel, e entón retorna a abella para o início do
        camiño.
      2-3 Bee Functions Assessment 1_instruction: |
        Avaliación: Use a función dada
        para recoller o néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: |
        Avaliación: Cree unha función
        para producir 3 unidades de mel de unha vez.
      2-3 Bee Loops 1_instruction: |
        Cada flor contén unha unidade de néctar. Recolla
        o néctar de cada unha das flores.
      2-3 Bee Loops 10_instruction: |
        Vostede pode usar un bucle mentres dentro de outros dous
        bucles para recoller todo o néctar?
      2-3 Bee Loops 11_instruction: |
        Use bucles mentres para recoller todo o néctar
        das flores deste campo.
      2-3 Bee Loops 12_instruction: |
        Use bucles mentres para recoller todo o néctar
        das flores deste campo.
      2-3 Bee Loops 13_instruction: |
        Avaliación: use o bloque repita para recoller
        todo o néctar.
      2-3 Bee Loops 1A_instruction: |
        Olá, eu son unha abella. Vostede pode me axudar a recoller
        o néctar destas flores?
      2-3 Bee Loops 2_instruction: |
        Use un bucle mentres para recoller o néctar e producir o
        mel.
      2-3 Bee Loops 2A_instruction: |
        Vostede consegue realizar a mesma tarefa máis facilmente
        cun bucle?
      2-3 Bee Loops 3_instruction: |
        Recolla o néctar de cada flor e produza mel
        en cada colmea.
      2-3 Bee Loops 3A_instruction: Vostede consegue usar un bucle para recoller todo
        o néctar?
      2-3 Bee Loops 3B_instruction: Agora, use o novo bloque repita para recoller
        todo o néctar e producir todo o mel.
      2-3 Bee Loops 4_instruction: |
        Use un bucle parecido ao do último desafío, pero realize
        unha acción de virar dentro del.
      2-3 Bee Loops 4A_instruction: O que acontece se vostede repetir esta secuencia
        3 veces? Non se esqueza de facer o mel no final!
      2-3 Bee Loops 5_instruction: |
        Use un bucle para descender as escadas e recoller o
        néctar.
      2-3 Bee Loops 6_instruction: |
        Use un bucle para recoller o néctar de cada flor
        e producir mel en cada colmea.
      2-3 Bee Loops 7_instruction: |
        Coloque estes bloques nun bucle para recoller o néctar
        de cada flor.
      2-3 Bee Loops 8_instruction: |
        Estas flores moradas teñen unha cantidade descoñecida de
        néctar. Use o bucle "mentres houbese néctar" para recoller todo o néctar. Este bucle
        será executado mentres a condición fose verdadeira, neste caso, mentres néctar > 0.
      2-3 Bee Loops 9_instruction: |
        O bucle mentres pode realizar a mesma acción que
        un comando sen un bucle. Agregue un bucle mentres a este código para realizar a mesma
        tarefa.
      2-3 Bee Loops Assessment 1_instruction: |
        Avaliación- use un bucle para recoller
        todo o néctar desta flor.
      2-3 Maze 1_instruction: |
        Vostede pode me axudar a apañar o porco malvado? Xunte algúns
        bloques "avance" e clique en "Executar".
      2-3 Maze 10_instruction: Léveme até a maldade verde! (Coidado coa dinamita)
      2-3 Maze 11_instruction: |
        Estou con fame, léveme até a flor! Cantas veces
        vostede precisa repetir un bloque?
      2-3 Maze 12 (copy 1)_instruction: |
        Vostede pode substituír a resposta anterior por
        só dous bloques? (Pista: cree un bucle usando un bloque "repita veces")
      2-3 Maze 12 (copy 2)_instruction: |
        Vostede pode substituír a resposta anterior por
        só dous bloques? (Pista: cree un bucle usando un bloque "repita veces")
      2-3 Maze 12 (old)_instruction: |
        Léveme até o porco, agora co bloque repita
        veces!
      2-3 Maze 12_instruction: |
        Vostede pode substituír estes cinco bloques por só dous bloques?
        (Pista: cree un bucle usando un bloque "repita veces")
      2-3 Maze 13 (old)_instruction: |
        Léveme até o porco, agora con o bloque repita
        até!
      2-3 Maze 13_instruction: Léveme até o porco usando só dous bloques.
      2-3 Maze 14 (old)_instruction: Léveme até o porco co bloque repita até!
      2-3 Maze 14_instruction: |
        Léveme até o xirasol! (Onde está o bloque "repita
        veces" cando eu preciso dele?)
      2-3 Maze 15 (old)_instruction: Léveme até o porco co bloque repita até!
      2-3 Maze 15_instruction: Use dous bucles para chegar até o porco usando menos
        bloques.
      2-3 Maze 16 (old)_instruction: Léveme até o porco co bloque repita até!
      2-3 Maze 16 before_instruction: Léveme até o porco.
      2-3 Maze 16_instruction: Léveme até o xirasol. Repita a secuencia!
      2-3 Maze 2_instruction: Este porco está me irritando. Axúdeme a chegar até ele!
      2-3 Maze 3_instruction: |
        Trace o camiño e léveme até o porco pasmón. Desvíe
        do TNT, ou as plumas van voar!
      2-3 Maze 4_instruction: Léveme até a maldade verde! (Coidado coa dinamita)
      2-3 Maze 5_instruction: Léveme até a maldade verde! (Coidado coa dinamita)
      2-3 Maze 6_instruction: |
        Fique calmo e axúdeme a chegar até o porco malvado. Senón
        eu vou ficar branco!
      2-3 Maze 7_instruction: Léveme até a maldade verde! (Coidado coa dinamita)
      2-3 Maze 8_instruction: Léveme até o porco!
      2-3 Maze 9_instruction: Léveme até a maldade verde! (Coidado coa dinamita)
      2-3 Maze Loops 1_instruction: Vostede pode me levar até o porco usando 5 bloques?
      2-3 Maze Loops 17_instruction: Léveme até o xirasol!
      2-3 Maze Loops 18_instruction: Léveme até o xirasol!
      2-3 Maze Loops 19_instruction: Léveme até o xirasol!
      2-3 Maze Loops 20_instruction: Léveme até o xirasol!
      2-3 Maze Loops 21_instruction: Léveme até o xirasol!
      2-3 Maze Loops Assessment 1_instruction: "Avaliación: Léveme até o xirasol\nusando
        só 5 bloques! \n"
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Léveme até o porco! Que bloques foran repetidos?
      2-3 Maze sq10v2_instruction: Léveme até o porco! Que bloques foran repetidos?
      2-3 maze sq11_instruction: Léveme até o porco! Que bloques foran repetidos?
      2-3 maze sq12_instruction: |
        Vostede pode substituír a resposta anterior por un bucle
        usando un bloque "repita veces"?
      2-3 maze sq13_instruction: |
        Querida pesoa. Min zumbi. Deve... chegar... xirasol.
        Cree un bucle co bloque "repita até".
      2-3 maze sq14_instruction: Vostede pode chegar até o xirasol usando só catro
        bloques?
      2-3 maze sq15_instruction: Vostede pode chegar até o xirasol usando só bloques?
      2-3 maze sq16_instruction: |
        Ok, iso é parecido, pero un pouco diferente. Vostede pode
        facer iso en só cinco bloques?
      2-3 Maze sq2_instruction: |
        Trace o camiño e léveme até o porco boballão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze sq3_instruction: Léveme até a maldade verde! (Coidado coa dinamita)
      2-3 Maze sq4_instruction: |
        Fique calmo e axúdeme a chegar até o porco malvado. Senón
        eu vou ficar branco!
      2-3 Maze sq5_instruction: |
        Léveme até o porco! Cantas veces vostede precisa
        repetir un bloque?
      2-3 Maze sq6_instruction: |
        Vostede pode substituír a resposta anterior por só dois
        bloques? (Pista: cree un bucle usando un bloque "repita veces")
      2-3 Maze sq7_instruction: Léveme até o intruso verde usando só tres bloques.
      2-3 Maze sq8_instruction: |
        Léveme até o porco! (Onde está o bloque "repita veces"
        cando eu preciso dele?)
      2-3 Maze sq9_instruction: Crie bucles para chegar até o porco usando menos bloques.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajude o pásaro a pegar o porco safado movendo-o para
        frente
      4-5 Artist 1_instruction: |
        Axúdeme a terminar de debuxar a miña caixa. (Cada liña
        ten 300 pixels de lonxitude)
      4-5 Artist 10_instruction: |
        Presione "Executar" para probar o código. De seguida, repita o código
        o número suficiente de veces para completar o debuxo. As cores serán diferentes toda vez.
      4-5 Artist 11_instruction: |
        Complete as rectas verdes. As rectas teñen 300 pixels
        de lonxitude e son separadas por 15 pixels.
      4-5 Artist 2_instruction: Vostede pode repetir este código para completar o
        cadrado?
      4-5 Artist 3.5_instruction: |
        Ok, tente descobrir o que acontece se vostede executase
        este código (ou presione "Executar" para probar o código). De seguida, repita o código o número suficiente de veces para completar
        o debuxo. As cores serán (probabelmente) diferentes toda vez.
      4-5 Artist 3_instruction: |
        Esta maceta de flores retangular ten un perímetro de 600.
        O lado longo ten 200 de lonxitude. Debuxe o rectángulo.
      4-5 Artist 4_instruction: |
        Cantos graos hai nun círculo? Repita os bloques
        para crear un círculo de cores.
      4-5 Artist 5_instruction: Que ángulo usa vostede?
      4-5 Artist 6_instruction: |
        Este triángulo equilátero ten ángulos de 60, 60
        e 60 graos. Cada lado ten 200 pixels. Complete o debuxo.
      4-5 Artist 7_instruction: |
        O triángulo reto ten ángulos de 30, 60 e 90
        graos. A lonxitude do lado inclinado é o duplo da altura de 100 pixels. Complete
        o debuxo.
      4-5 Artist 8_instruction: |
        A liña do medio-campo nun campo de fútbol é perpendicular
        ás liñas laterais. O campo ten un perímetro de 800 pixels e ten 240 pixels
        de lonxitude. Cal é ao seu longo? Debuxe os bordes e a liña do medio-campo.
      4-5 Artist 9_instruction: |
        Debuxe a outra metade de forma que o debuxo sexa simétrico.
        Os triángulos son equiláteros e teñen 50 pixels de lonxitude.
      4-5 Artist Assessment 1_instruction: |
        Avaliación: Use un bucle para debuxar o triángulo
        equilátero. Cada lado ten 300 pixels.
      4-5 Artist For Loops 1_instruction: |
        Coloque os números de 1 a 10 nos
        bloques de longo e execute o código.
      4-5 Artist For Loops 11_instruction: |
        Complete o bloque "para" para que
        conte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: |
        O que acontece se vostede invertise os números que están en "de"
        e "até"? Complete o bloque "para" de forma que conte 200, 180,
        160, 140, 120...0.
      4-5 Artist For Loops 13_instruction: |
        Este debuxo foi iniciado sen un bucle "para"
        e está usando moitos bloques! Use un bloque "para" e complete a espiral. Pista:
        a última liña ten 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Alguén comezou o código, pero entón percebeu que
        debe haber unha forma máis rápida! Use un bloque "para" para substituír os bloques e
        complete a espiral triangular. (Pista: a última liña ten 300 pixels).
      4-5 Artist For Loops 15_instruction: |
        Alguén comezou o código, pero entón percebeu que
        debe haber unha forma máis rápida! Use un bloque "para" para substituír os bloques e
        complete a espiral hexagonal. (Pista: a última liña ten 200 pixels).
      4-5 Artist For Loops 3_instruction: |
        Como podemos contar de 1 até 50? Edite o
        bloque "para".
      4-5 Artist For Loops 4_instruction: |
        Complete o bloque "para" para que
        conte de 1 até 10, de 1 en 1.
      4-5 Artist For Loops 6_instruction: |
        Debuxe cadrados con lados de 50, 60, 70,
        80 e 90 pixels. Vostede vai precisar usar a función "debuxe un cadrado" cinco
        veces.
      4-5 Artist For Loops 7_instruction: |
        Debuxe os mesmos cadrados, pero use un bloque "conte
        con" para alterar os tamaños. Coloque o bloque "contador" na función "debuxe
        un cadrado". Pista: está na categoria Variábeis.
      4-5 Artist For Loops 8_instruction: |
        Vostede pode completar o programa colocando
        os bloques dentro de un bloque "para" que conta de 10 até 200, de 10 en 10? Vostede pode
        atopar o bloque "para" na categoria Bucles.
      4-5 Artist For Loops 9_instruction: |
        Estes círculos son de tamaños 5, 10, 15, 20,
        25, 30 e 35. Debuxe os círculos usando un bloque "para".
      4-5 Artist Free Draw 1_instruction: |
        Debuxo libre! Debuxe o que vostede estea inspirado
        a crear.
      4-5 Artist Functions 1_instruction: Use un bucle repita para debuxar este triángulo.
      4-5 Artist Functions 10a_instruction: |
        Coloque este código na función "debuxe unha folerpa de neve"
        e substitúa o 50 polo parámetro "tamaño". A función xa é
        chamada para crear unha folerpa de neve que ten 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use a función "debuxe unha folerpa de neve"
        para crear folerpas de tamaños diferentes. Pista: a primeira folerpa de neve ten 25 de lonxitude
        e cada folerpa de neve ten dúas veces o tamaño da folerpa anterior.
      4-5 Artist Functions 11_instruction: |
        Esta función "debuxe un hexágono" usa
        a función "debuxe un triángulo". Complete a función do hexágono. (Pista: un
        hexágono ten 6 lados, cada un con 100 pixels de lonxitude)
      4-5 Artist Functions 12_instruction: |
        Complete a función "debuxe ondas". Cada
        onda é feita dunha onda superior e unha onda inferior. Pista: debuxe 5 ondas
        azuis.
      4-5 Artist Functions 13 Free play_instruction: |
        Temos aquí algunhas funcións para
        debuxar planetas, estrelas, foguetes e robots. Úseas da forma que queira para crear
        imaxes que vostede pode compartir cos seus amigos.
      4-5 Artist Functions 14 Free play_instruction: |
        Aquí, fornecemos
        varias funcións para vostede. Úseas da forma que queira dentro de un ou máis bucles
        para crear imaxes que vostede pode compartir cos seus amigos. Clique en "Executar" para ver
        un exemplo.
      4-5 Artist Functions 15 Assessment_instruction: |
        Avaliación: use a función "debuxe
        un cadrado" para crear os cadrados. Os cadrados teñen 50, 100 e 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Agora coloque estes bloques nunha nova función
        chamada "debuxe un triángulo pequeno" e chámea.
      4-5 Artist Functions 2b_instruction: |
        Agora cree unha función chamada "debuxe un
        triángulo pequeno" usando os bloques fornecidos.
      4-5 Artist Functions 3_instruction: |
        Agora cree as funcións "debuxe un triángulo
        médio" e "debuxe un triángulo grande". A función "debuxe un triángulo pequeno"
        está preparada para vostede. Os triángulos teñen lonxitudes de 50 (pequeno), 100 (medio)
        e 150 (grande).
      4-5 Artist Functions 4_instruction: |
        Esa nova función "debuxe un triángulo"
        ten un parámetro e pode facer o traballo das tres funcións de antes. Debuxe os
        mesmos triángulos usando esa nova función.
      4-5 Artist Functions 5_instruction: |
        Vostede pode transformar a función "debuxe un triángulo"
        nunha función "debuxe un cadrado" para alterar o debuxo?
      4-5 Artist Functions 6_instruction: |
        Use as funcións "debuxe un cadrado" e "debuxe un
        triángulo" para debuxar unha casa. (Pista: os lados do cadrado teñen 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use as funcións debuxe un cadrado e debuxe un triángulo
        xunto con outros bloques para crear unha casa, agregándoas á función "debuxe unha casa"
        e chamándoa.
      4-5 Artist Functions 7_instruction: |
        Use a función "debuxe unha casa" para debuxar
        casas de 100 pixels e 50 pixels. As dúas casas están separadas por
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        A función "debuxe unha flor" ten un parámetro
        que permite que vostede defina a altura do tronco. Defina a altura como 200 e vexa o que acontece.
      4-5 Artist Functions 9_instruction: |
        Debuxe esas 3 flores. A altura da primeira
        é 100 e a próxima flor sempre ten 50 pixels de altura a máis que
        a anterior. As flores tamén están separadas por 100 pixels.
      4-5 Artist Patterns 1_instruction: |
        Vostede pode debuxar este cadrado usando un bucle?
        Cada lado ten 20 pixels de lonxitude.
      4-5 Artist Patterns 10_instruction: |
        O código debuxa dúas fileiras de hexágonos -
        repita todo o código 4 veces para debuxar a colmea enteira. Pista: vostede vai precisar
        recuar 120 pixels no bucle máis externo para garantir que o artista non
        debuxe fora da pantalla.
      4-5 Artist Patterns 11_instruction: |
        Cantas veces vostede precisa repetir isto
        para debuxar un semicírculo? Pista: se hai 360 graos nun círculo e cada
        repetición move 3 graos, cantas veces vostede precisaria repetir para debuxar un círculo completo?
      4-5 Artist Patterns 12_instruction: |
        Se vostede copiase este bucle e virase para a esquerda ao revés
        da dereita, o que acontece? Vostede pode repetir isto para debuxar esa onda?
      4-5 Artist Patterns 13_instruction: |
        Agora imos repetir todo catro
        veces para crear a moldura desta imaxe. Preste atención aos recantos - vostede non pode
        simplemente virar 90 graos! Se repetise unha acción de virar 3 graos 60 veces fai un semicírculo,
        cal deses bloques de código vai facer un cuarto de círculo para os recantos?
      4-5 Artist Patterns 2_instruction: |
        Se vostede colocase o seu bucle do cadrado dentro
        de outro bucle, chamámoslle bucle aniñado. O que vostede precisa agregar ao seu bucle externo
        para garantir que todos os 15 cadrados fiquen aliñados?
      4-5 Artist Patterns 3_instruction: |
        Agora, imos nos profundizar máis un nivel!
        Aniñamos todo o bloque de código dentro de outro bucle, pero vostede precisa posicionar o
        artista no lugar para debuxar a próxima recta. Cal destes bloques de código vostede
        pode colocar no final do bucle máis externo para debuxar toda a reixa?
      4-5 Artist Patterns 4_instruction: |
        Este diamante ten lados de 50 pixels e ángulos
        de 120 e 60 graos. Use un bucle para debuxalo.
      4-5 Artist Patterns 5.5_instruction: |
        Cantas veces precisa repetir
        este bloque para debuxar toda a reixa de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Imos repetir iso para facer unha fileira de 6 diamantes.
        Perciba que alteramos o noso código do diamante para repetir 3 veces ao revés de 2 - por que
        vostede acha que fixemos isto?
      4-5 Artist Patterns 6_instruction: |
        Cantas veces vostede precisa repetir este
        bloque para debuxar toda a grade de diamantes?
      4-5 Artist Patterns 7_instruction: |
        Imos modificar o código do último desafío
        para facer este padrón máis complexo. Perciba como os diamantes se sobrepoñen agora. Tente
        alterar o primeiro "puxe para trás" de 100 para 50 (metade da distancia) - agora, canto de
        lonxe o artista debe ir no segundo "puxe para trás"?
      4-5 Artist Patterns 8_instruction: |
        Use un bucle para debuxar este hexágono con
        lados de 40 pixels e ángulos de 60 graos.
      4-5 Artist Patterns 9.5_instruction: |
        Imos repetir este código para debuxar dúas fileiras
        de hexágonos. Perciba como a nosa segunda fileira está descolocada para a dereita.
      4-5 Artist Patterns 9_instruction: |
        Agora, repita o código 3 veces para debuxar a
        a liña enteira. Pista: cada hexágono ten 80 pixels de longo da extrema esquerda
        á extrema dereita.
      4-5 Artist Patterns Free Play_instruction: |
        Actividade libre - probe crear
        o seu propio padrón!
      4-5 Bee Conditionals - FC Test_instruction: |
        Agora, a abella só quere néctar.
        Non todos os obxectos son flores, entón olle embaixo de TODAS AS NUBES para ver se
        está escondendo unha flor. Se estivese, entón vostede pode recoller o néctar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |
        A abella non sabe se iso é unha flor ou
        unha colmea. Recolla néctar só das flores, pero primeiro verifique se o obxecto é
        unha flor ou unha colmea.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |
        Agora a abella só quere néctar. Lémbrese,
        non todos os obxectos son flores, entón vexa se o obxecto abaixo da nube é
        unha flor. Se fose, entón vostede pode recoller o néctar.
      4-5 Bee Conditionals 3_instruction: |
        Agora a abella só quere producir mel.
        Faga a verificación para producir mel só nas colmeas.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: |
        O obxecto descoñecido pode ser unha flor
        ou unha colmea. Use o bloque se-senón para recoller néctar se fose unha flor,
        senón para producir mel (porque é, entón, unha colmea).
      4-5 Bee Conditionals 5_instruction: |
        Debe haber unha flor ou unha colmea
        baixo esas nubes. Use o bloque se-senón para recoller néctar se houbese
        unha flor, senón para producir mel (porque hai, entón, unha colmea).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |
        Esa flor morada pode ter 1,
        2 ou 3 néctares. Aquí un bloque se-senón está combinado con outro bloque se-senón
        para crear un bloque se, senón-se, senón. Complete a solución para recoller a
        cantidade descoñecida de néctar.
      4-5 Bee Conditionals 7_instruction: |
        Lémbrese de que as flores moradas poden ter
        1, 2 ou 3 néctares. Complete a función "verifique a flor morada" e úsea
        para recoller todo o néctar das flores.
      4-5 Bee Conditionals 8_instruction: |
        Escriba dentro da función "verifique flor e
        produza mel". A súa función debe verificar se a flor morada ten 3, 2 ou
        1 néctar e recoller todo o néctar. Daquela, siga de fronte e produza mel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Avaliación: este código está errado.
        Complete a función "recolla néctar ou produza mel" e daquela chámea para recoller
        todo o néctar e producir o mel. Lémbrese, as flores moradas poden ter 1, 2 ou 3 néctares.
      4-5 Bee Debugging 1_instruction: |
        Estes bloques están me incomodando. Vostede pode
        correxilos?
      4-5 Bee Debugging 10_instruction: Atope os erros e corríxaos.
      4-5 Bee Debugging 11_instruction: Isto conta correctamente?
      4-5 Bee Debugging 2_instruction: Axude a abella a recoller o néctar e fabricar
        o mel.
      4-5 Bee Debugging 3_instruction: Atope os erros e corríxaos.
      4-5 Bee Debugging 4_instruction: Estes bloques non funcionan. Cal é o padrón?
      4-5 Bee Debugging 5_instruction: Algo non está certo aquí...
      4-5 Bee Debugging 6_instruction: |
        A flor morada ten unha cantidade descoñecida de
        néctar. Corrixa os bloques para recoller todo o néctar da flor.
      4-5 Bee Debugging 7_instruction: Está faltando algunha cousa na función...
      4-5 Bee Debugging 8_instruction: |
        Esa función está certa, pero non é usada
        correctamente.
      4-5 Bee Debugging 9_instruction: Por que a abella non está produzindo mel suficiente?
      4-5 Bee Debugging Assessment 1_instruction: 'Avaliación: corrixa o código.'
      4-5 Bee Nested Loops 1_instruction: Use un bucle para recoller todo o néctar.
      4-5 Bee Nested Loops 2_instruction: |
        Recolla todo o néctar de cada flor.
        Use un bucle aniñado.
      4-5 Bee Nested Loops 3_instruction: |
        Recolla todo o néctar colocando o
        código inicial dentro dun bucle aniñado.
      4-5 Bee Nested Loops 4_instruction: |
        Recolla todo o néctar de cada flor
        e produza mel en cada colmea. Use un bucle aniñado.
      4-5 Bee Nested Loops 5_instruction: |
        Recolla todo o néctar creando
        un bucle aniñado.
      4-5 Bee Nested Loops 6_instruction: Recolla todo o néctar.
      4-5 Bee Nested Loops 7_instruction: |
        Coloque este bucle dentro de outro bucle para crear
        un bucle aniñado e recoller todo o néctar das flores.
      4-5 Bee Nested Loops 8_instruction: |
        Recolla todo o néctar desas flores
        aniñando un bucle mentres. Substitúa o bloque interno repita veces por un bloque
        mentres.
      4-5 Bee Nested Loops 9_instruction: |
        Recolla todo o néctar desas flores
        aniñando un bucle mentres dentro dun bloque repita.
      4-5 Bee Nested Loops Assessment 1_instruction: |
        Avaliación- recolla todo o
        néctar e produza todo o mel usando bucles.
      4-5 Bee Nested Loops Rows_instruction: |
        Recolla o néctar das fileiras de flores!
        Use un bucle aniñado.
      4-5 Maze 1 (copy 1)_instruction: |
        Querida persoa. Min zumbi. Precisa... chegar...
        xirasol.
      4-5 Maze 1_instruction: Querida persoa. Min zumbi. Debe... chegar... xirasol.
      4-5 Maze 10_instruction: Vostede pode chegar até o xirasol usando só catro bloques?
      4-5 Maze 11_instruction: Vostede pode chegar até o xirasol usando só seis bloques?
      4-5 Maze 12_instruction: |
        Ok, iso é un pouco diferente. Vostede pode facer iso em
        só seis bloques?
      4-5 Maze 13_instruction: Léveme até o porco!
      4-5 Maze 14_instruction: Léveme até o porco! Use o bloque repita até.
      4-5 Maze 2 (copy 1)_instruction: |
        Leve o zumbi até o xirasol, pero desvíe
        da carnívora!
      4-5 Maze 2_instruction: Leve o zumbi até o xirasol, pero desvíe da carnívora!
      4-5 Maze 3 (copy 1)_instruction: Precisa... chegar... xirasol.
      4-5 Maze 3_instruction: Precisa... chegar... xirasol.
      4-5 Maze 4 (copy 1)_instruction: Probe o bloque "repita" para usar menos bloques...
      4-5 Maze 4_instruction: Probe o bloque "repita" para usar menos bloques...
      4-5 Maze 5 (copy 1)_instruction: |
        Vostede pode resolver este desafío usando o menor
        número posíbel de bloques?
      4-5 Maze 5_instruction: |
        Vostede pode resolver este desafío usando o menor número
        posíbel de bloques?
      4-5 Maze 6 (copy 1)_instruction: |
        Vostede pode resolver este desafío usando o menor
        número posíbel de bloques?
      4-5 Maze 6_instruction: |
        Vostede pode resolver este desafío usando o menor número
        posíbel de bloques?
      4-5 Maze 7_instruction: Querida persoa. Min zumbi. Debe... chegar... xirasol.
      4-5 Maze 8_instruction: |
        Use o bloque "repita" para levar o zumbi até o
        xirasol. (Desvíe das carnívoras!)
      4-5 Maze 9_instruction: Cree un bucle co bloque "repita até".
      4-5 Maze Assessment 1_instruction: 'Avaliación: chegue até o xirasol.'
      4-5 Maze Conditionals 1_instruction: |
        Use o bloque repita até para levar o
        zumbi até o xirasol.
      4-5 Maze Conditionals 10_instruction: |
        Vostede pode agregar só 3 bloques para me axudar
        a resolver un labirinto máis complexo? Se vostede fizer iso correctamente, eu poderei andar por calquera camiño cheo de curvas,
        non importa a lonxitude.
      4-5 Maze Conditionals 2_instruction: |
        Use o bloque repita até para levar o
        zumbi até o xirasol.
      4-5 Maze Conditionals 3_instruction: |
        Use o bloque "se" para me deixar decidir
        cando virar. Pista: vostede precisa de somente máis un bloque, pero aprenda como o configuramos
        para que vostede poida facer iso soíño na próxima vez.
      4-5 Maze Conditionals 4_instruction: |
        Ok, este desafío é como o último,
        pero vostede precisa se lembrar de como usou o bloque "se" e o bloque "repita"
        xuntos.
      4-5 Maze Conditionals 5_instruction: |
        Min querer xirasol! Use un bloque "se"
        para que eu chegue alá co menor número de bloques posíbel.
      4-5 Maze Conditionals 6_instruction: |
        Min querer xirasol! Use un bloque "se"
        para que eu chegue alá co menor número de bloques posíbel.
      4-5 Maze Conditionals 7_instruction: |
        Ok, imos praticar máis unha vez
        - esa parte non é moito diferente, pero fique de ollo nas carnívoras!
      4-5 Maze Conditionals 8_instruction: |
        O bloque "se-senón" verifica unha condición
        e, de seguida, fai unha cousa OU outra. Para me levar ao xirasol, tente
        usar este novo bloque.
      4-5 Maze Conditionals 9_instruction: |
        Imos praticar o uso do bloque "se-senón" máis uma
        vez, vostede consegue facer correctamente na primeira tentativa?
      4-5 Maze Conditionals Assessment 1_instruction: |
        Use um bloque "repita até" e
        um bloque "se-senão" para me levar até o xirasol no menor número de bloques possível.
      4-5 Nested Loops 1_instruction: |
        Complete o código para debuxar estes triángulos. O
        primeiro está preparado para vostede. Pista: 3 triángulos nunha rotación de 360 graos.
      4-5 Nested Loops 10_instruction: |
        Debuxe a última liña de estrelas nesta bandeira
        repetindo os bloques fornecidos. As estrelas están separadas por 50 pixels, pero lémbrese
        que elas teñen 30 pixels de longo.
      4-5 Nested Loops 11_instruction: |
        Vostede pode debuxar estes 10 cadrados desa
        calzada usando un bucle aniñado? Cada cadrado ten 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Vostede pode debuxar estes 36 triángulos usando
        un bucle aniñado?
      4-5 Nested Loops 2_instruction: |
        Agora, aniñe este bucle dentro de outro bucle para debuxar
        10 triángulos. Isto se chama bucle aniñado. Pista: todos os 10 triángulos completan
        unha rotación de 360 graos.
      4-5 Nested Loops 3_instruction: "Cree un sol aniñando o código inicial\ndentro
        de outro bucle. Chamamos iso de bucle aniñado.\r\n"
      4-5 Nested Loops 5_instruction: Repita o código dado para crear un muiño de
        vento.
      4-5 Nested Loops 6_instruction: |
        Vostede pode debuxar un hexágono repetindo o
        código do triángulo?
      4-5 Nested Loops 7_instruction: |
        Repita este debuxo 10 veces. Canto
        vostede precisa virar a cada repetición? (Pista: canto é 360 dividido por 10?)
      4-5 Nested Loops 8_instruction: |
        Repita este debuxo 6 veces. Canto
        precisa virar a cada repetición? (Pista: canto é 360 dividido por 6?)
      4-5 Nested Loops 9_instruction: Debuxe o dente na boca do crocodilo!
      4-5 Nested Loops Assessment 1_instruction: |
        Use um bucle aninhado para completar
        o design.
      4-5 While Loops 1_instruction: |
        Móvame para o buraco e cúbrao con
        dúas pás de terra, usando o bloque "cubra".
      4-5 While Loops 2_instruction: |
        Móvame para o monte de terra e remóvao
        con 5 pás de terra, usando o bloque "remova".
      4-5 While Loops 3_instruction: |
        Móvame para o monte e remova toda a
        terra, entón móvame para o buraco e cúbrao completamente. Pista: use o menor número de
        bloques posíbel.
      4-5 While Loops 4_instruction: |
        Uau, eu encontrei un buraco realmente fondo! Eu non
        sei cantas pás de terra son necesarias. Vostede pode escribir un programa que o cubra
        até que o solo fique nivelado? Pista: desta vez, tente usar o bucle mentres.
      4-5 While Loops 5_instruction: |
        Uau, agora hai dous buracos profundos! Vostede
        pode escribir un programa que os cubra até que solo fique nivelado?
      4-5 While Loops 6_instruction: |
        Uau, agora hai un grande monte de terra!
        Vostede pode escribir un programa que remova a terra até que o solo fique nivelado?
      4-5 While Loops 7_instruction: |
        Uau, agora hai tres grandes montes de terra!
        Vostede pode escribir un programa que remova cada un deles até que o solo fique nivelado?
      4-5 While Loops 8_instruction: |2
         Hai un buraco realmente fondo e un monte de terra
        realmente grande. Cantas pás de terra son necesarias para
        facer o solo plano? Pista: use o bucle mentres para ambos.
      4-5 While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: 'Backed by a template #1'
      allthethings_template_backed2_instruction: 'Backed by a template #2'
      App Lab test_instruction: test
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: |
        Use um bucle aninhado para completar
        o design.
      Auto Open Function Editor_instruction: |
        Pode chamar a funcións dentro
        de outras funcións! Usando a súa función "forma" como base, cree 3 formas
        de casa, cada unha 20 pixels maior que a anterior, comezando cunha lonxitude de 50 pixels. Usar
        un bucle con contador pode ser útil.
      Bee Recommended Blocks test_instruction: |
        As flores moradas poden ter 1
        ou 0 néctar, pero vostede non sabe cales delas teñen! Tome coidado para non recoller néctar
        dunha flor morada cando non ten néctar algún. Verifique se o néctar é igual
        a 1 usando o bloque se.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: |
        Esta abella ten moito traballo a facer! Vostede notou algún
        padrón que poida usar para simplificar o seu código?
      Busy Bee_instruction: |
        Esta abella ten moito traballo a facer! Vostede notou algún
        padrón que poida usar para simplificar o seu código?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Vostede pode me levar até o porco usando
        5 bloques?
      Course 4 2_instruction: |
        Agora a abella só quere néctar. Lémbrese, non
        todos os obxectos son flores, entón faga a verificación para recoller néctar só das flores.
      Course 4 Artist 1_instruction: |
        Axúdeme a debuxar unha caixa. (Cada liña ten
        200 pixels de lonxitude)
      Course 4 Artist 10_instruction: "Clique aquí para ver as indicacións novamente!\r\n\r\nPresentamos\naquí
        un código para unha forma interesante. O que acontece cando o repete varias\nveces,
        virando a cada iteracción? Observe que as viradas nesta forma\nsuman 420 graos,
        o que significa que cando o seu artista termine de debuxar,\n estará apuntando
        para unha dirección diferente a cando comezou. Esa nova direción\né exactamente
        60 graos á dereita de onde vostede iniciou."
      Course 4 Artist 11_instruction: |
        Agora un desafío!  Temos aquí un debuxo que
        usa só bloques que xa foron mostrados. Vostede consegue descobrir como
        recrealo? Fique á vontade para usar tentativa e erro. Non esperamos que
        sexa perfecto na primeira vez. Quere ver máis indicacións? Clique aquí!
      Course 4 Artist 12_instruction: "Quere ver o debuxo de inspiración ou as\nIndicacións?
        Clique aquí!\r\n\r\nNo caso contrario, cree un debuxo vostede mesmo!"
      Course 4 Artist 13_instruction: |
        Aínda xogando?  Temos aquí unha pantalla en branco
        na cal vostede pode proxectar o que queira!
      Course 4 Artist 2_instruction: |
        Consegue repetir este código para debuxar
        o cadrado en cinza?
      Course 4 Artist 20_instruction: |
        Aínda a xogar?  Temos aquí unha pantalla en branco na cal
        vostede pode crear o que queira!
      Course 4 Artist 3_instruction: |
        Tente descobrir o que acontece se vostede executar
        este código (ou clique en "Executar" para ver). En seguida, execúteo varias veces para completar
        o debuxo.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Debuxe a outra metade deste debuxo para que
        fique simétrico. Os triángulos son equiláteros e teñen 50 pixels de lonxitude. Pista:
        talvez precise executar o código varias veces para descobrir que bloques
        precisan ser engadidos.
      Course 4 Artist 6_instruction: |
        Complete o código para debuxar estes triángulos.
        Pista: hai 3 triángulos nunha rotación de 360 graos... cantas veces o número
        3 cabe en 360?
      Course 4 Artist 7_instruction: |
        Agora, aniñe este bucle dentro de outro bucle para debuxar
        10 triángulos. Isto se chama bucle aniñado. Pista: todos os 10 triángulos completan
        unha rotación de 360 graos.
      Course 4 Artist 8_instruction: |
        Debuxe este sol repetindo todo este bloque de código
        varias veces.
      Course 4 Artist 8a_instruction: "Lémbrase desta forma? Agora imos deixar\nvostede
        construíla sen dar ningún bloque inicial!\r\nPista: hai\n3 triángulos dentro
        da rotación de 360 graos... cantas veces 3 cabe en\n360?"
      Course 4 Artist 9_instruction: |
        Repita este debuxo 10 veces e certifiquese de virar
        a cada figura debuxada. Unha indicación sobre canto
        precisa virar: canto é 360 dividido por 10?
      Course 4 Artist Binary 1_instruction: "Temos aquí unha función que recibe unha
        string\nbinaria de 1's e 0's e instrúe o artista a moverse da esquerda para\na
        dereita, de enriba para baixo. O artista vai cubrir os cadrados nos cales
        vir un 1 e ignorar\nos que tivesen un 0.\r\n\r\nExecute este código para ver
        como\no artista usa números binarios para debuxar este padrón."
      Course 4 Artist Binary 1a_instruction: "Temos aquí unha función que recibe unha
        string\nbinaria de 1's e 0's e instrúe o artista a moverse da esquerda para\na
        dereita, de enriba para baixo. O artista vai cubrir os cadrados nos cales
        vir un 1 e ignorar\nos que tivesen un 0.\r\n\r\nExecute este código para ver
        como\no artista usa números binarios para debuxar este padrón."
      Course 4 Artist Binary 2_instruction: |
        Cal destas strings binarias podería
        repetir 8 veces para debuxar esta imaxe?
      Course 4 Artist Binary 3_instruction: |
        Consegue debuxar este padrón usando
        a repetición dunha string binaria de 3 díxitos?
      Course 4 Artist Binary 4_instruction: |
        Cada string binaria representa unha liña desta
        imaxe. Vostede consegue reorganizalas de forma que debuxen un rostriño feliz
        ao revés dun rostriño triste?
      Course 4 Artist Binary 5_instruction: |
        Que string binaria de 6 díxitos, repetida
        11 veces, vai debuxar esa imaxe?
      Course 4 Artist Binary 6_instruction: |
        Cal é a menor string binaria que vostede
        pode repetir para debuxar esta imaxe?
      Course 4 Artist Binary 7_instruction: Termine o debuxo.
      Course 4 Artist Binary Free Play 2_instruction: |
        Actividade libre: aquí temos unha pantalla en branco
        para debuxar. Divírtase!
      Course 4 Artist Binary Free Play 2a_instruction: "Temos aquí unha pantalla de
        maior\nresolución para debuxar - 16 pixels por 16 pixels!\r\n\r\nVostede viu
        o que acontece cando\ncomezamos ser creativos cos bits?"
      Course 4 Artist Binary Free Play 2b_instruction: Clique aquí para ver algunhas
        indicacións.
      Course 4 Artist Binary Free Play_instruction: |
        Actividade libre: debuxe o que queira
        con números binarios!
      Course 4 Artist Binary pre1_instruction: "Binario é unha forma de representar
        informaccións\nusando só dúas opcións. Aquí imos usar as opcións \"desligado\"
        (representada\npolo número 0) e \"ligado\" (representada polo número 1).  \r\n\r\nFoi
        fornecida\nunha reixa de \"pixels\" pola cal pode andar e crear\ndebuxos virando
        en certos cadrados. Consegue facer o artista debuxar\n\"01010101\" en binario
        na primeira fileira?"
      Course 4 Artist Binary ryan_instruction: "Binario é unha forma de representar
        informaccións\nusando só dúas opcións. Aquí imos usar as opcións \"desligado\"
        (representada\npolo número 0) e \"ligado\" (representada polo número 1).  \r\n\r\nFoi
        fornecida\nunha reixa de \"pixels\" pola cal pode andar e crear\ndebuxos virando
        en certos cadrados. Consegue facer o artista debuxar\n\"01010101\" en binario
        na primeira fileira?"
      Course 4 Artist For  Functions 10_instruction: |
        Imos acelerar un pouco,
        consegue debuxar unha forma de estrela usando a función "debuxe unha liña de cadrados"?
        Boa sorte!
      Course 4 Artist For  Functions 11_instruction: |
        Imos acelerar un pouco,
        consegue debuxar unha forma de estrela usando a función "debuxe unha liña de cadrados"?
        Boa sorte!
      Course 4 Artist For Loops 1_instruction: |
        Debuxe este triángulo que ten 50 pixels.
        Pista: use un bloque repita.
      Course 4 Artist For Loops 10_instruction: |
        Actividade libre! Divirtase debuxando
        o que queira cos bloques que vostede aprendeu a usar
      Course 4 Artist For Loops 11_instruction: |
        Lémbrase de cando usamos
        unha variábel para controlar o número de lados dunha forma nunha fase anterior? Faremos
        a mesma cousa agora coa variábel "contador". Este padrón
        comeza cun triángulo e engade un lado de cada vez até que se debuxe un decágono
        (10 lados). Cada lado debe ter 100 pixels de lonxitude. Pista: 360 dividido polo
        número de lados que unha forma posúe é o número de graos que vostede precisará xirar.
      Course 4 Artist For Loops 11a_instruction: "Imos xuntar tudo!  Usando\no seu
        coñecimento en \"bucles para\" e o \"contador\", cree este debuxo no cal\ncada
        forma ten dous lados máis que a anterior. Lémbrese de que cada lado é\n10
        veces maior que o número de lados do polígono.\r\n\r\nUnha pequena parte\ndo
        código foi fornecida para vostede."
      Course 4 Artist For Loops 12_instruction: |
        Iso foi moi ben, pero agora
        eu gostaría de debuxar unha forma ao lado da outra. Desta vez, cada lado ten
        20 pixels. Use un bloque puxe para avanzar 40 pixels despois de cada forma.
      Course 4 Artist For Loops 13_instruction: |
        Hmm, esas formas están ficando cada vez
        maiores! Non tíñamos resolvido xa este problema con variábeis? Como
        podemos usar a variábel contador para deixar os lados menores conforme a forma que ten
        máis lados? Ao revés de avanzar por unha cantidade definida, avance (100 /
        contador) pixels.
      Course 4 Artist For Loops 14_instruction: |
        Se vostede virase un pouco máis ou
        un pouco menos do que normalmente faría para unha forma, vostede conseguirá un efecto estupendo. Tente
        usar algún código do último nivel, pero virando 89 graos para crear
        esa espiral cadrada retorcida.
      Course 4 Artist For Loops 15_instruction: |
        Actividade libre: tente facer algúns debuxos
        usando bucles para. Engadimos algunhas variábeis xenéricas para que vostede
        as use tamén.
      Course 4 Artist For Loops 2_instruction: |
        Eu coloquei o código para debuxar
        un triángulo dentro dun bucle que conta de 50 até 100, de 10 en 10. NOTA: Non deixe de ver
        o código antes de clicar en "Executar".
      Course 4 Artist For Loops 3_instruction: |
        Use o desafío anterior como referencia
        para facer este desafío. O menor triángulo ten lados de 20 pixels,
        o maior ten lados de 200 pixels, e cada triángulo é 20 pixels maior que o anterior.
      Course 4 Artist For Loops 4_instruction: |
        Use un bucle "para" para debuxar estes cadrados.
        Eles comezan con 15 pixels de lonxitude, o maior ten 300 pixels de lonxitude, e cada cadrado
        é 15 pixels maior que o anterior. Foi fornecida a maior parte do código
        que vai precisar - falta un bloque, cal?
      Course 4 Artist For Loops 5_instruction: |
        Vostede fez un bon traballo no último desafío!
        Imos usar o bloque da variábel "contador" máis unha vez para debuxar esta imaxe.
      Course 4 Artist For Loops 6_instruction: |
        Actividade libre: tente usar un bucle "para"
        para debuxar un padrón crecente de formas co seu propio debuxo.
      Course 4 Artist For Loops 6a_instruction: |
        Faga tres pequenas alteracións no
        código do último nivel para conseguir isto!
      Course 4 Artist For Loops 7_instruction: |
        O que acontece se vostede removese "Repita 3"
        deste algoritmo, mantendo os bloques "mova" e "vire" no bucle
        para? Neste triángulo espiralado, cada lado é 20 pixels máis longo que o anterior.
      Course 4 Artist For Loops 8_instruction: "Unha pequena alteración no código\nda
        última imaxe pode crear este debuxo. Vostede consegue descobrir cal é\nesta
        alteración?\r\n\r\nPista: algo precisa ser removido!"
      Course 4 Artist For Loops 8a_instruction: |
        Só unha pequena alteración no código
        da última imaxe pode crear esta imaxe. Consegue descobrir cal é esa
        alteración?
      Course 4 Artist For Loops 9_instruction: |
        Consegue facer unha espiral? Avance
        de 1 a 75 pixels, aumentando 1 pixel de cada vez.
      Course 4 Artist For Loops Challenge_instruction: "Consegue descobrir como\nusar
        todas as cousas que aprendeu para crear esta imaxe?\r\n\r\nPrecisa de unha\nindicación?
        Clique aquí."
      Course 4 Artist For Loops inspire_instruction: "Actividade libre - Inspiracción:
        agora \naprendeu todo o que precisa saber para crear un padrón como este!
        Se esa\nimaxe o anime, tente facer algo similar. Caso contrario, cree algo\nvostede
        mesmo.\r\n\r\nPrecisa dunha indicación? Clique aquí."
      Course 4 Artist Functions 1_instruction: |
        Vostede consegue debuxar un cadrado con 100
        pixels de lonxitude usando un bucle?
      Course 4 Artist Functions 10_instruction: |
        Que bloque precisa agregar para
        que o triángulo fique enriba do cadrado?
      Course 4 Artist Functions 11_instruction: |
        Vexa este código para debuxar un
        cubo - consegue movelo para dentro dunha función chamada "debuxe un cubo"?
      Course 4 Artist Functions 12.1_instruction: |
        Imos crear unha función chamada
        "debuxe un octógono 20" que debuxa un octógono no cal cada lado ten 20 pixels
        de lonxitude.
      Course 4 Artist Functions 12_instruction: Repita a función cadrado para debuxar
        unha recta
      Course 4 Artist Functions 13.1_instruction: "Agora, imos crear unha función
        chamada\n\"puxe para a parte superior dereita\" que move o artista para a
        parte superior dereita do octógono\nque vostede acabou de debuxar para terminarmos
        este padrón.\r\n\r\nPista: para ir para o\nrecanto superior dereito, tente
        usar un padrón que fai só 3/8 do\noctógono."
      Course 4 Artist Functions 13_instruction: |
        Compare a nosa nova función
        "debuxe unha liña de cadrados". Fique á vontade para ollar dentro do bloque da función
        e ver como a construímos. Clique en "Executar" cando estivese preparado para o
        próximo desafío.
      Course 4 Artist Functions 14.1_instruction: |
        Agora, imos crear unha función chamada
        "puxe para a parte superior dereita" que move o artista para a parte superior dereita do octógono
        que vostede acabou de debuxar, así podemos terminar este padrón.
      Course 4 Artist Functions 14_instruction: |
        Excelente! Imos usar
        a súa nova función "debuxe unha liña de cadrados" para debuxar unha forma de cadrado. Lémbrese,
        cada cadrado ten 40 pixels de lonxitude.
      Course 4 Artist Functions 15_instruction: 'Imos acelerar un pouco, consegue
        debuxar unha forma de estrela usando a función "debuxe unha liña de cadrados"?
        Boa sorte! Pista: vostede terá de virar 144 graos'
      Course 4 Artist Functions 2_instruction: |
        Vostede consegue debuxar 3 cadrados con 20 pixels de distancia
        entre cada un? Pista: cada cadrado ten 100 pixels de tamaño
      Course 4 Artist Functions 3_instruction: "Usando o bloque de función \"debuxe
        un cadrado\",\nconsegue debuxar esta imaxe? Pista: os cadrados están a 120
        pixels de distancia un do outro.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Vostede está preparado para crear o seu propio
        "bloque de función"? Clique no bloque "Funcións" na caixa de ferramentas, noméeo
        como "debuxe un triángulo", e entón cree un triángulo como vostede fixo anteriormente
        cos bloques de acción e de bucles. Daquela, clique en salvar e fechar no recanto
        superior dereito. Pista: cree un triángulo que teña 100 pixels de lonxitude.
        Boa sorte!
      Course 4 Artist Functions 5 OLD_instruction: |
        Imos tentar usar as nosas dúas funcións
        para debuxar unha casa - o que precisa ser corregido neste código para debuxar a casa correctamente?
      Course 4 Artist Functions 5_instruction: "Usando o bloque de función \"debuxe
        un cadrado\",\nconsegue debuxar esta imaxe? Pista: os cadrados están a 120
        pixels de distancia un do outro.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Que bloque precisa agregar para
        que o triángulo fique enriba do cadrado?
      Course 4 Artist Functions 7_instruction: |
        Consegue debuxar unha liña de cadrados usando
        unha función Cadrado? Cada cadrado ten 40 pixels de lonxitude.
      Course 4 Artist Functions 8_instruction: |
        Vostede está collendo o xeito de como
        usar os bloques de función? Imos modificar este cadrado para que teña 200 pixels
        de tamaño. Pista: clique en "editar" para alterar o tamaño de "debuxe un cadrado"
        no editor da función. Lémbrese de clicar en "Salvar e Fechar" para saír do
        editor da función.
      Course 4 Artist Functions 9_instruction: |
        A maior parte do código para
        crear unha función foi dada a vostede. Con todo, parece que algo está a faltar. Consegue
        completar este bloque de función?
      Course 4 Artist Functions challenge_instruction: |
        Clique aquí para ver as indicacións
        novamente.
      Course 4 Artist Functions Inspiration_instruction: |
        Clique aquí para ver as indicacións
        novamente.
      Course 4 Artist Functions inspire_instruction: |
        Clique aquí para ver a figura
        de inspiración novamente.
      Course 4 Artist Inspire_instruction: "Quere ver o debuxo de inspiración ou as\nindicacións?
        Clique aquí!\r\n\r\nCaso contrario, cree un debuxo vostede mesmo!"
      Course 4 Artist Params 1_instruction: |
        Imos editar unha función que debuxa un
        cadrado con lados de 50 pixels
      Course 4 Artist Params 10_instruction: |
        Pode chamar a funcións dentro
        de outras funcións! Usando a súa función "forma" como base, cree 3 formas
        de casa, cada unha 20 pixels maior que a anterior, comezando cunha lonxitude de 50 pixels. Usar
        un bucle con contador pode ser útil.
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use a súa función "catavento" para debuxar
        cada unha desas formas. A lonxitude do lado de cada imaxe é 50.
      Course 4 Artist Params 13_instruction: |
        Actividade libre: aquí están as funcións que vostede escribiu
        e máis algunhas coas cales vostede pode xogar. Debuxe algunha cousa incríbel!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Incríbel! Vostede consegue debuxar cada un destes triángulos
        con esta nova función? O primeiro ten 25 pixels de lonxitude, o segundo
        ten 50 e o terceiro ten 75.
      Course 4 Artist Params 4_instruction: |
        Consegue agregar unha nova función chamada cadrado?
        Ela tambén debe recibir un parámetra lonxitude, como a función triángulo. Desta vez,
        debuxe 3 cadrados, de 25, 50, e 75 pixels de lonxitude, separados por 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Use as súas dúas novas funcións para debuxar
        esta imaxe. Para facilitar pode usar un bucle cun parámetro "contador".
      Course 4 Artist Params 6_instruction: |
        Imos editar esa función "debuxe unha forma".
        Xa ten un parámetro "lonxitude". Agora, imos editar a función para agregar tamén
        un parámetro "lados". Lémbrese de que o ángulo para virar para unha determinada forma é
        360 dividido polos lados que ela ten. Pista: o triángulo ten 100 pixels de lonxitude, o hexágono ten 25 pixels e o cadrado ten 50 pixels.
      Course 4 Artist Params 7_instruction: |
        Consegue debuxar esas formas, cubrindo
        o "???"? O cadrado e o triángulo teñen 100 pixels, mentres o hexágono
        ten 75 pixels.
      Course 4 Artist Params 8_instruction: |
        Vostede consegue descobrir como debuxar esta
        forma? Pista: cree unha nova función con 6 lados chamada hexágono.
      Course 4 Artist Params 9_instruction: |
        Lémbrase de cando usamos o bucle contador,
        pero removemos un bucle de dentro? Imos nos divertir un pouco e usar a función "debuxe unha
        forma" cos parámetros "lados" e "lonxitude". Vostede pode recrear
        esas formas? O contador do cadrado debe ser 5/100/5, o do triángulo debe ser
        10/100/10 e o do hexágono debe ser 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Aquí está o algoritmo para debuxar un triángulo.
        Modifíqueo para que use a variábel "lados". Substitúa o número 3
        pola variábel "lados". Pista: lémbrese de usar o bloque "defina os lados para".
      Course 4 Artist Vars 1_instruction: |
        Vostede pode me axudar a debuxar un triángulo equilátero?
        Debe ter exactamente 100 pixels de lonxitude en cada lado.
      Course 4 Artist Vars 10_instruction: |
        Aquí temos un algoritmo que debuxa un triángulo
        a partir de triángulos menores. Pode modificalo para que use a variábel "lados"
        para debuxar cada triángulo? Olle para o código e, toda vez que vostede
        vexa o número 3, substitúao pola variábel "lados". Lémbrese de usar
        o bloque "defina os lados".
      Course 4 Artist Vars 11_instruction: |
        Este é un código máis complicado cos mesmos conceptos que usamos
        no último desafío - cal debe ser o valor atribuído á variábel "lados"
        para debuxar esa imaxe de cadrados?
      Course 4 Artist Vars 12_instruction: |
        Imos definir a variábel "lados" como
        5. Cantos máis lados agregarmos a este algoritmo, maior será o
        padrón! Observe que existe unha nova variábel chamada "lonxitude". Agora podemos usala onde hai
        un bloque "avance". Para esa forma, defina a variábel "lonxitude" como 75.
      Course 4 Artist Vars 13_instruction: "Cando unha forma ten moitos lados, cada\nlado
        debe ser menor se vostede quere que todo o padrón caiba na pantalla.\n\r\nImos
        recrear o algoritmo para este padrón incríbel, mas, en vez de\ndefinir manualmente
        a variábel \"lonxitude\", imos usar un bloque de matemáticas coa\nvariábel
        \"lados\" dentro para nos certificar que cada forma encaixe correctamente.
        O\nperímetro de cada polígono é de 300 pixels.\r\nPrecisa de indicacións?
        Clique aquí."
      Course 4 Artist Vars 14_instruction: "Actividade libre: Vexa só! Agora o seu
        algoritmo\nestá aniñado dentro de máis un bucle. Probe alterar os valores
        das\nsúas dúas variábeis para debuxar padróns interesantes.\r\n\r\nPara conseguir
        máis efecto, probe a xogar coas\n cores! Use cores aleatórias dentro dos bucles
        para ver como isto muda o seu debuxo."
      Course 4 Artist Vars 2_instruction: |
        Ao revés de usar "avance por 150,"
        o bloque "mova" está referenciando agora unha variábel chamada "lonxitude." Consegue
        definir "lonxitude" como 150 para debuxar este novo triángulo?
      Course 4 Artist Vars 3_instruction: |
        Temos aquí un bucle que debuxa un cadrado, pero
        algo está faltando. Vostede pode correxilo para que use a variábel "lonxitude"
        para descobrir cal debe ser o tamaño de cada lado?
      Course 4 Artist Vars 4_instruction: |
        Agora eu quero facer un rectángulo que teña
        a altura dúas veces maior que o longo. Temos unha variábel chamada "longo" que
        debe ser definida como 100. Pode usar os bloques matemáticos para completar o código?
      Course 4 Artist Vars 5_instruction: |
        Use a variábel "lados" para controlar
        cantas veces este bucle é executado.
      Course 4 Artist Vars 6_instruction: "Temos aquí un código que pode debuxar calquera
        polígono\nregular. Hai unha nova variábel chamada lados que está definida
        como 4. Consegue usar\na variábel lados (xunto co bloque matemático) para
        virar a cantidade certa independentemente\nde cantos lados ten o polígono?\r\n\r\nClique
        aquí para voltar para\na indicación!"
      Course 4 Artist Vars 7_instruction: "Use o que vostede aprendeu no último desafío\npara
        crear este hexágono usando a variábel \"lados\".\r\n\r\nPercibe como pode\nalterar
        só un valor para debuxar un triángulo, un cadrado, un pentágono ou un octógono?"
      Course 4 Artist Vars 8_instruction: |
        Actividade libre: Xogue co número
        de lados desta forma. Consegue alterar o algoritmo para que o tamaño xeral
        da forma permaneza o mesmo, independentemente do número de lados? Pista: Se
        vostede dividise o seu lonxitude inicial polo número de lados, a lonxitude de cada
        lado ficará menor á medida que o número de lados medre.
      Course 4 Artist Vars 9_instruction: |
        Modifique este algoritmo para que use a variábel
        "lados" ao revés dun número fixo para debuxar un triángulo. Non deixe de usar
        o bloque "defina os lados para".
      Course 4 Bee 1_instruction: |
        A abella non sabe o que hai atrás da nube! Primeiro,
        use o bloque "se" para verificar se hai unha flor atrás da nube, de seguida,
        recolla néctar só se fose unha flor.
      Course 4 Bee 2_instruction: |
        Use o bloque "se/senón" para verificar cada obxecto
        e ver se é unha flor ou unha colmea. Se fose unha flor, recolla néctar... caso contrario,
        produza mel!
      Course 4 Bee 3_instruction: |
        O obxecto descoñecido pode ser unha flor ou unha colmea.
        Desta vez, use o bloque se/senón para recoller néctar se fose unha flor, senón produza mel
        (porque entón sería unha colmea).
      Course 4 Bee 4_instruction: |
        Esa flor morada pode ter 1, 2 ou 3
        néctares. Aquí un bloque se/senón é combinado con outro bloque se/senón para crear
        un bloque "se/senón-se/senón". Complete a solución para recoller a cantidade descoñecida
        de néctar.
      Course 4 Bee 5_instruction: |
        Esta flor morada pode ter 1, 2 ou 3
        néctares. Agregue un bloque se-senón para crear un bloque se, senón-se, senón. Complete
        a solución para recoller a cantidade descoñecida de néctar.
      Course 4 Bee 6_instruction: |
        Esa flor morada pode ter 1, 2 ou 3
        néctares.Cree un bloque se, senón-se, senón para recoller a cantidade descoñecida de
        néctar.
      Course 4 Bee 7_instruction: |
        Use todo o que vostede aprendeu até agora para recoller
        todo o néctar. A flor morada pode ter 1, 2 ou 3 néctares.
      Course 4 Bee For Loops 1_instruction: |
        Use un bucle para recoller o néctar de
        todas as flores.
      Course 4 Bee For Loops 10_instruction: |
        Se o seu bucle está a facer conta regresiva, o
        incremento é subtraído da súa variábel contador a cada repetición. Cal debe ser
        o seu incremento para recoller 9, entón 6, e entón 3 néctares?
      Course 4 Bee For Loops 11_instruction: |
        O que está errado nese bucle? Vexa se
        vostede consegue arranxalo e facer a abella recoller todo o néctar.
      Course 4 Bee For Loops 2_instruction: |
        Temos aquí un novo tipo de bucle, chamado de
        bucle "para". Este bucle para en particular vai contar de 1 até 5, de 1 en 1, e executar
        o contido do bucle a cada conta. Axude a abella a chegar até o néctar.
      Course 4 Bee For Loops 3_instruction: |
        Pode resolver este desafío usando un
        bucle "para" para contar de 1 até 3, de 1 en 1. Agora imos recoller un pouco de néctar!
      Course 4 Bee For Loops 4_instruction: |
        Recolla todo o néctar destas
        flores. Eu gostaría de saber se existe unha forma máis fácil de facer iso...
      Course 4 Bee For Loops 5_instruction: |
        Ah, o bucle para deixa iso moito máis fácil!
        Estamos a usar a variábel "contador" do bucle "para" para repetir o bloque "obteña néctar"
        o mesmo número de veces que o bucle se repite. Ufa! Son moitas repeticións.
        Todo o código que vostede precisa está aquí, dea unha ollada nel e entón
        clique en Executar para ver como funciona.
      Course 4 Bee For Loops 6_instruction: |
        Vostede tambén pode usar un bucle "para" para facer conta
        regresiva. Tente recoller este néctar facendo unha conta regresiva de 5 até 1, de 1 en 1.
      Course 4 Bee For Loops 7_instruction: |
        Use a variábel "contador" do seu bucle "para"
        para controlar a distancia do movemento horizontal.
      Course 4 Bee For Loops 8_instruction: |
        Pode usar a variábel do bucle para controlar
        o movemento e a colleita de néctar?
      Course 4 Bee For Loops 9_instruction: |
        O último número no seu bucle "para" é
        chamado de "incremento" e, a cada execución do bucle, a variábel contador
        é alterada de acordo co incremento. Tente recoller estas flores usando un incremento
        de 2.
      Course 4 Bee Loops 5 NEW_instruction: |
        Temos aquí tres flores. Consegue atopar
        o padrón das instrucións que precisa repetir 3 veces para recoller o
        néctar co menor número de bloques?
      Course 4 Bee Loops 5a NEW_instruction: |
        Agora, use bucles para axudar a abella a recoller
        todo o néctar no seu camiño até a colmea co menor número de bloques posíbel. Cando
        chegue alá, non se esqueza de producir mel!
      Course 4 Bee Params 1_instruction: |
        Use a función "obteña 3 néctares" que
        vira, se move para recoller o néctar e entón retorna á posición orixinal.
        Escriba unha secuencia para recoller todo o néctar usando "obteña 3 néctares".
      Course 4 Bee Params 2_instruction: |
        Modifique a función "obteña 2 néctares" para
        que me faga virar para a dereita ao revés da esquerda para chegar ás flores.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Agora hai flores en ambos os
        lados! Talvez poida usar un parámetro para que a mesma función funcione para flores
        dos dous lados. Eu agreguei un parámetro chamado "dirección" á función.
        Se o parámetro "dirección" fose igual a 0 eu debo virar á esquerda, se fose 1 eu debo
        virar á dereita.
      Course 4 Bee Params 3_instruction: |
        Agora, hai flores en ambos os lados! Engadimos
        variábeis chamadas "esquerda" e "dereita" para que use, e engadimos un
        parámetro chamado "dirección" para "obteña 3 néctares". Edite "obteña 3 néctares"
        para que a abella vire na dirección correcta cando as variábeis "esquerda" ou
        "dereita" fosen pasadas para a función.
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Tente usar a súa nova función para
        recoller todas as flores. Lémbrese, 0 = esquerda e 1 = dereita.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |
        Tente usar a súa nova función
        para recoller todas as flores. Lémbrese de usar as variábeis esquerda e dereita.
      Course 4 Bee Params 4 backup_instruction: |
        Non sería estupendo se puidésemos
        recoller todo o néctar cunha única función? Tente agregar un novo
        parámetro á función chamado "néctares" para controlar a cantidade de néctar
        a recoller. Vostede probabelmente tamén vai querer renomear a función!
      Course 4 Bee Params 4_instruction: |
        Tente usar a súa nova función para recoller
        néctar de todas as flores. Lémbrese de usar as variábeis esquerda e dereita.
      Course 4 Bee Params 5_instruction: |
        Imos comezar do princípio - vostede pode crear
        unha nova función chamada "obteña 5 néctares" cun parámetro de dirección?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Tente usar a súa nova función para
        recoller todo o néctar.
      Course 4 Bee Params 6_instruction: |
        Non sería estupendo se puidésemos recoller
        todo o néctar cunha única función? Tente agregar un novo parámetro
        á función chamado "unidades de néctar" para controlar a cantidade de néctar
        a recoller. Vostede probabelmente vai querer tamén renomear a función!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Tente usar a súa nova función para
        recoller todo o néctar.
      Course 4 Bee Params 7_instruction: |
        Tente usar a súa nova función para recoller
        todo o néctar.
      Course 4 Bee Params 8 Clone 2_instruction: |
        Ah, agora tamén precisamos traballar
        con mel! Como podería actualizar a súa función para recoller néctar ou producir
        mel?
      Course 4 Bee Params 8 clone 3_instruction: |
        Ah, agora tamén precisamos traballar
        con mel! Como podería actualizar a súa función para recoller néctar ou producir
        mel?
      Course 4 Bee Params 8 Clone_instruction: |
        Ah, agora tamén precisamos traballar
        con mel! Como podería actualizar a súa función para recoller néctar ou producir
        mel?
      Course 4 Bee Params 8 new_instruction: |
        Ah, agora tamén é preciso traballar co
        mel! Como podería actualizar a súa función para recoller néctar ou producir mel?
      Course 4 Bee Params 8_instruction: |
        Desafio: Agora tamén precisa traballar con
        mel! Reescriba a súa función para recibir tanto o número de unidades de mel como o
        número de unidades de néctar. Como usaría estes números para decidir o que
        facer?
      Course 4 Bee Params Ex_instruction: |
        Tente usar a súa nova función para recoller
        todo o néctar.
      Course 4 Binary 1_instruction: |
        Temos aquí unha función que recibe unha string binaria
        de 1's e 0's e instrúe a traballadora a se mover da esquerda para a dereita,
        de enriba para baixo, pasando polos cadrados nos cales o número ten un cero. Execute o
        código fornecido para ver como a traballadora usa números binarios para debuxar unha imaxe.
      Course 4 Binary 2_instruction: |
        Cal string binaría podería repetir 8 veces para
        debuxar esa imaxe? Indicación o número "1" cubre un buraco.
      Course 4 Binary 3_instruction: |
        Pode debuxar este padrón repetindo unha única
        string binaria?
      Course 4 Binary 5 (copy 1)_instruction: |
        Cal string binaria, repetida 10 veces,
        vai debuxar esa imaxe?
      Course 4 Binary 5_instruction: |
        Cal string binaria, repetida 10 veces, vai
        debuxar esa imaxe?
      Course 4 Binary 6 (copy 1)_instruction: |
        Cal string binaria, repetida 10 veces,
        vai debuxar esa imaxe?
      Course 4 Binary 6_instruction: |
        Cal string binaria, repetida 10 veces, vai
        debuxar esa imaxe?
      Course 4 Binary 7_instruction: |
        Cal string binaria, repetida 10 veces, vai
        debuxar esa imaxe?
      Course 4 Binary 8_instruction: |
        Pode completar a maior parte desta imaxe
        repetindo un número binario de 5 bits - daquela vai precisar de máis un número de 4 bits
        para completar o recanto inferior dereito.
      Course 4 EC 1a_instruction: Sen regras. Sen pistas. Só o desafío!
      Course 4 EC 1b_instruction: Sen regras. Sen pistas. Só o desafío!
      Course 4 EC 2a_instruction: |
        **Desafio Extremo:** Sen regras. Sen pistas. Só
        o desafío!
      Course 4 EC 2b_instruction: |
        **Desafio Extremo:** Sen regras. Sen pistas. Só
        o desafío!
      Course 4 EC 2c_instruction: |
        **Desafio Extremo:** Sen regras. Sen pistas. Só
        o desafío!
      Course 4 EC 3_instruction: |
        Use o que aprendeu no nivel anterior para debuxar
        unha imaxe como esta. Nota: O código vólvese máis simple se incorpora
        parámetros.
      Course 4 EC 3a_instruction: 'Desafio Extremo: Sen regras. Sen pistas. Só o desafío!'
      Course 4 Maze 1_instruction: Leve o Angry Bird até o porco!
      Course 4 Maze 2_instruction: Desvíe do TNT!
      Course 4 Maze 3_instruction: 'Programe o Angry Bird para chegar até o porco. '
      Course 4 Maze 4_instruction: |
        Probe o bloque "repita" para usar menos bloques
        na resolución deste desafío...
      Course 4 Maze 5_instruction: |
        Vostede pode resolver este desafío usando o menor número
        posíbel de bloques?
      Course 4 Maze 6_instruction: |
        Vostede pode resolver este desafío usando o menor número
        posíbel de bloques?
      Course 4 Play Lab For Loops 2_instruction: |
        Desta vez, imos tentar contar
        os números impares de 1 até 100.
      Course 4 Play Lab Params 1_instruction: |
        Aquí temos unha función chamada "puxe"
        que fai o seu personaxe principal puxar 100 pixels. Use a función puxe
        para recoller todas as bandeiras.
      Course 4 Play Lab Params 10_instruction: "Engadimos unha última función para\nque
        vostede use.\r\n\r\nUse unha instrución \"se\" para que o seu xogo chame a
        función \"suba de nível\"\nsomente cando \"pontos_xogador\" fose maior que
        un determinado número. \r\n\r\nPor\nexemplo: \"pontos_xogador\" > 6\r\n\r\nXogue
        o xogo e chegue até o nivel\n4 para ir para o próximo desafío. "
      Course 4 Play Lab Params 2_instruction: "Agora temos bandeiras que están altas\ndemais
        para oi noso pulo actual! Imos usar as frechas \"para enriba\" e \"para baixo\"\npara
        termos diversas alturas de chimpos. \r\n\r\nPrecisamos agregar un parámetro\ná
        función puxe chamado \"altura\". A frecha para enriba debe facer chimpar o
        can\n 200 pixels, e a frecha para baixo debe facelo chimpar somente 100 pixels.\n\r\n\r\nPista:
        clique en \"editar\" na función puxe e actualízea para que\nela use o parámetro
        \"altura\"."
      Course 4 Play Lab Params 3_instruction: |
        Engadimos outro parámetro á
        función puxe para que poidamos usala con outros personaxes. Cada personaxe é representado
        por un número, comezando en un. Edite a función "puxe" para que
        use o parámetro "personaxe" para facer o personaxe certo chimpar.
      Course 4 Play Lab Params 4_instruction: |
        Aquí temos unha función chamada "patrulle".
        Edítea para mover o gato 400 pixels para enriba, e entón 400 pixels para baixo.
      Course 4 Play Lab Params 5_instruction: |
        Edite a función chamada "patrulle" para
        agregar un parámetro "personaxe", así podemos chamala para todos os personaxes
        da pantalla. Lémbrese, os personaxes corresponden aos números 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: |
        Agregue outro parámetro chamado "velocidade"
        á función "patrulle". Tente usar un bloque "defina velocidade" co novo parámetro "velocidade"
        para axudar o Pinguín a apañar as dúas bandeiras antes que os outros personaxes apañen
        unha.
      Course 4 Play Lab Params 7_instruction: "Imos nos divertir! Analise o\ncódigo
        fornecido para ver se consegue descobrir o que fai cada bloque.  \r\n\r\nCando
        termine, use as\nfrechas do teclado para controlar o can e recoller todas
        as bandeiras."
      Course 4 Play Lab Params 8_instruction: |
        Use un bloque "cando o personaxe toque" para enviar
        o can de volta para a parte superior esquerda SOMENTE se toca en calquera outro personaxe.
      Course 4 Play Lab Params 9_instruction: "Temos aquí o noso xogo dunha fase anterior,
        pero\na maior parte do código está oculta. Hai unha nova función chamada \"marcar_pontos\".\r\n\r\nEdite\na
        función para que un parámetro \"pontos\" sexa engadido á variábel \"pontos_do_xogador\".\n\r\n\r\nA
        variábel \"pontos_do_xogador\" debe aumentar toda vez\nque o can marque o
        gato con corazóns e diminuír toda vez que o gato marque o can con corazóns.\r\n\r\nObservación:\nCando
        estivese preparado, clique en \"Executar\" para xogar. Cando o can marcar
        6 pontos, vostede\nvai para o próximo desafío. "
      Course 4 Play Lab Vars 1_instruction: |
        Desta vez vostede non precisa escribir código ningún, só
        clique en "Executar" para xogar! Neste xogo, vostede é o can que está tentando
        recoller máis bandeiras que o gato. Use a frecha para baixo para controlar o can.
        Presione "Terminar" cando vostede termine de xogar.
      Course 4 Play Lab Vars 2_instruction: |
        A corrida do último desafío non foi moi xusta! Altere
        a variábel "velocidade_can" para garantir que vostede poida recoller máis bandeiras que o
        gato. O primeiro a recoller 10 bandeiras vence!
      Course 4 Play Lab Vars 3_instruction: |
        Temos aquí un novo tipo de xogo! Use as
        setas para a esquerda e para a dereita para se mover e a frecha para enriba para chimpar. Vexa se vostede
        consegue recoller todas as bandeiras.
      Course 4 Play Lab Vars 4_instruction: |
        Agora estamos a usar unha variábel chamada "altura"
        para controlar a altura que o can pode chimpar. Actualize a variábel "altura" para que
        o can poida chimpar alto o suficiente para alcanzar todas as bandeiras.
      Course 4 Play Lab Vars 5_instruction: |
        Imos crear un xogo! Primeiro precisamos de
        unha pontuación. Reconstrúa o código que vostede viu no último nivel para definir a puntuación
        con valor 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Estupendo, agora temos a nosa variábel
        puntuación, pero como imos facela útil? Que tal sumar á variábel
        puntuación toda vez que acerte o inimigo cunha bola de fogo? Use o evento
        "cando o personaxe 2 toque en algunha cousa" para disparar unha actualización para a puntuación
        cando a súa bola de fogo atinxa o gato. Pode incrementar a puntuación facendo puntuación
        = puntuación + 1. Faga a súa puntuación chegar até 10 (un punto por vez!) para pasar de nivel.
      Course 4 Play Lab Vars 6_instruction: "Use a frecha para a dereita para arrebolar
        corazóns.\r\n\r\nEm\nno noso xogo, como podemos marcar puntos? Agregue 1 a
        súa variábel \"puntos\" toda\nvez que o can atinxa o gato cun corazón. Use
        o evento \"cando o personaxe 2 toque en algunha cousa\"\npara disparar unha
        actualización na súa puntuación. Pode incrementar a súa variábel\ndefinindo
        \"puntos = puntos + 1.\" Aumente a súa puntuación até 10 (un punto\nde cada
        vez!) para pasar de nivel."
      Course 4 Play Lab Vars 7_instruction: |
        Estupendo, agora imos garantir que este xogo
        non sexa moi fácil - sempre que o can (personaxe 1) fose atinxido por unha bola de fogo
        do gato (personaxe 2), debe perder un punto. Comece con 10 puntos para que o xogo non sexa moito difícil. Faga a súa
        puntuación caer de 10 para 0 para pasar de nivel.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Certo, unha última cousa para
        este xogo - imos configuralo para que o xogador poida gañar (ou perder). Use un bucle infinito
        para verificar o valor da puntuación - se a puntuación fose maior que 20, faga
        o inimigo desaparecer. Se a puntuación fose menor que 0, faga o xogador desaparecer.
        Clique en "Terminar" cando o xogo funcione do xeito que vostede gostaría.
      Course 4 Play Lab Vars 8_instruction: |
        Imos configurar o xogo para que o can poida
        gañar (ou perder). Use un bucle infinito para para verificar o valor da puntuación - se a puntuación
        fose maior que 20, faga o inimigo (o gato) desaparecer. Se a puntuación fose
        menor que 0, faga o xogador (o can) desaparecer. Clique en "Terminar" cando o xogo
        funcione do xeito que vostede gostaría.
      Course 4 Play Lab Vars 9_instruction: "Hora da actividade libre! Temos aquí
        todas as\nvariábeis que usamos até agora nesta etapa, ben como algunhas máis
        no caso\nque queira usalas. \r\n\r\nObserve que agora hai moitos bloques na
        nosa\ncaixa de ferramentas e precisan ser organizados! Aquí, colocamos cada
        peza em\nunha categoria apropiada. Reserve un tempo para explorar todo o que
        está dispoñíbel.\nCando termine de explorar, cree un xogo ou unha historia
        usando repeticións, variábeis\ne eventos.  \r\n\r\nPista: deslice a pantalla
        para baixo para ver todos os comandos na área de traballo."
      Course 4 Play Lab Vars_instruction: |
        Certo, unha última cousa para este xogo
        - imos configuralo para que o xogador poida gañar (ou perder). Use un bucle infinito para
        verificar o valor da puntuación - se a puntuación fose maior que 20, faga o inimigo
        desaparecer. Se a puntuación fose menor que 0, faga o xogador desaparecer.
      Course 4 Play Labs For Loops 1_instruction: |
        Imos facer o can falar todos
        os números de 1 a 100. Use un bucle "para" e o bloque contador para que fale o valor da variábel
        contador cada vez que o bucle sexa executado.
      Course 4 Play Labs For Loops 2_instruction: |
        Desta vez, imos tentar contar
        os números impares de 1 até 100.
      Course 4 Play Labs For Loops 3_instruction: |
        Se contarmos usando números maiores,
        podemos contar até números aínda maiores no mesmo intervalo de tempo. Tente facer o can
        contar de 10 até 1000, contando de 10 en 10.
      Course 4 Play Labs For Loops 4_instruction: |
        Alterar o incremento pode ser
        útil, pero aínda estamos contando linearmente (cada número está separado pola mesma
        distancia do anterior). E se eu quisese contar exponencialmente? Sen alterar
        as configuracións dese bucle para, vostede pode contar 1, 4, 9 , 16, 25... (contador
        ao cadrado)?
      Course 4 Play Labs For Loops 4a_instruction: "Agora, imos combinar as variábeis\nda
        Fase 7 coa súa variábel \"contador\" para facer algo máxico acontecer.   \r\n\r\nNese\ndesafío,
        o can vai contar de 0 até 1000 usando \"incremento\".  Defina a variábel \"incremento\"\ncomo
        10 no comezo do seu código para ver o que acontece."
      Course 4 Play Labs For Loops 5_instruction: |
        Na última etapa contamos o
        cadrado de cada número. Tente alterar "contador ^ 2" para "contador ^ 3" para
        contar o cubo de cada número (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime
        keeper.\r\n\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable
        will begin with a value of 1.\r\n\r\nCan you make it so that each\ntime you
        click Dog, the increment increases by 2?  Click the forward arrow\nto run
        the for loop.\r\n\r\nRun the loop a couple of times, clicking Dog before\neach
        one."
      Course 4 Play Labs For Loops 6_instruction: |
        Vostede debe se lembrar de que un número primo
        é calquera número enteiro que é divisível só por el mesmo e por 1. Use a función "é_primo"
        para falar só os números primos de 1 a 100.
      Course 4 Play Labs For Loops 6a_instruction: "O can vai continuar contando\nco
        noso \"bucle para\" usando \"incremento\", pero desta vez imos agregar o mago\ná
        mestura. Consegue alterar o código para que \"incremento\" aumente en dúas
        unidades\ntoda vez que o mago sexa clicado?\r\n\r\nAtención! O mago móvese
        rápido!"
      Course 4 Play Labs For Loops 7_instruction: |
        Vostede podería usar un bucle "para" para me
        axudar a falar a secuencia 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Agora estamos chegando a algún
        lugar! E\nse comezarmos a contar cantas veces conseguimos clicar no mago antes
        do can chegar\naté 30?  \r\n\r\nTermine agregando bloques ao mago para que
        toda vez que fose\nclicado a variábel \"clicado\" aumente por un. Pode ignorar
        \"incremento\"\npor mentres.\r\n\r\nO can vai comezar a contar cando vostede
        clicar en \"Executar\"."
      Course 4 Play Labs For Loops 8_instruction: "Agora, axude os personaxes a se
        moveren mentres\ncontan  \r\n\r\nO can debe se mover e contar agregando 2
        (contador + 2) a cada vez. O gato\nvai se mover e contar multiplicando por
        2 (contador * 2)  a cada vez. O pinguín\nvai se mover e contar facendo a potencia
        de 2 (contador ^ 2) a cada vez.  Quen vai chegar\nprimeiro á bandeira?"
      Course 4 Play Labs For Loops 8a_instruction: "Para terminar o noso xogo, precisamos\ntraer
        de volta a variábel \"incremento\"!    Imos relacionala ao nivel do\nxogo.\r\n\r\n1)
        Garde o número de veces que o mago é clicado.\r\n2)\nSe o mago fose clicado
        polo menos 10 veces antes do can contar até 30, aumente\n\"incremento\" en
        1 unidade e comece de novo.\r\n3) Se o mago non fose clicado\npolo menos 10
        veces, o xogo acaba."
      Course 4 SCF 1_instruction: |
        Use as funcións suxeridas para debuxar catro
        liñas de hexágonos. Vostede percibiu como as nosas liñas numeradas son descolocadas para a dereita?
      Course 4 SCF 1a_instruction: |
        Consegue descobrir como recoller todo este
        néctar co menor número posíbel de bloques?
      Course 4 SCF 1b_instruction: |
        Consegue descobrir como recoller todo este
        néctar co menor número posíbel de bloques?
      Course 4 SCF 2_instruction: |
        Use o que vostede aprendeu no nivel anterior
        para debuxar unha imaxe como esta. Nota: O código vólvese máis simple se incorpora
        parámetros.
      Course 4 SCF 3 Fail 1_instruction: Consegue descobrir como...
      Course 4 SCF 3 Fail 2_instruction: Consegue descobrir como...
      Course 4 SCF 3_instruction: |
        Use o que vostede aprendeu no nivel anterior
        para debuxar unha imaxe como esta. Nota: O código vólvese máis simple se incorpora
        parámetros.
      Course 4 SCFL 1_instruction: |
        Resolva este desafío usando o menor número
        posíbel de bloques.
      Course 4 SCFL 1a_instruction: |
        Consegue levar Skrat até a súa landra usando
        o mínimo posíbel de bloques?
      Course 4 SCFL 1b_instruction: |
        Consegue levar Skrat até a súa landra usando
        o mínimo posíbel de bloques?
      Course 4 SCFL 2_instruction: |
        Resolva este desafío usando o menor número
        posíbel de bloques.
      Course 4 SCFL 3_instruction: Consegue descobrir como recrear este debuxo?
      Course 4 SCFL 4_instruction: Consegue descobrir como recrear este debuxo?
      Course 4 SCFL 5_instruction: Consegue descobrir como recrear este debuxo?
      Course 4 SCFL 6_instruction: |
        Consegue descobrir como recrear este debuxo
        cun único bucle?
      Course 4 SCFL 7_instruction: |
        O artista quere apañar unhas ondas! Consegue
        descobrir como recrear este debuxo?
      Course 4 SCFP 1_instruction: |
        Cree unha función con parámetros que permiten
        ao artista saltar para tras e para fronte por x pixels, e tamén para enriba e para baixo
        por y pixels (usando números positivos e negativos).
      Course 4 SCV 1_instruction: Clique aquí para ver as instrucións novamente.
      Course 4 SCV 2_instruction: Clique aquí para ver as instrucións novamente.
      Course 4 SCV 3_instruction: "Agora un xogo de collecolle! Colla o gato para
        gañar 2 puntos.\nColla o pinguín para gañar 3 puntos. Chegue a 10 puntos para
        gañar!\r\nPero atención, cando\no gato e o pinguín se encontran, eles sacan
        o seus puntos.\r\n\r\nAgregue os bloques\nnecesarios para facer este xogo
        funcionar como foi explicado. Como vai\nfacer o can se mover en todas as direccións
        usando as frechas do teclado? Como vai\nagregar puntos cando o can colle o
        gato ou o pinguím? Como vai subtraer puntos\ncando o gato e o pinguín se tocan?"
      Course 4 SCV 4_instruction: |
        Resolva este desafío co menor número de bloques
        posíbel.
      Course 4 SCV 5_instruction: |
        Resolva este desafío co menor número de bloques
        posíbel.
      Course 4 SCV 6_instruction: Clique aquí para ver as instrucións novamente.
      Course 4 SCVP 1_instruction: |
        Cree unha función con parámetros que permiten
        ao artista saltar para tras e para fronte por x pixels, e tamén para enriba e para baixo
        por y pixels (usando números positivos e negativos).
      Course 4 Variables Assessment_instruction: |
        Você consegue crear essa imagem usando
        uma variável para os lados? Cada linha deve ter 50 pixels de comprimento.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing
        you can count multiple things\r\n\r\nFind out how many people like something\nother
        than dogs and cats\r\n\r\nCount dogs\r\nCount cats\r\nCount total\r\nDo\nthe
        math\r\n\r\nblank/ blank toal\r\n\r\nCan also use this to find percents\nfrom
        this\r\n\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria
        \r\nfind the length of an array\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\r\n1. ReadRecords\nfor
        all records\r\n2. Way to loop through and count\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: |
        Agora imos crear 20 círculos
        sobrepostos, virando 18 graos entre cada círculo.
      frozen circle function with parameter_instruction: |
        Temos aquí un bloque "cree un círculo"
        que pode facer círculos de tamaños diferentes. Pode usar isto para crear
        un pequeno círculo de tamaño 5 e un círculo maior de tamaño 10?
      frozen circle function_instruction: |
        Use o novo bloque "cree un círculo" para
        crear 10 círculos sobrepostos. Non se esqueza de avanzar entre os círculos.
      frozen circle_instruction: |
        Un círculo é unha forma especial. Pode descobrir
        que número usar para substituír os puntos de interrogación para debuxar un círculo?
      frozen cross rotate dense_instruction: |
        Vamos repetir isso 90 vezes! Quantas
        vezes 90 cabe em 360? Dica: é um número realmente pequeno.
      frozen cross rotate_instruction: |
        Agora, tente repetir isso 10 vezes. Quantos graus
        você precisa virar entre cada reta?
      frozen cross_instruction: |
        Envolva um bloque "Repita" em torno desses comandos para crear
        um sinal de adição. Você notou que Elsa pode se mover para a frente e para trás?
      frozen diamond mini snowflake_instruction: |
        Vostede sabía que cada folerpa de neve
        ten unha forma diferente? Imos crear unha nova folerpa de neve usando o bloque "Repita"
        para repetir un paralelogramo 4 veces, virando 90 graos á dereita entre
        cada paralelogramo.
      frozen diamond snowflake_instruction: |
        Agora, imos crear unha nova folerpa de neve
        usando o bloque repita para repetir un paralelogramo 10 veces, virando 36 graos
        á dereita entre cada un.
      frozen diamond_instruction: |
        Use un bloque "Repita" en torno destes bloques para crear un paralelogramo.
        É como un rectángulo pero ten ángulos diferentes. Este ten ángulos de 60 graos
        e 120 graos en vez de todos os ángulos teren 90 graos.
      frozen freeplay_instruction: |
        Vostede volveuse oficialmente un artista mestre! Cree
        un país das maravillas de xeo.
      frozen line_instruction: |
        Oi! Eu son Elsa de Arendelle. Axúdeme a crear unha
        recta.
      frozen perpendicular_instruction: |
        Agora, imos ver se podemos crear dúas rectas
        que forman un ángulo de 90 graos entre si. Vostede vai precisar usar o bloque "vire"
        e tamén o bloque "mova".
      frozen snowflake branch_instruction: |
        Tente usar o bloque "cree unha folerpa de neve do tipo ramificado”
        para crear tres ramificacións, o que comeza a parecer unha folerpa de neve.
      frozen snowflake full_instruction: |
        Agora, imos repetir iso 8 veces para facer unha
        bela folerpa de neve!
      frozen snowflower_instruction: |
        Poden ser creados padróns de neve complexos con
        formas moi simples. Pode crear un padrón repetindo 5 círculos de tamaño
        5 e 5 círculos de tamaño 10?
      frozen square iterative_instruction: |
        Parece que estamos na metade do camiño para facer
        un cadrado. Imos xuntar 4 rectas para crear un cadrado.
      frozen square loop 3x_instruction: |
        Imos crear tres cadrados, virando despois
        de cada cadrado. Lémbrese de virar 120 graos antes de cada novo cadrado.
      frozen square loop_instruction: |
        Oi, eu son Anna de Arendelle! Imos facer un cadrado
        co bloque "repita", que usa menos bloques. Cantas veces (???) o bloque
        "repita" debe repetir os bloques dentro del para facer un cadrado?
      frozen square snowflake_instruction: |
        Consegue crear unha folerpa de neve usando o bloque
        "repita" para crear un cadrado 10 veces e o bloque "vire" para virar 36
        graos entre cada cadrado?
      Infinity_catch_instruction: |
        Pode facer Elsa ("personaxe 2") alcanzar
        Anna usando as frechas do teclado?
      Infinity_finale_instruction: Crie o que quiser e compartilhe!
      Infinity_move_collide_instruction: |
        Hiro é o "personaxe 1". Móvao en dirección a
        Baymax e reproduza un son cando eles se tocaren.
      Infinity_move_directions_instruction: |
        Baymax é o "personaxe 2". Agregue bloques "mova"
        e entón mova Baymax usando as frechas. Faga con que toque os outros dous personaxes.
      Infinity_move_right_instruction: |
        Hiro é o "personaxe 1". Use o bloque "mova"
        para mover Hiro para que toque Baymax.
      Infinity_repeat_instruction: |
        Use un bloque "repita infinitamente" para facer Anna se mover
        400 pixels para enriba e para baixo.
      Infinity_say_instruction: Faga Anna dizer "Oi." usando o bloque "diga".
      Infinity_shoot_instruction: |
        Baymax é o "personaxe 2". Faga Baymax lanzar un foguete
        en Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro é o "personaxe 3". Faga Hiro lanzar
        un proxectil en cada un dos catro personaxes. Espere un segundo entre cada
        lanzamento.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Toque aínda máis folerpas de neve!
      Infinity_touch_four_instruction: |
        Mova Anna para cima, para a esquerda e para a dereita para tocar
        cada un das catro folerpas de neve.
      Infinity_touch_score_instruction: |
        Faga Anna marcar un punto cando ela toque
        nunha folerpa de neve. Despois clique en "Executar" e faga ela tocar unha vez en cada folerpa de neve.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Desenhe uma pequena reta para cima e uma
        grande para a direita!
      K-1 artist 1 level 10_instruction: Debuxe liñas trazadas usando os bloques "puxe"
        e "debuxe"
      K-1 artist 1 level 9_instruction: Faga o debuxo usando tres rectas
      K-1 Artist Loops 1_instruction: Debuxe esta recta usando o movemento para o
        leste 4 veces.
      K-1 Artist Loops 2_instruction: Pode debuxar a mesma recta usando un bucle?
      K-1 Artist Loops 3_instruction: Pode repetir estes bloques para debuxar 6 rectas?
      K-1 Artist Loops 4_instruction: |
        Un bucle podería nos axudar a debuxar o tope deste
        castelo?
      K-1 Artist Loops 5_instruction: O que pode repetir 4 veces para debuxar esas
        escadas?
      K-1 Artist Loops 6_instruction: |
        Son necesarios dous bucles: un para subir as
        escadas e outro para descender.
      K-1 Artist Loops 7_instruction: Pode terminar este padrón con dous bucles?
      K-1 Artist Loops 8_instruction: Esta escada ten chanzos máis longos.
      K-1 Artist Loops 9_instruction: 'Avaliación: use un bucle para debuxar as escadas'
      K-1 Artist Loops Free Play_instruction: Actividade libre, debuxe algo divertido!
      K-1 Artist1 1_instruction: Debuxe o pé do home cunha recta
      K-1 Artist1 10_instruction: |
        Debuxe e puxe para facer o camiño trazado até o tesouro
        X
      K-1 Artist1 2_instruction: Debuxe o bigode no gato con dúas retas!
      K-1 Artist1 3_instruction: |
        Debuxe dúas rectas para o leste e dúas rectas para o norte para terminar
        a casa!
      K-1 Artist1 4_instruction: Debuxe rectas para enriba, sobre e para baixo para
        completar o castelo!
      K-1 Artist1 5.5_instruction: |
        Complete a terceira torre do castelo usando
        rectas curtas
      K-1 Artist1 5_instruction: Debuxe o talo desta flor con dúas rectas!
      K-1 Artist1 6_instruction: Termine a imaxe usando un bloque puxe!
      K-1 Artist1 7_instruction: |
        Use o bloque puxe para se mover sen debuxar. Puxe
        e debuxe unha recta.
      K-1 Artist1 8_instruction: |
        Debuxe liñas trazadas usando os bloques puxe e
        debuxe
      K-1 Artist1 9_instruction: Debuxe e puxe para facer a recta trazada
      K-1 Artist1 Assessment 1_instruction: Desenhe as retas pequenas e grandes!
      K-1 Artist1 Assessment 2_instruction: Desenhe as retas pequenas tracejadas!
      K-1 Artist2 1_instruction: Debuxe un cadrado abaixo do triángulo.
      K-1 Artist2 2_instruction: Puxe e debuxe un cadrado próximo á casa.
      K-1 Artist2 3_instruction: Debuxe un cadrado sobre o outro cadrado
      K-1 Artist2 4_instruction: Debuxe un rectángulo para completar a ponte.
      K-1 Artist2 5_instruction: Debuxe un rectángulo para completar os soportes da
        ponte
      K-1 Artist2 6_instruction: Debuxe dous cadrados para crear un rectángulo!
      K-1 Artist2 Assessment1_instruction: |
        Avaliación: deseñe um cadrado ao lado do
        outro cadrado.
      K-1 Artist2 Free Draw_instruction: Debuxe calquera cousa!
      K-1 Artist2_7_instruction: Debuxe un rectángulo para dar un caixóna á cómoda!
      K-1 Bee 1_instruction: |
        Móvame até a flor, recolla o néctar e entón móvame
        até a colmea e produza mel
      K-1 Bee 10_instruction: Recolla catro néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee 11.5_instruction: Recolla catro néctares para fabricar catro unidades
        de mel!
      K-1 Bee 11_instruction: Recolla tres néctares e entón fabrique unha unidade
        de mel
      K-1 Bee 12_instruction: Recolla tres néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee 13_instruction: Recolla tres néctares e entón fabrique unha unidade
        de mel!
      K-1 Bee 14_instruction: |
        Léveme até o néctar e recollao, léveme até o mel
        e produza mel
      K-1 Bee 15_instruction: Recolla dous néctares para fabricar dúas unidades de
        mel!
      K-1 Bee 2_instruction: |
        Móvame até a flor, recolla o néctar e entón móvame
        até a colmea e produza mel
      K-1 Bee 3_instruction: |
        Móvame até a flor, recolla o néctar e entón móvame
        até a colmea e produza mel
      K-1 Bee 4_instruction: Recolla dous néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee 5_instruction: Recolla tres néctares e entón fabrique tres unidades
        de mel!
      K-1 Bee 6_instruction: Recolla dous néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee 7_instruction: Recolla tres néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee 8_instruction: Recolla dous néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee 9_instruction: Recolla dous néctares e entón fabrique dúas unidades
        de mel!
      K-1 Bee Assessment 1_instruction: Colete néctar para fabricar mel!
      K-1 Bee Assessment 2_instruction: Colete néctar para fabricar mel!
      K-1 Bee Loops 1_instruction: Recolla o néctar para fabricar mel!
      K-1 Bee Loops 10_instruction: Use bucles para recoller néctar, fabricar mel
        e para se mover!
      K-1 Bee Loops 11_instruction: |
        Avaliación: use bucles e obteña o néctar e o
        mel!
      K-1 Bee Loops 12_instruction: |
        Avaliación: use bucles para obter néctar, mel
        e para mover!
      K-1 Bee Loops 2_instruction: |
        Use un bucle para mover e entón recoller o néctar e
        producir mel!
      K-1 Bee Loops 3_instruction: Use bucles para recoller o néctar e fabricar o
        mel!
      K-1 Bee Loops 4_instruction: |
        Use bucles para obter néctar, producir mel e
        para mover!
      K-1 Bee Loops 5_instruction: Use bucles para obter néctar e mel!
      K-1 Bee Loops 6_instruction: Use bucles para recoller néctar, fabricar mel e
        para se mover!
      K-1 Bee Loops 7_instruction: Use bucles para recoller o néctar e fabricar o
        mel!
      K-1 Bee Loops 8_instruction: Use bucles para recoller o néctar e fabricar o
        mel!
      K-1 Bee Loops 9_instruction: Use bucles para recoller néctar, fabricar mel e
        para se mover!
      K-1 Bee Loops Assessment 1_instruction: |
        Obtenha néctar para producir mel e use bucles
        para mover!
      K-1 Bee Loops Assessment 2_instruction: Colete néctar para fabricar mel usando
        bucles!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      k-1 maze 1_instruction: Pode me mover para o oeste para chegar até o porco?
      K-1 Maze 10_instruction: 'Desvíe do TNT para me levar até o porco! '
      K-1 Maze 11_instruction: |
        Trace o camiño e léveme até o porco pasmón. Desvíe
        do TNT, ou as plumas van voar! Pista: está ao sul de onde estou.
      K-1 Maze 2_instruction: Móvame para o leste para chegar até o porco!
      K-1 Maze 3_instruction: Móvame para o sul para chegar até o porco!
      K-1 Maze 4_instruction: Móvame para o norte para chegar até o porco!
      K-1 Maze 5_instruction: Móvame para o leste para chegar até o porco!
      K-1 Maze 6_instruction: Móvame por un camiño, e entón por outro para me levar
        até o porco!
      K-1 Maze 7_instruction: Móvame por un camiño, e entón por outro para me levar
        até o porco!
      K-1 Maze 8_instruction: Móvame por un camiño, e entón por outro para me levar
        até o porco!
      K-1 Maze 9_instruction: Móvame por un camiño, e entón por outro para me levar
        até o porco!
      K-1 Maze Assessment 1_instruction: 'Avaliación: léveme até o porco!'
      K-1 Maze Assessment 12_instruction: Avaliación de nivel
      K-1 Maze Assessment 13_instruction: Avaliación de nivel
      K-1 Maze Assessment 2_instruction: 'Avaliación: léveme até o porco!'
      K-1 maze debug 1_instruction: Altere o código para me levar até o porco!
      K-1 maze debug 10_instruction: |
        Depure este nivel reorganizando e agregando
        bloques para me levar até o porco!
      K-1 maze debug 11_instruction: "Isto é unha proba!\r\nDepure este nivel reorganizando\ne
        agregando bloques para me levar até o porco"
      K-1 maze debug 2_instruction: |
        Descubra o que falta e entón agregue bloques
        para me levar até o porco!
      K-1 maze debug 3_instruction: |
        Descubra o que falta e entón REMOVA bloques
        para me levar até o porco!
      K-1 maze debug 4_instruction: |
        Pase por estes bloques e arránxeos! Eu acho
        que estou indo na dirección errada.
      K-1 maze debug 5_instruction: |
        Depure este nivel reorganizando e agregando bloques
        para me levar até o porco!
      K-1 maze debug 6_instruction: |
        Depure este nivel reorganizando e agregando
        bloques para me levar até o porco!
      K-1 maze debug 7_instruction: |
        Depure este nivel reorganizando e agregando
        bloques para me levar até o porco!
      K-1 maze debug 8_instruction: |
        Depure este nivel reorganizando e agregando bloques
        para me levar até o porco!
      K-1 maze debug 9_instruction: |
        Depure este nivel reorganizando e agregando
        bloques para me levar até o porco!
      K-1 Maze debug Assessment 1_instruction: |
        Avaliación-- depure este nivel
        reorganizando e adicionando bloques para me levar até o porco!
      K-1 Maze Loops 1_instruction: Léveme até o porco!
      K-1 Maze Loops 10_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 11_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 12_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 2_instruction: Use o bloque repita para me levar até o porco!
      K-1 Maze Loops 3_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 4_instruction: Léveme até o porco!
      K-1 Maze Loops 5_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 6_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 7_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 8_instruction: Léveme até o porco! Use o bucle repita.
      K-1 Maze Loops 9_instruction: Léveme até o porco!
      K-1 Maze Loops Assessment 1_instruction: |
        Avaliación-- use bucles para me levar
        até o poco!
      K-1 Maze Loops Assessment 2_instruction: |
        Avaliación-- use bucles para me levar
        até o poco!
      K-1 Maze Multi 14_instruction: Avaliación de nivel
      K-1 Maze Multi 15_instruction: Avaliación de nivel
      K-1 Maze Sequence Assessment 1_instruction: "Isto é unha proba!\r\nMóvame por
        um camiño e entón\npor outro para me levar até o porco"
      K-1 Maze Sequence Assessment 2_instruction: "Isto é unha proba!\r\nMóvame por
        um camiño e entón\npor outro para me levar até o porco."
      kikiTesting_instruction: ".\r\n .\r\n.\r\n.\r\n.\r\n.\r\n\r\n.\r\n\r\n"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou
        can connect to up to 5 other people in a room. When you send messages\nin
        the room, everyone receives them. What are some of the challenges of this\nsystem,
        and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto
        a router with the others in your group. Important note: The router will\nonly
        properly route messages where the first 4 bits are the To: address and\nthe
        second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Debuxe algo incríbel! O seu código é gardado
        como proxecto e pode volver a el en calquera momento.
      NEW Course 4 Artist Functions 1_instruction: |
        Consegue debuxar un cadrado con
        100 pixels de lonxitude usando un bucle?
      NEW Course 4 Artist Functions 10.1_instruction: |
        Use as funcións dos desafíos
        anteriores para debuxar este padrón.
      NEW Course 4 Artist Functions 10_instruction: |
        Clique en "editar" para cubrir
        os bloques na definición da función para facer un cadrado de 40 pixels.
      NEW Course 4 Artist Functions 11_instruction: "Agora, queremos crear unha nova\nfunción
        chamada \"debuxe unha liña de cadrados\" que debuxa seis cadrados en secuencia.
        Consegue crear esa función usando a función \"debuxe un cadrado 20\"\nque
        xa creamos? Observación: alteramos o lapis para que fique moito máis\nfina.
        Clique en \"editar\" na función \"debuxe un cadrado 20\" para ver como!\r\n"
      NEW Course 4 Artist Functions 12_instruction: |
        Use a función "debuxe unha liña de cadrados"
        do último desafío para debuxar este padrón."
      NEW Course 4 Artist Functions 13_instruction: |
        Consegue debuxar unha forma de estrela usando
        a función "debuxe unha liña de cadrados"? Pista: Edite a función "debuxe unha liña de cadrados"
        para que non precise chamala dúas veces.  Observe que terá que avanzar
        un certo número de pixels e virar 144 graos.
      NEW Course 4 Artist Functions 14_instruction: 'Actividade libre! '
      NEW Course 4 Artist Functions 2_instruction: |
        Vostede consegue debuxar 3 cadrados con 20 pixels de distancia
        entre cada un? Pista: cada cadrado ten 100 pixels de tamaño
      NEW Course 4 Artist Functions 3_instruction: |
        Temos aquí un novo tipo de bloque.
        Chámase "bloque de función". Clique en "editar" e entón cúbrao co código
        para debuxar un cadrado con lados de 100 pixels. Cando termine de editar a función,
        clique en "Pechar" para volver ao programa.
      NEW Course 4 Artist Functions 4_instruction: |
        Use a función "debuxe un cadrado"
        para debuxar este padrón. Pista: vai precisar usar un bloque "vire 120 graos á dereita"
        despois cada cadrado.
      NEW Course 4 Artist Functions 5_instruction: |
        Como o bloque "debuxe un cadrado"
        sabía que comandos executar? Clique en "editar" no bloque de función "debuxe un cadrado".
        Os bloques no editor da función son a definición que
        compón "debuxe un cadrado". Cando termine de analisar, clique en "Salvar
        e Pechar" e entón en "Executar".
      NEW Course 4 Artist Functions 6_instruction: "Usando o bloque de función \"debuxe
        un cadrado\",\npode debuxar esta imaxe? Pista: cada cadrado está separado
        por 20 pixels.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Vostede está collendo o xeito de como
        usar os bloques de función? Imos modificar este cadrado para que teña 200 pixels
        de tamaño. Pista: clique en "editar" para acesar o editor da función "debuxe un cadrado".
        Lémbrese de clicar en "Pechar" para saír do editor da función.
      NEW Course 4 Artist Functions 8_instruction: |
        Creamos unha nova función
        para vostede chamada "debuxe un triángulo". Consegue editar a definición da función
        para debuxar un triángulo con lados de 100 pixels?
      NEW Course 4 Artist Functions 9_instruction: |
        Consegue resolver isto agregando
        só un bloque?
      NEW Course 4 Artist Functions inspire_instruction: |
        Clique aquí para ver a figura
        de inspiración novamente.
      New Course 4 Artist Functions Level 4_instruction: |
        Use a función "debuxe un cadrado"
        para debuxar este padrón.
      NEW Course 4 Artist Params 1_instruction: |
        Imos definir esa función para debuxar
        un cadrado con lados de 50 pixels. Clique en "editar" para comezar.
      NEW Course 4 Artist Params 10_instruction: |
        Cree un bloque de función "debuxe un hexágono"
        cun parámetra lonxitude. Pista: este hexágono ten lados de 100 pixels
        de tamaño.
      NEW Course 4 Artist Params 11_instruction: |
        Consegue descobrir como debuxar
        esta forma? Edite a función para usar o parámetro "lados".
      NEW Course 4 Artist Params 12_instruction: |
        Consegue completar este debuxo?
        Os lados de todas as formas teñen 100 pixels de lonxitude.
      NEW Course 4 Artist Params 12a_instruction: |
        Esta imaxe é semellante á anterior.
        Consegue usar un "bucle para" coa súa función para crear este debuxo?
      NEW Course 4 Artist Params 13_instruction: "Imos editar a función \"debuxe un
        polígono\".\nXa ten un parámetro \"lados\". Agora, imos agregar un parámetro\n\"lonxitude\".
        \r \nPista: O perímetro de cada forma ten 200 pixels de lonxitude. Lémbrase\n
        da ecuación para facer as formas ficaren do mesmo tamaño cando elas teñen\nun
        número diferente de lados?"
      NEW Course 4 Artist Params 14_instruction: |
        Edite "debuxe unha borde espiral" para
        usar os parámetros "lonxitude" e "lados" e entón recree esas formas.
      NEW Course 4 Artist Params 15_instruction: |
        Actividade libre: aquí están as funcións
        que escribiu e máis algunhas para usar. Debuxe algo incríbel!
        Xogue co longo do lapis para ver como os seus debuxos fican diferentes!
      NEW Course 4 Artist Params 2_instruction: |
        Cree unha función "debuxe un triángulo"
        con lados de 50 pixels desde o início
      NEW Course 4 Artist Params 3_instruction: "Agora, imos usar a función para debuxar\n5
        triángulos nunha liña. Pista: cada triángulo está separado por 30 pixels.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Vostede percibe algo diferente
        sobre estes bloques de función? Clique en "Executar" para ver o que acontece.
      NEW Course 4 Artist Params 5_instruction: |
        Cubra o ??? no bloque de entrada
        do parámetra lonxitude. Pista: o tamaño do pentágono é de 100 pixels.
      NEW Course 4 Artist Params 6_instruction: |
        Cubra o parámetro "lonxitude"
        para debuxar esa formas substituíndo o "???" polos números correctos. O
        cadrado e o triángulo teñen lados de 100 pixels, mentres o hexágono ten lados de
        75 pixels.
      NEW Course 4 Artist Params 7_instruction: |
        Consegue completar este debuxo? Pista:
        cada triángulo é 25 pixels maior que o anterior. O primeiro triángulo
        ten lados de 25 pixels de lonxitude.
      NEW Course 4 Artist Params 8_instruction: |
        O código da función deste triángulo
        está corrompido. Consegue editar a función para correxilo e crear triángulos
        de 25, 50 e 75 pixels de lonxitude?
      NEW Course 4 Artist Params 9_instruction: |
        Clique en "editar" para cubrir a definición
        da función "debuxe un cadrado" e agregar un parámetro. Debe recibir un parámetro
        lonxitude, como no triángulo. Desta vez, debuxe 3 cadrados: 25, 50 e 75
        pixels de lonxitude e separados por 100 pixels cada.
      NEW Course 4 Artist Params inspire_instruction: "Actividade libre - Inspiración:
        agora vostede\naprendeu todo o que precisa saber para crear un padrón como
        este! Se esa\nimaxe o inspira, tente facer algo similar. Caso contrario, cree
        algo\nvostede mesmo.\r\n \r\nQuere saber como se fixo o noso padrón de inspiración? "
      NEW Course 4 Artist Vars 1.5_instruction: |
        Bote unha ollada no código. Consegue
        ver como o bloque "defina a lonxitude" e o bloque "lonxitude" funcionan xuntos? Clique
        en "Executar" para velos en acción.
      NEW Course 4 Artist Vars 12_instruction: |
        Agora, recree o algoritmo do último
        nivel para crear un pentágono de lados 150.
      NEW Course 4 Artist Vars 2.5_instruction: |
        Bote unha ollada no código. Consegue
        ver como o bloque "defina a lonxitude" e o bloque "lonxitude" funcionan xuntos? Clique
        en "Executar" para velos en acción.
      NEW Course 4 Artist Vars 2_instruction: |
        Arraste un bloque numérico para o bloque "defina a lonxitude"
        para debuxar un conxunto de triángulos de 50 pixels.
      NEW Course 4 Artist Vars 4 5_instruction: |
        Belo traballo no último desafío,
        imos tentar novamente. Desta vez, imos facer este debuxo fantástico con hexágonos
        de 60 pixels.
      NEW Course 4 Artist Vars 4_instruction: |
        Imos tentar novamente. Consegue definir
        a variábel "lonxitude" para facer este debuxo fantástico con hexágonos? Pista: é un
        múltiplo de 10.
      NEW Course 4 Artist Vars 6_instruction: "Debuxe este padrón colocando a\nvariábel
        lonxitude nos lugares correctos e definindo o valor correcto para\nlonxitude.
        (Pista: é un múltiplo de 10).  \r\n\r\nPercibe como define o valor de\nlonxitude
        só unha vez e o código usa o valor correcto en todos os lugares?\r\n\r\n\r\n"
      NEW Course 4 Bee For Loops 1_instruction: |
        Use un bucle para recoller o néctar
        de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use a variábel "contador" do seu bucle "para"
        para controlar a distancia do movemento horizontal.
      NEW Course 4 Bee For Loops 10a_instruction: |
        Pronto para un desafío? Colla o que
        aprendeu sobre bucles e tente resolver este problema. Lémbrese: pode
        ter que executar a súa solución varias veces antes de descobrir todas as
        etapas.
      NEW Course 4 Bee For Loops 11_instruction: |
        Pode usar a variábel do bucle para
        controlar o movemento e a recolle de néctar?
      NEW Course 4 Bee For Loops 2_instruction: |
        Agregue o código necesario para garantir que
        a abella recolla todo o néctar. Olle canto código precisa para este desafío!
        (Imos aprender unha maneira máis simple no próximo desafío).
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, o "bucle para" volve isto moito máis
        fácil! Todo o código que vostede precisa está alá, bote unha ollada a como está feito
        e entón clique en "Executar" para ver como funciona.
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Agora, precisamos mover para diante "contador"
        veces, e entón obter o néctar "contador" veces. Consegue usar dous bucles "repita"
        para resolver este desafío?
      NEW Course 4 Bee For Loops 4_instruction: |
        Substitúa o ??? no "bucle para"
        pola maior cantidade de néctar que a abella ten que recoller.
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Vostede está collendo o xeito de como usar
        o "bucle para"? Imos axudar a abella a obter o resto do néctar.
      NEW Course 4 Bee For Loops 5_instruction: |
        Vostede tamén pode usar un bucle "para" para facer conta
        regresiva. Tente recoller este néctar facendo unha conta regresiva de 5 até 1, de 1 en 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        O último número no seu bucle "para" é
        chamado "incremento". A cada execución do bucle, a variábel contador
        é alterada de acordo co incremento. Tente recoller estas flores usando
        un incremento de 2.
      NEW Course 4 Bee For Loops 7_instruction: "Agora, imos combinar a variábel \"contador\"\ncun
        bloque matemático! Como pode usar a variábel \"contador\" para navegar\npor
        este xardín co menor número de bloques posíbel? O que vostede precisa facer
        para\nrecoller 3, 6, 9, 12 ou 15 néctares desta vez? O segredo está na variábel\n\"contador\"!\r\n\r\nLémbrese:
        se o seu bucle estivese contando de forma crecente, o incremento é engadido\ná
        variábel \"contador\" a cada repetición."
      NEW Course 4 Bee For Loops 8_instruction: "Vostede conseguiu! Cal debe ser o
        seu incremento\npara recoller 3, 6, 9, 12, 15 néctares?\r\nPista: canto precisa\nagregar
        a cada número para obter o número seguinte?"
      NEW Course 4 Bee For Loops 9_instruction: |
        Se o seu bucle está facendo conta regresiva, o
        incremento é substraído da súa variábel contador a cada repetición. Cal debe ser
        o seu incremento para recoller 9, entón 6, e entón 3 néctares?
      NEW Course 4 Bee For Loops 95_instruction: |
        Bote unha ollada en cada parte do
        "bucle para" que vostede acabou de crear. Consegue descobrir que números
        precisa dobrar para resolver este desafío? Por que funciona?
      NEW Course 4 Play Lab Params 11_instruction: |
        É hora da actividade libre! Divírtase
        con todos os bloques da súa caixa de ferramentas.
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Imos tentar novamente, pero agora con
        menos axuda. O que precisa editar desta vez para facer que os personaxes patrullen?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        "O que pensa que este código vai
        facer? Presione "Executar" para ver o que acontece".
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Usando o que vostede aprendeu até
        agora, vostede consegue facer o dinosauro dar un paso adiante toda vez que o pinguín conta?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        É hora da actividade libre,
        divírtase con todos os bloques da súa caixa de ferramentas.
      NEW Course 4 Play Labs For Loops 8a_instruction: |
        Desafio: como
        usaría o "bucle para" para facer cada actor andar e dicir o seu número de actor,
        e entón sumir da pantalla?
      New Play Lab Project_instruction: |
        Cree a súa propia história ou xogo! O seu código
        está gardado como un proxecto así que pode volver a calquera hora.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.
        \ Can\nyou draw a bat?\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Non é unha boa idea topar cun Creeper.
        Pase con coidado polos Creepers e chegue a úa casa en seguranza.
      Overworld Chop Tree_instruction: A madeira é un recurso moi importante. Moitas
        cousas son feitas con ela. Ande até a árbore e use o comando "destruír bloque"
        para derrubala.
      Overworld Chop Trees_instruction: Precisamos construír unha casa antes que o
        sol se poña. As casas utilizan moita madeira. Corte todas as 3 árbores.
      Overworld Free Play 20x20_instruction: Parabéns! Vostede concluiu todas as nosas
        tarefas! Agora, constrúa e cree algo único, usando todo que xa aprendeu.
      Overworld Free Play_instruction: Este escenario é todo seu para vostede crear.
        Vostede escolle o que construirá.
      Overworld House Frame - A_instruction: |
        Imos facer a nosa propia casa! Este lugar
        parece bon. Constrúa a fundación sobre os bloques de terra.
      Overworld House Frame - C_instruction: |
        Imos facer a nosa propia casa! Este lugar
        parece bon. Constrúa a fundación sobre os bloques de terra.
      Overworld House Frame B_instruction: |
        Unha parede está preparada, imos construír
        o resto da casa seguindo a súa planta! Vostede vai precisar repetir as súas accións
        aínda ben veces.
      Overworld House Frame B2_instruction: |
        Unha parede está preparada, imos construír
        o resto da casa seguindo a súa planta! Vostede vai precisar repetir as súas accións
        aínda ben veces.
      Overworld House Frame C_instruction: |
        Unha parede está preparada, imos construír
        o resto da casa seguindo a súa planta! Vostede vai precisar repetir as súas accións
        aínda ben veces.
      Overworld House Frame Chosen_instruction: |
        Constrúa o resto da súa casa co
        material que queira. O comando "repita" vai ser ben útil.
      Overworld House Frame_instruction: Imos facer a nosa propia casa! Este local
        parece bon. Constrúa unha estrutura nos bloques de terra.
      Overworld Minecart Track_instruction: Vostede voltou á superfície con moitos
        recursos subterráneos. Agora, imos construír un paso ao longo do camiño de
        terra que comeza na súa casa. O primeiro paso é limpar o camiño. Siga o camiño
        e remova as árbores.
      Overworld Move to Sheep_instruction: Agregue un segundo comando "andar á frente"
        para chegar á ovella.
      Overworld Place Wall_instruction: Toda casa comeza cunha parede. Constrúa a
        primeira parte da súa casa colocando os comandos "colocar" e "andar adiante"
        dentro do bucle de repetición.
      Overworld Plant Crops_instruction: É sempre bon pensar no futuro. Plante colleitas
        nos dous lados da auga para non pasar fame despois.
      Overworld Powered Minecart_instruction: Óptimo traballo! Vostede colleitou varios
        recursos e construiu unha casiña modesta. Agora, constrúa o paso desde o borde
        do mapa até a porta da súa casa.
      Overworld Shear Sheep_instruction: Hora de rapar ovellas! Use o comando "tosquiar"
        para obter lá das dúas ovellas.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry
        clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges
        you make after you click Remix will be saved on your new remix and\nnot on
        your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: |
        As funcións permiten que vostede defina novos bloques! Movemos
        os bloques para debuxar un cadrado para dentro dunha función chamada "debuxe un cadrado".
        Vostede consegue usar a función "debuxe un cadrado" para crear os óculos? Os cadrados están separados
        por 75 pixels.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Ryan - 4-5 Bee Conditionals 2_instruction: |
        Agora, a abella só quere néctar.
        Non todos os obxectos son flores, entón olle embaixo de TODAS AS NUBES para ver se
        está escondendo unha flor. Se estivese, entón vostede pode recoller o néctar.
      Ryan - Bee Conditionals_instruction: |
        The bee only wants nectar right now.
        Not all objects are flowers, so check underneath EVERY CLOUD to see if it
        is hiding a flower. If it is, then you can gather nectar.
      Ryan Test Locked Blocks_instruction: |
        Aquí temos unha función chamada "patrulle".
        Edítea para mover o gato 400 pixels para enriba, e entón 400 pixels para baixo.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\r\n\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it past level\n4 to move
        to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        Landra! Landra! Landra! Use un bloque "se" para me levar até alá
        co menor número de bloques.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: |
        Ok, imos facer novamente para coller a práctica - este non é
        moi diferente, pero coidado coa parede!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |
        Os bloques "se-senón" verifican unha condición e, de seguida,
        fan unha cousa OU outra. Para que eu chegue até a landra, tente usar este novo bloque.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        Imos praticar o uso do bloque "se-senón" máis unha vez. Consegue
        acertar na primeira tentativa?
      scrat 20_instruction: |
        Consegue agregar somente 3 bloques para me axudar a resolver un labirinto máis
        complexo? Se vostede fai isto correctamente, eu podo percorrer calquera camiño cheo de curvas,
        non importa a lonxitude. Depresa! O xeo está derretendo!
      SpecialFrozenLevel_instruction: |
        Vostede fíxose oficialmente un artista mestre!
        Cree un país das maravillas de xeo.
      Standalone_Artist_1_instruction: |
        Benvido Artista! Primeiro, imos tentar
        facer un cadrado simple usando os bloques "vire á dereita" e "avance".
        Cada lado debe medir 100 pixels.
      Standalone_Artist_2_instruction: |
        Debuxe este diamante con ángulos de 120 e 60
        graos e lados de 150 pixels de lonxitude.
      Standalone_Artist_3_instruction: |
        Consegue debuxar este hexágono con lados de
        100 pixels e ángulos de 60 graos?
      Standalone_Artist_4_instruction: |
        Agora vostede ten un novo bloque para xogar,
        o bucle. Vai repetir un conxunto de comandos. O que acontece se vostede repite estes
        comandos 6 veces?
      Standalone_Artist_5.5_instruction: |
        Observe como simplificamos o código do diamante,
        transformándoo nun bucle. Pode repetir toda a secuencia 12 veces para debuxar
        a flor. Pista: vostede terá que virar 30 graos despois do bucle do seu diamante
        para non continuar a debuxar o mesmo diamante todas as veces.
      Standalone_Artist_5_instruction: |
        Cantas veces precisa repetir este diamante
        para debuxar a flor?
      Standalone_Artist_6_instruction: |
        Repita este código do hexágono 6 veces para crear
        o debuxo. Cantos graos precisa virar a cada vez? Pista: divida
        o número de graos nun círculo polo número de veces que vostede está repetindo.
      Standalone_Artist_7_instruction: |
        Unha función é máis unha ferramenta de programación para que
        non teña que repetir as mesmas accións. Esta función debuxa unha flor, entón
        pode usala sempre que queira debuxar unha flor. Úsea xuntamente co novo bloque
        "puxe" para debuxar esas flores. Pista: as flores son separadas por 150 pixels
      Standalone_Artist_8_instruction: |
        Temos aquí unha función chamada "Debuxe unha forma",
        que programamos para debuxar hexágonos. Execute o código para ver o que fai e,
        de seguida, tente usalo coa función para ver o que acontece. Consegue facer
        que debuxe un padrón de cadrados, triángulos ou octógonos?
      Standalone_Artist_9_instruction: |
        Agora vaia adinate e faga a imaxe que
        queira! Vostede ten até unha función vacía para usar para facer o que
        queira!
      Standalone_Artist_v2_instruction: |
        Benvido Artista! Primeiro, imos tentar
        facer un cadrado simple usando os bloques "vire á dereita" e "avance".
        Cada lado debe medir 100 pixels.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instrucións
      U2 frequency random sub_instruction: Instrucións
      U2 vigenere cipher_instruction: Instrucións
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill
        tell the user when they are right and when they are wrong. (Click to\nsee
        full instructions)\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that, if the sum of the dice
        is a 7 or 11, rolls again and keeps rolling until the sum is not 7 or 11.
        (Click to see full instructions)
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall
        to readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall
        to readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall
        to readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto
        readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare
        read from the new table.(Click to see full instructions)\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand
        to read from a table that does not exist. (Click to see full instructions)\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords
        call individually. (Click to see full instructions)\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall
        individually. (Click to see full instructions)\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin
        the records return from the readRecords call. (Click to see full instructions)\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords
        return from the readRecords call. (Click to see full instructions)\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin
        2008 and print it out. (Click to see full instructions)\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing
        the readRecords search terms. (Click to see full instructions)\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe
        search criteria (Click to see full instructions)\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe
        search criteria (Click to see full instructions)\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor
        have a population of 2,000,000. (Click to see full instructions)\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor
        have a population of 2,000,000. (Click to see full instructions)\r\n"
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin
        a row are flipped. (Click to see full instructions)\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\r\n(Click\nto
        see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround
        and call it to make the turtle move as depicted. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add text input UI elements for name and
        age. (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto
        get the strings \"begin\" and \"nder\" from a sentence no matter where\nin
        the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mydata”
        table. (Click to see full instructions)
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Add
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        fro the "Add Contact" button so that when a new contact is added the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords
        command. (Click to see full instructions)\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction.
        (Click to see full instructions)\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby
        a call to readRecords. (Click to see full instructions)\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare
        read from the new table. (Click to see full instructions)\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand
        to read from a table that does not exist. (Click to see full instructions)\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues
        in the response from the database. (Click to see full instructions)\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall
        individually. (Click to see full instructions)\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie
        in your database. (Click to see full instructions)\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe
        records returned by a call to readRecords. (Click to see full instructions)\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Write a function called "updateLocalData"
        that copies the data in your database into your "contacts" global variable.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called "refreshLocalData"
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Modelo
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\",
        run the app and click the button. Run it multiple times with different\nnames!
        Watch the console and use the ‘View Data” button to see how the table\nis
        updated. As you play around make sure you can explain the purpose of each\nof
        the circled parts of the diagram.\r\n\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\r\n\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether
        all the pieces from a record.\r\n\r\n<<Name>> is <<Age>> years old\nand like
        <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin
        the array\r\n\r\n"
      U4L15 Read Data 4_instruction: "\r\nUse a random record from the list of records\nto
        display your sentence."
      Underground Avoiding Lava_instruction: Hai lava escondida baixo algúns destes
        bloques, que precisará cobrir antes de avanzar. Un comando "se" será útil
        aquí. Agregue un comando "andar cara adiante" no sitio correcto para extraer
        estes bloques.
      Underground If Statements_instruction: Agora, a situación complicou un pouco.
        Extraia 3 pedras de lava, pero non caia na lava. Use un comando "se" para
        colocar paralelepípedos sobre calquera lava que vostede descobrir.
      Underground Iron_instruction: Non é unha boa idea tentar andar sobre lava incandescente.
        Coloque os paralelepípedos para crear unha ponte, despois extraia polo menos
        dous dos bloques de ferro.
      Underground Mine in a Circle_instruction: "Descubra unha forma de obter 5 diamantes
        e 7 pedras vermellas! Tente usar un comando de repetición dentro dun comando
        de repetición para andar nun cadrado.\r\n"
      Underground Mining Coal_instruction: Atopará os recursos máis valiosos no subterráneo,
        pero pode ficar escuro alá dentro. Coloque polo menos 2 antorchas e extraia
        polo menos 2 carbóns.
      Underground Test Level_instruction: Recolla todos os minerais!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
