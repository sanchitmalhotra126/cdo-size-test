name 'CSPPD3-u3 chunk 5 resources'
css 'unplugged'
markdown <<MARKDOWN
<link rel="stylesheet" type="text/css" href="https://staging.code.org/curriculum/docs/web/k5online.css">

### Unit 3 Overview > Chunk 5: Introduction to Loops and Arrays > Resources

Here are a few resources to help you get started with understanding these CS concepts. Please share any resources you find in the <a href=“http://forum.code.org/c/csp-unit3” target=_blank>forum!</a>

#### Introduction to While Loops

##### Vocabulary

- **While Loop**: a looping structure that evaluates a conditional expression and repeats the body of the loop until the expression is no longer true. For example, you might dig through your writing utensils until you find a blue pen. You don’t know how many pens you’ll need to look at before you find a blue one, so you will keeping digging **while** you haven't found one.
 <br>
 One thing that's tricky for the first timer is that while loops require you state the looping condition in the positive, but many times you intuitively think about loops in the opposite way: I want to loop **until** some condition is true.  JavaScript does not have a a "repeat until" structure so you have to use a while loop.  This means that sometimes you need to state things in ways that would be awkward in English.  
 <br>
 For example you might want to *say*: "dig through the drawer **until** you find a blue pen."  But in the while loop version, you need to invert the condition: "**while** I have *not* found a blue pen, keep digging."  This distinction is subtle.

Let’s consider another example. 

<img src="https://images.code.org/1d7330cc481e1094c25e830d87c3a53b-image-1446443737305.gif" width="450" style="float:right; margin-left:30px">
<br>
Imagine you wanted to simulate flipping a coin, and you want to keep track of how many heads in a row you flip. You won’t know ahead of time how many times in a row heads will come up, so you want to keep flipping the coin **while** it comes up heads. 
<br><br>
In english: “while the coin is showing heads, flip the coin, and add one to a count of the number of times heads has come up.” Check out the short program on the right, which shows how you might write a program that uses a while loop for this coin flipping simulation.


##### Lessons in Code Studio

 * Lesson 22 - Introduction to While Loops
 * Lesson 23 - Counting flips: loops and simulation

##### External Resources 

- <a href="http://www.w3schools.com/js/js_loop_while.asp" target=_blank>JavaScript While Loop- W3Schools</a>
- <a href="https://youtu.be/F8H-41bpJ6E" target=_blank>Video: While Loop - (Code Studio video from other courses) </a> Note that this video references the block-only environment used by our Intro to Computer Science courses intended for younger students, but still describes the basic concept of a loop, which is shared across all programming languages. 
  
#### Introduction to Arrays

##### Vocabulary

- **Array**: a data type that holds a list of items. An array can be used like any other variable and gives us the ability to store information for use while the program is running. With an array we can keep track of lots of pieces of information all under one name. 
<br><br>
When creating an array we often add some initial items to the list. For example, `var numList = [2,4,8,16,32]`.  You can also store string in an array `var studentNames = ["Nancy", "Bill", "Marcus"]`
<br><br>
The elements stored in an array are each assigned an `index`, or numeric value related the position of the item relative to the list. Indexes start at 0. In the example above, `Nancy` is stored at index 0 and `Bill` is at index 1. 
<br><br>
If we want to **retrieve the value of an element in the array**, we just need to reference the index of the item. For example, if we wanted to print the word “Nancy” from the array, we could do this: `write(studentNames[0]);`
<br><br>
Let’s looks at an example in code. Imagine we’re back to flipping the coin from earlier.  We can use a two-element array in a clever way to make custom message for heads or tails. 
<br>
<img src="https://images.code.org/b5a8a013306d4ec5aa1ec7286ee6f369-image-1446446698823.gif" width=“550px”>
<br><br>
This example is essentially just generating a random number to use as an index into the array.

**Each individual item in a array can be used like a variable of that type.** 
We can **reassign the value of an element of an array** by referencing a specific index and giving that index a new value. 

For example, `studentNames[0]=“Brook”;` This line would change the value of `studentNames[0]`from “Nancy” to “Brook” 
<br><br>
We can also **add elements** to the array by using the `appendItem` function.  `appendItem` is a function added to App Lab because it is a function students will see on the AP exam.  There are actually many ways to add items to arrays in JavaScript, but we will use `appendItem` in this course.  

`appendItem` adds a given element to the "end" of the array.  It takes to parameters: the array to append to, and the item to append.  This line of code will add "Caley" to the list of names.

`appendItem(studentNames, "Caley")`

After this operation `studentNames` will have 4 values in it and Caley will be at index 3 - the last index.

- **For Loop**: 

A *for loop* is typically used to execute a block of code some number of times.  It does this by doing 3 things:
 * creates a variable to keep track of the count
 * defines a looping condition
 * defines how to change the looping variable after each iteration.
 
The most common setup is this:
 
<img src="https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png">

The `for` loop repeats statements like a `while` loop, but adds an initialization and final expression step, like this:
<br><br>
```
for (initialization; condition; final expression){
    code to execute
}
```
<br>
For loops are a convenient way to wrap up into one statement these three things you need to do to make a repeat loop.  You can achieve the same thing with a while loop but the code gets spread out.

<img src="https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png">

As we’ll see in this chunk, `for` loops are particularly useful for situations where we want to use a loop to visit, read, or update, every item in an array.

##### Lessons in Code Studio

 * 24 - Introduction to Arrays
 * 25 - Using Arrays in Apps

##### External Resources 

- <a href="http://www.w3schools.com/js/js_arrays.asp" target=_blank>JavaScript Arrays- W3Schools</a>
- <a href="https://en.wikipedia.org/wiki/Array_data_type" target=_blank>Array data type- Wikipedia</a>




#### Using loops to process arrays

For loops are convenient for processing arrays because we can use the looping variable as an index into the array.  

Arrays also carry around with them a `length` variable that holds the number of items currently in the array.

`myArray.length`

Combining these things: here is an example that will simply display all the values in an array.

![](https://images.code.org/930923a746004603ee9f68f8807c3e70-image-1447948267650.png)



##### Lessons in Code Studio

* 26 - Processing Arrays
* 27 - Functions with return values
* 28 - Canvas: using arrays in drawing

##### External Resources 

- <a href="http://www.w3schools.com/js/js_loop_for.asp" target=_blank>JavaScript For Loop- W3Schools</a>
- <a href="http://www.w3schools.com/js/js_arrays.asp" target=_blank>JavaScript Arrays- W3Schools</a>
- <a href="https://en.wikipedia.org/wiki/Array_data_type" target=_blank>Array data type- Wikipedia</a>
- <a href ="https://youtu.be/G8hfAk4PfOM" target=_blank>Video: For Loops in App Lab (from the curriculum)</a>


- <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target=_blank>The HTML Canvas </a> Note that App Lab has a number of library functions for doing canvas drawing that differ slightly from the real API to simplify some of the process.

<br><br>
<a class="btn btn-large btn-primary next-stage submitButton">Continue</a>


MARKDOWN
