name 'How If Statements Work pt 1'
title 'title'
css 'unplugged'
description 'description here'
href 'path/to/html/in/asset/folder'
markdown <<MARKDOWN
Sometimes you want 

## Understanding Program Flow
Programs are said to have a "flow of execution". You start by executing some line of code and then the next and so on.

`if` statements let you change the flow while you're program is running. You can write code that *makes a decision that determines which lines of code should be run next.*

A flow chart is a common visual that's used to represent the various paths of execution that your program might take.  Many people use them to help plan.  This flow chart depicts a program executing one line after another until it gets to a point where it needs to make a decision. 

In order to determine which path to take you state some **condition**. In programming a condition is a statement or expression that evaluates to **true** or **false**.  A very common type of condition you want to check is a **comparsion** of two values.  Is this number less than than that one? Is this text equal to that text? and so on.

![](https://images.code.org/23cbde11616144cab28e1b36ee632c7f-image-1479224927261.png)

## How If statements work

It can be hard to understand the crucial purpose of conditional expressions without seeing how they are used.  Here is a simple example showing a basic `if` statement.  Note: it only does part of what the flow chart above describes.


There are two components to an if-statement.
1. An expression is evaluated to be **true** or **false**
2. You use an if-statement to encapsulate the code that should run *if* the expression was true.


![](https://images.code.org/72d8d6de07cececcfdb79e22f26bd6d0-image-1479226211134.png)

1. When this statement is encounterd the *first* thing that happens is this expression is evaluated.  It's a comparision between the value of a variable `age` and the number 18.  If at this point in the program the age is greater than or equal to 18, then we say the expression "*returns true*".  Otherwise it returns false.

2. These console.log statements will *only* execute if the expression was true. The curly-braces that are part of the if statement surround all of the code that should be execute if and only if the expression was true.  Otherwise, the entire section of code ecapsulated in the if statement is skipped.

3. Execution picks up here, on the first line after the if-statement. Notice that at this point in the program one of two things happened: either two statements were displayed to console (if age was at least 18) or *nothing* was displayed.

## Comparison Operators

A common type of condition is a comparison of two values.


![](https://images.code.org/cff8301c7fc1c5f733f28ad168b0dcc1-image-1479229314648.png)


<img src="https://images.code.org/ea8cf41d0e06e6ddee31086fbb9ea2b9-image-1479232029068.png" style="float: left; margin: 50px">
Compares two values - numbers, strings, or other booleans - and returns *true*  if they are equal, otherwise *false*.

* `"Hello" == "hello"` returns *false* because the strings are slightly different.

* `"3" == 3` returns *false*  because the string 3 is not the same as the integer 3.

* `(2+1) == 3` returns *true*  because the arithmetic expression evaluates to 3.

* `x == 7` returns *true*  when the variable x has the value 7.

*Remember: the single equal sign <code>=</code> is the assignment operator. We need something different to indicate we want to compare two values instead of assign one to the other.*

<div style="clear:both"> </div>
<hr>

<img src="https://images.code.org/67fc10f1dec4f129c64c62d583ebf7ee-image-1479232142029.png" style="float: left; margin: 50px">

Compares two values - numbers, strings, or other booleans - and returns `true` if they are **not equal**, otherwise `false`.

* `"Hello" != "hello"` returns *true* because the strings are slightly different.

* `"3" != 3` returns *true* because the string 3 is not the same as the integer 3.

* `(2+1) != 3` returns *false* because the arithmetic expression evaluates to 3.

* `x != 7` returns *true* when...the variable x *is any value other than* 7.

<div style="clear:both"> </div>

<hr>

<em>



<div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 2; width: 100%">

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;">
<img src="https://images.code.org/ea8cf41d0e06e6ddee31086fbb9ea2b9-image-1479232029068.png" style="margin: auto"><br>
Compares two values - numbers, strings, or other booleans - and returns <strong>true</strong> if they are equal, otherwise <strong>false</strong>.<br>

<br><code>"Hello" == 'hello'</code> returns <strong>false</strong><br>because the strings are slightly different.
<br><code>"3" == 3</code> returns <strong>false</strong><br>because the string 3 is not the same as the integer 3.
<br><code>(2+1) == 3</code> returns <strong>true</strong><br>because the arithmetic expression evaluates to 3.
<br><code>x == 7</code> returns <strong>true</strong><br>when the variable x has the value 7.
<br>
<em>Remember: the single equal sign <code>=</code> is the assignment operator. We need something different to indicate we want to compare two values instead of assign one to the other.</em>

</p>
<p>
<img src="https://images.code.org/67fc10f1dec4f129c64c62d583ebf7ee-image-1479232142029.png" style="margin: auto"><br>
Compares two values - numbers, strings, or other booleans - and returns <strong>true</strong> if they are NOT equal, otherwise <strong>false</strong>.<br>

<br><code>"Hello" != 'hello'</code> returns <strong>true</strong><br>
because the strings are slightly different.
<br><code>"3" != 3</code> returns <strong>true</strong><br>
because the string 3 is not the same as the integer 3.
<br><code>(2+1) != 3</code> returns <strong>false</strong><br>
because the arithmetic expression evaluates to 3.
<br><code>x != 7</code> returns <strong>true</strong><br>
when the variable x is anything other than 7.

</p>
</div>

<br><br><br>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;">
Compares to values to see if the number on the left is <em>greater than</em> the number on the right.

<br><code>4 &lt; 3</code> returns <strong>true</strong>
<br><code>3 &lt; 7</code> returns <strong>false</strong>
<br><code>age &lt; 17</code> returns <strong>true</strong> when the value of the variable "age" is strictly greater than 17, otherwise false.

</p>
</div>
<p>
Compares to values to see if the number on the left is <em>less than</em> the number on the right.

<br><code>4 &lt; 3</code> returns <strong>true</strong>
<br><code>3 &lt; 7</code> returns <strong>false</strong>
<br><code>age &lt; 17</code> returns <strong>true</strong> when the value of the variable "age" is strictly greater than 17, otherwise false.

</p>

</div>



## Word Soup: Conditionals, Booleans, expressions, statements

There a bunch of terms that do have specific meanings but generally are all talking about the same thing.

* Terms involving "Condition" -- Condition, Conditionals, Conditional Expression, Conditional statement, conditional execution
  "Condition" is simply the generic term for code that alters program flow based on true/false values.

* Boolean, Boolean values, Boolean expressions 
Named after mathematician George Boole who invented a whole corner of mathematics that is now called "Boolean Algebra" that operates using only true/false values. This is a very important corner of mathematics for computer science because it maps very easily to binary.

Thus, a **Boolean value** simply a computer science-y term that means a true/false value.  
A **Boolean expression** is a statement that evaluates to single true/false value.

![]()
MARKDOWN
