name 'CSP Algorithms Map'
css 'unplugged'
markdown <<MARKDOWN
# Algorithms - Solving the problems

## What is an algorithm?

**Definition**

An algorithm is a precise sequence of instructions for a process that completes a task. Algorithms can be executed by a computer and are implemented using programming languages.

<div style="clear: both"> </div>

<div style="float:right;width:200px">
<img src="https://images.code.org/3f6dc46078eb19ba8885fb6d02fe0203-image-1515092634132.jpg">

By asobuno (Own work) [<a href="https://creativecommons.org/licenses/by-sa/3.0">CC BY-SA 3.0</a>], <a href="https://commons.wikimedia.org/wiki/File%3ATying_one&#039;s_shoe.jpg">via Wikimedia Commons</a>
</div>

## Automating Physical Tasks

**Physical Tasks in Daily Life**

One way to look at your typical day is as a series of tasks you need to complete. For example you'll need to get dressed, pack your things, travel from one place to another, complete work, keep up with friends and family, prepare and eat meals, clean and organize your things, and relax and have fun.

<div style="clear: both"> </div>

<img src="https://images.code.org/a2835a98c80954695d1db19f0d66cf6b-image-1515092970066.jpg" style="float:right;width:200px">

**Automating Tasks**

Over history one of the most significant shifts in how we complete tasks is through automation. Historically humans have invented tools to solve problems. Shovels have helped us dig holes, trucks help us move heavy loads, and writing tools make it much easier to keep track of important information.

With automation instead of just making tools to help us complete tasks, we created tools that essentially did the entire task for us. We invented machines to weave cloth, harvest food, and assemble tools that could complete these tasks with almost no human input at all!

<div style="clear: both"> </div>

<div style="float:right;width:200px">
<img src="https://images.code.org/28011d19f50522a3b3b5c563e9a79c37-image-1515091698632.JPG">

By Clem Rutter, Rochester, Kent. (self) [<a href="http://www.gnu.org/copyleft/fdl.html">GFDL</a> or <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>], <a href="https://commons.wikimedia.org/wiki/File%3AQSMM_John_Pilling_%26_Son_Loom_2707.JPG">via Wikimedia Commons</a>
</div>

**Automation Requires Algorithms**

Automation typically results in tasks that are completed more quickly, easily, and reliably. In order to build a machine to automate a task, however, you need to be able to describe precisely how the task should be completed. For example, you need to know all the steps to make each stitch in a piece of cloth, or exactly how close to one another and at what depth each seed should be planted. These precise steps that automate a task are algorithms!

<div style="clear: both"> </div>

## Algorithms and Computer Science

<div style="float: right; width: 250px; margin-left: 10px; background-color: #ffffff; color: #0094ca">
  <img src="https://images.code.org/922f0ea03649c735ae4e27531bb12508-image-1513368088093.00.43 PM.png" style="width: 90%">    
  <br><br>
  <em>drawRectangle()</em> and <em>right()</em> are examples of abstraction because they capture the code for more complex behavior and simplify the representation of that behavior by giving it a single name.
</div>

**Tools for Thinking Tasks**

Many of our daily tasks don't involve physical work and instead just require thinking. For example keeping track of money, remembering birthdays, or scheduling activities. Just like physical tasks, thinking tasks can be monotonous or challenging, and so we've made tools to help us complete them. For example calendars, clocks, financial records, and books help us with different thinking tasks. 

**Programming - Communicating algorithms to a computer**

Thinking tasks deal with information. In order to automate thinking tasks humans needed to design

Just like with physical tasks, humans want tools to automate their thinking tasks. This is essentially what computers are, information processing tools for automating thinking tasks.

Computers 

A program is a set of instructions to complete some task using the tools made available to you in a programming language. In other words, a program is an algorithm for completing a task. The difference between a computer and human algorithm is the extreme precision of a programming language. Computers require instructions that can only have a single, unambiguous meaning. Computer languages only contain a relatively small set of single individual commands that the computer is capable of running. In order to design an algorithm, you need to combine these commands together.

**Sequence, Selection, Iteration**

Algorithms are created by combining the types of instructions that a computer can complete in three ways. In fact, using these three you can describe ANY algorithm completed by a computer.

* **Sequence:** This is placing commands in an order. When you write a program that runs line by line you are defining the order in which a computer should run the fundamental commands that it understands.

* **Selection:** This is when a computer chooses to run one of two or more sections of code. When you use an if-statement you are making use of selection.

* **Iteration:** Repeating a section of code. In programming this means using a loop.

**Algorithms and Creativity**

There are many (conceivably infinite) ways to write a program to complete a task. Some may be more efficient or easier to understand than others, but there is typically no single "right" algorithm to complete a task. There also typically isn't an "algorithm for writing algorithms". You need to investigate and understand the problem you are trying to solve, and then get creative with how you'll combine the tools the programming language provides you.

<div style="clear: both"> </div>

## Algorithms, Unit 5, and the AP Exam

**Algorithms and AP Computer Science Principles**

(1) Algorithms is one of the seven big ideas of AP Computer Science Principles.

(2) For the AP Create Performance Task you need to...

<div style="width: 50%; margin-left: 40px; background-color: #EEEEEE; font-family: serif; font-size: 12pt; padding: 10px">
[identify] a code segment that contains an algorithm you developed...[and]...explain how the algorithm helps achieve the purpose of your program.
</div>
<br>


MARKDOWN

teacher_markdown <<MARKDOWN
#### How to use this level

This level has a lot of text. Ways you might use it / incorporate it into your class:

* Assign as reading for students the day before
* Have students stop at this level during the normal progression and read as a group - discuss key points.
* Read and summarize for your students
* Make note of it as a reference for students that explains "algorithms"
* Use in conjunction with a preview of the AP Create Performance Task
MARKDOWN
