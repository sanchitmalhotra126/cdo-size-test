name 'CSP Algorithms Map'
css 'unplugged'
markdown <<MARKDOWN
# Algorithms - Solving Problems

## What is an algorithm?

**Definition**

An algorithm is a precise sequence of instructions for a process that completes a task. Algorithms can be executed by a computer and are implemented using programming languages.

<div style="clear: both"> </div>

<div style="float:right;width:200px">
<img src="https://images.code.org/3f6dc46078eb19ba8885fb6d02fe0203-image-1515092634132.jpg">

By asobuno (Own work) [<a href="https://creativecommons.org/licenses/by-sa/3.0">CC BY-SA 3.0</a>], <a href="https://commons.wikimedia.org/wiki/File%3ATying_one&#039;s_shoe.jpg">via Wikimedia Commons</a>
</div>

## Automating Physical Tasks

**Physical Tasks in Daily Life**

Daily life is filled with tasks. For example, most mornings you'll need to get dressed, pack your things, and then travel from one place to another. Your day at work or school will be filled with tasks to complete. Even keeping up with friends, relaxing, or going to bed probably includes some tasks if you look closely.

<div style="clear: both"> </div>

<img src="https://images.code.org/a2835a98c80954695d1db19f0d66cf6b-image-1515092970066.jpg" style="float:right;width:200px">

**Automating Tasks**

Most tasks we want taken care of quickly, easily, and reliably. Sometimes we practice the steps of a task, like tying our shoes, so that we can quickly complete it and move on to other things. In other cases we've made tools to help us complete tasks like shovels to dig holes or ropes to help pull and lift things.

Automation combines these two ideas. If completing a task requires the same predictable set of steps, perhaps we could build a tool that does all those steps for us. As a result humans built amazing machines that could weave cloth, plant and harvest food, or assemble products with little to no human input. This led to enormous shifts in everyday life!

<div style="clear: both"></div>

<div style="float:right;width:200px">
<img src="https://images.code.org/28011d19f50522a3b3b5c563e9a79c37-image-1515091698632.JPG">

By Clem Rutter, Rochester, Kent. (self) [<a href="http://www.gnu.org/copyleft/fdl.html">GFDL</a> or <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>], <a href="https://commons.wikimedia.org/wiki/File%3AQSMM_John_Pilling_%26_Son_Loom_2707.JPG">via Wikimedia Commons</a>
</div>

**Automation Requires Algorithms**

To automate a task you of course need the materials to design and build your machine, but just as important you need to know the precise steps the machine should be built to complete. A machine to weave cloth needs to know precisely how to make each stitch, and a machine to plant crops needs to know how close to plant each seed. In other words, in order to automate processes you need the precise sequence of steps, or algorithm, your machine will be designed to implement!

<div style="clear: both"> </div>

## Algorithms and Information Tasks

**Information Tasks and Tools**

Many tasks don't require physical work, but they do require thinking. For example, you might need to keep track of money, remember birthdays, or schedule activities. At their core these problems have to do with how we organize and make sense of information. Tools like calendars, clocks, and financial records help us complete these information tasks.

**Automating Information Tasks**

Many information tasks can be completed using step-by-step algorithms. For example when you learn the steps to add or multiply two numbers, you're really just practicing an algorithm. Tools like a mechanical cash register are built to implement those algorithms and help automate a task.

## Algorithms, Programming, and Computer Science

**The Everything Machine**

Through history machines to automate thinking tasks usually did only one thing. A machine could track stars in the sky, or add numbers, but couldn't do both. By comparison, a single modern computer can add numbers, show video, communicate over the Internet, and play music. This is clearly a very different type of machine!

In order to achieve this, computers were designed to complete a set of simple commands that are likely to come up in many information problems. For example a computer is able to add and subtract numbers, move information from one place to another, and compare numbers. This is because at a low level you'll actually find that most information tasks require this same set of commands.

Rather than being designed to do one task, a computer lets a human being write out the steps in which it uses the different commands it's designed to understand. Depending on the task the human wants the computer to complete they'll write a different sequence of commands. Said another way, a computer is a machine that's designed for a human to write algorithms for it to run!

## Algorithms and Creativity

**Sequence, Selection, Iteration**

Any programming language only provides so many commands. Algorithms are created by combining these instructions in three ways. In fact, using these three you can describe ANY algorithm completed by a computer. Those three ways are:

* **Sequence:** This is placing commands in an order. When you write a program that runs line by line you are defining the order in which a computer should run the fundamental commands that it understands.

* **Selection:** This is when a computer chooses to run one of two or more sections of code. When you use an if-statement you are making use of selection.

* **Iteration:** This is when a computer repeats a section of code. For example you can do this by using a loop.

**Algorithms, Programming, and Creativity**

Even with the limited commands a computer understands and the limited ways you can combine them, there are actually many, conceivably infinite, ways to write a program to complete a task. Some may be more efficient or easier to understand than others, but there is typically no single "right" algorithm to complete a task. There also isn't an "algorithm for writing algorithms". You need to investigate and understand the problem you are trying to solve, and then get creative with how you'll combine the tools the programming language provides you. Computer science is a creative discipline because computers literally require human creativity to do anything at all!

<div style="clear: both"> </div>

## Algorithms, Unit 5, and the AP Exam

**Algorithms and AP Computer Science Principles**

(1) Algorithms is one of the seven big ideas of AP Computer Science Principles.

(2) For the AP Create Performance Task you need to...

<div style="width: 50%; margin-left: 40px; background-color: #EEEEEE; font-family: serif; font-size: 12pt; padding: 10px">
[identify] a code segment that contains an algorithm you developed...[and]...explain how the algorithm helps achieve the purpose of your program.
</div>
<br>


MARKDOWN

teacher_markdown <<MARKDOWN
#### How to use this level

This level has a lot of text. Ways you might use it / incorporate it into your class:

* Assign as reading for students the day before
* Have students stop at this level during the normal progression and read as a group - discuss key points.
* Read and summarize for your students
* Make note of it as a reference for students that explains "algorithms"
* Use in conjunction with a preview of the AP Create Performance Task
MARKDOWN
