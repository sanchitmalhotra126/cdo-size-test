name 'CSD Review: Design Mode, IDs, and Events'
href 'path/to/html/in/asset/folder'
markdown <<MARKDOWN
# Event-Driven Programming Recap
Before embarking on making your own app from scratch let's recap a few important things:

## 1. Mental Note: UI elements  all function *basically* the same way

<div style="width: 300px; text-align: left; float: right">

	<img src="https://images.code.org/1c583d7f9d5e9d651a0616e583ccc801-image-1477513803793.png"><br>
<em>This example shows how buttons, labels and images can be made to look very similar. They can all behave similarly as well depending how you do event handling.</em>
</div>

All UI elements **have IDs** and can listen for user events and be used with `onEvent`.

* **Labels** can have a background color, but are designed to be filled with more text.

* **Buttons** have a default styling (green button) that changes *slightly* in color when you click it.  But buttons can also have a background image *and* background color at the same time which is convenient if your image is an icon (red thumbsup).
* **Images** can act a lot like buttons, only they can't have text or a background color.

**Screens** have IDs and you can use `onEvent` with them but they don't quite fit the mould because they have the special property that if you use `onEvent` with a screen, it will capture *every* event of the type you specify regardless of whatever other elements are clicked on.

**What UI element *should* you use?** 

There are no particular rules.  Use the UI element that makes the most sense to you and is easiest for you use and do what you want.  The UI elements actually aren't *exactly* the same, but the basic event-driven pattern fits.

<div style="clear: both;">&nbsp;</div>

## 2. There is a Pattern to Developing Event-Driven Programs in App Lab

You will find yourself going through this process over and over again.  The point is not that it's boring or repetitive (far from it!), but rather that **when you have an idea** for something to make, you know you can apply this process to get it done.

**Step 1 - Design Mode**

**Step 2 - Add onEvent to Code**

**Step 3 - Write the code for the event handling function**

**Step 4 - Run. Test. Debug.**

**Repeat**

As you learn more, of course, you'll see there are nuances to these steps, but these are the big ones.

### Click continue to see "Tips for Working on Your Own"



# Welcome to App Lab Design Mode
In App Lab "Design Mode" lets you drag and drop User Interface elements into the app.

### Vocabulary
**User Interface (UI)** - The "User Interface" or **UI** of an app refers to how a person (user) interacts with the computer or app.  There are common patterns to user interfaces that you probably know about just from experience:

* **UI Elements** or objects, like buttons, images, text boxes, pull down menus, screens and so on.
* **UI Events** or controls, like *click*, *scroll*, *move mouse*, *type keyboard key*, etc.

App Lab let's you easily add UI Elements to your app, and then add code to respond when a user interacts with those elements.  It's kind of two-step process, but we'll learn all about it in this lesson.

To start let's just look at Design Mode and add a single UI element (a button) to our app.  We'll add code later on.

<div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
You'll see a new set of switches above the app area that let you flip back and forth between "Design Mode" and Code Mode".</p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>Adding an element is as easy as dragging and dropping it into the app where ever you want. Once it's on the app screen you can reposition it, resize it and change lots of other properties about it </p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>The <em>Properties</em> tab shows you everything you can change about the look and feel of a UI element.</p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>The <strong>element ID</strong> is important because it's how you refer to the element in your code. We'll discuss element IDs later on.</p>
</div>

![](https://images.code.org/01a31ac3be66deb6d01a92a1edfffd21-image-1476726587662.png)


<div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 66%; float: right">

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>You can make the text that the user sees on the button text be whatever you like.</p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">6.</span><strong>Note:</strong> Scroll down to see other properties for a UI element might be "hiding" down below.</p>
</div>

<div style="clear: both"></div>
<hr>

**Now you try!**

# Choosing Good IDs

**Good IDs** are **meaningful and descriptive**.

Just like good names for functions, you will want an ID to describe the intended purpose of the element.  

For example, if you have many buttons in your program, you will want to give each an ID that describes what the button does. 

So, instead of this:
 
 * `button1` and `button2`

You might make IDs that convey not only that it's a button but what you intend the button to be used for, like:

 * `homeButton` and `saveButton` or
 * `buttonHome` and `buttonSave` or
 * `homeBtn` and `saveBtn`
 * it's up to you!

<img src="https://images.code.org/b33be9ee1521f2aa80fedcf22c929d44-image-1476910499958.png" style="display: block; margin: auto;">

# Rules About IDs
In making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...

* are case-sensitive
* cannot contain spaces.
* *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.
* can contain hyphens ("-"), underscores ("_"), colons (":"), or periods (".").

**Case-sensitive?**

This means there is a difference between `HomeButton` and `homeButton`  (notice the Capital H on the first one).

These differences seem annoying at first, but you get used to it, and actually appreciate the fact that the computer requires such precision.

There are a few common styles for capitalizing and spelling multi-word IDs:

* **"Camelcase"** -- `aCamelcaseNameMightLookLikeThis`
* **Underscores** -- `Some_people_like_to_use_underscores_to_separate_words`
* **dashes** -- `Others-like-to-use-hyphens-or-dashes`

Whatever you choose is up to you.  It's your style.  It just helps to be consistent.


# Responding to User Input

Design Mode makes it really easy to lay out the User Interface for your app, but we'll need to dive into Code Mode to make it actually respond to users.

In Game Lab the Draw loop just constantly ran code, using conditionals to check for interactions from the user. App Lab, on the other hand, waits to respond to certain **events** that occur in a program. It's App Lab's way of saying "Hey! something just happened!". This means that there doesn't need to be any code running when you aren't directly interacting with an app, and your code can respond to each of these events as they happen.

Collectively, the coding tasks involved in making your app respond to events by triggering functions are called **Event Handling**.  

In App Lab all event handling starts by adding a special block of code called `onEvent`.  Here is how to do it:

<br><br>

<div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 4; width: 100%">

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
Switch into Code Mode</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
Drag an <code>onEvent</code> block from the toolbox into the workspace.</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>
Use the pulldown menu to select the <em>ID</em> of the UI element you want to setup to respond to some event. The IDs of all UI elements added in design mode will be listed here.</p>
<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>
Use the pulldown menu to select the <em>type</em> of event you want to respond to. (Just use "click" for now).</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>
Add code inside the function that you want to run <em>when</em> the user triggers the event.  The function will run once every time the user triggers the specific event.</p>

</div>

![](https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png)

### Changing Screens with a "Click"

It's important to understand in Event-Driven programming that:

* **Users trigger events** - Events occur when users click a button, tap the screen, move the mouse, type a key on the keyboard, etc.
* **Events trigger code** - When an event occurs or "fires" it can be used to trigger a particular javascript function.

App Lab's `onEvent` block is a type of event-handling function called an **Event Listener**. It wraps all of the setup up you need to do event handling into one command that has several parts. Here is an example with everything labeled:

<img src="https://images.code.org/a4cf535f00b0b77737d5259386b4442d-image-1476884080311.png" style="display: block; margin: auto">

<div style="column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
Code to execute when callback function is triggered when the user clicks <em>button1</em>.  In this case, simply move the turtle forward 25 pixels. Event handling code will typically be more than one line. This is just a simple example to start.</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
Notice that this function, unlike others we’ve seen, does not have a name. It is also called a <em>callback function</em> which is an odd term. A callback function is only different from a normal function in that you don't call it directly from your code. Instead a callback function is <strong>called by the system</strong> at the time the specified event occurs. Callback functions are a common pattern in a lot of event-driven programming.</p>
</div>


### You'll try this next!


MARKDOWN

teacher_markdown <<MARKDOWN
#### Design First

Some students may be tempted to start playing around in Code Mode early on, but for this lesson we are going to focus solely on mocking up a User Interface. Let students know that they'll get to the code soon enough. These first few levels will allow students to build up a screen of their own design using all of the elements available in App Lab without worrying about the actual app they are creating.


#### Developing Good Programming Habits

Following clear and consistent naming conventions is an important habit to develop, but the benefits are rarely immediately obvious to students. It really pays off in the long term to be a stickler for well named IDs, particularly because it will save your own sanity when it comes time to read your students' programs, but it will also simplify the process of combining each student's screen into a full team app.

#### Just the Facts

There's a lot to consume here and many of the details about how events work in App Lab are not totally necessary to understand for our needs in this unit. If students are struggling with how programming works in App Lab, focus on these essentials:

* There is no `draw` loop that runs forever
* The `onEvent()` block specifies:
	* an element ID
    * an event (such as "click" or "mouseover")
    * code that should be run when the event occurs (this code is technically an anonymous callback function, represented by the green block)
* Code inside `onEvent()` blocks runs any time the specified event occurs

#### Compared to Game Lab

In Game Lab, we might use the following code to check if a sprite named "button" was clicked and do something about it:

    function draw() {
    	if (mousePressedOver(button)) {
       		// Do something
       	}
    }


In App Lab, given a button with the ID "button", we could write the following code to achieve the same goal:


    onEvent("button", "click", function () {
    	// Do something
    });

In the App Lab example, the function is just another argument passed to the onEvent function, it just so happens that the argument must be a function itself. We could also define the function separately and write this same program as follows:

    function doSomething() {
    	// Do something
    }
    
    onEvent("button", "click", doSomething);


In the second example, notice that when we pass the function `doSomething` to the `onEvent` function we _don't_ include the parenthesis at the end. This is because we're actually passing the whole function as an object.

MARKDOWN
