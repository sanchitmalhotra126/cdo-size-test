<Gamelab>
  <config><![CDATA[{
  "game_id": 50,
  "created_at": "2016-06-17T18:07:07.000Z",
  "level_num": "custom",
  "user_id": 1,
  "properties": {
    "skin": "gamelab",
    "code_functions": {
      "draw": null,
      "drawSprites": null,
      "Game.mouseX": null,
      "Game.mouseY": null,
      "Game.frameRate": null,
      "keyDown": null,
      "keyWentUp": null,
      "keyWentDown": null,
      "var sprite = createSprite": null,
      "setAnimation": null,
      "sprite.height": null,
      "sprite.width": null,
      "x": null,
      "y": null,
      "rotation": null,
      "shapeColor": null,
      "background": null,
      "fill": null,
      "noFill": null,
      "stroke": null,
      "strokeWeight": null,
      "noStroke": null,
      "color": null,
      "arc": null,
      "ellipse": null,
      "line": null,
      "point": null,
      "rect": null,
      "regularPolygon": null,
      "shape": null,
      "text": null,
      "textAlign": null,
      "textFont": null,
      "textSize": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "comment": null,
      "console.log": null
    },
    "show_d_pad": "true",
    "edit_code": true,
    "embed": "false",
    "markdown_instructions": "# Checking for Multiple Conditions\r\n\r\nSo far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. \r\n\r\nIf you want to check more than one condition before making a decision you can use **nested if statements** to do this. Nested if statements put one if statement inside another if statement. You can think of this as asking a question and then based on the answer asking another question before making a decision. \r\n\r\nIn this program we are going to be ..... To do this we will need to ask two questions in a row:\r\n\r\n1) \r\n2) \r\n\r\n# Do This\r\n\r\n",
    "start_blocks": "// Create a sprite\r\nvar sprite = createSprite(200, 100, 50, 50);\r\nsprite.shapeColor = \"red\";\r\n\r\nfunction draw() {\r\n  background(\"white\");\r\n  \r\n  // Move the sprite in the direction of the arrow keys\r\n  // But make sure it doesn't go off the screen\r\n  if (keyDown(\"up\")) {\r\n      sprite.y = sprite.y - 1;\r\n  }\r\n  if (keyDown(\"down\")) {\r\n      sprite.y = sprite.y + 1;\r\n  }\r\n  if (keyDown(\"left\")) {\r\n      sprite.x = sprite.x - 1;\r\n  }\r\n  if (keyDown(\"right\")) {\r\n      sprite.x = sprite.x + 1;\r\n  }\r\n  \r\n  drawSprites();\r\n}",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "text_mode_at_start": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "callout_json": "[]",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Gamelab>