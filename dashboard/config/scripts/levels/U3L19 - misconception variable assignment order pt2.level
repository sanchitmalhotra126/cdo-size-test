<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-05-19T19:47:29.000Z",
  "properties": {
    "options": {
      "skip_dialog": true
    },
    "title": "U3L19 - misconception variable assignment order pt2",
    "content1": "description here",
    "markdown": "# Misconceptions about variables\n\n## Explanation: \n**What's happening here?**\nOn the previous page you saw that the output of this code...\n<pre>\nvar a = 3;\nvar b = 7;\na=b;\nb=a;\nwrite(\"The value of a is: \" + a);\nwrite(\"The value of b is: \" + b);\n</pre>\n\nwas this...\n\n<pre>\nThe value of a is: 7\nThe value of b is: 7\n</pre>\n\nHow could this be?\n\nFirst, let's point out that in this example we also showed you something new. We showed you that *you can set the value of a variable to the value of another variable.*  \n\nWhen you do something like this:\n<pre>a = b;</pre>\nit copies the *current* value of b into a.\n\nNotice that direction of assignment is always the same.  Whether you have...\n<pre>\na = 7;\n</pre>\nor\n<pre>\na = b;\n</pre>\n\n#### Key understanding:\n**...JavaScript always takes the *value* on the right, and *assigns* it into a variable on the left.**\n\n### Tip: read the = sign as \"gets\"\n\nDon't let the = sign confuse you into thinking that a = b is a statement of mathematical equality.  It's not. It's an instruction to move memory around.  One tip is to read the statement *a=b* as: ***a gets the value of b*** or just ***a gets b***.  Another example: read *a=b+7*  as ***a gets b plus 7*** and so on.  \n\nWhen you read the = sign as \"gets\", and say it out loud that way, you'll prevent confusing yourself, and other programmers will know what you're talking about.\n\n\nBack to the example.\n\nIf this were math class these two statements would mean the same thing:\n<pre>\na=b\nb=a\n</pre>\nBut as a helpful reminder: THIS IS NOT MATH CLASS! In computer science it's very different. \n\nThese are instructions to the computer. Each line of code executes one at a time, and changes the state of the world after each line is completed.\n\n**The key to understanding** is to realize that the value of **a** changes first THEN the value of **b** changes, but it uses the new value of **a**, the one that was set in the line before, not the original value it was set to.  \n\nHere is an animation that shows the state of things as each line of code executes.\n\n<img src=\"https://code.org/educate/csp/images/codeStudio/U3L19%20-%20overwriteVariables3.gif\">\n\n## How could you have figured this out on your own?\nYou actually already have the tools in your programming toolbelt to be able to figure these things out on your own...\n\nThe technique is to insert write and console.log statements into the code to inspect the state of things for yourself.  \n\nThis is a **major debugging technique** -- printing out information *for yourself* to make your program tell things about it while it's running.  Then once you're satisfied it works right, you might remove (or comment out) the statements that display all that extra information.\n\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue to see this debugging technique in action</a>\n\n\n\n"
  }
}]]></config>
</External>
