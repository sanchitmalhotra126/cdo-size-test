<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that visualizes the number of cat breeds that originated in each country. Use multi-selection statements to count the number of cat breeds for each country, and use the counts for each country to decide the size of the flag images to draw.\r\n\r\n##In CatScene.java:\r\n\r\n1. Write the `analyzeCountries()`(#e7e8ea) method to count the number of cat breeds that originated in each country by traversing the `countries`(#e7e8ea) array.\r\n\r\n   * Create an `int`(#e7e8ea) array to store the counts for each country.\r\n\r\n   * Use multi-selection statements and the `equals()`(#e7e8ea) method to check if the current country equals `\"Egypt\"`(#e7e8ea), `\"Russia\"`(#e7e8ea), `\"Thailand\"`(#e7e8ea), `\"United Kingdom\"`(#e7e8ea), or `\"United States\"`(#e7e8ea). Increase the corresponding value in the `int`(#e7e8ea) array by `1`(#e7e8ea) if the condition is `true`(#e7e8ea).\r\n   \r\n   * Return the `int`(#e7e8ea) array.\r\n\r\n2. Write the `createScene()`(#e7e8ea) method to draw each country flag at a random location in the scene. Use the corresponding value in the `counts`(#e7e8ea) array to determine the size to draw the image.\r\n\r\n##In MyTheater.java:\r\n\r\n3. Declare and initialize an array to store the array returned from calling the `analyzeCountries()`(#e7e8ea) method, then call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n4. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    String[] breeds = FileReader.readText(\"breeds.txt\", 47);\n    String[] countries = FileReader.readText(\"countries.txt\", 47);\n\n    CatScene myScene = new CatScene(breeds, countries);\n\n    // TO DO #3: Call the analyzeCountries() and createScene() methods.\n\n\n    // TO DO #4: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "CatScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the number of cat\n * breeds that originated in each country\n */\npublic class CatScene extends Scene {\n\n  private String[] breeds;     // The list of cat breeds\n  private String[] countries;  // The list of originating countries\n\n  /*\n   * Constructor to create a CatScene with the\n   * specified arrays of breeds and countries\n   */\n  public CatScene(String[] breeds, String[] countries) {\n    this.breeds = breeds;\n    this.countries = countries;\n  }\n\n  /*\n   * Returns an array containing the number\n   * of cat breeds for each country\n   */\n  public int[] analyzeCountries() {\n    // TO DO #1: Traverse the countries array to count the number of breeds\n    // that originated in each country.\n\n    \n  }\n\n  /*\n   * Creates the scene by drawing each country flag at a random location\n   * and the size based on the number of originating cat breeds\n   */\n  public void createScene(int[] counts) {\n    String[] countryFlags = {\"egypt.png\", \"russia.png\", \"thailand.png\", \"uk.png\", \"usa.png\"};\n    \n    // TO DO #2: Draw each country flag at a random location. Use its\n    // number of originating cat breeds to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;\n  private static Scanner input;\n\n  /*\n   * Reads numValues integers from a file into\n   * an int 1D array and returns the array\n   */\n  public static int[] readNumbers(String filename, int numValues) {\n    createScanner(filename);\n    int[] values = new int[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (input.hasNextInt()) {\n        values[index] = input.nextInt();\n      }\n    }\n\n    input.close();\n    return values;\n  }\n\n  /*\n   * Reads numValues Strings from a file into\n   * an String 1D array and returns the array\n   */\n  public static String[] readText(String filename, int numValues) {\n    createScanner(filename);\n    String[] text = new String[numValues];\n\n    for (int index = 0; index < text.length; index++) {\n      if (input.hasNextLine()) {\n        text[index] = input.nextLine();\n      }\n    }\n\n    input.close();\n    return text;\n  }\n\n  /*\n   * Creates the input object with the specified file\n   * or notifies the user that the file is not found\n   */\n  public static void createScanner(String filename) {\n    myFile = new File(filename);\n    \n    try {\n      input = new Scanner(myFile);\n    } catch (FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "breeds.txt": {
        "text": "Abyssinian\nAmerican Bobtail\nAmerican Curl\nAmerican Shorthair\nAmerican Wirehair\nBalinese\nBambino\nBengal\nBombay\nBritish Longhair\nBritish Shorthair\nBurmilla\nCalifornia Spangled\nChantilly-Tiffany\nChausie\nCheetoh\nColorpoint Shorthair\nCornish Rex\nDevon Rex\nDonskoy\nEgyptian Mau\nExotic Shorthair\nHavana Brown\nHimalayan\nJavanese\nKhao Manee\nKorat\nKurilian\nLaPerm\nMaine Coon\nMalayan\nMunchkin\nNebelung\nOcicat\nOriental\nPixie-bob\nRagamuffin\nRagdoll\nRussian Blue\nSavannah\nScottish Fold\nSelkirk Rex\nSiamese\nSiberian\nSnowshoe\nToyger\nYork Chocolate",
        "isVisible": true
      },
      "countries.txt": {
        "text": "Egypt\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nUnited Kingdom\nUnited States\nUnited States\nEgypt\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nRussia\nEgypt\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nThailand\nThailand\nRussia\nThailand\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nRussia\nUnited States\nUnited Kingdom\nUnited States\nThailand\nRussia\nUnited States\nUnited States\nUnited States",
        "isVisible": true
      }
    },
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Count the number of cat breeds that originated in each country and draw images based on the count.",
    "thumbnail_url": "https://images.code.org/7ad394dec8c9fc164c5a3c37f8f6b1ea-image-1650719083623.png",
    "starter_assets": {
      "egypt.png": "e94e8860-a143-473b-ae1a-d32c14aaf670.png",
      "russia.png": "647d112c-8af6-45db-9153-90d021104e5d.png",
      "thailand.png": "d21a0a84-c788-4bff-8363-e074a0d6ecae.png",
      "uk.png": "4fb0d7df-a8b5-4978-9681-37f771a0b52b.png",
      "usa.png": "e741c5ce-d939-4194-9ec9-1bdca5e548e4.png"
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T18:58:38.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T18:58:38.005+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3c_2022\"},{\"changed_at\":\"2022-04-07 18:58:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:00:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:02:30 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:16:08 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:25:24 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:26 +0000\",\"changed\":[\"encrypted_examples\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:31:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:49:54 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 17:49:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
