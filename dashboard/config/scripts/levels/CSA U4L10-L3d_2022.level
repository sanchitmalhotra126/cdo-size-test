<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that visualizes the number of cat breeds that originated in each country. Use multi-selection statements to count the number of cat breeds for each country, and use the counts for each country to decide the size of the flag images to draw.\r\n\r\n##In CatScene.java:\r\n\r\n1. Write the `analyzeCountries()`(#e7e8ea) method to count the number of cat breeds that originated in each country by traversing the `countries`(#e7e8ea) array.\r\n\r\n   * Create an `int`(#e7e8ea) array to store the counts for each country.\r\n\r\n   * Use multi-selection statements and the `equals()`(#e7e8ea) method to check if the current country equals `\"Egypt\"`(#e7e8ea), `\"Russia\"`(#e7e8ea), `\"Thailand\"`(#e7e8ea), `\"United Kingdom\"`(#e7e8ea), or `\"United States\"`(#e7e8ea). Increase the corresponding value in the `int`(#e7e8ea) array by `1`(#e7e8ea) if the condition is `true`(#e7e8ea).\r\n   \r\n   * Return the `int`(#e7e8ea) array.\r\n\r\n2. Write the `createScene()`(#e7e8ea) method to draw each country flag at a random location in the scene. Use the corresponding value in the `counts`(#e7e8ea) array to determine the size to draw the image.\r\n\r\n##In MyTheater.java:\r\n\r\n3. Declare and initialize an array to store the array returned from calling the `analyzeCountries()`(#e7e8ea) method, then call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n4. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    CatScene myScene = new CatScene(47);\n\n    myScene.readData(\"breeds.txt\", 1);\n    myScene.readData(\"countries.txt\", 2);\n\n    // TO DO #3: Call the analyzeCountries() and createScene() methods.\n\n\n    // TO DO #4: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "CatScene.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport org.code.theater.*;\n\n/*\n * A scene visualizing the number of cat\n * breeds that originated in each country\n */\npublic class CatScene extends Scene {\n\n  private String[] breeds;     // The list of cat breeds\n  private String[] countries;  // The list of originating countries\n\n  /*\n   * Constructor to create a CatScene with the\n   * specified number of values to read\n   */\n  public CatScene(int numValues) {\n    this.breeds = new String[numValues];\n    this.countries = new String[numValues];\n  }\n\n  /*\n   * Reads the data from the file into the breeds or\n   * countries arrays based on choice\n   */\n  public void readData(String filename, int choice) {\n    File myFile = new File(filename);\n    Scanner fileReader = createScanner(myFile);\n\n    if (choice == 1) {\n      for (int index = 0; index < breeds.length; index++) {\n        if (fileReader.hasNextLine()) {\n          breeds[index] = fileReader.nextLine();\n        }\n      }\n    }\n    else {\n      for (int index = 0; index < countries.length; index++) {\n        if (fileReader.hasNextLine()) {\n          countries[index] = fileReader.nextLine();\n        }\n      }\n    }\n\n    fileReader.close();\n  }\n\n  /*\n   * Returns a Scanner object to read theFile\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an array containing the number\n   * of cat breeds for each country\n   */\n  public int[] analyzeCountries() {\n    // TO DO #1: Traverse the countries array to count the number of breeds\n    // that originated in each country.\n\n    \n  }\n\n  /*\n   * Creates the scene by drawing each country flag at a random location\n   * and the size based on the number of originating cat breeds\n   */\n  public void createScene(int[] counts) {\n    String[] countryFlags = {\"egypt.png\", \"russia.png\", \"thailand.png\", \"uk.png\", \"usa.png\"};\n    \n    // TO DO #2: Draw each country flag at a random location. Use its\n    // number of originating cat breeds to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "breeds.txt": {
        "text": "Abyssinian\nAmerican Bobtail\nAmerican Curl\nAmerican Shorthair\nAmerican Wirehair\nBalinese\nBambino\nBengal\nBombay\nBritish Longhair\nBritish Shorthair\nBurmilla\nCalifornia Spangled\nChantilly-Tiffany\nChausie\nCheetoh\nColorpoint Shorthair\nCornish Rex\nDevon Rex\nDonskoy\nEgyptian Mau\nExotic Shorthair\nHavana Brown\nHimalayan\nJavanese\nKhao Manee\nKorat\nKurilian\nLaPerm\nMaine Coon\nMalayan\nMunchkin\nNebelung\nOcicat\nOriental\nPixie-bob\nRagamuffin\nRagdoll\nRussian Blue\nSavannah\nScottish Fold\nSelkirk Rex\nSiamese\nSiberian\nSnowshoe\nToyger\nYork Chocolate",
        "isVisible": true
      },
      "countries.txt": {
        "text": "Egypt\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nUnited Kingdom\nUnited States\nUnited States\nEgypt\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nRussia\nEgypt\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nThailand\nThailand\nRussia\nThailand\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nRussia\nUnited States\nUnited Kingdom\nUnited States\nThailand\nRussia\nUnited States\nUnited States\nUnited States",
        "isVisible": true
      }
    },
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Count the number of cat breeds that originated in each country and draw images based on the count.",
    "thumbnail_url": "https://images.code.org/7ad394dec8c9fc164c5a3c37f8f6b1ea-image-1650719083623.png",
    "starter_assets": {
      "egypt.png": "e94e8860-a143-473b-ae1a-d32c14aaf670.png",
      "russia.png": "647d112c-8af6-45db-9153-90d021104e5d.png",
      "thailand.png": "d21a0a84-c788-4bff-8363-e074a0d6ecae.png",
      "uk.png": "4fb0d7df-a8b5-4978-9681-37f771a0b52b.png",
      "usa.png": "e741c5ce-d939-4194-9ec9-1bdca5e548e4.png"
    },
    "encrypted_exemplar_sources": "MYuPzNKcdy2mQHVnMb/aB9hQw+XRAAlbNFv2nhMunAV4CaqHCourBcg5/F3D\nvgwyeTcMMfeHZGlyfRxVOwbwOlYDC0GWaKxk0rIPxJeIS5b3Uni5aaAxCTNH\nBWnb0JUquZTplX5syVXPRoDydXVAQKi/GA8ISLj8hAlCovNz+6ZHJnN2QAJq\nSekfHg72RnuKCcMeRrSG6KJUYkJD67Gl4Gg6eFc/yUDgxvvj9U8ubt0HI7ac\nHWQu8aoztNdMvTKo/IH1+lsqxbVrvlC7szE22yaV1iBaL+6A/L8P2cbsYufP\nE4bu9b2qNQD610h6SSKg0y2E9nXs3RCrCd2pw5uvpZAvMR5W6+nAkVjOKv14\nQAIwelsBdTLbsl5XOcoXSSaDDRyPQy1fd99fL4PWB/znF+81yXppk/+95LDt\nyQ3OJ5ONL78TPT8aoQ2v7j+S43aG7ursfBRFibynofrgBXDXc9mmsMvN2gtj\no44iYklN5RHS5Ig9PIBXVdOIVQZjvSMXqlI3daR2PN2beAfnQa68gLwIOShX\ns5zQPLrmtmlQAyxCuuT2twIj1leIRB5ojcnkSiCb2rkLsamjYjoHXMzlnv5m\nwi1CBsn1W5FIbEpCAKhU/9k16Or/3xVUghojL44ftbvypJoJaVq95yNJuubM\nb08VrWIpIU4Ck9W6tCQhQQKpQsaJRpU06gTiH2qw7s3YkHAP+KIOZ8Ls/mjN\ngp3wwWoOVY1RYPwerSmN8LT9ZYt0JTxE8+iP+5aUQ06A4Y3E4KJhorycW4Im\nmELh9H5621qQTZGxgB8EH4HwaEh0Pe59R33kRgnsKRvofsHQkgWnAlG0j85r\n4j+4qL9EdMb8cNA4htEWm1ycFV0cgod/sXdtBVv9JXfyLDsp+zah7izpA6TR\nj3LpOgX+pUto1LO5F4+10BY6Yk8FSkGGh3R/Y9mjhL4a8VzhUtQYIxitDAQk\ntu3ONTLu1FLBcM/G+ve6j87GUckgOtgmcmUMtiq6btFYiflnBoQgx09/60Gx\nIAno1Tvbq2Bs1Btbhl4kfUNxR4pKulHM7A3r6a7WQ7tCVrqylKym1OhDUBkC\n0Dxq5RQLsXgsEmxfGbTm5jxt1INnarDQHE6MfrlOu2MyTECj+eC462WUyaO/\nrpyHFmdq6iX0FkD+D2os4bwdz9JkOv7mfhg8gXo1G9pc/uiE1boUg8aRgDwh\nk4VeHtj3dX7YTpy9j/2//2TheBaSGkrO6yKR7TxPXhOJhwLoQr986Pe+LTrC\nxifQXC8am5v9kS66oBaQGguqSlKbnBGllXQzACru6T2OcwoVxJESl2U21mKf\nHXrs32SHQVdX46nBSXYIkFNT3IOVYCUeCUHxuzqYTVEFAsU6u61QUGvnqXiK\nykWLCQ3VkAfTw/EPKHjaNxgEU/kibrTKn7sgR22CEmIk62pZWsLTUiIQqaQ0\nPV/nRR5Z3ba5sCexzKzF8ill3E322DFFl8V5dmcXKSr5bTJ/+IOuIqPjMGg6\nIhVQ4dHdo4QZdcS+EBOX5V5nMGYdN67qNiUnTgXqNyOxpcdMrRrXJ0ziG1yL\nOf1BEuraQnTH5/8th/485piQrkW7aIM4EnbJ5YNFdci9Sg4C4/ET3BdiUIY9\nVUajLXqRgYSdMNFZHKfAKpsxzZaUA4tUhvWM1/HCu9CEZ3tqlSCdXz0kepcp\nB2Z8oZe9p0Ul5Gi5kA4K4Yrk5UYEhS8vb/7p8G84ybvHcgzA5H+jG5kyRxE3\nDLJpB60pG++jDcjuGsXgbTl7tbYfOaRlx67Yn8COg2Ae2FhUadoS5HIzdYkE\nJdoLpXe4oc0CADMR6N7nYHfMvI9g85t8dje2gyl1Vtd0SdUamszj97XAHi0A\nQzdRK+EOHAGVnK22iyVIPbXrCHy2m3eQ/xaNFlwymx+xmA46iYNXqjlhcAgA\nAROwFSs0ERBBbc3aqKgKUn3wFIK7AjPiB6Dym1U3TiDDzVJChg18v3VWEbT/\nw0xTeeW8rz1Jvrxe4OSziRCPEJQClnCp6GVfTgf7F6GcX1l/8S1/N5Pv+tXw\nhwW+DCIzZAdyJmhBtsK3nCjH2bsbFKGI2a2mt2YMpfdP6KUuVnNvyAzyd8EY\nkPHX1jJHtU1tqhGC5S5J2oqY2FSFdHtvT+YZiiIj0VNDkisPrl2ofGimuAC9\nwcQI6H+4AF3PklO6qaL4iiura/WXQalo9KEpbXHGWBskeBUZMv1Z3BE9v4v4\npBy+VErhjt912aTX58OXxR30VhRW0WBIUlmQ9036dzBwDW3JZQmKGMT+y8JQ\nni6JZo5q8AhR0cN4tOpuPurI+Pez6mJsTgP+97tmp5edgIBm7zdtfWhkZZ2n\nZyDjFYYlNPWLVEcfhWCkYeh3rjVEE4wVVYgoM8esRfkoZImOzAQvq3Zj/or7\nkgf+nbEwc/kkNyqLjUqGI3ERKGILkr53Ms5lPahlU3woxjy347ed1m1FgvGB\nWnODsISxQJNT5M1WQmvi6ZMm1nWR+x9Mm4of9cTWrCRLNhX8Ie+AWA8tGlPs\nGruzvNTbXMqsypy+6Pu061Xw9bz6+kzdoMJ2dQRizgrexYmMm7U+Cbi+HSsB\nHZQxSXyZB4FZK0vIW7GCTG6MdWlgsH/gZOdD/fQUyROPK2SJK563Bw1zVGHi\n5B7lEFyvJnBEBMASwBfTGJzqkPM+6EupyHEN+VcYmg35vNgU2zpoxE/09j34\nfurXlvlwA4WyDgCwEaWmUYe0uvSZWHEceYqR0XwqsrpsJ4k/1GTe6ae6vkQQ\nPslgN+Alpqdw7IFciVuF9MVg6i9caCu2OxFps6PMFfD8myBgnkEQQJC9qjBe\nvkjwgUk87IVqwjHHzz84Anw0zwJPiyWnJqZLv8Ss9zSRyH4Z5Ad2/E8l5AlX\nnBrJ1QmtYJfa56yYQuqVeAo2xqjQBhZAFuhqeNcHpxKzR5czmObMjqGcAPex\negIDh7/XqIFnah6bPQU+NyiRwlt0keW6O46PcQYKjXjKDnAZ2+zDrVPCkbN5\nYfBtuu9Zq9TDaAeXZmloxTlZsYFv5xRTJFjYbsPnnwYacnMFMBCqsyki46wR\nzvprYqwc2UyGR3+IxJa3QLH/kjYJdqqpyRxMKdpxt2qdiZzJEMKE1L27YFu5\n9RpSaUQPF/t+THKuKNnmrSdj36VoHqa0jLOBnY+Cp22cDNb1hJ8B7mh+ywJ/\nb1QD3EQ2ZhnhTwa7Svhri+5mopK7PGJ3fZ97sTP81PJ/55Ty/CrKs+aELTiP\nrVxVPM3bECFqMT+RYErz3cAHh/rPZx0b80rGsc5I97zr549cN09pDVsJFSbT\ngHdVboRuaYZ4kbKKgJ56PePbsfB7GQFvcsBXbPj9WLLR/pMFfYaOlVcTcuJR\nKlLZcRsi0UA+cPi8hlYc35H3uAoGO08BKKcEV5+NtoXBtDjEgYRi8WCmqk30\neSsC7ZhMsa0poOlQb9RCXjxtDCZ73h6wNepHp7zmNlTRaIHbEtIjwLqFDSDx\n25D7NqTd1N8+HxOaBMr5hkIO4DDwRdEI8FVTkWLCqiLf3/ZhTbuKJO307k5v\nHCUBwsq/DAOcaEUaWt1lFvHU4ceG0ZAUJEDym/Ql3hNsNz4h1qhWSczq+hSy\nTTnNni+NkFNy2kREDYpCdjTRDdNBTTuz9/eZ6C5AxJGO8CNP7JTyZZb+WmXd\nlpwhi8WLUTHiStzU86Fi8Lus+IHsky+vmId3UMatG3rZJSmcSyDMIe3RSlWh\n+443S+jJGXX4DOxW2DEfAhOIZHukjpk+2utOOwg7XFwNWP/POuU7cwz89K0K\np0HqRf95PdhnjzfvID4f525R8EugZtgGWGH7cjgZF1lWhUevuXgGGq73XiBa\nKx6tNEik+BEXvGL1n/m7KH48FKmkKJ4PDQ4gdGEpscZj0nPKrgC0vr9rxOGC\n1huKaW01iQ1F/2HEdTqyXnfDIPjAj7hin0DHOvcIy9pTfMRyu2FTQM5nOzZR\ngY301c+9z690SReh406WPtqzg0gLGom+Uwp8r+m6nSng4QIV3z2AQlodSVPn\nVM02rHCmLTKA3fdv4DZm4tsbycjzkU2lIxzaUXZ+sEH3jCe0J8IT/WsOfQiZ\nKvgdk+5cf8dkUbikGBg5MxePB0dBeJYhnIABqdn/spQ2mOzF5+mWpMEHw2ex\n6HA4/887C38PMix9iLfzZJyySsuhI2iMCZEO1DaTJ3cB0LbhRRJJBfs7jtSN\ne8N5SPxCHJPJ1qwBfM6gGxDJeSznKlI1Rirp/1bZmI0FHY66hjuqM8+uSJvN\nISeWGiQ+TRRqWZhTUllsPhJTMyJTS7Y3u+RYzaCzF0HSsy8yTAGRKemEgGDu\nnmwEZtEFdu6KszI/HAfy8GEIdPINkoY+Dv+81O6dkufsT7jyJiViqyPOww6c\nYuDVCT7GKT0qrQS4W8BUKBILYu2gV6JUGTVP+y/52p4500eOd5kR7LV9gRZe\nfuGionaxR0lfLtYrJuWsRZJkCoYLDR2JFJ4avVA7d7uqq1OtefBz/T29cmq7\niDZ+qoTAbyR++6j3hb22fOjT2F70RUwR7fSCsbHJUksyNb+AOVgn1+vSQz8q\njz91S9r7Rf8atfzYJLlHwwQ1x39IWMedsUQssDHvKpU0DXDS+Ayps1hXMoDZ\nVZ97uiz+iYqw8rqcJBosL8eiCkrQGTy5IERJI99z6TszJWbbzRA21tIERs31\nDmAwf/7JNTLtUvQaYQHH9OzuIuAHfvgnwpOJ9xfliQAyPrGfTXgV/TYwi18G\nNme5jl2lteR+/VrYP1jeAIxxRsuqTBU80AuB9S4BemaXd0Tepimd0aMYDbtZ\nEHe5L+QrTfvW3vQPVxTVE3oAYtpmBc4p8GnzsNl65QhiVGbu/9Qc3OoaF8Pe\nTbBULwbDpQU710yJU7HS+3IQVeaQF51R1Po7bRgRWCJHWKX/y3itLHoqILqy\n8uOyFaf9DLr3ykm6brNuIAwE5l5wZydtLfhoJY0Z8eX0fqwofas2mWKjbDYt\n2pffRJwkYL0qDnNkRt8dFTlIQaWHYupMgnpH0E/fPTF2TVmIJ4uUT/wl1uCg\nqtQdH+rsQ/DNCVbPg/eC37VIA+gjBnzBDoaA28m+ofVgF895J/RJYQinFV0E\nrbVJCWZMgndCFBlD6VME731t87zY0uHg4O53+BbmvaGlmGe5HICjNdlsv57G\nxnS4zGiEeAIxL8ZTQ1W8+WH5uP7F7QctgbrBeTDsDnJ55czC/aLX3R+vOYxX\ngW7DsD5c2nUEdfLDtEtGp7hxAwX7+oHyGuDeYDPpVLDCeGtEkm/O38TJpq0w\nUqZtqJqIpiatcoJF76outc35FwFnWC62HDGFaKfxAMw77p6tIKrFhkpGiYIr\n0epBLHt5TWrSCYjZnbM3GcWIbzOVpobHDFZBUfw+mMZOk1gvhzh2Fzgg2n5R\nFLbfkQ2rShPL47OhX1hSHj/lbBLhlzz+QikiIanTU598/+pV7L0YE+x6UfZG\ndNzTDomEtAzdFX3EKwxCqyG4Xq8ljGaNDFKgy9UApWrorsnAbZKhTWYSAfjR\nnFsgVWvJo55CUSgF0F+9anvV/fsmpCk4vuFgLxaxfLW62V1C16xxxZMkHvea\nI+fRgvLNErcsD5TyehzjWrYmA/Xo471G8H+tYsdzbXTej79CtpSoeMAL8QVo\ntrlzUNh/kSAzuVx3V8PxhSIjVnroUTmm/6FxCCqW3EpOt5u4UgYW71+mVaQs\nERXywe2nC0TDKD34dkACZ9903az/5wCqgOs+XVGw90C/kdGiJJbbc7TV7ZsA\nphZYfhRnFY6qZW8q/iB1/hTFcbpOPfORdMrQzoZbnt3naxau88xyeBHYXVTe\n5yIsEyynUT4nybbQFcHpt4wqFH1o8Zg0/fTVUk5Fzl+d/QuINoNBvyUWNEPd\nBmVGfhW2OXj27x2ElayPXvcWI6DYlJy5An2qeQAOqdBm1+yOgTYzGBrTEvX8\n6Khf1QOZLmTtUeZWuqvTFwF6BUboU0gR4QvIHMhB+TJs+mJ20oIrZZLAGyYI\n1PKPRKT3G4r0kyGYSs+lSSgktguYuTBG20LDuFEuZYXA3wRaVNEt5+buLDnH\nhkTMz/5oj5gMdPke70vf4PxaqilOhZWyaPm9RiZu8XBN5r5CUq4nr5DA0+Sy\nrP5MhnhW+auXCLxQZKHXPykAMTaZCCyVnwwRiVURV54zdLm1Kr2cEtAikaSH\nUXDThUMtq9ytyxSlS+/2l50kBNbwjc+7x0aH2I95MTMtSPDq6LAR9Jeiuwmp\nYOUFubNJ8y63CR1u14RjltgAE91T4bPLQWzCNsl8vjBArJi0/hB81VvSxvzI\nBzG+9QHbIzOQvipTPy9tX4TitTopUzvUu4ItC8INYP/FXnIFhZrJ8Ef0u1Ha\n0decSKkXE8X7v7QIGf2Vq4UvK9x++qUInv0HA7555la2MF/OcUjbf99ClpRC\nWuVdmquj61ApekGzhqgRHp1o4QEhA+3FqGof37PWeE66KG0i0MXIQXeXRsWR\nBkexPg==\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T18:58:38.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T18:58:38.005+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3c_2022\"},{\"changed_at\":\"2022-04-07 18:58:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:00:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:02:30 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:16:08 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:25:24 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:26 +0000\",\"changed\":[\"encrypted_examples\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:31:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:49:54 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 17:49:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:49:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:49:38 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:49:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
