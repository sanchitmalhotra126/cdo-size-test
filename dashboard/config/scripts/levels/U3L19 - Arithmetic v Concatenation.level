<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-05-20T03:30:09.000Z",
  "properties": {
    "options": {
      "skip_dialog": true
    },
    "title": "U3L19 - Arithmetic v Concatenation",
    "content1": "description here",
    "markdown": "# Arithmetic v. Concatenation \n\nWe learned before that if you use the plus symbol (+) with strings of text, the plus symbol will concatenate strings.  \n\nThis is **also true if the value of a variable is a string**.\n\nFor example:\n\n<pre>\nvar firstName = \"Alice\";\nvar message = \" is an great student!\";\nwrite(firstName+message);\n</pre>\n\nThat **write** statement will output to the display...\n\n<pre>\nAlice is a great student!\n</pre>\n\n### However...\n\nIf JavaScript notices that the things on either side of the plus operator are *both numbers*, then it will attempt to do addition.  And this is true for variables as well.  For example:\n\n<pre>\nvar num1 = 5+7;\nvar num2 = num1 + 10;\nwrite(num1)\nwrite(num2);\n</pre>\n\nBecause num1 *is actually a number* then the statement **num1 + 10** will do arithmetic addition.  So the code above will result in the output that you might expect...\n\n<pre>\n12\n22\n</pre>\n\n### misconception alert!\n\nThe **key thing to understand** about the + symbol is that it can _only_ do actual arithmetic addition if the values on either side of the + are actually numbers or variables that contain numbers. \n\n**And** if the + symbol cannot determine whether the value is a number then it **assumes it's a string**, and converts everything to a string and tries to concatenate it.  \n\nSo here's where it can get weird.  What if the string of text *looks* like a number.  Check out this example:\n\n<pre>\nvar num1 = \"16\";\nvar num2 = 100;\nvar result = num1+num2;\nwrite(result);\n</pre>\n\nThis will write to the display...\n\n<pre>\n16100\n</pre>\n\n...why? Because \"16\" (in quotes) is not a number.  It's a string.  And so JavaScript converts everything to a string, so the strings: \"16\" + \"100\" results in the combination of those strings: \"16100\".\n\nIf you understand the binary representation of information you should know why this happens: The ASCII characters \"1\" and \"6\" are different than the numeric representation of the number 16.\n\nThe computer relies on you - the programmer - to make sure that the **type of data** stored in a variable is appropriate for the task at hand.\n\n<details>\n<summary> Where does this issue actually arise?</summary>\n\nNOTE: you do not really need to know what's below right now.  We'll cover it later, but in case you're interested...\n\nWe'll talk about this a little bit later in the course.  But the issue of determining whether a variable holds a string or number, most frequently comes into play when you are asking the user to type something at the keyboard.  Computers often assume that what the user is typing is a string.  But what if you need the user to type a number that you then need to do some arithmetic on?  \n\nWell there is a way to convert a string to a number **if and only if** that string contains only the characters '.' and 0-9.  There is a function called **Number** built into JavaScript that will attempt to convert a string into a number.  \n\n<pre>\nvar num1 = \"16\";\nvar num2 = \"3.14159\";\nvar num1Convert = Number(num1);\nvar num2Convert = Number(num2);\nwrite(num1+num2);\nwrite(num1Convert+num2Convert);\n</pre>\n\nThis will write to the display...\n\n<pre>\n163.14159\n19.14159\n</pre>\n\nYou do not really need to know that right now.\n</details>\n\n### misconception alert 2\n\nYou might think that this statement...\n\n<pre style=\"display: inline-block\">\nnum1 + 10;\n</pre>\n\n...will increase the value of the num1 variable by 10.  It doesn't.  This is an instruction to the computer to take the number that's inside the num1 variable and add 10 to it.  And the computer will do that, and the result will go....nowhere.  It will be lost.\n\n**To change the value of a variable the = sign must be involved somehow**.  \n\nSo to increase the value of num1 by 10 you actually need to do this:\n\n<pre style=\"display: inline-block\">\nnum1 = num1 + 10;\n</pre>\n\n<table width=800>\n<tr>\n<td width=66%>\n\n<p>It's helpful to read this statement the way we learned earlier: <strong><em>num1 gets num1 + 10</em></strong>. Reading it that way makes the intent more clear: num1 is getting the value of the <em>current</em> value of num1...plus 10.\n</P><p>\nThe way this works is: in order to assign a new value to num1, the computer must first perform a calculation: num1+10. Once it has computed that number <em>then</em> it can take that number and put it into num1.\n</p>\n<p>\nThe diagram at right shows the order of things. <strong>It assumes that the current value of num1 is 7</strong>\n\n</p>\n</td>\n<td>\n<img src=\"https://staging.code.org/educate/csp/images/codeStudio/U3L19%20-%20variableReassignment.png\">\n</td>\n</tr>\n</table>\n\n\n\n\nThe technical term for this is called **variable re-assignment** - when you change the value of a variable based on its current contents.  It's a useful technique and also key to your understanding as a programmer. \n\nIn fact, the idea of variable re-assignment is involved in something that proves you know how to code...\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue to learn the thing that proves you know how to code...</a>\n\n\n\n\n\n\n\n"
  }
}]]></config>
</External>
