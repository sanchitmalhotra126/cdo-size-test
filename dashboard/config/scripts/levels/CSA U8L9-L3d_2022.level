<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. first thing\r\n\r\n2. second thing\r\n\r\n3. third thing\r\n\r\n##Getting Started\r\n1. Import `SomeClass.java`(#e7e8ea) from the ![Backpack](https://images.code.org/b17feeef2e8db2a98abdb4a5860c5c61-image-1642175705297.png)\r\n\r\n*Don't have it or it doesn't work? That's ok! Just copy and paste the code from [**here**](https://linktocode.com).*\r\n\r\n##In MyConsole.java:\r\n\r\n2. first step\r\n\r\n3. second step\r\n\r\n4. third step\r\n\r\n::: details [**Show Me How**]\r\nA `for`(#e7e8ea) loop uses the following syntax:\r\n  \r\n  ```\r\n  for (int variableName = startingValue; condition; variableName_change) {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nBe sure to change `variableName`(#e7e8ea) to a name you can easily identify, such as `index`(#e7e8ea), and set the `startingValue`(#e7e8ea) to the value you want to start the loop.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyConsole {\n  public static void main(String[] args) {\n\n    ArrayList<String> stateData = FileReader.getStringData(\"populations.txt\");\n\n    ArrayList<String> stateNames = StateSorter.getStates(stateData);\n    ArrayList<Integer> populations = StateSorter.getData(stateData);\n\n    System.out.println(\"----------Unsorted List of States and Populations----------\");\n    StateSorter.printStates(stateNames, populations);\n\n    System.out.println(\"\\n----------Sorted List of States and Populations----------\");\n    StateSorter.sortStates(stateNames, populations);\n    StateSorter.printStates(stateNames, populations);\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of words from a file\n   */\n  public static ArrayList<String> getWords(String filename) {\n    createFile(filename);\n\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    while (fileReader.hasNext()) {\n      tempList.add(fileReader.next());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      },
      "StateSorter.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Manages lists of data about states\n */\npublic final class StateSorter {\n\n  /*\n   * Sorts the list of state names and data in increasing order\n   */\n  public static void sortStates(ArrayList<String> stateNames, ArrayList<Integer> data) {\n    // TO DO #1: Sort stateNames and data in increasing\n    // order based on the values in data.\n    \n    for (int index = 1; index < data.size(); index++) {\n      int current = data.get(index);\n      String currentState = stateNames.get(index);\n      int next = index - 1;\n\n      while ((next >= 0) && (data.get(next) > current)) {\n        stateNames.set(next + 1, stateNames.get(next));\n        data.set(next + 1, data.get(next));\n        next--;\n      }\n\n      stateNames.set(next + 1, currentState);\n      data.set(next + 1, current);\n    }\n  }\n\n  /*\n   * Returns an ArrayList containing the name of the states\n   */\n  public static ArrayList<String> getStates(ArrayList<String> statesData) {\n    ArrayList<String> stateNames = new ArrayList<String>();\n\n    for (int index = 0; index < statesData.size(); index++) {\n      String currentData = statesData.get(index);\n      int comma = currentData.indexOf(\",\");\n      String currentState = currentData.substring(0, comma);\n      stateNames.add(currentState);\n    }\n    \n    return stateNames;\n  }\n\n  /*\n   * Returns an ArrayList containing the data for each state\n   */\n  public static ArrayList<Integer> getData(ArrayList<String> statesData) {\n    ArrayList<Integer> stateData = new ArrayList<Integer>();\n\n    for (int index = 0; index < statesData.size(); index++) {\n      String currentData = statesData.get(index);\n      int comma = currentData.indexOf(\",\");\n      int currentValue = Integer.parseInt(currentData.substring(comma + 1));\n      stateData.add(currentValue);\n    }\n\n    return stateData;\n  }\n\n  /*\n   * Prints the list of states and their data\n   */\n  public static void printStates(ArrayList<String> stateNames, ArrayList<Integer> data) {\n    for (int index = 0; index < stateNames.size(); index++) {\n      System.out.println(stateNames.get(index) + \": \" + data.get(index));\n    }\n\n    System.out.println();\n  }\n  \n}",
        "isVisible": true
      },
      "populations.txt": {
        "text": "Alabama,4833722\nAlaska,735132\nArizona,6626624\nArkansas,2959373\nCalifornia,38332521\nColorado,5268367\nConnecticut,3596080\nDelaware,925749\nFlorida,19552860\nGeorgia,9992167\nHawaii,1404054\nIdaho,1612136\nIllinois,12882135\nIndiana,6570902\nIowa,3090416\nKansas,2893957\nKentucky,4395295\nLouisiana,4625470\nMaine,1328302\nMaryland,5928814\nMassachusetts,6692824\nMichigan,9895622\nMinnesota,5420380\nMississippi,2991207\nMissouri,6044171\nMontana,1015165\nNebraska,1868516\nNevada,2790136\nNew Hampshire,1323459\nNew Jersey,8899339\nNew Mexico,2085287\nNew York,19651127\nNorth Carolina,9848060\nNorth Dakota,723393\nOhio,11570808\nOklahoma,3850568\nOregon,3930065\nPennsylvania,12773801\nRhode Island,1051511\nSouth Carolina,4774839\nSouth Dakota,844877\nTennessee,6495978\nTexas,26448193\nUtah,2900872\nVermont,626630\nVirginia,8260405\nWashington,6971406\nWest Virginia,1854304\nWisconsin,5742713\nWyoming,582658",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-04-18T19:49:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:49:53.340+00:00\",\"changed\":[\"cloned from \\\"CSA U8L9-L2d_2022\\\"\"],\"cloned_from\":\"CSA U8L9-L2d_2022\"},{\"changed_at\":\"2022-04-18 19:49:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 20:22:33 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 00:02:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 00:05:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
