<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-02-26T23:35:49.000Z",
  "properties": {
    "options": {
      "skip_dialog": true,
      "css": "unplugged"
    },
    "title": "Vocabulary",
    "markdown": "## Vocabulary\n\nEncouraging students to learn and use 'professional' terms enables them to communicate correctly and efficiently with others and build their knowledge such that it can be further developed without having to relearn terms and concepts at a later time. The terms and concepts used in the unplugged lessons are defined using words that most young students can understand.\n\n# TEACHING TIP\nBest practice is to introduce the terms with easy-to-understand language, relate the terms to previous experiences, use the terms repeatedly beyond the lesson itself throughout the entire course (and in other situations) when appropriate, and reinforce students' use in oral and written communication.\n\nThe following terms are introduced in an unplugged lesson as either a vocabulary word or as a term related to the online Blockly programming interface. Terms are subsequently reinforced in the following online puzzles and activities. Most terms appear multiple times throughout the courses and lessons providing the students with many opportunities to deepen their understanding and assimilate the words into conversations, both in and out of the classroom.\n\nThe course and lesson numbers after each term indicate the unplugged lessons in which the term is emphasized.\n\nYou don't have to learn all these words right now. This page is so you can refer back to this list during your online PD course.\n\n</br>\n\n**abstraction**\n\nPulling out specific differences to make one solution work for multiple problems students.\n\n(Course 3: Lesson 1)\n\n**algorithm**\n\nA list of steps to finish a task. A set of instructions that can be performed with or without a computer. For example, the collection of steps to make a peanut butter and jelly sandwich is an algorithm.\n\n(Course 1: Lessons 1, 6 | Course 2: Lessons 1, 2 | Course 3: Lessons 1, 10)\n\n**binary**\n\nA way of representing information using only two options.\n\n(Course 2: Lesson 14)\n\n**Blockly**\n\nThe visual programming language used in Code.org's online learning system for K-5 students. (Course 1: Lesson 3)\n\n**bug**\n\nAn error in a program that prevents the program from running as expected. (Course 2: Lesson 9)\n\n**code**\n\nOne or more commands or algorithm(s) designed to be carried out by a computer. See Program. (Course 1: Lesson 2)\n\n**command**\n\nAn instruction for the computer. Many commands put together make up algorithms and computer programs. (Course 1: Lesson 2)\n\n**computational thinking**\n\nMental processes and strategies that include: decomposition, pattern matching, abstraction, algorithms (decomposing problems into smaller, more manageable problems, finding repeating patterns, abstracting specific differences to make one solution work for multiple problems, and creating step-by-step algorithms). (Course 3: Lesson 1)\n\n**computer science**\n\nA field in which people use the power of computers to solve big problems. (Course 1: Lesson 2)\n\n**conditionals**\n\nStatements that only run under certain conditions or situations. (Course 2: Lesson 12)\n\n**crowdsourcing**\n\nGetting help from a large group of people to finish something faster. (Course 3: Lesson 19)\n\n**data**\n\nQuantities, characters, or symbols that are the inputs and outputs of computer programs. (Course 2: Lesson 14 | Course 3: Lessons 1)\n\n**debugging**\n\nFinding and fixing errors in programs. (Course 2: Lesson 9)\n\n**decompose**\n\nBreak a problem down into smaller pieces. (Course 3: Lesson 1)\n\n**digital citizen**\n\nSomeone who acts safely, responsibly, and respectfully online. (Course 3: Lesson 20)\n\n**digital footprint**\n\nThe information about someone on the Internet. (Course 2: Lesson 18)\n\n**DNS (domain name service)**\n\nThe service that translates URLs to IP addresses. (Course 3: Lesson 18)\n\n**DSL/cable**\n\nA method of sending information using telephone or television cables. (Course 3: Lesson 18)\n\n**event**\n\nAn action that causes something to happen. (Course 1: Lesson 15 | Course 2: Lesson 15)\n\n**event-handler**\n\nAn action or event that is being constantly monitored for by the computer. When you write code for the computer to perform after that an action occurs, that code, the event-handler, will run every time the action is performed without having to put the commands inside of a loop. Many event-handlers are human-initiated. For example: an event handler might respond when the user clicks the mouse by making the bird flap its wings. \"When the mouse is clicked\" is an event-handler. (Course 1: Lesson 15 | Course 2: Lesson 15)\n\n**fiber optic cable**\n\nA connection that uses light to transmit information. (Course 3: Lesson 18)\n\n**function**\n\nA piece of code that you can easily call over and over again. Functions are sometimes called 'procedures.' A function definition is a segment of code that includes the steps performed in the function. A function call is the code segment, typically within the main logic of the program, which invokes the function. (Course 3: Lesson 4, 9)\n\n**Internet**\n\nA group of computers and servers that are connected to each other. (Course 1: Lesson 17 | Course 3: Lessons 18, 20)\n\n**IP address**\n\nA number assigned to any item that is connected to the Internet. (Course 3: Lesson 18)\n\n**iteration**\n\nA repetitive action or command typically created with programming loops. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\n**loop**\n\nThe action of doing something over and over again. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\n**packets**\n\nSmall chunks of information that have been carefully formed from larger chunks of information. (Course 3: Lesson 18)\n\n**pattern matching**\n\nFinding similarities between things. (Course 3: Lesson 1)\n\n**persistence**\n\nTrying again and again, even when something is very hard. (Course 1: Lesson 9)\n\n**program**\n\nA program is an algorithm that has been coded into something that can be run by a machine. (Course 1: Lesson 2 | Course 2: Lesson 1 | Course 3: Lesson 10)\n\n**run program**\n\nTo have the computer execute the commands you've written in your program. (Course 1: Lesson 4)\n\n**servers**\n\nComputers that exist only to provide things to others. (Course 3: Lesson 18)\n\n**toolbox**\n\nThe tall grey bar in the middle section of Code.org's online learning system where all the commands you can use to write your program are displayed. (Course 1: Lesson 4)\n\n**URL (universal resource locator)**\n\nAn easy-to-remember address for calling a web page (like www.code.org). (Course 3: Lesson 18)\n\n**username**\n\nA name you make up so that you can see or do things on a website, sometimes called a \"screen name.\" (Course 1: Lesson 18)\n\n**variable**\n\nA placeholder for a piece of information that can change. (Course 3: Lesson 4)\n\n**Wi-Fi**\n\nA wireless method of sending information using radio waves. (Course 3: Lesson 18)\n\n**workspace**\n\nThe white area on the right side of Code.org's online learning system where you drag and drop commands to build your program. (Course 1: Lesson 4)\n\n</br>\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n"
  },
  "md5": "3234b8439fb5a3f8410acc1c860c85f0"
}]]></config>
</External>
