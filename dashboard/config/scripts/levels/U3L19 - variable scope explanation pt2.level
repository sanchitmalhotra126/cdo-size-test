<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-05-20T20:07:31.000Z",
  "properties": {
    "options": {
      "skip_dialog": true
    },
    "title": "U3L19 - variable scope explanation pt2",
    "content1": "description here",
    "markdown": "## Creating variables in the right place\n\n### Understanding variable scope\n\nIn the previous page the problem with code was the line **var count = count + 1**.  To fix it you need to remove the word **var**.\n\nYou already know the main reason this caused a problem and why:\n\n* using **var count** is like saying \"create a new variable called count\" and in this case you didn't want to create a new variable.  You wanted to reference the one created at the top of the program.\n\nBut there is something else we can now tell you....\n\n### Variables created inside functions go away once the function has completed execution.\n\nYou can think of variables created inside functions as temporary - they only live to serve the running of one call to the function.  \n\nIf a variable is created inside a button click event like this...\n<pre style=\"display: inline-block\">\nonEvent(\"myButton\", \"click\", function(){\n   ...\n   <strong> var count = 0; </strong>\n   ...\n});\n</pre>\n\nYou may also be wondering:\n* Does that mean that a new variable is created every time the button is clicked?\n* Where do all these variables go?  Can I see them?\n* Is it possible for many variables to have the same name?\n\nWell, the answer is yes, a new variable is created each time, but *only* the code inside the function can see it.  And both the variable and its value are lost once the function is done running.\n\nHere is an example of this in action...\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue to see example</a>\n\n   \n\n\n\n"
  }
}]]></config>
</External>
