<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-05-18T01:42:18.000Z",
  "properties": {
    "options": {
      "skip_dialog": true
    },
    "title": "U3L19 - explanation diff between string and var name",
    "content1": "description here",
    "markdown": "\n# Difference between a string and variable name\n\n<pre>\nwrite(foo);\nwrite(\"foo\");\n</pre>\nThese lines show how JavaScript knows whether or not you want to literally print the characters \"foo\" to the screen, or whether you want to retrieve a value from memory. If JavaScript sees a word in your code that's inside quotes it treats it as a string of text. If the word doesn't have quotes and JavaScript doesn't recognize it as a word of the programming language itself, it assumes that it's a variable and attempts to look it up in memory. If it doesn't find it in memory. It throws an error.\n\n<details>\n<summary><h1 style=\"line-height: 0px; margin-top: -10px; margin-left: 10px;\"> Historical aside: What's up with foo?</h1>(click to expand). </summary>\n<p>\nHistorically many computer science text books use the nonsense variable name 'foo'. The origin of this practice is unclear but if you want to spend a few hours trying to figure it out, just do a web search and you will find no shortage of explanations from all corners of the Internet.\n</p><p>\nWe use <strong>foo</strong> in our examples here to indicate the arbitrariness of the variable name itself.  Since our examples are often abstract, trying to teach a principle of programming, and not connected a particular app, we also use a nonsense variable name to keep your focus on the underlying principle rather than a particular application.\n<p></p>\nMany first time learners often think that if they give a variable a particular name like \"firstName\" then the variable will somehow have magical powers to always contain the user's first name. A variable is <em>just a label</em> for a chunk of memory, and <strong>you are in charge</strong> of naming it, putting a value into it and reading a value out.\n</p><p>\nWhen you write programs <strong>you should not use the variable name \"foo\"</strong>. You should name your variables - like your functions - with descriptive words that indicate the value the variable is intended to hold.\n</p><p>\nSo we use foo in some of our examples to:\n<li> connect you with a small piece of 'insider knowledge' of programming history\n<li> reinforce that variable names are arbitrary choices, made by you\n<li> keep your focus on the underlying principle rather than a particular application.\n\n</p><p>\nHistory lesson over...back to where we were...\n</p>\n</details>\n\n\n<p></p>\n<p></p>\nLet's get back to looking at that error and seeing what it looks like when it occurs.  See it and try to correct it on the next page.\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue to try...</a>\n\n\n"
  }
}]]></config>
</External>
