<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Concert in The Theater",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class MyConcert {\n  public static void main(String[] args) throws FileNotFoundException {\n\tStage myStage = Theater.stage;\n\n    // TO DO: Create your StoryConcert object.\n\tStoryConcert emojiConcert = new StoryConcert();\n    \n\n    // TO DO: Call your playSoundtrack() method to start playing your audio.\n\temojiConcert.playSoundtrack();\n\t\n    \n\t// TO DO: Call your showScene() method to show your scene.\n\temojiConcert.showScene();\n    \n    \n\n    myStage.play();\n  }\n}",
        "isVisible": true
      },
      "StoryConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class StoryConcert {\n  private Stage myStage = Theater.stage;\t// where images and drawings are displayed\n\n  // TO DO: Add any additional instance variables you need for your concert (OPTIONAL).\n  \n\n  // TO DO: Create the visual scene of your concert.\n  public void showScene() throws FileNotFoundException {\n\tString[] emojis = {\"cool_emoji.png\", \"happy_emoji.png\", \"laughing_emoji.png\", \"love_emoji.png\", \"surprised_emoji.png\"};\n\n    for (int i = 0; i < emojis.length; i++) {\n      int count = 0;\n      int width = 50;\n      int height = 50;\n      int rotation = 0;\n      \n      while (count < 10) {\n        myStage.drawImage(emojis[i], 0, 0, width, height, rotation);\n\n        width += 50;\n        height += 50;\n        rotation += 10;\n\n        count++;\n\n        myStage.pause(0.2);\n      }\n\n      myStage.pause(0.5);\n    }\n  }\n\n  // TO DO: Create the soundtrack for your concert.\n  public void playSoundtrack() throws FileNotFoundException {\n    double[] bassAndDrums = SoundLoader.read(\"basswithdrums.wav\");\n    double[] reverseBassDrums = SoundEffects.reverseSound(bassAndDrums);\n\n    double[] soundtrack = SoundEffects.combine(bassAndDrums, reverseBassDrums);\n\tint soundtrackLength = SoundEffects.getSoundLength(soundtrack);\n    \n    if (soundtrackLength > SoundEffects.CONCERT_LENGTH) {\n      myStage.playSound(\"buzzer.wav\");\n    } else {\n      myStage.playSound(soundtrack);\n    }\n    \n  }\n}",
        "isVisible": true
      },
      "SoundEffects.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class SoundEffects {\n\n  // TO DO: Create constants for volume.\n  public static final double MIN_VOLUME = -1.0;\n  public static final double MAX_VOLUME = 1.0;\n\n  public static final int SAMPLE_RATE = 44100;\n\n  public static final int CONCERT_LENGTH = 10;\n\n  // Gets the length of a sound in seconds.\n  public static int getSoundLength(double[] samples) {\n    int soundLength = samples.length / SAMPLE_RATE;\n    return soundLength;\n  }\n\n  // Decreases the volume of a sound.\n  public static void decreaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 0.5;\n    }\n  }\n\n  // Increases the volume of a sound.\n  public static void increaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 2;\n\n      if (samples[i] > MAX_VOLUME) {\n        samples[i] = MAX_VOLUME;\n      }\n\n      if (samples[i] < MIN_VOLUME) {\n        samples[i] = MIN_VOLUME;\n      }\n    }\n  }\n\n  // Replaces and counts duplicate samples with 0.\n  public static void replaceDuplicates(double[] samples) {\n\tint duplicates = 0;\n\n    for (int i = 0; i < samples.length - 1; i += 2) {\n      if (samples[i] == samples[i + 1]) {\n        samples[i] = 0;\n        samples[i + 1] = 0;\n        duplicates++;\n      }\n    }\n\n    System.out.println(\"Duplicates replaced: \" + duplicates);\n  }\n\n  // Creates a new array containing the samples that are\n  // greater than 0 from the original array.\n  public static double[] find(double[] samples) {\n    double[] newSound = new double[samples.length];\n\tint target = 0;\n    int count = 0;\n    \n    for (int i = 0; i < samples.length; i++) {\n      if (samples[i] > 0) {\n        newSound[target] = samples[i];\n        target++;\n        count++;\n      }\n    }\n\n\n    System.out.println(\"Number of original samples: \" + samples.length);\n    System.out.println(\"Number of samples greater than 0: \" + count);\n\n    return newSound;\n  }\n\n  // Shift the samples in the sound to the left by one place\n  public static void shiftSound(double[] samples) {\n    for (int i = 0; i < 2; i++) {\n      double temp = samples[0];\n\n      for (int j = 0; j < samples.length; j++) {\n        samples[j] = samples[j + 1];\n      }\n\n      samples[samples.length - i] = temp;\n    }\n  }\n\n  // Creates a new array containing the samples from\n  // the original array in reverse.\n  public static double[] reverseSound(double[] samples) {\n    double[] reversed = samples;\n    int start = 0;\n    int end = samples.length - 1;\n\n    while (start < end) {\n      double temp = reversed[start];\n      reversed[start] = reversed[end];\n      reversed[end] = temp;\n      start++;\n      end--;\n    }\n\n    return reversed;\n  }\n\n  // Combines two sounds to create one sound\n  public static double[] combine(double[] firstSamples, double[] secondSamples) {\n    double[] newSound = new double[firstSamples.length + secondSamples.length];\n\tint targetIndex = 0;\n\n    for (int i = 0; i < firstSamples.length; i++) {\n      newSound[targetIndex] = firstSamples[i];\n      targetIndex++;\n    }\n\n    for (int i = 0; i < secondSamples.length; i++) {\n      newSound[targetIndex] = secondSamples[i];\n      targetIndex++;\n    }\n\n    return newSound;\n  }\n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2021-08-19T19:49:10.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-08-19 19:50:06 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-19 19:53:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-19 19:53:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-19 19:54:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-19 20:07:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
