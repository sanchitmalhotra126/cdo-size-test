<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-05-18T01:04:43.000Z",
  "properties": {
    "options": {
      "skip_dialog": true
    },
    "title": "U3L19 - Intro to variables",
    "content1": "description here",
    "markdown": "# Controlling the computer's memory\n\nIn this lesson we're going to learn how to control pieces of computer memory to keep track of information during the running of a program.\n\nTo use memory, programming languages typically let you do three things:\n\n<t/>**Declare** that you want to use a piece of memory and give it a name. This is sometimes called allocating memory.\n\n**Assign a value**. Put something into that chunk of memory. This is often called setting or assigning its value or writing to memory. To set its value you refer to it by name.\n\n**Read the value** currently stored in that piece of memory. To read it you have to remember what you called it. \n\nIn JavaScript (and most programming languages) the most primitive type of memory you can use is called a **variable.** It's called a variable because it's a piece of memory in which you can change what's stored - its value can vary. \n\nYou might *think* that it's like a variable in math class but let me stop you right there and remind you... \n\n## THIS IS NOT MATH CLASS\n\nIn fact, thinking of variables in programming like you do in math can lead you down many dark roads. It's unfortunate that we use the same word, but we do.   \n\nSo never forget: a variable in programming is just a chunk of memory.\nIn JavaScript variables are containers for storing data values.\n\nIn JavaScript we can perform the 3 fundamental memory operations with variables. Here is just about the simplest example we can think of. \n\n<table><tr><td width=50%>\n<pre style=\"display: inline-block\">\n1. Create a new a variable\n2. assign a value. \n3. show its value  \n</pre>\n</td>\n<td>\n<pre style=\"display: inline-block\">\nvar foo;\nfoo = 7;\nwrite(foo);\n</pre>\n</td>\n</tr>\n</table>\n\nNOTE: In order to see the contents of the memory, we have to retrieve it, and *do something* in order to see it. Here, we are just writing the value to screen. \n\nThere are other ways to see the value that we'll get into later. On the next screen you'll see this code and be given a small task to try out.  \n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Go Try it</a>\n\n\n\n"
  }
}]]></config>
</External>
