<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##In States.java:\r\n\r\n1. Write the method `getMax()`(#e7e8ea) to find and return the largest value in the `data`(#e7e8ea) array.\r\n\r\n2. Write the method `getMin()`(#e7e8ea) to find and return the smallest value in the `data`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n3. Print the result of a call to `getMax()`(#e7e8ea) on the `myStates`(#e7e8ea) object.\r\n\r\n4. Print the result of a call to `getMin()`(#e7e8ea) on the `myStates`(#e7e8ea) object.\r\n\r\n![](https://images.code.org/1d2b6e597db0bfa9288bcf1a2b3ffbd0-image-1648738095916.png)",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    States myStates = new States(50);\n\n    myStates.readData(\"stateNames.txt\", 1);\n    myStates.readData(\"population.txt\", 2);\n    \n    // TO DO #3: Print the result of a call to getMax().\n\n\n    // TO DO #4: Print the result of a call to getMin().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "States.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Analyzes data about states in the USA\n */\npublic class States {\n\n  private String[] stateNames;  // The array of state names\n  private int[] data;           // The array of data to analyze\n\n  /*\n   * Constructor to create a States object with the\n   * specified number of values to read\n   */\n  public States(int numValues) {\n    this.stateNames = new String[numValues];\n    this.data = new int[numValues];\n  }\n\n  /*\n   * Reads the data from the file into the stateNames\n   * or data arrays based on choice\n   */\n  public void readData(String filename, int choice) {\n    File myFile = new File(filename);\n    Scanner fileReader = createScanner(myFile);\n\n    if (choice == 1) {\n      for (int index = 0; index < stateNames.length; index++) {\n        if (fileReader.hasNextLine()) {\n          stateNames[index] = fileReader.nextLine();\n        }\n      }\n    }\n    else {\n      for (int index = 0; index < data.length; index++) {\n        if (fileReader.hasNextInt()) {\n          data[index] = fileReader.nextInt();\n        }\n      }\n    }\n\n    fileReader.close();\n  }\n\n  /*\n   * Returns a Scanner object to read theFile\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Prints each pair of states, the description of the data, and whether or not the first\n   * state's data value is greater than the second state's data value\n   */\n  public void printPairs(String description) {\n    for (int index = 0; index < stateNames.length; index++) {\n      System.out.print(stateNames[index] + \" has larger \" + description + \" than \" + stateNames[index + 1] + \": \");\n      System.out.println(compareValues(data[index], data[index + 1]));\n    }\n  }\n\n  /*\n   * Returns true if the first value is greater than the\n   * second value, otherwise returns false\n   */\n  public boolean compareValues(int first, int second) {\n    if (first > second) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /*\n   * Returns the largest value in the data array\n   */\n  public int getMax() {\n    // TO DO #1: Traverse the data array to find the largest value.\n\n\n    \n  }\n\n  /*\n   * Returns the smallest value in the data array\n   */\n  public int getMin() {\n    // TO DO #2: Traverse the data array to find the smallest value.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "stateNames.txt": {
        "text": "Alabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming",
        "isVisible": true
      },
      "population.txt": {
        "text": "4833722\n735132\n6626624\n2959373\n38332521\n5268367\n3596080\n925749\n19552860\n9992167\n1404054\n1612136\n12882135\n6570902\n3090416\n2893957\n4395295\n4625470\n1328302\n5928814\n6692824\n9895622\n5420380\n2991207\n6044171\n1015165\n1868516\n2790136\n1323459\n8899339\n2085287\n19651127\n9848060\n723393\n11570808\n3850568\n3930065\n12773801\n1051511\n4774839\n844877\n6495978\n26448193\n2900872\n626630\n8260405\n6971406\n1854304\n5742713\n582658",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "Z7iY0Z3Yq6OUGxSCxBct+F371Cz7FtW2NKRdR/vfBS2OSp5erb1PDSzX8/xK\nMk07wanY8sLS/r9mPJ3nvoLDzlx2fymrddrp4somlNpUCQqRoCmpuoIXKACZ\nuOfBQfkY83JJjVXt/K2dfduS36mBcO6zwySMKCLbi7D+tYJuzyLkaOpDRNer\nY8IsiAhrE/otTxFYN/jIG/jksiEdiSVBdzp4l6QjDwq+w4ske0oM71iUpAl9\n13828XrT3MzUsPwYZmFU/lBupF0YWUIBTtGiWhiBEhhNv31ggo9rfEh3xfqx\nEoWuDlxFPzyqwln/AcH25yXrKBBsmvZ9zku0X8J8/MAbSU0oHjW2cDyZEPKI\nE8f2tgZjcWolQcqvcibmBlLcaPnLdq0bbYgs7ClbuCh0hxvR6kRHktXZamf1\n6kE4zMlTHp8jH49gFgidbR4vQPrgjHw/4Enyxq/Hzg9GqsWE9Kp/QZToPJK7\nBsYaMyzQK5do5yqwvHBLhnr1++/l8Qo+jdpR6eB5/x+OHAcLVbRKlpvf3WB4\ncupXW117arNB2STOxU0yXfuSZiZjtDA1UZFaHEmbQB8lS5P7qqPB9lRJeB6v\n7IftQFYKgZnAf9wTEXvqz0gzpW+CvXdiWFyqdb6ab98x5+GzB+4nK/YeI8O9\n5Va1WIkbchmKttyvcSOUGj6deBjqvaAWldSVkDDsOpdbqvvBd0idE0ldmmfL\n+8HgWeJHK+675ArfMHtO2zCjugZxVeJN4bw66rLrGWon1+QtTuqrgcRtLSjG\nMHIb79UN62ytkeLnJY0Ik/wGSXVfVFBDP5yh0/DuFbTv8blILyxT9DTYlrrK\nACyP0pQftVELvtELX1MH+VCB8/O87TN7wGZ3oOiSduHAnialXyhHiIPDePUU\neep8pvA2NCsq2e6Au02SYl/IRwGfEwptuI5wBcrobhfQTER9L9mD+TJxxpgn\nXmdGBqQ2Ie0vOUQqnVj5A70nzuyKwXTqyBesJfYwqx5H5Mjve1vTxeMCMN97\nmGT5KgFJdWIQFzVxoNqdUYOAkPDJ2mF0IJNJkjdqabsJq9GCXPhT1Q2NN1Us\nwEogSJblAoo1lWBms8Q1/HHP2KwIunCwRHzOQGsyZF4yM+px/uIVV8m1+ALG\nIgwIMNpWf0rcdCvszQT/pq47f7HcNKr54/3g5TevcuPUZH8VKjMjL9XaiHK6\nPZueVkGOEMXoOv7kSsWMPUnb9bnYbFQyUUdajJzpDiODzpqqvh9OJ4xNiMao\nHz48vEAgzjC7pqz58KxD6E1fmfeo088m6XfoxPaQJ1n8PkXIqyXzxUCPa15X\nWC6etWMjnaz+OSxpDDttMiPgt2OzLA9PnCQksvFIOPQHJQCKutyqZBIsA/hv\nXvR4135O36Bjrft793pQ6e7V5oPJw9KQhzkGNBOdUiZsz0vP+AB7/LofVu42\nb7hNH6+5tVT3+pZnDnUHO6msyB5yzumb/aea6WYl+RUsTWYAF+JRj50SvB5x\nMp78c6lv+Wkk/OPb1AzbEsujCIvAuLiaA5u3313k3QrSn0XGIoFiV9A7rKZf\nrsrKkS/khwX0o8WTlivhUNlHD0teZeFn2/M/XQlkZ/Zfb3TWJYc2u46SPVAZ\n/7790ADCprCmh1+gOqjcf3iJhr2UJk2RgKbsBgIvxrpHNTv384hxzwAY02kc\nbdecjqyZ4L9OeRGTjjf7siv0Y3YZs3QUTE8vy4qP/4zvnnZaqP+GE/6hLnUq\nowRZOZWheqfnZ4kU0AtEE3H2NTBDMa6eHuCD1zbeoH7aThvANvAYHrSfpME7\nIvCHbS3h0sbt2x4PozCe7v357IHN7jiHPieruM9DUJmZwgJwG1l1oTtPOf2l\nhjmneFXqxRPfM83kgJsWEqNw6NwABLTn6HXi+U8GRwc5TQnnpwqntka/0oMK\nrCmpdAmCRYVOrksXBxWOdAvMV7R3PIvhADiLuUpA6xR2cK7oG0uBtCKOZGx4\nqUDTkkuoKeKJWUwdfmCmmUWNCmV4G8jESlv4ygMdmLp4BtuC5R8IIcyRUkiH\nEGzyJZpnQzwnwIioqP62r7Exd38/CWFRLDDRuRZUOY+5zEk0Lhdz586GJs83\nJIHZYe5PbkfrVtD7Of4WopZwos21QpUCgnk41dzgYQlLQJFEg6zt3w6iwfA+\nlE6LSK7cIUZ/pju91D6zxZX1Bbz5XxVJIaKlEU0pAVQgOwUIt/cx+AJF39M6\nUsM8X/f0dMpTC3KUHsD/1uOy+v2OQw4HAfgsQrNtnFS+8zRPYXNwMgp4MEpl\n96LF1oGfyUZvQhkXamy+VoTE497yyvF9xKgZJXbdv78XEtYEX/uShn+xbIOR\n7veyiqSaHFsiBmTJ9klHX264v1lHjfz+HG27jP6Ypkf+0nH++Qriz9dMANd3\nQR1ybCBn5DYm5KzL/QzWxiyVSnabJ464NWvvN+qlUMdkdN3SwBOx2jliZVV0\nqXlh5xwcFvCfWT3fv58l39nm76h9S47elnKEXJwpuapvKsq9Ea5UTYKC90Pr\nHNJhW6x+ghzasIG1+QriJ9CUTdaBdxdA6spl6pVR3RdFLKfhAKax5ItQgZgA\nL9kj951L56cYNi6kcHlIzAqdQ8nx0U/CH8x2FQg8PpQNcLnCd9y+HTyA5KKi\npeenAGrLFTl/7HI5Pg6s6vWVDDpotgv7a91tuwrmnS0lElDCMTrZcNFG2vY7\nwE3R7/ItdeY7sUxolv4Teb8eHRiDjR6qfG6ZlR/GD6O58gwruSrvpKEV5ox+\nqND4xIut1kmzML+b2BgqZZ/hBlfb51o7wv+li2g/lljVhDQA2LrWb9+Nf5yS\nFcaM1OG69If4AmOcwGTi7835QENu9b6FCu9i7XxNOchvsfe2932yg81wXUIJ\nxSmIKxL9Vvk79vXbzeRdt3qS6qc0XIzWEgn6opz6FQ1Gtn6GB4HYlUaZUFVO\nhjn2lO2D7Duxa6vuED49cLq2vyuFjgbBDLc3KktNDipKPjf8EqbvlyTjGTKG\nMpyaOYfapTeiEuM4+ScpCflR3XJldBpQk3hGKUWrCWpxjbzKhBmlyAWjFNCy\n8OsiB5Bub7QbDIxKoeLGINvnB091s1LV+YThB9HadW2Y93TSH2NCEI832uxX\ncPWEad62Vma798u42JPUerb+8EG+AGf5U3Mb7AYhPPD4iBD0+zU9xtvFJaHI\nRajKg+ZyZ4B/4WHZhRQ0AVW2Zng/xr8sxJ6T5tN4C/OoczUbmIHHKURbVbKY\nTTNAy8ZFb7aLdbBwDIh2ipi7qSZV7vp1zErPHBPA0l/j8xNDFpDBPfPxrxI5\ndfMjL9rbUKMboLAS1dPRNgWpENtV4vwWE7j777lIh66S1qhFG9SUCGAFVRlF\nWxbDiKQup3XHHUq+4PsN/P0j3+it+FW71Ld/X99HjcnhRIR64UEW6JOikttY\n8YVGtWewEGRNpH6a+W3uEWOhFCH5+MEWz9HjCAdj65QTHImUndI44bJNsOkz\ntHPL057g2+kYVcytKnR5tUpZyYYTNMhIi//K/AqDmhwsnp/LSl80+wG9Ck/9\n9ApiVss7VtKDPLchaSjKcXQf2v/0QmSQHdZSByet14OBbmjIXTiD+4/9ZCMt\n74r042hC82M1Dm7XxE8iuEU3GqFtEA8RzOVNe93c/ORiwhgpvwTUpvewffMt\nIpwAc+RFtvlw7TiugRPHj+nGxARow7O3EPHW6BkEGjxfZmsSSWdw56YN/vv3\noGUfwO/YT6X01dNYOBh0DwFtWfr/qcyiaoRvst8x2jVhcgXqrQjTGl/cm4TD\nq41F2+FzN65gFLAi7kaORQp+YP2VcqkaNfNPeFMfE61J9tI7C1j7nRNTq7Xl\nde1z6kL6Ud5DWuObf4/nyyH7WJvn/G7j1bYhn0jkC5wpbPrj+34kTB1iKhEr\n7DmBtPivI/Y9KgvOia5vb/Y9fOIaJxMKMMkYaxISGzJi7EcfNckVlYtEwZhN\nRHnM/U83WmEtN/4ipE+vmDPer2rSc5OrB8hmSQTLpbRZg7/Kbp5Lp8dCHaI3\nmyyuq74khsEhOLfZZ9ZMsYWbAqHi4TDuQ0/YaFfkycsYglYU4EZSNaqzPw51\niC0WJI14yRztMGAUhlZ24xboybo+AB0AQHVMF5uzn4BlvqpyXfxHM0+mq2WR\nQo8cynhZ5zlitdA6PtB2VefPj76DZziHUIFL2ym9nHHFrKLF6aNpxJheL48D\ncigp+9IJIxN+QHGCCvLP14p7C8EQzMfWS+3o/Y7cIRlM8PtgDH3GnjJpjYgH\na0PmzBDckZqJ7BezUT26o+JTDiFi27m3RdGOqy3RkWtzT4tywUK8xe13/aIX\n8nmj+L74LZ2EB/f24XxWu9l+ixqJ6cVILLK2AUjPkuPFxoZOU0cJmORWA3/a\nTGCN2Q5VMte3uJS2PNCsPeUXgyqZMB6mcld9iADhjxSlQY6/aIswplzxvBEr\nLdkOwzSfyAjMFqD1GShewc9/vu12FXXD+LyNf4OGqyuD0h6/wO/zum/Ro02X\nK/wf16cCdig75ztdLtC7mDUpqCfuSd265cx46ffsb+b6c+Dpm5dIVY2DVcfv\nmG1hiurjxgvjulu7lVV6iLS9aFV8PGm5hvMQ4DnwIYzqPI26iTCo1I+HsbQ1\nx2uHm3/eaZisolVxCMAIhYBT2Qt0auZ40AYrdCo6WvHDCK5xBod8yH462N7S\nr5zKOkfdZafzOk47LLKsfVQ/E9UKrXGouRQ6raOSpr+fO+dwE5VUTry6Jw+8\nfYX8urG54HtnrZzow9hzkOqcrWh0B3Fpa7Q5W4GmkIi+h+jdclctPZjQP6ib\nrLMvvRDA42mUQX8UWp/+/WldUKu3WNbNJKqGZU3opqmKK9sr5hmBb/tDUD8A\nKSkMcFtr7vJsixyqJx0kFpfRlPFUDz3Ny6J/izUNhhMaE6HzzwEyZn0TnTfY\nXqoodLXOcBIIS9Et038yI9YtVB2QUcHZ5DeWjo9/5pTvep6EG1xCYpegMM/w\n9TmeF3O4JzwmCDCY9NeRuXnpsPZbXskWSmhm1jyZhn9dboddwAt1npujE4dR\nn8cEcA52S+laKdJ9hfcS5m0Tdo6OtjrRCnnU9PM1J28ARHQSMfM3RvErhKiT\nb8y/mH8faltb0nwCbeA4A6kGsHK8LkkNh+htYtUWqSEZZrUMyKzaNseu61Y/\nkbpy4T0ge2lcRk7v/6LPUKa5wLJy2LeYMe/S5ZKfJP42/XpTHHaYV7O8WG6h\nq7EOuBDQgNkJFCyaEbZPonS0VgH5mlY5Tsll2jqVJDQeXx8s/0hCoIBrWYEu\nMzwZ6WCSaF0/XGak13F7lUAtm9EGkXQGs92B5MqLRL4dhNjvbB3POAOBcsND\nEia8vw9UaSnZ6uCAsLJifd3GAYF0tpkLztNFrDS+/QRYjuxRk5omg5KTJYUo\nFe/9EzNdDEkNmb4iVyMEvARfTa8NPwTCXk3vfCh4rV+I7SIuSPGK7Ke39FY7\nwkXrXf0rYc+VOW6GWiYBEwRNeHr2QeR3jwsv14BGJAMp6DqvJQ4noi4GmcrZ\nWxmY6WN8gxEvFSpS6HO2q401w28vX4Jk4LL3u3laKhL2vtj6VDJX0E80gYoe\nGEo7yyRWpmPUBItNkubtXdl827KVmUxRJOgmd6LFdExgBbIpGOvd8rQ+aqWE\n0ZqiL4Pd8eXlb8SzStTh2z9XEgiru3LDK+g28I+h6W88/q8jib2Cv6tl0zXW\ne2ZSXIc+zI/Dh0ovrhQpafXXHl9s9Bc/Vc5z619bsFjRvOhUuCP1VeMNkp6P\nf0tdNjWCdJzBTuiJJvJk7OmSxsW6qjBcJYbd8n3wGnrHWfXAO/dO5UdweV2/\n9xewSioN8babzksj9uQ0OGjfXGHV9lGvBOUTF4NTdtViuW/7FQnCFgm/EQbG\nX/OIZfkLF6JYcSchxONeObHsqdXCk94w9dRE6PJFn+h+qL19h3O4FjNqP2/1\nWYdkXzAVOqCR\n"
  },
  "game_id": 68,
  "created_at": "2022-03-25T12:56:37.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-03-25 12:56:39 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:41:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:44:04 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:48:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:48:20 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:53:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:53:45 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:53:50 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
