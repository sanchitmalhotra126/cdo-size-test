<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2015-04-28T18:38:11.000Z",
  "properties": {
    "options": {
      "skip_dialog": true,
      "css": "unplugged"
    },
    "title": "From Circles to Blocks",
    "markdown": "## From Circles to Blocks\n### Choosing the Right Language\n\nThe most immediate and striking difference between Bootstrap and CS in Algebra is the language that students learn to program in. In Bootstrap you probably got used to a three step process for writing code:\n\n1. Write a mathematical expression\n\n    6 * (4 + 5)\n\n2. Draw the Circles of Evaluation\n\n  <img src=\"http://staging.studio.code.org/script_assets/pd/645.png\"/>\n\n3. Convert the Circles to Racket code\n\n    (* 6 (+ 4 5))\n  \nAt some point some of your students may have moved on from the intermediate step of drawing the Circles of Evaluation, but for many students the visual layout is an essential step in understanding how to compose complex expressions and functions. With this in mind, we've developed a brand new programming language from the ground up that uses the visual metaphor of Circles as the actual language. We call this new language \"Evaluation Blocks\", and it looks like this:\n\n<img src=\"http://staging.studio.code.org/script_assets/pd/circles_to_blocks.png\"/>\n\n### Why Blocks?\nMoving from a text language to a block-based language \n\n#### **No Syntax**\nBlocks eliminate syntax errors from the programming environment, which helps students to get over the major hurdles of learning to program without being endlessly punished for every typo they make.\n    \n#### **Logic First**\nBy removing the hurdle of syntax, students are immediately able to focus on the logic of their program.\n    \n#### **Easily Discoverable**\nStudents don't need to memorize commands or look them up in documentation because the blocks they need are available from an easily accessible toolbox.\n\n#### **Control and Scaffolding**\nBecause students only have access to blocks available in the toolbox, we can scaffold their instruction by controlling which blocks they have available on given challenges. Initially students are provided with only the blocks necessary to complete the task at hand, but as they develop their skills they'll be provided with a more complete library of blocks.\n\n#### **Manipulatives**\nThough manipulated through a mouse, the physical act of clicking blocks together is a powerful manipulative tool for understanding order of operations and function composition.\n\n#### **Visual Reinforcement**\nBlocks allow consistent visual reinforcement of every function's contract and data types (through color coding).\n\n#### **Algebraic Written Notation**\nBecause students don't need to learn the new syntax of Racket, they can use traditional Algebraic notation when completing the Design Recipe on paper. This consistency will help students transfer the skills they're learning in CS in Algebra to their everyday Algebra problem solving.\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n"
  },
  "md5": "5afcd25608db6c75eb384e2803a96bb8"
}]]></config>
</External>
