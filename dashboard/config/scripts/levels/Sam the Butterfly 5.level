<Studio>
  <config><![CDATA[{
  "game_id": 33,
  "created_at": "2014-11-17T18:56:14.000Z",
  "level_num": "custom",
  "user_id": 1,
  "properties": {
    "skin": "studio",
    "failure_condition": "function () {\r\n  //return (Studio.sprite[0].y < -100 || Studio.sprite[0].y > 400 ||\r\n  //        Studio.sprite[0].x < -100 || Studio.sprite[0].y > 400);\r\n}",
    "maze": "[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,16,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]",
    "soft_buttons": [
      "leftButton",
      "rightButton",
      "downButton",
      "upButton"
    ],
    "instructions": "Free Play: Awesome, now Sam can't leave the yard from the left or the right, but what about up and down? We've added an additional parameter 'y' to the 'onscreen?' function. Can you update your program so Sam can't leave from the top (y = 425) or bottom (y = -25) either? Test your program by moving Sam as far as he can go in all four directions. Click Finish when Sam is completely protected.",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "true",
    "first_sprite_index": "6",
    "edge_collisions": "false",
    "projectile_collisions": "false",
    "allow_sprites_outside_playspace": "true",
    "sprites_hidden_to_start": "false",
    "coordinate_grid_background": "true",
    "free_play": "true",
    "embed": "false",
    "protaganist_sprite_index": "0",
    "min_workspace_height": "1500",
    "default_num_example_blocks": "2",
    "disable_sharing": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "generate_function_pass_blocks": "true",
    "timeout_after_when_run": "false",
    "custom_game_type": "Sam the Bat",
    "callout_json": "[\r\n {\r\n  \"localization_key\": \"Sam the Butterfly 5 2\",\r\n  \"callout_text\": \"You can create new functions to check safe-up? and safe-down?\",\r\n  \"element_id\": \"[id=':3.label']\",\r\n  \"on\": \"\",\r\n  \"qtip_config\": {\r\n   \"style\": {\r\n    \"classes\": \"\"\r\n   },\r\n   \"position\": {\r\n    \"my\": \"top center\",\r\n    \"at\": \"bottom center\",\r\n    \"adjust\": {\r\n     \"x\": 0,\r\n     \"y\": 0\r\n    }\r\n   }\r\n  }\r\n }\r\n]",
    "disable_examples": "false"
  }
}]]></config>
  <blocks>
    <start_blocks>
      <xml>
        <block type="functional_definition" inline="false">
          <mutation>
            <arg name="x" type="Number"/>
            <arg name="y" type="Number"/>
            <description>Given Sam's x and y coordinates, check if he is safe on all four sides.</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">on-screen?</title>
          <functional_input name="STACK">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">x</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">x</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="on-screen?">
                <arg name="x" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="on-screen?">
                <arg name="x" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">-50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">-50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_start_setValue" inline="false" deletable="false" movable="false" editable="false" id="start_block">
          <functional_input name="VALUE">
            <block type="functional_pass">
              <mutation name="on-screen?"/>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given Sam's x coordinate, return true if his x is greater than -25.</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-left?</title>
          <functional_input name="STACK">
            <block type="functional_greater_than" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get" uservisible="false">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">-25</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">-25</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">-25</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given Sam's x coordinate, return true if his x is less than 425.</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-right?</title>
          <functional_input name="STACK">
            <block type="functional_less_than" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get" uservisible="false">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">425</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">450</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">450</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">425</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number" uservisible="false">
                  <title name="NUM">425</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
      </xml>
    </start_blocks>
    <toolbox_blocks>
      <xml>
        <category name="Number">
          <block type="functional_plus" inline="false"/>
          <block type="functional_minus" inline="false"/>
          <block type="functional_times" inline="false"/>
          <block type="functional_dividedby" inline="false"/>
          <block type="functional_sqrt" inline="false"/>
          <block type="functional_math_number">
            <title name="NUM">0</title>
          </block>
        </category>
        <category name="Boolean">
          <block type="functional_greater_than" inline="false"/>
          <block type="functional_less_than" inline="false"/>
          <block type="functional_number_equals" inline="false"/>
          <block type="functional_logical_and" inline="false"/>
          <block type="functional_logical_or" inline="false"/>
          <block type="functional_logical_not" inline="false"/>
          <block type="functional_boolean">
            <title name="VAL">true</title>
          </block>
        </category>
        <category name="Functions" custom="PROCEDURE"/>
      </xml>
    </toolbox_blocks>
  </blocks>
</Studio>