<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `SATScene`(#e7e8ea) class creates a visualization of the number of SAT scores in the following ranges:\r\n\r\n* Top Scores\r\n\r\n* Competitive Scores\r\n\r\n* Above Average Scores\r\n\r\n* Below Average Scores\r\n\r\nThe `SATScene`(#e7e8ea) class has instance variables for each range. The `analyzeData`(#e7e8ea) method counts the number of scores in the `satScores`(#e7e8ea) array that fall within each range. The `createScene`(#e7e8ea) method draws circles using these counts to represent the number of scores in each range.\r\n\r\n##In SATScene.java:\r\n\r\n1. Write the `analyzeData()`(#e7e8ea) method by traversing the `satScores`(#e7e8ea) array.\r\n\r\n   * If the value is less than or equal to `1600`(#e7e8ea) and greater than or equal to `1340`(#e7e8ea), add `1`(#e7e8ea) to `topScores`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1320`(#e7e8ea) and greater than or equal to `1200`(#e7e8ea), add `1`(#e7e8ea) to `competitive`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1180`(#e7e8ea) and greater than or equal to `1030`(#e7e8ea), add `1`(#e7e8ea) to `aboveAverage`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1010`(#e7e8ea) and greater than or equal to `400`(#e7e8ea), add `1`(#e7e8ea) to `belowAverage`(#e7e8ea).\r\n\r\n2. Write the `createScene()`(#e7e8ea) method by drawing different colored circles for each range. Use the instance variables `topScores`(#e7e8ea), `competitive`(#e7e8ea), `aboveAverage`(#e7e8ea), and `belowAverage`(#e7e8ea) for the width and height of the circles.\r\n\r\n![](https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "SAT Scores",
    "bubble_choice_description": "Use nested if statements to analyze SAT score ranges and draw circles to represent the number of scores in each range.",
    "thumbnail_url": "https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"satscores.txt\");\n    int[] satscores = myFileReader.readNumbers(181);\n\n    SATScene myScene = new SATScene(satscores);\n\n    myScene.analyzeData();\n    myScene.createScene();\n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "SATScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Represents a scene that illustrates SAT score ranges\n */\npublic class SATScene extends Scene {\n\n  private int[] satScores;    // The list of SAT scores\n  private int topScores;      // The number of SAT scores in the top range (1340-1600)\n  private int competitive;    // The number of SAT scores in the competitive range (1200-1320)\n  private int aboveAverage;   // The number of SAT scores in the above average range (1030-1180)\n  private int belowAverage;   // The number of SAT scores in the below average range (400-1010)\n\n  /*\n   * Constructor to create an SATScene with the specified array\n   * of SAT scores and sets the counts for each range to 0\n   */\n  public SATScene(int[] satScores) {\n    this.satScores = satScores;\n    \n    topScores = 0;\n    competitive = 0;\n    aboveAverage = 0;\n    belowAverage = 0;\n  }\n\n  /*\n   * Analyzes the values in the satScores array to count the\n   * number of scores in each range\n   */\n  public void analyzeData() {\n    // TO DO #1: Traverse the satScores array and use nested\n    // if statements to count the number of scores in each range.\n    \n\n    \n  }\n\n  /*\n   * Creates the scene by drawing circles to illustrate\n   * the number of SAT scores in each range\n   */\n  public void createScene() {\n    // TO DO #2: Draw different colored circles in the scene using the number\n    // of scores for each range as the width and height of each circle.\n    \n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n  private Scanner input;  // The Scanner object for reading the data\n\n  /*\n   * Constructor to create a FileReader object with\n   * a specified filename\n   */\n  public FileReader(String newFileName) {\n    File newFile = new File(newFileName);\n    input = null;\n\n    createScanner(newFile);\n  }\n\n  /*\n   * Creates the input object with the specified file\n   * or notifies the user that the file is not found\n   */\n  public void createScanner(File newFile) {\n    try {\n      input = new Scanner(newFile);\n    } catch (FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n  }\n\n  /*\n   * Creates a new File object from the specified filename\n   * and updates the input object with the new file\n   */\n  public void changeFile(String filename) {\n    File newFile = new File(filename);\n    createScanner(newFile);\n  }\n\n  /*\n   * Reads numValues integers from a file into\n   * an int 1D array and returns the array\n   */\n  public int[] readNumbers(int numValues) {\n    int[] values = new int[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (input.hasNextInt()) {\n        values[index] = input.nextInt();\n      }\n    }\n\n    input.close();\n    return values;\n  }\n\n  /*\n   * Reads numValues Strings from a file into\n   * an String 1D array and returns the array\n   */\n  public String[] readText(int numValues) {\n    String[] text = new String[numValues];\n\n    for (int index = 0; index < text.length; index++) {\n      if (input.hasNextLine()) {\n        text[index] = input.nextLine();\n      }\n    }\n\n    input.close();\n    return text;\n  }\n\n}",
        "isVisible": true
      },
      "satscores.txt": {
        "text": "1600\n1593\n1587\n1580\n1573\n1567\n1560\n1553\n1547\n1540\n1533\n1527\n1520\n1513\n1507\n1500\n1493\n1487\n1480\n1473\n1467\n1460\n1453\n1447\n1440\n1433\n1427\n1420\n1413\n1407\n1400\n1393\n1387\n1380\n1373\n1367\n1360\n1353\n1347\n1340\n1333\n1327\n1320\n1313\n1307\n1300\n1293\n1287\n1280\n1273\n1267\n1260\n1253\n1247\n1240\n1233\n1227\n1220\n1213\n1207\n1200\n1193\n1187\n1180\n1173\n1167\n1160\n1153\n1147\n1140\n1133\n1127\n1120\n1113\n1107\n1100\n1093\n1087\n1080\n1073\n1067\n1060\n1053\n1047\n1040\n1033\n1027\n1020\n1013\n1007\n1000\n993\n987\n980\n973\n967\n960\n953\n947\n940\n933\n927\n920\n913\n907\n900\n893\n887\n880\n873\n867\n860\n853\n847\n840\n833\n827\n820\n813\n807\n800\n793\n787\n780\n773\n767\n760\n753\n747\n740\n733\n727\n720\n713\n707\n700\n693\n687\n680\n673\n667\n660\n653\n647\n640\n633\n627\n620\n613\n607\n600\n593\n587\n580\n573\n567\n560\n553\n547\n540\n533\n527\n520\n513\n507\n500\n493\n487\n480\n473\n467\n460\n453\n447\n440\n433\n427\n420\n413\n407\n400",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T17:45:40.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T17:45:40.407+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L3-L3c_2022\"},{\"changed_at\":\"2022-04-07 17:45:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 17:58:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 15:56:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 16:00:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
