<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `SATScene`(#e7e8ea) class creates a visualization of the number of SAT scores in the following ranges:\r\n\r\n* Top Scores\r\n\r\n* Competitive Scores\r\n\r\n* Above Average Scores\r\n\r\n* Below Average Scores\r\n\r\nThe `SATScene`(#e7e8ea) class has instance variables for each range. The `analyzeData`(#e7e8ea) method counts the number of scores in the `satScores`(#e7e8ea) array that fall within each range. The `createScene`(#e7e8ea) method draws circles using these counts to represent the number of scores in each range.\r\n\r\n##In SATScene.java:\r\n\r\n1. Write the `analyzeData()`(#e7e8ea) method by traversing the `satScores`(#e7e8ea) array.\r\n\r\n   * If the value is less than or equal to `1600`(#e7e8ea) and greater than or equal to `1340`(#e7e8ea), add `1`(#e7e8ea) to `topScores`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1320`(#e7e8ea) and greater than or equal to `1200`(#e7e8ea), add `1`(#e7e8ea) to `competitive`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1180`(#e7e8ea) and greater than or equal to `1030`(#e7e8ea), add `1`(#e7e8ea) to `aboveAverage`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1010`(#e7e8ea) and greater than or equal to `400`(#e7e8ea), add `1`(#e7e8ea) to `belowAverage`(#e7e8ea).\r\n\r\n2. Write the `createScene()`(#e7e8ea) method by drawing different colored circles for each range. Use the instance variables `topScores`(#e7e8ea), `competitive`(#e7e8ea), `aboveAverage`(#e7e8ea), and `belowAverage`(#e7e8ea) for the width and height of the circles.\r\n\r\n![](https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "SAT Scores",
    "bubble_choice_description": "Use nested if statements to analyze SAT score ranges and draw circles to represent the number of scores in each range.",
    "thumbnail_url": "https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"satscores.txt\");\n    String[] scores = myFileReader.getIntData(181);\n\n    SATScene myScene = new SATScene(scores);\n    \n    myScene.analyzeData();\n    myScene.createScene();\n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "SATScene.java": {
        "text": "/*\n * Represents a scene that illustrates SAT score ranges\n */\npublic class SATScene extends Scene {\n\n  private int[] satScores;    // The list of SAT scores\n  private int topScores;      // The number of SAT scores in the top range (1340-1600)\n  private int competitive;    // The number of SAT scores in the competitive range (1200-1320)\n  private int aboveAverage;   // The number of SAT scores in the above average range (1030-1180)\n  private int belowAverage;   // The number of SAT scores in the below average range (400-1010)\n\n  /*\n   * Constructor to create an SATScene with the specified array\n   * of SAT scores and sets the counts for each range to 0\n   */\n  public SATScene(int[] satScores) {\n    this.satScores = satScores;\n    \n    topScores = 0;\n    competitive = 0;\n    aboveAverage = 0;\n    belowAverage = 0;\n  }\n\n  /*\n   * Analyzes the values in the satScores array to count the\n   * number of scores in each range\n   */\n  public void analyzeData() {\n    // TO DO #1: Traverse the satScores array and use nested\n    // if statements to count the number of scores in each range.\n    \n\n    \n  }\n\n  /*\n   * Creates the scene by drawing circles to illustrate\n   * the number of SAT scores in each range\n   */\n  public void createScene() {\n    // TO DO #2: Draw different colored circles in the scene using the number\n    // of scores for each range as the width and height of each circle.\n    \n\n    \n  }\n}",
        "isVisible": true
      },
      "satscores.txt": {
        "text": "1600\n1593\n1587\n1580\n1573\n1567\n1560\n1553\n1547\n1540\n1533\n1527\n1520\n1513\n1507\n1500\n1493\n1487\n1480\n1473\n1467\n1460\n1453\n1447\n1440\n1433\n1427\n1420\n1413\n1407\n1400\n1393\n1387\n1380\n1373\n1367\n1360\n1353\n1347\n1340\n1333\n1327\n1320\n1313\n1307\n1300\n1293\n1287\n1280\n1273\n1267\n1260\n1253\n1247\n1240\n1233\n1227\n1220\n1213\n1207\n1200\n1193\n1187\n1180\n1173\n1167\n1160\n1153\n1147\n1140\n1133\n1127\n1120\n1113\n1107\n1100\n1093\n1087\n1080\n1073\n1067\n1060\n1053\n1047\n1040\n1033\n1027\n1020\n1013\n1007\n1000\n993\n987\n980\n973\n967\n960\n953\n947\n940\n933\n927\n920\n913\n907\n900\n893\n887\n880\n873\n867\n860\n853\n847\n840\n833\n827\n820\n813\n807\n800\n793\n787\n780\n773\n767\n760\n753\n747\n740\n733\n727\n720\n713\n707\n700\n693\n687\n680\n673\n667\n660\n653\n647\n640\n633\n627\n620\n613\n607\n600\n593\n587\n580\n573\n567\n560\n553\n547\n540\n533\n527\n520\n513\n507\n500\n493\n487\n480\n473\n467\n460\n453\n447\n440\n433\n427\n420\n413\n407\n400",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\nwbg0zmw4TH+UhRTlIR4/ZfzJWA==\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T17:45:40.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T17:45:40.407+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L3-L3c_2022\"},{\"changed_at\":\"2022-04-07 17:45:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 17:58:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 15:56:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 16:00:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:27:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:29:03 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:29:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:49:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:50:22 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:55:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:55:21 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
