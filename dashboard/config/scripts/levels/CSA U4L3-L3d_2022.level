<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `SATScene`(#e7e8ea) class creates a visualization of the number of SAT scores in the following ranges:\r\n\r\n* Top Scores\r\n\r\n* Competitive Scores\r\n\r\n* Above Average Scores\r\n\r\n* Below Average Scores\r\n\r\nThe `SATScene`(#e7e8ea) class has instance variables for each range. The `analyzeData`(#e7e8ea) method counts the number of scores in the `satScores`(#e7e8ea) array that fall within each range. The `createScene`(#e7e8ea) method draws circles using these counts to represent the number of scores in each range.\r\n\r\n##In SATScene.java:\r\n\r\n1. Write the `analyzeData()`(#e7e8ea) method by traversing the `satScores`(#e7e8ea) array.\r\n\r\n   * If the value is less than or equal to `1600`(#e7e8ea) and greater than or equal to `1340`(#e7e8ea), add `1`(#e7e8ea) to `topScores`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1320`(#e7e8ea) and greater than or equal to `1200`(#e7e8ea), add `1`(#e7e8ea) to `competitive`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1180`(#e7e8ea) and greater than or equal to `1030`(#e7e8ea), add `1`(#e7e8ea) to `aboveAverage`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1010`(#e7e8ea) and greater than or equal to `400`(#e7e8ea), add `1`(#e7e8ea) to `belowAverage`(#e7e8ea).\r\n\r\n2. Write the `createScene()`(#e7e8ea) method by drawing different colored circles for each range. Use the instance variables `topScores`(#e7e8ea), `competitive`(#e7e8ea), `aboveAverage`(#e7e8ea), and `belowAverage`(#e7e8ea) for the width and height of the circles.\r\n\r\n![](https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "SAT Scores",
    "bubble_choice_description": "Use nested if statements to analyze SAT score ranges and draw circles to represent the number of scores in each range.",
    "thumbnail_url": "https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    SATScene myScene = new SATScene(181);\n\n    myScene.readData(\"satscores.txt\");\n    myScene.analyzeData();\n    myScene.createScene();\n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "SATScene.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport org.code.theater.*;\n\n/*\n * Represents a scene that illustrates SAT score ranges\n */\npublic class SATScene extends Scene {\n\n  private int[] satScores;    // The list of SAT scores\n  private int topScores;      // The number of SAT scores in the top range (1340-1600)\n  private int competitive;    // The number of SAT scores in the competitive range (1200-1320)\n  private int aboveAverage;   // The number of SAT scores in the above average range (1030-1180)\n  private int belowAverage;   // The number of SAT scores in the below average range (400-1010)\n\n  /*\n   * Constructor to create an SATScene with the specified number\n   * of SAT scores and sets the counts for each range to 0\n   */\n  public SATScene(int numValues) {\n    this.satScores = new int[numValues];\n    \n    topScores = 0;\n    competitive = 0;\n    aboveAverage = 0;\n    belowAverage = 0;\n  }\n\n  /*\n   * Reads the data from the file into the satScores array\n   */\n  public void readData(String filename) {\n    File myFile = new File(filename);\n    Scanner fileReader = createScanner(myFile);\n\n    for (int index = 0; index < satScores.length; index++) {\n      if (fileReader.hasNextInt()) {\n        satScores[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n  }\n\n  /*\n   * Returns a Scanner object to read theFile\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Analyzes the values in the satScores array to count the\n   * number of scores in each range\n   */\n  public void analyzeData() {\n    // TO DO #1: Traverse the satScores array and use nested\n    // if statements to count the number of scores in each range.\n    \n\n    \n  }\n\n  /*\n   * Creates the scene by drawing circles to illustrate\n   * the number of SAT scores in each range\n   */\n  public void createScene() {\n    // TO DO #2: Draw different colored circles in the scene using the number\n    // of scores for each range as the width and height of each circle.\n    \n\n    \n  }\n}",
        "isVisible": true
      },
      "satscores.txt": {
        "text": "1600\n1593\n1587\n1580\n1573\n1567\n1560\n1553\n1547\n1540\n1533\n1527\n1520\n1513\n1507\n1500\n1493\n1487\n1480\n1473\n1467\n1460\n1453\n1447\n1440\n1433\n1427\n1420\n1413\n1407\n1400\n1393\n1387\n1380\n1373\n1367\n1360\n1353\n1347\n1340\n1333\n1327\n1320\n1313\n1307\n1300\n1293\n1287\n1280\n1273\n1267\n1260\n1253\n1247\n1240\n1233\n1227\n1220\n1213\n1207\n1200\n1193\n1187\n1180\n1173\n1167\n1160\n1153\n1147\n1140\n1133\n1127\n1120\n1113\n1107\n1100\n1093\n1087\n1080\n1073\n1067\n1060\n1053\n1047\n1040\n1033\n1027\n1020\n1013\n1007\n1000\n993\n987\n980\n973\n967\n960\n953\n947\n940\n933\n927\n920\n913\n907\n900\n893\n887\n880\n873\n867\n860\n853\n847\n840\n833\n827\n820\n813\n807\n800\n793\n787\n780\n773\n767\n760\n753\n747\n740\n733\n727\n720\n713\n707\n700\n693\n687\n680\n673\n667\n660\n653\n647\n640\n633\n627\n620\n613\n607\n600\n593\n587\n580\n573\n567\n560\n553\n547\n540\n533\n527\n520\n513\n507\n500\n493\n487\n480\n473\n467\n460\n453\n447\n440\n433\n427\n420\n413\n407\n400",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T17:45:40.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T17:45:40.407+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L3-L3c_2022\"},{\"changed_at\":\"2022-04-07 17:45:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 17:58:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 15:56:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 16:00:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:27:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:29:03 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:29:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
