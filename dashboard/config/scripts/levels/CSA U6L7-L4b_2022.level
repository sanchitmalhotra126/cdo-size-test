<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. first thing\r\n\r\n2. second thing\r\n\r\n3. third thing\r\n\r\n##Getting Started\r\n1. Import `SomeClass.java`(#e7e8ea) from the ![Backpack](https://images.code.org/b17feeef2e8db2a98abdb4a5860c5c61-image-1642175705297.png)\r\n\r\n*Don't have it or it doesn't work? That's ok! Just copy and paste the code from [**here**](https://linktocode.com).*\r\n\r\n##In MyConsole.java:\r\n\r\n2. first step\r\n\r\n3. second step\r\n\r\n4. third step\r\n\r\n::: details [**Show Me How**]\r\nA `for`(#e7e8ea) loop uses the following syntax:\r\n  \r\n  ```\r\n  for (int variableName = startingValue; condition; variableName_change) {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nBe sure to change `variableName`(#e7e8ea) to a name you can easily identify, such as `index`(#e7e8ea), and set the `startingValue`(#e7e8ea) to the value you want to start the loop.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Keyword Search",
    "bubble_choice_description": "Search text for specific keywords and count their frequency in the text.",
    "thumbnail_url": "https://images.code.org/9db46b7f11e8bacd4b8f8c5897d5d469-keyword.png",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyConsole {\n  public static void main(String[] args) {\n\n    ArrayList<String> stopWords = FileReader.getStringData(\"stopwords.txt\");\n    \n    TextProcessor myText = new TextProcessor(\"speech.txt\");\n\n    // TO DO #2: Call the textToWords() method and use the setTextList() method\n    // to update the textList for the TextProcessor object.\n    \n\n    // TO DO #3: Call the removeStopWords() method to remove the stop words\n    // then call the countKeywords() method and print the result.\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of words from a file\n   */\n  public static ArrayList<String> getWords(String filename) {\n    createFile(filename);\n\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    while (fileReader.hasNext()) {\n      tempList.add(fileReader.next());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      },
      "speech.txt": {
        "text": "Moreover, I am cognizant of the interrelatedness of all communities and states. I cannot sit idly by\nin Atlanta and not be concerned about what happens in Birmingham. Injustice anywhere is a threat to\njustice everywhere. We are caught in an inescapable network of mutuality, tied in a single garment\nof destiny. Whatever affects one directly, affects all indirectly. Never again can we afford to live\nwith the narrow, provincial \"outside agitator\" idea. Anyone who lives inside the United States can\nnever be considered an outsider anywhere within its bounds.",
        "isVisible": true
      },
      "stopwords.txt": {
        "text": "a\nan\nand\nare\nas\nat\nbe\nby\nfor\nfrom\nhas\nhe\nin\nis\nit\nits\nof\non\nthat\nthe\nto\nwas\nwere\nwill\nwith",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\nwcI4AnVeYeNqooiM+A==\n"
  },
  "game_id": 68,
  "created_at": "2022-04-14T19:33:57.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-14T19:33:57.334+00:00\",\"changed\":[\"cloned from \\\"CSA U6L7-L4a_2022\\\"\"],\"cloned_from\":\"CSA U6L7-L4a_2022\"},{\"changed_at\":\"2022-04-14 19:33:59 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 16:32:22 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 16:33:21 +0000\",\"changed\":[\"encrypted_examples\",\"display_name\",\"bubble_choice_description\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 16:36:19 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:32:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:34:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:34:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:40:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:43:10 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
