<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws park images based on the area in acres of each national park.\r\n\r\n##In ParkScene.java:\r\n\r\n1. Write the `createScene()`(#e7e8ea) method to draw the `\"park.png\"`(#e7e8ea) image at a random location in the scene. Traverse the `acres`(#e7e8ea) array and use multi-selection statements to check the area in acres of each national park and decide the size to draw the image.\r\n\r\n   * If the number of acres is greater than `1000000`(#e7e8ea), draw the `\"park.png\"`(#e7e8ea) image with a size of `100`(#e7e8ea).\r\n   \r\n   * Else if the number of acres is greater than or equal to `100000`(#e7e8ea), draw the `\"park.png\"`(#e7e8ea) image with a size of `50`(#e7e8ea).\r\n   \r\n   * Otherwise, draw the `\"park.png\"`(#e7e8ea) image with a size of `25`(#e7e8ea).\r\n\r\n##In MyTheater.java:\r\n\r\n2. Call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n3. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "National Parks",
    "bubble_choice_description": "Create a visualization based on the area in acres of each national park.",
    "thumbnail_url": "https://images.code.org/84b9359f0aa6687415053452f0d1277c-image-1650719759035.png",
    "starter_assets": {
      "egypt.png": "0ddffeea-482a-4c11-85f1-4ea00a89901b.png",
      "russia.png": "6beb4dca-a99c-4f98-a82d-2570262d6cbe.png",
      "thailand.png": "2b11e45d-905c-4927-8d10-cbc6216a598c.png",
      "uk.png": "72103ada-d454-40c0-9251-b174e42ba893.png",
      "usa.png": "7c3220e6-e5cd-4c93-9275-36e6e9ff6fc7.png",
      "park.png": "db1cab4c-ee8f-430a-87b2-afa8b9344912.png"
    },
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    String[] parks = FileReader.readText(\"parks.txt\", 62);\n    String[] acres = FileReader.readNumbers(\"acres.txt\", 62);\n\n    ParkScene myScene = new ParkScene(parks, acres);\n\n    // TO DO #2: Call the createScene() method.\n\n\n    // TO DO #3: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;\n  private static Scanner input;\n\n  /*\n   * Reads numValues integers from a file into\n   * an int 1D array and returns the array\n   */\n  public static int[] readNumbers(String filename, int numValues) {\n    createScanner(filename);\n    int[] values = new int[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (input.hasNextInt()) {\n        values[index] = input.nextInt();\n      }\n    }\n\n    input.close();\n    return values;\n  }\n\n  /*\n   * Reads numValues Strings from a file into\n   * an String 1D array and returns the array\n   */\n  public static String[] readText(String filename, int numValues) {\n    createScanner(filename);\n    String[] text = new String[numValues];\n\n    for (int index = 0; index < text.length; index++) {\n      if (input.hasNextLine()) {\n        text[index] = input.nextLine();\n      }\n    }\n\n    input.close();\n    return text;\n  }\n\n  /*\n   * Creates the input object with the specified file\n   * or notifies the user that the file is not found\n   */\n  public static void createScanner(String filename) {\n    myFile = new File(filename);\n    \n    try {\n      input = new Scanner(myFile);\n    } catch (FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "ParkScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the size of each national park\n */\npublic class ParkScene extends Scene {\n\n  private String[] parks;     // The list of national parks\n  private String[] acres;     // The list of areas in acres\n\n  /*\n   * Constructor to create a ParkScene with the\n   * specified arrays of parks and acres\n   */\n  public ParkScene(String[] parks, String[] acres) {\n    this.parks = parks;\n    this.acres = acres;\n  }\n\n  /*\n   * Creates the scene by drawing the park image based on\n   * the area of each park in acres\n   */\n  public void createScene() {    \n    // TO DO #1: Draw the park image at random locations. Use the area\n    // in acres of each national park to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "parks.txt": {
        "text": "Acadia\nAmerican Samoa\nArches\nBadlands\nBig Bend\nBiscayne\nBlack Canyon of the Gunnison\nBryce Canyon\nCanyonlands\nCapitol Reef\nCarlsbad Caverns\nChannel Islands\nCongaree\nCrater Lake\nCuyahoga Valley\nDeath Valley\nDenali\nDry Tortugas\nEverglades\nGates of the Arctic\nGateway Arch\nGlacier\nGlacier Bay\nGrand Canyon\nGrand Teton\nGreat Basin\nGreat Sand Dunes\nGreat Smoky Mountains\nGuadalupe Mountains\nHaleakala\nHawaiʻi Volcanoes\nHot Springs\nIndiana Dunes\nIsle Royale\nJoshua Tree\nKatmai\nKenai Fjords\nKings Canyon\nKobuk Valley\nLake Clark\nLassen Volcanic\nMammoth Cave\nMesa Verde\nMount Rainier\nNorth Cascades\nOlympic\nPetrified Forest\nPinnacles\nRedwood\nRocky Mountain\nSaguaro\nSequoia\nShenandoah\nTheodore Roosevelt\nVirgin Islands\nVoyageurs\nWhite Sands\nWind Cave\nWrangell–St. Elias\nYellowstone\nYosemite\nZion",
        "isVisible": true
      },
      "acres.txt": {
        "text": "49077\n8257\n76679\n242756\n801163\n172971\n30780\n35835\n337598\n241905\n46766\n249561\n26476\n183224\n32572\n3408407\n4740911\n64701\n1508939\n7523897\n193\n1013126\n3223383\n1201647\n310044\n77180\n107342\n522427\n86367\n33265\n325605\n5554\n15349\n571790\n795156\n3674529\n669650\n461901\n1750716\n2619816\n106589\n54012\n52485\n236382\n504781\n922649\n221390\n26686\n138999\n265807\n91716\n404063\n199224\n70447\n15053\n218222\n146344\n33971\n8323146\n2219791\n761748\n147243",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T18:57:12.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T18:57:12.863+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L2_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L2_2022\"},{\"changed_at\":\"2022-04-07 18:57:29 +0000\",\"changed\":[\"long_instructions\",\"csa_view_mode\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:02:39 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:04:52 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:12:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:24:48 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:29 +0000\",\"changed\":[\"bubble_choice_description\",\"thumbnail_url\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:52 +0000\",\"changed\":[\"display_name\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:41:41 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:43:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:43:22 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:46:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:47:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:47:25 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:48:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:50:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:20:53 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:37:24 +0000\",\"changed\":[],\"changed_by_id\":13506,\"changed_by_email\":\"sanchit+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
