<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "algorithms in games",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "encrypted_examples": "Y5oxU2saAYVgPIsEA2UtbgpirxPfyQgbuyBX978jkHY3jPzh5K4ZAIFMmCxg\nkN42/S+kN05nb32KpyZzBE/ZOkYfzsYtMeF70C4r1lum/rdRQRqAKEboF10P\nEtpD1cc4\n",
    "start_sources": {
      "MyPlayground.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyPlayground {\n  public static void main(String[] args) {\n\n    ArrayList<String> pegColors = new ArrayList<String>();\n    pegColors.add(\"red.png\");\n    pegColors.add(\"orange.png\");\n    pegColors.add(\"yellow.png\");\n    pegColors.add(\"green.png\");\n    pegColors.add(\"blue.png\");\n    pegColors.add(\"purple.png\");\n    \n    Mastermind myGame = new Mastermind(pegColors, \"title.png\");\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "Mastermind.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.util.ArrayList;\nimport java.io.FileNotFoundException;\n\npublic class Mastermind {\n\n  /**\n   * the board for the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the list of filenames for the pegs\n   */\n  private ArrayList<String> pegs;\n\n  /**\n   * the array representing the secret code\n   */\n  private SecretPeg[] answer;\n\n  /**\n   * the title banner image\n   */\n  private ImageItem title;\n\n  /**\n   * the message displayed in the game\n   */\n  private TextItem message;\n\n  /**\n   * displays the number of tries left\n   */\n  private TextItem triesLeftMessage;\n\n  /**\n   * the array representing the player's guess pegs\n   */\n  private GuessPeg[] guess;\n\n  /**\n   * the button to check the guess\n   */\n  private CheckButton check;\n\n  /**\n   * Creates a Mastermind game with the specified files for the pegs\n   * @param pegs the array of filenames for the pegs\n   */\n  public Mastermind(ArrayList<String> pegs, String titleFile) {\n    this.pegs = pegs;\n\n    try {\n      title = new ImageItem(titleFile, 70, 10, 260, 50);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid title image: \" + titleFile);\n    }\n\n    try {\n      check = new CheckButton(\"check.png\", 240, 330, 150, 50);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid check button image.\");\n    }\n\n    message = new TextItem(\"Make your guess!\", 120, 160, Color.BLACK, Font.SANS, FontStyle.BOLD, 20, 0);\n    triesLeftMessage = new TextItem(\"Tries Left: \" + check.getTriesLeft(), 20, 350, Color.BLACK, Font.SANS, FontStyle.BOLD, 20, 0);\n    \n    answer = new SecretPeg[4];\n    guess = createGuess();\n  }\n\n  /**\n   * Starts the game\n   */\n  public void play() {\n    printRules();\n    showGame();\n\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting the game.\");\n    }\n  }\n\n  /**\n   * Prints the rules of the game to the console\n   */\n  public void printRules() {\n    System.out.println(\"Guess the code!\");\n    System.out.println(\"The code consists of four randomly-chosen colors.\");\n  }\n\n  /**\n   * Creates the answer and masked arrays with randomly chosen\n   * pegs to create the secret code and question mark images\n   * @return an array of question mark images to mask the secret code\n   */\n  public ImageItem[] createSecret() {\n    ImageItem[] maskedSecret = new ImageItem[4];\n    int xPos = 20;\n    \n    for (int count = 0; count < answer.length; count++) {\n      int randomChoice = (int)(Math.random() * pegs.size());\n\n      try {\n        answer[count] = new SecretPeg(pegs.get(randomChoice), xPos, 70, 50, 50);\n        maskedSecret[count] = new ImageItem(\"secret.png\", xPos, 70, 50, 50);\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Invalid peg file: \" + pegs.get(randomChoice));\n      }\n      \n      pegs.remove(randomChoice);\n      xPos += 100;\n    }\n\n    return maskedSecret;\n  }\n\n  /**\n   * Creates the guess pegs array using the first peg image for each\n   * @return the array of guess pegs\n   */\n  public GuessPeg[] createGuess() {\n    GuessPeg[] guess = new GuessPeg[4];\n    int xPos = 20;\n\n    for (int count = 0; count < guess.length; count++) {\n      try {\n        guess[count] = new GuessPeg(pegs, xPos, 195, 50, 50);\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Invalid peg file: \" + pegs.get(0));\n      }\n\n      xPos += 100;\n    }\n\n    return guess;\n  }\n\n  /**\n   * Displays the starting game components\n   * (title banner and secret code)\n   */\n  public void showGame() {\n    // display the title banner image\n    myBoard.addImageItem(title);\n\n    ImageItem[] secretCode = createSecret();\n    \n    // display the secret images\n    for (int index = 0; index < secretCode.length; index++) {\n      myBoard.addImageItem(secretCode[index]);\n    }\n\n    // display the game messages\n    myBoard.addTextItem(message);\n    myBoard.addTextItem(triesLeftMessage);\n\n    // display the guess pegs\n    for (int index = 0; index < guess.length; index++) {\n      myBoard.addClickableImage(guess[index]);\n    }\n\n    // display the check button\n    myBoard.addClickableImage(check);\n  }\n\n  /**\n   * Displays the secret code\n   */\n  public void showSecret() {\n    for (int index = 0; index < answer.length; index++) {\n      myBoard.addImageItem(answer[index]);\n      System.out.println(answer[index].getColor());\n    }\n  }\n\n}",
        "isVisible": true
      },
      "SecretPeg.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class SecretPeg extends ImageItem {\n\n  /**\n   * the color of the secret peg\n   */\n  private String pegColor;\n\n  /**\n   * Creates a SecretPeg image\n   * @param filename the name of the file of the image\n   * @param x the x position of the peg\n   * @param y the y position of the peg\n   * @param width the width of the peg\n   * @param height the height of the peg\n   */\n  public SecretPeg(String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    this.pegColor = filename.substring(0, filename.indexOf(\".\"));\n  }\n\n  /**\n   * Gets the color of the secret peg\n   */\n  public String getColor() {\n    return pegColor;\n  }\n  \n}",
        "isVisible": true
      },
      "GuessPeg.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.util.ArrayList;\nimport java.io.FileNotFoundException;\n\npublic class GuessPeg extends ClickableImage {\n\n  private ArrayList<String> colors;\n  private String currentColor;\n  private int currentIndex;\n  private String currentFile;\n\n  public GuessPeg(ArrayList<String> pegColors, int x, int y, int width, int height) throws FileNotFoundException {\n    super(pegColors.get(0), x, y, width, height);\n    colors = copyColors(pegColors);\n    \n    currentIndex = 0;\n    currentFile = pegColors.get(currentIndex);\n    currentColor = currentFile.substring(0, currentFile.indexOf(\".\"));\n  }\n\n  public ArrayList<String> copyColors(ArrayList<String> pegColors) {\n    ArrayList<String> tempColors = new ArrayList<String>();\n    \n    for (int index = 0; index < pegColors.size(); index++) {\n      tempColors.add(pegColors.get(index));\n    }\n\n    return tempColors;\n  }\n\n  public String getCurrentFile() {\n    return currentFile;\n  }\n\n  public void setCurrentFile(String file) {\n    currentFile = file;\n  }\n\n  public String getColor() {\n    return currentColor;\n  }\n\n  public void setColor(String color) {\n    currentColor = color;\n  }\n\n  public void onClick() {\n    if (currentIndex < colors.size()) {\n      currentIndex++;\n    }\n    else {\n      currentIndex = 0;\n    }\n    \n    setCurrentFile(colors.get(currentIndex));\n\n    try {\n      setFilename(currentFile);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid guess peg file: \" + currentFile);\n    }\n    \n    setColor(currentFile.substring(0, currentFile.indexOf(\".\")));\n  }\n}",
        "isVisible": true
      },
      "CheckButton.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class CheckButton extends ClickableImage {\n\n  private int triesLeft;\n\n  public CheckButton(String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    triesLeft = 12;\n  }\n\n  public int getTriesLeft() {\n    return triesLeft;\n  }\n\n  public void onClick() {\n    triesLeft--;\n  }\n  \n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2021-12-12T15:56:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-12-12 15:57:03 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-05 21:40:13 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-06 19:53:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
