{
  "category_key": "org_code_theater",
  "content": "",
  "examples": "[{\"code\":\"```\\nScene myScene = new Scene();\\n\\nmyScene.drawText(\\\"Hello World!\\\", 200, 200);\\n\\n// Performs the scene and shows it to the screen.\\nTheater.playScenes(myScene);\"}]",
  "external_documentation": "",
  "fields": "[]",
  "key": "Scene",
  "name": "Scene",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "name": "Scene()",
      "position": 0,
      "key": "scene",
      "overload_of": null,
      "content": "Creates a new scene for the Theater. A scene is a set of steps of animation, such as drawing an image, text or a shape. A scene can also include sound, like playing a sound file or musical notes",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public Scene()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "int getWidth()",
      "position": 1,
      "key": "getwidth",
      "overload_of": null,
      "content": "Returns the width of the theater canvas in pixels.\n",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public int getWidth()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "int getHeight()",
      "position": 2,
      "key": "getheight",
      "overload_of": null,
      "content": "Returns the height of the theater canvas, in pixels.\n",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public int getHeight()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void clear(String color)",
      "position": 3,
      "key": "clear",
      "overload_of": null,
      "content": "Clear the canvas and set the background to the given color name.\n",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"description\":\"The name of the color to clear the canvas with. If the name does not match a known color or hex value, this method will set the background to black.\"}]",
      "examples": "[]",
      "syntax": "`public void clear(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void playSound(String filename)",
      "position": 4,
      "key": "playsound",
      "overload_of": null,
      "content": "Plays the sound referenced by the file name.",
      "parameters": "[{\"name\":\"filename\",\"type\":\"String\",\"required\":true,\"description\":\"the file to play in the asset manager\"}]",
      "examples": "[]",
      "syntax": "`public void playSounds(String filename)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void playNote(int note, double seconds)",
      "position": 5,
      "key": "playnote",
      "overload_of": null,
      "content": "Plays a note with the default instrument (piano).",
      "parameters": "[{\"name\":\"note\",\"type\":\"int\",\"required\":true,\"description\":\"the note to play. 60 represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"length of the note\"}]",
      "examples": "[]",
      "syntax": "`public void playNote(int note, double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void playNoteAndPause(int note, double seconds)",
      "position": 6,
      "key": "playnoteandpause",
      "overload_of": null,
      "content": "Plays a note with the default instrument (piano) and adds a pause in drawing/audio for the duration of the note, so that subsequent play commands begin after the note has finished playing.",
      "parameters": "[{\"name\":\"note\",\"type\":\"int\",\"required\":true,\"description\":\"the note to play. 60 represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"length of the note\"}]",
      "examples": "[]",
      "syntax": "`public void playNoteAndPause(int note, double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void pause(double seconds)",
      "position": 7,
      "key": "pause",
      "overload_of": null,
      "content": "Wait the provided number of seconds before performing the next draw or play command.",
      "parameters": "[{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"The number of seconds to wait. This can be a fraction of a second, but the smallest value can be .1 seconds.\"}]",
      "examples": "[]",
      "syntax": "`public void pause(double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawImage(String filename, int x, int y, int size, double rotation)",
      "position": 8,
      "key": "drawimage",
      "overload_of": null,
      "content": "Draw an image on the canvas at the given location and size.",
      "parameters": "[{\"name\":\"filename\",\"type\":\"String\",\"required\":true,\"description\":\"filename the name of the file in the asset manager\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the left side of the image in the canvas\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the top of the image in the canvas\"},{\"name\":\"size\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the image, in pixels. The height will stretch to make sure the image does not appear distorted.\"}]",
      "examples": "[]",
      "syntax": "`public void drawImage(String filename, int x, int y, int size, double rotation)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void setTextStyle(Font font, FontStyle style) ",
      "position": 9,
      "key": "settextstyle",
      "overload_of": null,
      "content": "Set the font and style to draw text in, e.g. sans-serif, monospaced, italic, etc.",
      "parameters": "[{\"name\":\"font\",\"type\":\"Font\",\"required\":true,\"description\":\"the font to draw with\"},{\"name\":\"style\",\"type\":\"FontStyle\",\"required\":true,\"description\":\"the style of the font\"}]",
      "examples": "[]",
      "syntax": "`public void setTextStyle(Font, FontStyle style)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void setTextHeight(int height)",
      "position": 10,
      "key": "settextheight",
      "overload_of": null,
      "content": "Set the size to draw text, defined as the height of the text in pixels.",
      "parameters": "[{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"height the height of the text to draw\"}]",
      "examples": "[]",
      "syntax": "`public void setTextHeight(int height)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void setTextColor(String color)",
      "position": 11,
      "key": "settextcolor",
      "overload_of": null,
      "content": "Set the color for drawing text",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"The name of the color to draw text in. If the color name cannot be found, this will result in setting the color to black.\"}]",
      "examples": "[]",
      "syntax": "`public void setTextColor(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawText(String text, int x, int y)",
      "position": 12,
      "key": "drawtext",
      "overload_of": null,
      "content": "Draws text on the image.",
      "parameters": "[{\"name\":\"text\",\"type\":\"String\",\"required\":true,\"description\":\"the text to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the distance from the left side of the image to draw the text.\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the distance from the top of the image to draw the text.\"}]",
      "examples": "[]",
      "syntax": "`public void drawText(String text, int x, int y)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawLine(int startX, int startY, int endX, int endY)",
      "position": 13,
      "key": "drawline",
      "overload_of": null,
      "content": "Draw a line on the canvas.",
      "parameters": "[{\"name\":\"startX\",\"type\":\"int\",\"required\":true,\"description\":\"the beginning X coordinate of the line\"},{\"name\":\"startY\",\"type\":\"int\",\"required\":true,\"description\":\"the beginning Y coordinate of the line.\"},{\"name\":\"endX\",\"type\":\"int\",\"required\":true,\"description\":\"the end X coordinate of the line\"},{\"name\":\"endY\",\"type\":\"int\",\"required\":true,\"description\":\"the end Y coordinate of the line\"}]",
      "examples": "[]",
      "syntax": "public final void drawLine(int startX, int startY, int endX, int endY)",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawRegularPolygon(int x, int y, int sides, int radius)",
      "position": 14,
      "key": "drawregularpolygon",
      "overload_of": null,
      "content": "Draw a regular polygon (triangle, square, pentagon, hexagon, etc.) on the canvas.",
      "parameters": "[{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the center X coordinate of the polygon\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the center Y coordinate of the polygon\"},{\"name\":\"sides\",\"type\":\"int\",\"required\":true,\"description\":\"the number of sides of the polygon\"},{\"name\":\"radius\",\"type\":\"int\",\"required\":true,\"description\":\"the distance from the center to each point on the polygon\"}]",
      "examples": "[]",
      "syntax": "`public final void drawRegularPolygon(int x, int y, int sides, int radius)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawShape(int[] points, boolean close)",
      "position": 15,
      "key": "drawshape",
      "overload_of": null,
      "content": "Draw a shape by connecting the points provided.",
      "parameters": "[{\"name\":\"points\",\"type\":\"int[]\",\"required\":true,\"description\":\"an array of numbers representing the points. For instance, a triangle with points (0,10), (30,50), and (20, 60) could be represented as `[0, 10, 30, 50, 20, 60]`.\"},{\"name\":\"close\",\"type\":\"boolean\",\"required\":true,\"description\":\"whether to close the shape. If this is set to true, the last point and the first point will be connected by a line, and if a fill color is set, the shape will be filled with that color.\"}]",
      "examples": "[]",
      "syntax": "`public final void drawShape(int[] points, boolean close)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawEllipse(int x, int y, int width, int height) ",
      "position": 16,
      "key": "drawellipse",
      "overload_of": null,
      "content": "Draws an ellipse (an oval or a circle) on the canvas",
      "parameters": "[{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the left side of the ellipse\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the top of the ellipse\"},{\"name\":\"width\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the ellipse\"},{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"the height of the ellipse\"}]",
      "examples": "[]",
      "syntax": "`public final void drawEllipse(int x, int y, int width, int height)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawRectangle(int x, int y, int width, int height)",
      "position": 17,
      "key": "drawrectangle",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void setStrokeWidth(double width)",
      "position": 18,
      "key": "setstrokewidth",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void setFillColor(String color)",
      "position": 19,
      "key": "setfillcolor",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void removeStrokeColor()",
      "position": 20,
      "key": "removestrokecolor",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void removeFillColor()",
      "position": 21,
      "key": "removefillcolor",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playNote",
      "position": 22,
      "key": "playnote2",
      "overload_of": "playnote",
      "content": "Plays a note with the selected instrument.",
      "parameters": "[{\"name\":\"instrument \",\"type\":\"Instrument\",\"required\":true,\"description\":\"the instrument to play.\"},{\"name\":\"note\",\"type\":\"int\",\"required\":true,\"description\":\"the note to play. 60 represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"length of the note.\"}]",
      "examples": "[]",
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playNoteAndPause",
      "position": 23,
      "key": "playnoteandpause2",
      "overload_of": "playnoteandpause",
      "content": "Plays a note with the selected instrument and adds a pause in drawing/audio for the duration of the note, so that subsequent play commands begin after the note has finished playing.\n",
      "parameters": "[{\"name\":\"instrument\",\"type\":\"Instrument\",\"required\":true,\"description\":\"the instrument to play\"},{\"name\":\"note \",\"type\":\"int\",\"required\":true,\"description\":\"the note to play. 60 represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"length of the note\"}]",
      "examples": "[]",
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage2",
      "position": 24,
      "key": "drawimage2",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void clear(Color color)",
      "position": 25,
      "key": "void-clear-color-color",
      "overload_of": "clear",
      "content": "Clear the canvas and set the background to the given color.",
      "parameters": "[{\"name\":\"color\",\"type\":\"Color\",\"required\":true,\"description\":\"the color to clear the canvas to\"}]",
      "examples": "[]",
      "syntax": "`public void clear(Color color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "void drawText(String text, int x, int y, double rotation)",
      "position": 26,
      "key": "void-drawtext-string-text-int-x-int-y-double-rotation",
      "overload_of": null,
      "content": "Draws text on the image",
      "parameters": "[{\"name\":\"text\",\"type\":\"String\",\"required\":true,\"description\":\"the text to draw to the image.\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"distance from the left side of the image to draw the text, pixels\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"distance from the top of the image to draw the text, in pixels\"},{\"name\":\"rotation\",\"type\":\"double\",\"required\":true,\"description\":\"amount to tilt or rotate the text, in degrees. The text will rotate around its center.\"}]",
      "examples": "[]",
      "syntax": "`public void drawText(String text, int x, int y, double rotation)`",
      "external_link": null,
      "return_value": null
    }
  ]
}