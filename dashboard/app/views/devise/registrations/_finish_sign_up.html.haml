- SignUpTracking.log_load_finish_sign_up session, (@user.provider || 'email')
- require 'geocoder'
- require 'country_codes'
- location = Geocoder.search(request.ip).try(:first)
- us_ip = location.nil? || ['US', 'RD'].include?(location.country_code.to_s.upcase)

- @page_title = t('activerecord.attributes.user.finish_sign_up_header')

#signup
  .row
    .span10.header
      %h1= @page_title

  = form_for(@user, url: registration_path(@user), html: {class: "finish-signup"}) do |f|
    .row
      .span10
        %p
          - if @user.provider.present?
            - provider = t("auth.#{@user.provider}")
            = t('activerecord.attributes.user.finish_sign_up_subheader_provider_markdown', provider: provider, email: @user.email, markdown: :inline).html_safe
          - else
            = t('activerecord.attributes.user.finish_sign_up_subheader_markdown', email: @user.email, markdown: :inline).html_safe
          = link_to t('cancel'), users_cancel_path

    = f.hidden_field :locale, value: locale
    = f.hidden_field :email
    = f.hidden_field :encrypted_password
    .row
      .span3.signup-field-label
        = f.label :user_type, t('signup_form.user_type_label')
        - if @user.errors[:user_type].present?
          %p.error= t('activerecord.errors.messages.blank')
      .span5
        %button.select-user-type-student-button{id: 'select-user-type-student', type: 'button', onClick: 'selectUserTypeStudent()'}
          %b.user-type-name Student
          %p.user-type-desc For learners who don't intend on teaching a course
          %ul.user-type-abilities-unordered-list
            %li Join sections
            %li View and complete assigned work
            %li Learn at your own pace
            %li Explore all of Code.org's courses and resources
        %button.select-user-type-teacher-button{id: 'select-user-type-teacher', type: 'button', onClick: 'selectUserTypeTeacher()'}
          %b.user-type-name Teacher
          %p.user-type-desc For educators
          %ul.user-type-abilities-unordered-list
            %li Create and manage sections
            %li Join sections
            %li Assign activities
            %li View and provide feedback on student work
            %li Access professional learning resources
            %li Explore all of Code.org's courses and resources
      .span2
    .row#parent-email-container
      .span8#parent-email-section
        .padded-container
          .row.parent-email-section-header
            .span7.parent-email-field-input
              .checkbox
                = f.label :parent_email_preference_opt_in_required do
                  = f.check_box :parent_email_preference_opt_in_required
                  %span= t('signup_form.parent_account_checkbox')
          .row.parent-email-field
            .span3.signup-field-label
              = f.label :parent_email do
                %span= t('signup_form.parent_account_email_label')
              - if @user.errors[:parent_email_preference_email].present?
                %p.error= @user.errors[:parent_email_preference_email]&.first
            .span4.parent-email-field-input
              = f.email_field :parent_email_preference_email, maxlength: 255, value: @user.parent_email_preference_email || @user.email
          .row.parent-email-field
            .span6.signup-field-label
              = t('signup_form.parent_account_email_progress_permission', privacy_policy_url: CDO.code_org_url('/privacy'), markdown: true).html_safe
              - if @user.errors[:parent_email_preference_opt_in].present?
                %p.error= t('signup_form.email_preference_required')
            .span1.parent-email-field-input{style:"display:block"}
              .radio
                = f.radio_button :parent_email_preference_opt_in, 'yes'
                = f.label :parent_email_preference_opt_in, t('signup_form.email_preference_yes'), value: 'yes'
              .radio
                = f.radio_button :parent_email_preference_opt_in, 'no'
                = f.label :parent_email_preference_opt_in, t('signup_form.email_preference_no'), value: 'no'
    .row
      .span3.signup-field-label
        #teacher-name-label{style: "display: none;"}
          = f.label :name, t('activerecord.attributes.user.name').html_safe
        #student-name-label{style: "display: none;"}
          = f.label :name, t('activerecord.attributes.user.name_example')
        - if @user.errors[:name].present?
          %p.error= @user.errors[:name].join(', ')
      .span5
        = f.text_field :name, maxlength: 255

    .row#age-dropdown{style: "display: none;"}
      .span3.signup-field-label
        = f.label :age
        - if @user.errors[:age].present?
          %p.error= @user.errors[:age].join(', ')
      .span5
        = f.select :age, age_options, include_blank: true

    .row#gender-dropdown{style: "display: none;"}
      .span3.signup-field-label
        = f.label :gender, t('signup_form.gender')
      - if @user.errors[:gender].present?
        %span.error= @user.errors[:gender].join(', ')
      .span5
        = f.select :gender, gender_options

    .row#school-info-section{style: "display: none;"}
      .span10
        -# Mount point for React SchoolInfoInputs component.
        #school-info-inputs.section-container
          = f.fields_for :school_info_attributes do |ff|
            = ff.hidden_field :school_id
            = ff.hidden_field :school_name
            = ff.hidden_field :school_state
            = ff.hidden_field :school_zip
            = ff.hidden_field :country
            = ff.hidden_field :full_address

    -# If GDPR applies, show an additional checkbox.
    - if request.gdpr? || request.params['force_in_eu']
      .row
        .span12#gdpr-section
          = f.hidden_field :data_transfer_agreement_required, value: "1"
          .checkbox
            = f.label :data_transfer_agreement_accepted do
              = f.check_box :data_transfer_agreement_accepted
              %div#gdpr-label
                %span#student-gdpr
                  = t('signup_form.agree_us_data_transfer_student', markdown: :inline).html_safe
                %span#teacher-gdpr{style: "display: none;"}
                  = t('signup_form.agree_us_data_transfer_teacher', markdown: :inline).html_safe
                %span
                  = t('signup_form.data_collection_us', markdown: :inline).html_safe
                  = t('signup_form.visit_privacy', privacy_url: CDO.code_org_url('/privacy'), markdown: :inline).html_safe
          - if @user.errors[:data_transfer_agreement_accepted].present?
            %p.error= t('signup_form.accept_terms')

    .row#email-preference-radio{style: "display: none;"}
      .span10.signup-field-label
        %p
          = t('signup_form.email_preference_question')
          = link_to t('signup_form.email_preference_privacy'), CDO.code_org_url('/privacy'), target: '_blank'
        - if @user.errors[:email_preference_opt_in].present?
          %p.error= t('signup_form.email_preference_required')
      .span2{style:"display:block"}
        .radio
          = f.radio_button :email_preference_opt_in, 'yes'
          = f.label :email_preference_opt_in, t('signup_form.email_preference_yes'), value: 'yes'
        .radio
          = f.radio_button :email_preference_opt_in, 'no'
          = f.label :email_preference_opt_in, t('signup_form.email_preference_no'), value: 'no'

    .row
      .span10.tos
        = f.hidden_field :terms_of_service_version, value: User::TERMS_OF_SERVICE_VERSIONS.last
        = t('terms_interstitial.accept_tos', tos_url: CDO.code_org_url('/tos'), privacy_url: CDO.code_org_url('/privacy'), markdown: true).html_safe

    %button.submit= t('signup_form.go_to_account')

:javascript
  const teacherButton = document.getElementById('select-user-type-teacher');
  const studentButton = document.getElementById('select-user-type-student');
  function selectUserTypeTeacher() {
    // select 'student' as user type
    var selectTeacherEvent = new CustomEvent('selectUserType', {
      detail: 'teacher'
    });
    document.dispatchEvent(selectTeacherEvent);
    // keep selected button styled the same as button:hover so it's clear what the current selection is
    teacherButton.classList.add('select-user-type-button-selected');
    studentButton.classList.remove('select-user-type-button-selected');
  }
  function selectUserTypeStudent() {
    // select 'student' as user type
    var selectStudentEvent = new CustomEvent('selectUserType', {
      detail: 'student'
    });
    document.dispatchEvent(selectStudentEvent);
    // keep selected button styled the same as button:hover so it's clear what the current selection is
    studentButton.classList.add('select-user-type-button-selected');
    teacherButton.classList.remove('select-user-type-button-selected');
  }

:ruby
  script_data = {
    signup: {
      usIp: us_ip,
      signUpUID: "#{session[:sign_up_uid]}"
    }.to_json
  }
%script{src: webpack_asset_path('js/devise/registrations/_finish_sign_up.js'), data: script_data}
