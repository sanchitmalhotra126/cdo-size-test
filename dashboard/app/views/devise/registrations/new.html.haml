- require 'geocoder'
- require 'country_codes'
- resource.user_type ||= params[:user].try(:fetch, :user_type) || User::TYPE_STUDENT

- location = Geocoder.search(request.ip).try(:first)
- us_ip = location.nil? || ['US', 'RD'].include?(location.country_code.to_s.upcase)

-#
  Retrieve the user_return_to value from the session, which will also delete it.
  It means that a failed attempted to sign up here will no longer take the
  user to the recorded return_to URL upon a future attempt at sign-in/up, but
  that should be alright because it's really only a best-attempt, and not
  crucial, and should probably only be done immediately after the user attempted
  to go that that URL anyway, not a long time afterwards which is confusing.

- user_return_to_url = get_and_clear_session_user_return_to

%script{src: "https://cdn.optimizely.com/js/400912536.js"}

#signup
  .row
    .span9
      %h1= t('signup_form.title')
      - if @already_hoc_registered
        %p= t('signup_form.hoc_already_signed_up_content_post_hoc', studio_url: CDO.studio_url('/')).html_safe
      - else
        %p= t('signup_form.overview').html_safe
        = t('auth.already_signedup')
        = link_to t('nav.user.signin'), new_session_path(resource_name)

  .row
    .span8.signupblock

      = form_for(resource, as: resource_name, url: registration_path(resource_name), html: {class: 'signupform'}) do |f|
        #user_type-block.itemblock
          .labelblock= t('signup_form.user_type_label')
          %select#user_user_type.fieldblock{name: "user[user_type]", type: "select"}
            %option{value: "", selected: true, disabled: true}
            %option{value: User::TYPE_STUDENT}= t('signup_form.user_type_student')
            %option{value: User::TYPE_TEACHER}= t('signup_form.user_type_teacher')
          .error_in_field= t('signup_form.field_is_required')

        = signup_error_messages!

        = f.hidden_field :locale, value: locale
        = f.hidden_field :hashed_email

        #email-block.itemblock
          .labelblock= t('activerecord.attributes.user.email')
          = f.email_field :email, class: 'input-xlarge fieldblock', maxlength: 255
          .error_in_field

        - if f.object.password_required?
          #password-block.itemblock
            .labelblock= t('activerecord.attributes.user.password')
            = f.password_field :password, class: 'input-xlarge fieldblock', maxlength: 255
            .error_in_field

          #password_confirmation-block.itemblock
            .labelblock= t('activerecord.attributes.user.password_confirmation')
            = f.password_field :password_confirmation, class: 'input-xlarge fieldblock', maxlength: 255
            .error_in_field

        #name-block.itemblock
          #name-student.labelblock!= t('activerecord.attributes.user.name_example')
          #name-teacher.labelblock{style: "display: none"}= t('activerecord.attributes.user.name')
          = f.text_field :name, class: 'input-xlarge fieldblock', maxlength: 255
          .error_in_field

        #schooldropdown-block.itemblock{style: "display: none;"}

        #age-block.itemblock
          .labelblock= t('signup_form.age')
          %select#user_user_age.fieldblock{name: "user[age]", type: "select"}
            %option{value: "", selected: true, disabled: true}
            - User::AGE_DROPDOWN_OPTIONS.each do |age_option|
              %option{value: age_option}= age_option
          .error_in_field

        #gender-block.itemblock
          .labelblock= t('signup_form.gender')
          = f.select :gender, gender_options, {disabled: '', selected: ''}, {class: 'fieldblock'}
          .error_in_field

        #email_preference_opt_in-block
          #optin-container
            .email-preference.itemblock{style: "display: none"}
              .labelblock-wide
                = t('signup_form.email_preference_question').html_safe
                = link_to t('signup_form.email_preference_privacy'), CDO.code_org_url('/privacy'), target: '_blank'
              %select#user_email_preference_opt_in.fieldblock{name: "user[email_preference_opt_in]", type: "select"}
                %option{value: "", selected: true, disabled: true}
                %option{value: "yes"}= t('signup_form.email_preference_yes').html_safe
                %option{value: "no"}= t('signup_form.email_preference_no').html_safe

          #optin2-container{style: "display: none"}
            .email-preference.itemblock{style: "display: none"}
              .labelblock-wide= t('signup_form.email_preference_question').html_safe
              = link_to t('signup_form.email_preference_privacy'), CDO.code_org_url('/privacy'), target: '_blank'
              #optin2-yes-container
                %input{type: "radio", id: "optin2-yes", name: "user[email_preference_opt_in]", value: "yes"}
                %label{for: "optin2-yes"}= t('signup_form.email_preference_yes').html_safe
              #optin2-no-container
                %input{type: "radio", id: "optin2-no", name: "user[email_preference_opt_in]", value: "no"}
                %label{for: "optin2-no"}= t('signup_form.email_preference_no').html_safe

          .error_in_field.checkbox-error

        #teacher-terms{style: 'display: none'}
          .right
            %iframe#print-frame{src: '/terms-and-privacy', style: 'display: none'}
            %a#print-terms{href: "#"}
              %i.fa.fa-print.right-margin-5
              = t('terms_interstitial.print')
          .clear
          .scroll-box
            %h1.custom-h1= t('terms_interstitial.tos')
            = render partial: 'home/tos'
            %hr
            %h1.custom-h1= t('terms_interstitial.privacy')
            = render partial: 'home/privacy'
            %hr
            %h1.custom-h1= t('terms_interstitial.privacy_notice')
            = render partial: 'home/privacy_notice'
          %br
          #terms_of_service_version-block.itemblock
            .error_in_field.checkbox-error
            %br
            = f.label :terms_of_service_version do
              = f.check_box :terms_of_service_version, {class: 'terms-checkbox', :checked => true}, User::TERMS_OF_SERVICE_VERSIONS.last
              = t('terms_interstitial.accept_label', tos_url: CDO.code_org_url('/tos'), privacy_url: CDO.code_org_url('/privacy')).html_safe

        %br
        #signup-error.error{style: 'display: none'}= t('signup_form.error')
        %button#signup-button.primary= t('signup_form.submit')

        #student-terms
          %br/
          %br/
          %br/
          != t('signup_form.student_terms')

    .span4
      .devise_links
        = render "devise/shared/links"

    %div{style: "clear:both"}
    %br/
    %br/
    %br/

%script{src: minifiable_asset_path('js/signup.js')}
%script{type: "text/javascript", src: "https://maps.googleapis.com/maps/api/js?client=#{CDO.google_maps_client_id}&sensor=true&libraries=places,geometry&v=3.7"}

:javascript

  $(document).ready(function() {
    // Send through some values that the JavaScript will need.
    window.signupManager = new SignupManager({
      isTeacher: "#{resource.teacher?}",
      returnToUrl: "#{user_return_to_url}",
      teacherDashboardUrl: "#{teacher_dashboard_url}",
      invalidPasswordString: "#{t('signup_form.invalid_password')}",
      passwordMismatchString: "#{t('signup_form.mismatch_password')}",
      acceptTermsString: "#{t('signup_form.accept_terms')}",
      emailPreferenceOptInString: "#{t('signup_form.email_preference_required')}",
      usIP: #{us_ip}
    });
  });

  $(document).ready(function () {
    var printLink = $('#print-terms');
    if (printLink) {
      printLink.click(function () {
        var item = $("#print-frame")[0];
        item.contentWindow.print();
      });
    }
  });
