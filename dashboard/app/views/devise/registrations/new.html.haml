-require 'country_codes'

- resource.user_type ||= params[:user].try(:fetch, :user_type) || User::TYPE_STUDENT

:css
  .form-group {
    margin-top: 0px !important
  }

#signup
  .row
    .span9
      %h1= resource.student? ? t('signup_form.student_pitch') : t('signup_form.teacher_pitch')
      - if resource.student?
        %p
          = t('signup_form.overview_student').html_safe
        %p
          = sanitize(t('signup_form.no_signup_message').html_safe, tags: %w(a), attributes: %w(href target))

      - else
        %p
          = t('signup_form.overview_teacher').html_safe

      - teacher_count = number_with_delimiter(fetch_user_metrics['number_teachers'], :delimiter => ',')
      - student_count = number_with_delimiter(fetch_user_metrics['number_students'], :delimiter => ',')
      %p= resource.student? ? t('signup_form.student_count', count: student_count) : t('signup_form.teacher_count', count: teacher_count)

  .row
    .span8.signupblock

      = form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => { :class => 'signupform', onsubmit: "return submitForm();" }) do |f|
        = signup_error_messages!

        #usertype-block.itemblock
          .labelblock
            = "User type"
          = f.select :user_type, User::USER_TYPE_OPTIONS, {}, { class: "fieldblock", onchange: "changeRole($(this).val());" }

        = f.hidden_field :locale, value: locale
        = f.hidden_field :hashed_email

        #name-block.itemblock
          .labelblock
            = t('activerecord.attributes.user.name')
          = f.text_field :name, class: 'input-xlarge fieldblock', autofocus: true, maxlength: 255
          .error_in_field
            = "Name is required"

        #email-block.itemblock
          .labelblock
            = t('activerecord.attributes.user.email')
          = f.email_field :email, class: 'input-xlarge fieldblock', maxlength: 255
          .error_in_field
            = "Email is required"

        - if f.object.password_required?
          #password-block.itemblock
            .labelblock
              = t('activerecord.attributes.user.password')
            = f.password_field :password, class: 'input-xlarge fieldblock', maxlength: 255
            %span#password_message
            .error_in_field
              = "Password is required"

          .itemblock
            .labelblock
              = t('activerecord.attributes.user.password_confirmation')
            = f.password_field :password_confirmation, class: 'input-xlarge fieldblock', maxlength: 255
          %span#password_message_confirmation

        #schoolname-block.itemblock{style: "display: none"}
          .labelblock
            = t('signup_form.school_name')
          = f.text_field :school, class: 'input-xlarge fieldblock', maxlength: 255
          .error_in_field
            = "School name is required"

        = f.hidden_field :age, value: '21'

        #age-block.itemblock
          .labelblock
            = t('signup_form.age')
          = f.select :age, User::AGE_DROPDOWN_OPTIONS, { include_blank: true, disabled: '', selected: '' }
          .error_in_field
            = "Age is required"

        #gender-block.itemblock
          .labelblock
            = t('signup_form.gender')
          = f.select :gender, gender_options, { disabled: '', selected: '' }
          .error_in_field
            = "Gender is required"

        #schoolcountry-block.itemblock{style: "display: none"}
          .labelblock
            = "Country"
          %select#schoolcountry.form-control{name: "user[school_country]", type: "select", required: false}
            %option{value: "", selected: true, disabled: true}
            - get_all_countries.each do |country_abbr, country_name|
              %option{value: country_abbr}= country_name
            %option{value: "other"} Other
          .error_in_field
            = "Country is required"

        #district-block.itemblock{style: "display: none"}
          .labelblock{style: "vertical-align: top"}
            = "District"
          .district-dropdown{style: "display: inline-block; background-color: rgba(0,0,0,0.1); padding: 10px; border-radius: 5px; width: 400px"}
            = render partial: 'shared/district_dropdown', locals: {form_name: "user"}
          .error_in_field
            = "Enter something here"

        %br/
        = f.submit t('signup_form.submit'), class: "btn btn-primary btn-large"
        %br/
        %br/
        %br/
        != resource.student? ? t('signup_form.student_terms') : t('signup_form.teacher_terms')

    .span4
      %div{ style: 'padding-left: 20px;  border-left: 1px solid black;' }
        = render "devise/shared/links"

    %div{style: "clear:both"}
    %br/
    %br/
    %br/

:javascript

  function formSuccess() {
    console.log('form success');
  }

  function formError(err) {
    console.log('form error', err);

    var fields = ["name", "email", "password", "schoolname", "age", "gender"];

    for (var i = 0; i < fields.length; i++) {
      var field = fields[i];
      if (err.responseJSON.errors[field] == "is required") {
        $("#" + field + "-block .error_in_field").show();
      }
    }
  }

  function changeRole(value) {
    if (value == "student") {
      showStudent();
    } else if (value == "teacher") {
      showTeacher();
    }
  }

  function showStudent() {
    // show age (and reset to blank)
    $("#age-block").fadeIn();

    // show gender-optional
    $("#gender-block").fadeIn();

    // hide school-name-optional
    $("#schoolname-block").hide();

    // hide school-country
    $("#schoolcountry-block").hide();

    // hide district
    $("#district-block").hide();

    // Clear country.  It can be reentered again to make district dropdown appear.
    $("#schoolcountry").val("");
  }

  function showTeacher() {
    // hide age (and set to 21)
    $("#age-block").hide();

    // hide gender-optional
    $("#gender-block").hide();

    // show school-name-optional
    $("#schoolname-block").fadeIn();

    // show school-country
    $("#schoolcountry-block").fadeIn();
  }


  function submitForm() {
    $.ajax({
      url: "/users.json",
      type: "post",
      dataType: "json",
      data: JSON.stringify($('#new_user').serializeArray())
    }).done(formSuccess).fail(formError);

    return false;
  }

  $( "#user_password" ).on('input',function(e){
    var password = $(this).val();
    var password_message = $('#password_message');
    var password_message_confirmation = $('#password_message_confirmation');
    if (!password || password.length < 6) {
      password_message.text("#{t('signup_form.invalid_password')}");
    } else {
      password_message.text("#{t('signup_form.valid_password')}");
    }
    password_message_confirmation.text("");
  });

  $( "#user_password_confirmation" ).on('input',function(e){
    var conf_password = $(this).val();
    var origin_password = $('#user_password').val();
    var password_message = $('#password_message');
    var password_message_confirmation = $('#password_message_confirmation');
    if (conf_password !== origin_password) {
      password_message_confirmation.text("#{t('signup_form.mismatch_password')}");
    } else {
      password_message_confirmation.text("");
    }
    password_message.text("");
  });

  $('#schoolcountry').change(function () {
    if ($(this).val() == 'US') {
      $("#district-block").fadeIn();
    } else {
      $("#district-block").fadeOut();
    }
  });

  $( "#user_name" ).placeholder();
  $( "#user_email" ).placeholder();
  $( "#user_school" ).placeholder();

  $( ".signupform" ).on("submit", function(e){
    window.dashboard.hashEmail({ email_selector: '#user_email',
      hashed_email_selector: '#user_hashed_email',
      age_selector: '#user_age'});
  });
