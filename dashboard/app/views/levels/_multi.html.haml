.multi

  - data = @level.properties
  - app = 'multi'

  - question_content_blank = data['content1'].blank? && data['content2'].blank? && data['content3'].blank? && data['markdown'].blank?
  = render partial: 'levels/content', locals: {app: app, data: data, content_class: question_content_blank ? nil : 'question'}

  .answers{style: question_content_blank ? 'width: 100%' : ''}
    - if data['options'].try(:[], 'answer_line')
      :css
        .btn {
          display: table;
        }

    %span
      %h4.multi-question!= multi_t(data['questions'][0]['text']) if data['questions']

    %br/
    %br/

    - unless data['options'].try(:[], 'hide_submit')
      .buttons
        %a.btn.btn-large.btn-primary.next-stage.submitButton
          =t('submit')

    - height = data['height'] || '20'
    - height += 'px'

    .mainblock
      %form#voteform{onsubmit: 'return false;'}
        - data['answers'].each_with_index do |answer, i|
          - correct = answer['correct']
          %span.answerbutton.btn{style: "height: #{height}"}
            .item-radio{id: "radio_#{i}"}
              %input{id: "choice_#{i}", name: 'vote', type: 'radio', value: "#{i}", correct: "#{correct}"}
            .item-cross{id: "cross_#{i}", style: 'display: none;'}
              %strong X
            .item-label
              %label{style: "height: #{height}"}!= multi_t(answer['text'])

      .clear

      = render partial: 'levels/dialog', locals: {app: app, data: data}

  .clear

  %br/
  %br/
  %br/

  .clear

= render partial: 'levels/common_audio'

:javascript

  var selection = "none";   // "none", "wrong", "right"
  var selectionIndex = #{ @last_attempt || -1};

  function enableButton(enable)
  {
    $('.submitButton').attr('disabled', !enable);
  }

  function choiceClicked(radioButton)
  {
    var index = radioButton.value;
    var correctChoice = $(radioButton).attr('correct') === 'true';
    CDOSounds.play('click');

    enableButton(true);
    selection = correctChoice ? "right" : "wrong";
    selectionIndex = index;

    return true;
  }

  $(function()
  {
    $('#voteform input:radio').click(function(e) {
      choiceClicked(this);
      e.stopPropagation();
    });

    $('span.answerbutton').click(function() {
      // Handle non-radio button area click
      var radioButton = $(this).find('input:radio')[0];
      $(radioButton).prop('checked', true);
      choiceClicked(radioButton);
      return false;
    });

    $('#voteform img').on('dragstart', function(e) {
      // Prevent button images from being dragged, check button instead
      var radioButton = $(this).parent().parent().parent().find('input:radio')[0];
      $(radioButton).prop('checked', true);
      choiceClicked(radioButton);
      e.preventDefault();
      e.stopPropagation();
    });

    enableButton(false);

    // Pre-select previously submitted response if available
    if (selectionIndex != -1) {
      var radioButton = $('#choice_' + selectionIndex);
      radioButton.prop('checked', true);
      var correctChoice = $(radioButton).attr('correct') === 'true';
      selection = correctChoice ? "right" : "wrong";
      enableButton(true);
    }
  });

  function getResult() {
    return {
      "response": selectionIndex,
      "result": (selection == "right")
    }
  }

  $('.submitButton').click(function() {
    if (selection == "wrong") {
      $("#radio_" + selectionIndex).hide();
      $("#cross_" + selectionIndex).show();
    }
  });
