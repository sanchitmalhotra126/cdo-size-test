= form_for [@level], method: @level.new_record? ? :post : :patch, remote: true do |f|
  = f.hidden_field :type, value: @type_class.to_s.presence || @level.type
  .field
    = f.label :name
    = f.text_field :name, placeholder: 'Level Name'
  .field
    = f.label 'concepts'
    = f.collection_select :concept_ids, Concept.cached, :id, :name, { :selected => @level.concept_ids }, { :multiple => true, :name => 'level[concept_ids][]', :size => Concept.cached.length, :style => 'width:auto' }
    %p (shift-click to select multiple)
  = render partial: 'levels/editors/video', locals: {f: f}
  = render partial: 'levels/editors/blockly', locals: {f: f} if @level.is_a? Blockly
  = render partial: 'levels/editors/maze', locals: {f: f} if @level.is_a? Maze
  = render partial: 'levels/editors/karel', locals: {f: f} if @level.is_a? Karel
  = render partial: 'levels/editors/artist', locals: {f: f} if @level.is_a? Artist
  = render partial: 'levels/editors/match', locals: {f: f} if @level.is_a? Match
  .actions
    = f.submit
#validation-error
  - if @level.errors.any?
    %h2
      = pluralize(@level.errors.count, "error")
      prohibited this level from being saved:
    %ul
      - @level.errors.full_messages.each do |msg|
        %li= msg
:javascript
  #{render partial: 'shared/ajax_submit', formats: [:js],  locals: {form_selector: @level.new_record? ? '#new_level' : '.edit_level'}}
