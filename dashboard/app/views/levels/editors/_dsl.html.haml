:css
  textarea { width: 100% }
- if @filename
  = "Filename: #{@filename}"
.script_text
  - cols = @dsl_file ? @dsl_file.lines.max_by(&:length).length : 20
  - rows = @dsl_file ? @dsl_file.lines.count + 1 : 10
  = text_area_tag('level[dsl_text]', @dsl_file || (@level.dsl_default), rows: rows, cols: cols, style: 'width:500px')

- if [ContractMatch, Match, Multi, TextMatch, External].include? @level.class
  %p Markdown Editor

  %textarea#level_markdown_textarea

  #markdown-preview

:javascript
  var regex = /markdown <<(\w*)\n([\s\S]*)\n\1$/m;
  var dslElement = $('#level_dsl_text');
  var dslText = dslElement.val();

  var mdEditor = codeMirror('markdown_textarea', 'markdown', function (editor, change) {
    $('#markdown-preview').html(marked(editor.getValue()));

    var editorText = editor.getValue();
    var dslText = dslElement.val();
    var replacedText;
    if (regex.exec(dslText)) {
      replacedText = dslText.replace(regex,'markdown <<$1\n' + editorText + '\n$1');
    } else {
      replacedText = dslText + '\nmarkdown <<MARKDOWN\n' + editorText + '\nMARKDOWN';
    }
    dslElement.val(replacedText);
  }, true);

  // Match against markdown heredoc syntax and capture contents in [2].
  var match = regex.exec(dslText);
  if (match && match[2]) {
    var markdownText = match[2];
    mdEditor.setValue(markdownText);
  } else {
    mdEditor.setValue('');
  }
