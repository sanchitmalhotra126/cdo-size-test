:css
  textarea {
    width: 100%
  }

  button {
    font-size: 100%;
  }

- content_for(:head) do
  = stylesheet_link_tag    'editor/blockly_editor', media: 'all'
  = javascript_include_tag 'editor/blockly_editor'
.field
  = f.label :edit_code, @level.game.uses_droplet? ? 'Droplet JavaScript level' : 'Blockly level'
.field
  = f.label :instructions
  = f.text_area :instructions, placeholder: 'Instructions', rows: 4
= render partial: 'levels/editors/ani_gif', locals: {f: f}
.field
  = f.label :skin
  = f.select :skin, options_for_select(@level.class.skins, @level.skin)
.field
  = f.label :is_k1, 'Is K1 level'
  = boolean_check_box f, :is_k1
.field
  = f.label :skip_instructions_popup, 'Skip instructions popup'
  = boolean_check_box f, :skip_instructions_popup
.field
  = f.label :use_modal_function_editor, 'Use modal function editor'
  = boolean_check_box f, :use_modal_function_editor
.field
  = f.label :use_contract_editor, 'Use MSM contract editor'
  = boolean_check_box f, :use_contract_editor
.field
  = f.label :default_num_example_blocks, 'Default # of example blocks in contract editor'
  = f.number_field :default_num_example_blocks
.field
  = f.label :open_function_definition, 'Auto-open function definition'
  = f.text_field :open_function_definition, placeholder: 'name of function to open'
%table.contract-editor-config
  %tr
    %th Section
    %th Highlight
    %th Collapse
  -%w(contract examples definition).each_with_index do |section, i|
    %tr
      %td #{i + 1}. #{section.titleize}
      %td= boolean_check_box f, "#{section}_highlight".to_sym
      %td= boolean_check_box f, "#{section}_collapse".to_sym

.field
  = f.label :disable_param_editing, 'Enable param editing in function blocks'
  = f.check_box :disable_param_editing, {}, 'false', 'true'
.field
  = f.label :disable_variable_editing, 'Disable editing of variable names and creation of new variables'
  = boolean_check_box f, :disable_variable_editing
.field
  = f.label :scrollbars, 'Scrollbars'
  %div
    Default:
    = f.radio_button :scrollbars, 'nil', checked: @level.scrollbars.nil?
    True:
    = f.radio_button :scrollbars, true
    False:
    = f.radio_button :scrollbars, false
- if @level.game.uses_droplet?
  .field
    = f.label :code_functions, 'Edit Droplet Palette'
    = f.text_area :code_functions, placeholder: 'Droplet Palette', rows: 4, value: JSON.pretty_generate(@level.code_functions)
    :javascript
      codeMirror('code_functions', 'javascript');
- else
  .field
    = link_to 'Edit Toolbox Blocks', level_edit_blocks_path( @level, :toolbox_blocks) unless @level.new_record?
    = f.text_area :toolbox_blocks, placeholder: 'Toolbox Blocks', rows: 4, value: @level.pretty_block('toolbox')
    :javascript
      codeMirror('toolbox_blocks', 'xml');
.field
  - if @level.game.uses_droplet?
    = f.label :start_blocks, 'Edit Starting JavaScript Program'
  - else
    = link_to 'Edit Start Blocks', level_edit_blocks_path(@level, :start_blocks) unless @level.new_record?
  = f.text_area :start_blocks, placeholder: 'Start Blocks', rows: 4, value: @level.game.uses_droplet? ? @level.start_blocks : @level.pretty_block('start')
  :javascript
    codeMirror('start_blocks', '#{@level.game.uses_droplet? ? 'javascript' : 'xml'}');
.field
  - if @level.game.uses_droplet?
    = f.label :required_blocks, 'Edit Required Blocks'
  - else
    = link_to 'Edit Required Blocks', level_edit_blocks_path(@level, :required_blocks) unless @level.new_record?
  = f.text_area :required_blocks, placeholder: 'Required Blocks', rows: 4, value: @level.pretty_block('required')
  :javascript
    codeMirror('required_blocks', '#{@level.game.uses_droplet? ? 'javascript' : 'xml'}');
.field
  = f.label :ideal, 'Ideal block number'
  = f.number_field :ideal
.field
  = f.label :min_workspace_height, 'Min workspace height'
  = f.number_field :min_workspace_height
.field
  = f.label :step_speed, 'Step speed'
  %p Number is a multiplier for how long each step takes (so higher numbers are slower). Default is 5 for Maze, 2 for Bee.
  = f.number_field :step_speed

.field.callouteditor
  %div{id: "callout_template", style: 'display: none;'}
    %div{class: 'callout_space'}
      %label Callout
      %table
        %tr
          %td Element ID
          %td Localization Key
          %td Callout text
        %tr
          %td
            %input{class: "element_id", type: 'text', placeholder: '#runButton'}
          %td
            %input{class: "localization_key", type: 'text', placeholder: 'level_name_callout1'}
          %td{colspan: 4}
            %input{class: "callout_text", type: 'text', placeholder: 'Text of callout', style: "width: 100%"}
        %tr
          %td Qtip on callout
          %td Qtip points to Element
          %td Show when
          %td X distance
          %td Y distance
          %td Classes
        %tr
          %td
            %select{class: "my"}
              %option{value: 'top left'} Top left
              %option{value: 'top center'} Top center
              %option{value: 'top right'} Top right
              %option{value: 'right top'} Right top
              %option{value: 'right center'} Right center
              %option{value: 'right bottom'} Right bottom
              %option{value: 'bottom right'} Bottom right
              %option{value: 'bottom center'} Bottom center
              %option{value: 'bottom left'} Bottom left
              %option{value: 'left bottom'} Left bottom
              %option{value: 'left center'} Left center
              %option{value: 'left top'} Left top
          %td
            %select{class: "at"}
              %option{value: 'top left'} Top left
              %option{value: 'top center'} Top center
              %option{value: 'top right'} Top right
              %option{value: 'right top'} Right top
              %option{value: 'right center'} Right center
              %option{value: 'right bottom'} Right bottom
              %option{value: 'bottom right'} Bottom right
              %option{value: 'bottom center'} Bottom center
              %option{value: 'bottom left'} Bottom left
              %option{value: 'left bottom'} Left bottom
              %option{value: 'left center'} Left center
              %option{value: 'left top'} Left top
          %td
            %input{class: "on", type: 'text', placeholder: 'function_editor_opened'}
          %td
            %input{class: "x" , type: 'number', style: 'width: 80px;'}
          %td
            %input{class: "y", type: 'number', style: 'width: 80px;'}
          %td
            %input{class: "classes", type: 'text', placeholder: 'no-tip', style: 'width: 60px;'}
      %button{class: "remove_callout", type: 'button'} X Remove callout
      %hr
  %div{id: "all_callouts_editor"}
  %button{id: "add_callout", type: 'button'} + Add a callout

.field
  = f.label :callout_json
  %div{style: '-webkit-user-select: text'}
  = f.text_area :callout_json, rows: 4
- if @level.respond_to? :free_play
  .field
    = f.label :free_play, 'Free Play'
    %p Free Play levels are not checked for correctness (any solution is accepted), can be shared, and can be saved to the public and private gallery
    = boolean_check_box f, :free_play
- if @level.respond_to? :disable_sharing
  .field
    = f.label :disable_sharing, 'Disable sharing'
    %p If set, this level cannot be shared or saved to galleries even if it's free play.
    = boolean_check_box f, :disable_sharing
- if @level.respond_to? :free_play
  .field
    = f.label :embed, 'Embed'
    %p Embedded levels hide the Blockly workspace, only showing the visualization area (and the 'finish' button, if 'freeplay' is also set).
    = boolean_check_box f, :embed
- if @level.respond_to? :coordinate_grid_background
  .field
    = f.label :coordinate_grid_background, 'Coordinate grid background'
    = boolean_check_box f, :coordinate_grid_background
.field
  = f.label :project_template_level_name, 'Project Template Level Name'
  %p What this does:
  %ul
    %li uses start_blocks from the project template level instead of this level
    %li uses toolbox_blocks from the project template level instead of this level
    %li autocreate a project that is shared with all levels with the same project template level
  %p (Leave blank if you do not want all of this)
  = f.text_field :project_template_level_name, placeholder: 'name of level you want to use as the project template'
.field
  = f.label :failure_message_override, 'Failure Message Override'
  %p If specified this error message will be used to replace ALL error messages in the puzzle. Be certain this is what you want before using.
  = f.text_field :failure_message_override, style: 'width: 600px;', placeholder: 'Type Override Failure Message Here'
-if @level.respond_to? :input_output_table
  = f.label :input_output_table, 'Input/Output Table'
  %p An array of tuples where each tuple is [input, output].
  %p i.e. The table for f(x) = x - 5 might look like: [ [15, 10], [10, 5], [25, 20] ]
  = f.text_area :input_output_table, placeholder: 'Input/Output', rows: 4, value: (JSON.pretty_generate(@level.input_output_table) if @level.input_output_table)
  :javascript
      codeMirror('input_output_table', 'javascript')
-if @level.respond_to? :solution_blocks
  .field
    - if @level.game.uses_droplet?
      = f.label :solution_blocks, 'Edit Solution Blocks'
    - else
      = link_to 'Edit Solution Blocks', level_edit_blocks_path(@level, :solution_blocks) unless @level.new_record?
    = f.text_area :solution_blocks, placeholder: 'Solution Blocks', rows: 4, value: @level.pretty_block('solution')
    :javascript
      codeMirror('solution_blocks', '#{@level.game.uses_droplet? ? 'javascript' : 'xml'}');

:javascript
  // <![CDATA[
    var callout_editor = CodeMirror.fromTextArea($('#level_callout_json').get(0), {
      mode: 'javascript',
      viewportMargin: Infinity,
      matchBrackets: true
    });

    var calloutJSON = callout_editor.getValue();
    var calloutModel = {
      localization_key: "",
      callout_text: "",
      element_id: "",
      on: "",
      qtip_config: {
        style: {classes: ""},
        position: {
          my: "",
          at: "",
          adjust: {x: 0, y: 0}
        }
      }
    };

    // Create callout spaces for each callout in the original JSON
    if (calloutJSON.length > 0) {
      var callouts_to_update = JSON.parse(callout_editor.getValue());
      $.each(callouts_to_update, function (index, callout) {
        updateTemplate(callout, $createNewCalloutSpace());
      });
    }

    /**
     * For each key in the given model, set the <input> with a matching class name to the key's value.
     * @param {model} The model to use when updating the DOM.
     * @param {$template} The jQuery element to search for <input> elements.
     */
    function updateTemplate(model, $template) {
      $.each(model, function (key, value) {
        if (value && typeof value === 'object') {
          updateTemplate(value, $template);
        } else {
          $template.find('.' + key).val(model[key]);
        }
      });
    }

    /**
     * For each key in the given model, set the key's value to the value of the <input> with a matching class name.
     * @param {model} The model to update from the DOM.
     * @param {$template} The jQuery element to search for <input> elements.
     */
    function updateModel(model, $template) {
      $.each(model, function (key, value) {
        if (typeof value === 'object') {
          updateModel(value, $template);
        } else {
          var value = $template.find('.' + key).val();
          model[key] = typeof model[key] === 'number' ? +value : value;
        }
      });
    }

    function updateCalloutJSON() {
      var updated_callouts = [];
      $('#all_callouts_editor .callout_space').each(function () {
        var model = $.extend(true, {}, calloutModel);
        updateModel(model, $(this));
        updated_callouts.push(model);
      });
      callout_editor.setValue(JSON.stringify(updated_callouts, null, ' '));
    }

    function $createNewCalloutSpace() {
      var $newCallout = $("#callout_template").children(":first").clone();
      $("#all_callouts_editor").append($newCallout);
      return $newCallout;
    }

    $(document).on("click", "#add_callout", function () {
      $createNewCalloutSpace();
      updateCalloutJSON();
    });

    $(document).on("click", ".remove_callout", function () {
      $(this).closest(".callout_space").remove();
      updateCalloutJSON();
    });

    $(".callouteditor").on("input", function () {
      updateCalloutJSON();
    });
  // ]]>
