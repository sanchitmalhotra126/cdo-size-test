:css
  textarea { 
    width: 100% 
  }
  
  button {
    font-size: 100%; 
  }

- content_for(:head) do
  = stylesheet_link_tag    'editor/blockly_editor', media: 'all'
  = javascript_include_tag 'editor/blockly_editor'
.field
  = f.label :instructions
  = f.text_area :instructions, placeholder: 'Instructions', rows: 4
= render partial: 'levels/editors/ani_gif', locals: {f: f}
.field
  = f.label :skin
  = f.select :skin, options_for_select(@level.class.skins, @level.skin)
.field
  = f.label :is_k1, 'Is K1 level'
  = boolean_check_box f, :is_k1
.field
  = f.label :skip_instructions_popup, 'Skip instructions popup'
  = boolean_check_box f, :skip_instructions_popup
.field
  = f.label :use_modal_function_editor, 'Use modal function editor'
  = boolean_check_box f, :use_modal_function_editor
.field
  = f.label :use_contract_editor, 'Use MSM contract editor'
  = boolean_check_box f, :use_contract_editor
.field
  = f.label :default_num_example_blocks, 'Default # of example blocks in contract editor'
  = f.number_field :default_num_example_blocks
.field
  = f.label :open_function_definition, 'Auto-open function definition'
  = f.text_field :open_function_definition, placeholder: 'name of function to open'
%table.contract-editor-config
  %tr
    %th Section
    %th Highlight
    %th Collapse
  -%w(contract examples definition).each_with_index do |section, i|
    %tr
      %td #{i + 1}. #{section.titleize}
      %td= boolean_check_box f, "#{section}_highlight".to_sym
      %td= boolean_check_box f, "#{section}_collapse".to_sym

.field
  = f.label :disable_param_editing, 'Enable param editing in function blocks'
  = f.check_box :disable_param_editing, {}, 'false', 'true'
.field
  = f.label :disable_variable_editing, 'Disable editing of variable names and creation of new variables'
  = boolean_check_box f, :disable_variable_editing
.field
  = f.label :scrollbars, 'Scrollbars'
  %div
    Default:
    = f.radio_button :scrollbars, 'nil', checked: @level.scrollbars.nil?
    True:
    = f.radio_button :scrollbars, true
    False:
    = f.radio_button :scrollbars, false
.field
  = link_to 'Edit Toolbox Blocks', level_edit_blocks_path( @level, :toolbox_blocks) unless @level.new_record?
  = f.text_area :toolbox_blocks, placeholder: 'Toolbox Blocks', rows: 4, value: @level.pretty_block('toolbox')
  :javascript
    codeMirror('toolbox');
.field
  = link_to 'Edit Start Blocks', level_edit_blocks_path(@level, :start_blocks) unless @level.new_record?
  = f.text_area :start_blocks, placeholder: 'Start Blocks', rows: 4, value: @level.pretty_block('start')
  :javascript
    codeMirror('start');
.field
  = link_to 'Edit Required Blocks', level_edit_blocks_path(@level, :required_blocks) unless @level.new_record?
  = f.text_area :required_blocks, placeholder: 'Required Blocks', rows: 4, value: @level.pretty_block('required')
  :javascript
    codeMirror('required');
.field
  = f.label :ideal, 'Ideal block number'
  = f.number_field :ideal
.field
  = f.label :min_workspace_height, 'Min workspace height'
  = f.number_field :min_workspace_height
.field
  = f.label :step_speed, 'Step speed'
  %p Number is a multiplier for how long each step takes (so higher numbers are slower). Default is 5 for Maze, 2 for Bee.
  = f.number_field :step_speed

.field.callouteditor
  %label Callout Editor
  %div{id: "callout_template", style: "display: none;"}
    %div
      %table
        %tr
          %td Element ID
          %td Localization Key
          %td Callout text
        %tr
          %td
            %input{class: "element_id", type: 'text', placeholder: '#runButton'}          
          %td
            %input{class: "localization_key", type: 'text', placeholder: 'level_name_callout1'}
          %td{colspan: 4}
            %input{class: "callout_text", type: 'text', placeholder: 'Text of callout', style: "width: 100%"}
        %tr
          %td Qtip on callout
          %td Qtip points to Element
          %td Show when
          %td X distance
          %td Y distance
          %td Hide qtip?
        %tr   
          %td
            %select{class: "qtip_position_my"}
              %option{value: 'top left'} Top left
              %option{value: 'top center'} Top center
              %option{value: 'top right'} Top right
              %option{value: 'right top'} Right top
              %option{value: 'right center'} Right center
              %option{value: 'right bottom'} Right bottom
              %option{value: 'bottom right'} Bottom right
              %option{value: 'bottom center'} Bottom center
              %option{value: 'bottom left'} Bottom left
              %option{value: 'left bottom'} Left bottom
              %option{value: 'left center'} Left center
              %option{value: 'left top'} Left top
          %td
            %select{class: "qtip_position_at"}
              %option{value: 'top left'} Top left
              %option{value: 'top center'} Top center
              %option{value: 'top right'} Top right
              %option{value: 'right top'} Right top
              %option{value: 'right center'} Right center
              %option{value: 'right bottom'} Right bottom
              %option{value: 'bottom right'} Bottom right
              %option{value: 'bottom center'} Bottom center
              %option{value: 'bottom left'} Bottom left
              %option{value: 'left bottom'} Left bottom
              %option{value: 'left center'} Left center
              %option{value: 'left top'} Left top
          %td
            %input{class: "on", type: 'text', placeholder: 'function_editor_opened'}     
          %td
            %input{class: "qtip_position_adjust_x" , type: 'number', style: 'width: 80px;'}
          %td
            %input{class: "qtip_position_adjust_y", type: 'number', style: 'width: 80px;'}
          %td
            %input{class: "qtip_hide", type: 'checkbox'}
      %button{id: "remove_callout", type: 'button'} X Remove callout
      %hr      
  %div{id: "all_callouts_editor"}
  %button{id: "add_callout", type: 'button'} + Add a callout
    
.field
  = f.label :callout_json
  = f.text_area :callout_json, rows: 4
- if @level.respond_to? :free_play
  .field
    = f.label :free_play, 'Free Play'
    %p Free Play levels are not checked for correctness (any solution is accepted), can be shared, and can be saved to the public and private gallery
    = boolean_check_box f, :free_play
- if @level.respond_to? :disable_sharing
  .field
    = f.label :disable_sharing, 'Disable sharing'
    %p If set, this level cannot be shared or saved to galleries even if it's free play.
    = boolean_check_box f, :disable_sharing
- if @level.respond_to? :free_play
  .field
    = f.label :embed, 'Embed'
    %p Embedded levels hide the Blockly workspace, only showing the visualization area (and the 'finish' button, if 'freeplay' is also set).
    = boolean_check_box f, :embed
- if @level.respond_to? :coordinate_grid_background
  .field
    = f.label :coordinate_grid_background, 'Coordinate grid background'
    = boolean_check_box f, :coordinate_grid_background
.field
  = f.label :project_template_level_name, 'Project Template Level Name'
  %p What this does:
  %ul
    %li uses start_blocks from the project template level instead of this level
    %li uses toolbox_blocks from the project template level instead of this level
    %li autocreate a project that is shared with all levels with the same project template level
  %p (Leave blank if you do not want all of this)
  = f.text_field :project_template_level_name, placeholder: 'name of level you want to use as the project template'
-if @level.respond_to? :solution_blocks
  .field
    = link_to 'Edit Solution Blocks', level_edit_blocks_path(@level, :solution_blocks) unless @level.new_record?
    = f.text_area :solution_blocks, placeholder: 'Solution Blocks', rows: 4, value: @level.pretty_block('solution')
    :javascript
      codeMirror('solution');

:javascript
  // <![CDATA[
    var callout_editor = CodeMirror.fromTextArea($('#level_callout_json').get(0), {
      mode: 'javascript',
      viewportMargin: Infinity,
      matchBrackets: true
    });

    var callout_spaces = [];
    var updated_callouts = [];
    var space_id = 0;

    fill_form_with_existing_callouts();

    function fill_form_with_existing_callouts() {
      var callout_json = callout_editor.getValue();
      var callouts = [];

      if(callout_json.length > 0) {
        callouts = JSON.parse(callout_json);
      }

      for(var i=0; i<callouts.length; i++) {
        if(callouts[i].callout_text) {
          create_new_callout_space();
          id = callout_spaces[i];
          var calloutSpace = $('.callout_' + id);

          calloutSpace.find(".localization_key").val(callouts[i].localization_key);
          calloutSpace.find(".callout_text").val(callouts[i].callout_text);
          calloutSpace.find(".element_id").val(callouts[i].element_id);
          calloutSpace.find(".on").val(callouts[i].on);
          if ((callouts[i].qtip_config) && (callouts[i].qtip_config.position)) {
            calloutSpace.find(".qtip_position_my").val(callouts[i].qtip_config.position.my);
          }
          if ((callouts[i].qtip_config) && (callouts[i].qtip_config.position)) {
            calloutSpace.find(".qtip_position_at").val(callouts[i].qtip_config.position.at);
          }
          if ((callouts[i].qtip_config) && (callouts[i].qtip_config.position) && (callouts[i].qtip_config.position.adjust)) {
            calloutSpace.find(".qtip_position_adjust_x").val(callouts[i].qtip_config.position.adjust.x);
          }
          if ((callouts[i].qtip_config) && (callouts[i].qtip_config.position) && (callouts[i].qtip_config.position.adjust)) {
            calloutSpace.find(".qtip_position_adjust_y").val(callouts[i].qtip_config.position.adjust.y);
          }
          if ((callouts[i].qtip_config) && (callouts[i].qtip_config.style) && (callouts[i].qtip_config.style.classes) && (callouts[i].qtip_config.style.classes == "no-tip")) {
            calloutSpace.find(".qtip_hide").prop("checked", true);
          }
        }
        update_callout_json();
      }
    }

    function update_callout_json() {
      for(i=0; i<updated_callouts.length; i++) {
        save_callouts_in_updated_callouts(i);
      }
      callout_json = JSON.stringify(updated_callouts, null, ' ');
      callout_editor.setValue(callout_json);
    }

    function save_callouts_in_updated_callouts(i) {
      id = callout_spaces[i];
      var calloutSpace = $('.callout_' + id);

      updated_callouts[i].localization_key = calloutSpace.find('.localization_key').val();
      updated_callouts[i].callout_text = calloutSpace.find('.callout_text').val();
      updated_callouts[i].element_id = calloutSpace.find('.element_id').val();
      updated_callouts[i].on = calloutSpace.find('.on').val();
      updated_callouts[i].qtip_config.position.my = calloutSpace.find('.qtip_position_my').val();
      updated_callouts[i].qtip_config.position.at = calloutSpace.find('.qtip_position_at').val();
      updated_callouts[i].qtip_config.position.adjust.x = parseInt(calloutSpace.find('.qtip_position_adjust_x').val());
      updated_callouts[i].qtip_config.position.adjust.y = parseInt(calloutSpace.find('.qtip_position_adjust_y').val());
      
      if ($('.callout_' + id + ' .qtip_hide').prop("checked") == true) {
        updated_callouts[i].qtip_config.style.classes = "no-tip";
      }
      else {
        updated_callouts[i].qtip_config.style.classes = "";
      }
    }

    function add_empty_callout() {
      var callout = {};
      callout.localization_key = "";
      callout.callout_text = "";
      callout.element_id = "";
      callout.on = "";
      callout.qtip_config = {};
      callout.qtip_config.position = {};
      callout.qtip_config.position.adjust = {};
      callout.qtip_config.style = {};
      updated_callouts.push(callout);
    }

    function create_new_callout_space() {
      $("#callout_template").children(":first").clone().addClass("callout_" + space_id).appendTo("#all_callouts_editor").show();
      callout_spaces.push(space_id++);
      add_empty_callout();
    }

    $(document).on("click", "#add_callout", function(){
      create_new_callout_space();
      update_callout_json();
    });

    $(document).on("click", "#remove_callout", function(){
      callout_class = $(this).parent().attr('class');
      $("." + callout_class).remove();

      id = callout_class.match(/\d+/g);
      var index = callout_spaces.indexOf(parseInt(id));
      callout_spaces.splice(index, 1);
      updated_callouts.splice(index, 1);

      update_callout_json();
    });

    $(document).on("change", ".callouteditor input, .callouteditor select", function() {
      update_callout_json();
    });
  // ]]>
