- content_for(:head) do
  - if @level.is_a?(Blockly) && !@level.uses_droplet?
    = javascript_include_tag 'js/blockly'
    = javascript_include_tag "js/en_us/blockly_locale"
    = javascript_include_tag "js/en_us/common_locale"
    = javascript_include_tag "js/en_us/#{@level.game.app}_locale"

= render partial: 'levels/editors/authored_hints', locals: {f: f}
.field
  = f.label :edit_code,'Blockly level'
= render partial: 'levels/editors/ani_gif', locals: {f: f}
.field
  = f.label :skin
  = f.select :skin, options_for_select(@level.class.skins, @level.skin)
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :is_k1, description: "Is K1 level"}
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :use_modal_function_editor, description: "Use modal function editor"}
.field
  = f.label :open_function_definition, 'Auto-open function definition'
  = f.text_field :open_function_definition, placeholder: 'name of function to open'
.field.aligned-input-group
  = f.check_box :disable_param_editing, {}, 'false', 'true'
  = f.label :disable_param_editing, 'Enable param editing in function blocks'
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :disable_variable_editing, description: "Disable editing of variable names and creation of new variables"}
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :disable_if_else_editing, description: "Don\'t let users mutate (add or remove) branches to if/else blocks"}
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :show_type_hints, description: "Show a small visual hint for what type of block a connection accepts"}
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :disable_procedure_autopopulate, description: "Disable autopopulation of Functions category with default toolbox blocks"}
  %p
    By default, Functions categories in Blockly will be automatically populated
    with blocks for three default procedure definitions (noreturn, return, and
    ifreturn), as well as the call blocks for any procedures that have already
    been defined. Any XML manually included in the toolbox category will be ignored.
  %p
    With this setting enabled, only the call blocks will be injected into this
    category and NOT the default definition blocks. Any XML manually included in
    the toolbox category will be included, allowing you to specify a subset of
    the definition blocks that you would like to include for this level.
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :top_level_procedure_autopopulate, description: "Autopopulate function call blocks for non-categorized toolboxes"}
  %p
    This adds a call block to the end of the toolbox for each function defined
    in the workspace (including hidden start blocks).
.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :include_shared_functions, description: "Make shared functions and behaviors available"}

.field
  = link_to 'Edit Toolbox Blocks', level_edit_blocks_path( @level, :toolbox_blocks) unless @level.new_record?
  = render partial: 'levels/editors/collapsible_block_editor', locals: {f: f, xml_id: 'toolbox'}

.field
  = link_to 'Edit Start Blocks', level_edit_blocks_path(@level, :start_blocks) unless @level.new_record?
  = render partial: 'levels/editors/collapsible_block_editor', locals: {f: f, xml_id: 'start'}

.field
  = link_to 'Edit Required Blocks', level_edit_blocks_path(@level, :required_blocks) unless @level.new_record?
  = render partial: 'levels/editors/collapsible_block_editor', locals: {f: f, xml_id: 'required'}

.field
  = link_to 'Edit Recommended Blocks', level_edit_blocks_path(@level, :recommended_blocks) unless @level.new_record?
  = render partial: 'levels/editors/collapsible_block_editor', locals: {f: f, xml_id: 'recommended'}

.field
  = link_to 'Edit Initialization Blocks', level_edit_blocks_path(@level, :initialization_blocks) unless @level.new_record?
  = render partial: 'levels/editors/collapsible_block_editor', locals: {f: f, xml_id: 'initialization'}

-if @level.respond_to? :solution_blocks
  .field
    = link_to 'Edit Solution Blocks', level_edit_blocks_path(@level, :solution_blocks) unless @level.new_record?
    = render partial: 'levels/editors/collapsible_block_editor', locals: {f: f, xml_id: 'solution'}

.field
  = f.label :ideal, 'Ideal block number'
  = f.number_field :ideal
.field
  = f.label :min_workspace_height, 'Min workspace height'
  = f.number_field :min_workspace_height
.field
  = f.label :step_speed, 'Step speed'
  %p Number is a multiplier for how long each step takes (so higher numbers are slower). Default is 5 for Maze, 2 for Bee.
  = f.number_field :step_speed

:ruby
  script_data = {
    pageOptions: {
      skin_id: @level.skin,
      isK1: @level.try(:isK1),
      app: @level.game.app,
      solution_blocks: @level.respond_to?(:solution_blocks),
      uses_droplet: @level.uses_droplet?,
      input_output_table: @level.respond_to?(:input_output_table),
      original_palette: JSON.parse(@level.class.try(:palette) || "{}"),
      shared_blocks: @level.shared_blocks,
    }.to_json
  }
%script{src: minifiable_asset_path('js/levels/editors/_blockly.js'),
        data: script_data}
