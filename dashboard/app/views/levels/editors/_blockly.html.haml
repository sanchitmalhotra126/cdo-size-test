- content_for(:head) do
  - if @level.is_a?(Blockly) && !@level.uses_droplet?
    = javascript_include_tag 'js/blockly'
    = javascript_include_tag "js/en_us/blockly_locale"
    = javascript_include_tag "js/en_us/common_locale"
    = javascript_include_tag "js/en_us/#{@level.game.app}_locale"

= render partial: 'levels/editors/authored_hints', locals: {f: f}
.field
  = f.label :edit_code,'Blockly level'
= render partial: 'levels/editors/ani_gif', locals: {f: f}
.field
  = f.label :skin
  = f.select :skin, options_for_select(@level.class.skins, @level.skin)
.field
  = f.label :is_k1, 'Is K1 level'
  = boolean_check_box f, :is_k1
.field
  = f.label :skip_instructions_popup, 'Skip instructions popup'
  = boolean_check_box f, :skip_instructions_popup

.field
  = f.label :never_autoplay_video, 'Never autoplay video'
  = boolean_check_box f, :never_autoplay_video
.field
  = f.label :use_modal_function_editor, 'Use modal function editor'
  = boolean_check_box f, :use_modal_function_editor
.field
  = f.label :use_contract_editor, 'Use MSM contract editor'
  = boolean_check_box f, :use_contract_editor
.field
  = f.label :default_num_example_blocks, 'Default # of example blocks in contract editor'
  = f.number_field :default_num_example_blocks
.field
  = f.label :disable_examples, 'Hide examples section in contract editor'
  = boolean_check_box f, :disable_examples
.field
  = f.label :examples_required, 'Each function must have at least 1 example, and examples will be checked when hitting run'
  = boolean_check_box f, :examples_required
.field
  = f.label :open_function_definition, 'Auto-open function definition'
  = f.text_field :open_function_definition, placeholder: 'name of function to open'
%table.contract-editor-config
  %tr
    %th Section
    %th Highlight
    %th Collapse
  -%w(contract examples definition).each_with_index do |section, i|
    %tr
      %td #{i + 1}. #{section.titleize}
      %td= boolean_check_box f, "#{section}_highlight".to_sym
      %td= boolean_check_box f, "#{section}_collapse".to_sym

.field
  = f.label :disable_param_editing, 'Enable param editing in function blocks'
  = f.check_box :disable_param_editing, {}, 'false', 'true'
.field
  = f.label :disable_variable_editing, 'Disable editing of variable names and creation of new variables'
  = boolean_check_box f, :disable_variable_editing
.field
  = f.label :disable_if_else_editing, 'Don\'t let users mutate (add or remove) branches to if/else blocks'
  = boolean_check_box f, :disable_if_else_editing
.field
  = f.label :show_type_hints, 'Show a small visual hint for what type of block a connection accepts'
  = boolean_check_box f, :show_type_hints
.field
  = f.label :disable_procedure_autopopulate, 'Disable autopopulation of Functions category with default toolbox blocks'
  %p
    By default, Functions categories in Blockly will be automatically populated
    with blocks for three default procedure definitions (noreturn, return, and
    ifreturn), as well as the call blocks for any procedures that have already
    been defined. Any XML manually included in the toolbox category will be ignored.
  %p
    With this setting enabled, only the call blocks will be injected into this
    category and NOT the default definition blocks. Any XML manually included in
    the toolbox category will be included, allowing you to specify a subset of
    the definition blocks that you would like to include for this level.
  = boolean_check_box f, :disable_procedure_autopopulate
.field
  = f.label :top_level_procedure_autopopulate, 'Autopopulate function call blocks for non-categorized toolboxes'
  %p
    This adds a call block to the end of the toolbox for each function defined
    in the workspace (including hidden start blocks).
  = boolean_check_box f, :top_level_procedure_autopopulate
.field
  = f.label :include_shared_functions, 'Make shared functions and behaviors available'
  = boolean_check_box f, :include_shared_functions



.field
  = link_to 'Edit Toolbox Blocks', level_edit_blocks_path( @level, :toolbox_blocks) unless @level.new_record?
  .row
    .span8
      ~ f.text_area :toolbox_blocks, placeholder: 'Toolbox Blocks', rows: 4, value: @level.pretty_block('toolbox')
    #toolbox-preview.span4

.field
  - if @level.uses_droplet?
    = f.label :start_blocks, 'Edit Starting JavaScript Program'
  - else
    = link_to 'Edit Start Blocks', level_edit_blocks_path(@level, :start_blocks) unless @level.new_record?
  .row
    .span8
      ~ f.text_area :start_blocks, placeholder: 'Start Blocks', rows: 4, value: @level.uses_droplet? ? @level.start_blocks : @level.pretty_block('start')
    #start-preview.span4

.field
  - if @level.uses_droplet?
    = f.label :required_blocks,'Edit Required Blocks'
  - else
    = link_to 'Edit Required Blocks', level_edit_blocks_path(@level, :required_blocks) unless @level.new_record?
  .row
    .span8
      ~ f.text_area :required_blocks, placeholder: 'Required Blocks', rows: 4, value: @level.pretty_block('required')
    #required-preview.span4

.field
  - if @level.uses_droplet?
    = f.label :recommended_blocks, 'Edit Recommended Blocks'
  - else
    = link_to 'Edit Recommended Blocks', level_edit_blocks_path(@level, :recommended_blocks) unless @level.new_record?
  .row
    .span8
      ~ f.text_area :recommended_blocks, placeholder: 'Recommended Blocks', rows: 4, value: @level.pretty_block('recommended')
    #recommended-preview.span4

- unless @level.uses_droplet?
  .field
    = link_to 'Edit Initialization Blocks', level_edit_blocks_path(@level, :initialization_blocks) unless @level.new_record?
  .row
    .span8
      ~ f.text_area :initialization_blocks, placeholder: 'Required Blocks', rows: 4, value: @level.pretty_block('initialization')
    #initialization-preview.span4

.field
  = f.label :ideal, 'Ideal block number'
  = f.number_field :ideal
.field
  = f.label :min_workspace_height, 'Min workspace height'
  = f.number_field :min_workspace_height
.field
  = f.label :step_speed, 'Step speed'
  %p Number is a multiplier for how long each step takes (so higher numbers are slower). Default is 5 for Maze, 2 for Bee.
  = f.number_field :step_speed

-if @level.respond_to? :input_output_table
  = f.label :input_output_table, 'Input/Output Table'
  %p An array of tuples where each tuple is [input, output].
  %p i.e. The table for f(x) = x - 5 might look like: [ [15, 10], [10, 5], [25, 20] ]
  = f.text_area :input_output_table, placeholder: 'Input/Output', rows: 4, value: @level.input_output_table
-if @level.respond_to? :solution_blocks
  .field
    - if @level.uses_droplet?
      = f.label :solution_blocks, 'Edit Solution Blocks'
    - else
      = link_to 'Edit Solution Blocks', level_edit_blocks_path(@level, :solution_blocks) unless @level.new_record?
    .row
      .span8
        ~ f.text_area :solution_blocks, placeholder: 'Solution Blocks', rows: 4, value: @level.pretty_block('solution')
      #solution-preview.span4

:ruby
  script_data = {
    pageOptions: {
      skin_id: @level.skin,
      isK1: @level.try(:isK1),
      app: @level.game.app,
      solution_blocks: @level.respond_to?(:solution_blocks),
      uses_droplet: @level.uses_droplet?,
      input_output_table: @level.respond_to?(:input_output_table),
      original_palette: JSON.parse(@level.class.try(:palette) || "{}"),
      shared_blocks: @level.shared_blocks,
    }.to_json
  }
%script{src: minifiable_asset_path('js/levels/editors/_blockly.js'),
        data: script_data}
