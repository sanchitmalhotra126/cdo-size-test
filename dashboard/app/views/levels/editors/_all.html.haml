- content_for(:head) do
  = stylesheet_link_tag 'editor/blockly_editor', media: 'all'
  = javascript_include_tag 'editor/blockly_editor'

.field.callouteditor
  %div{id: 'callout_template', style: 'display: none;'}
    %div{class: 'callout_space'}
      %label Callout
      %table
        %tr
          %td Element ID
          %td Localization Key
          %td Callout text
        %tr
          %td
            %input{class: 'element_id', type: 'text', placeholder: '#runButton'}
          %td
            %input{class: 'localization_key', type: 'text', placeholder: 'level_name_callout1'}
          %td{colspan: 4}
            %input{class: 'callout_text', type: 'text', placeholder: 'Text of callout', style: 'width: 100%'}
        %tr
          %td Qtip on callout
          %td Qtip points to Element
          %td Show when
          %td X distance
          %td Y distance
          %td Classes
        %tr
          %td
            %select{class: 'my'}
              %option{value: 'top left'} Top left
              %option{value: 'top center'} Top center
              %option{value: 'top right'} Top right
              %option{value: 'right top'} Right top
              %option{value: 'right center'} Right center
              %option{value: 'right bottom'} Right bottom
              %option{value: 'bottom right'} Bottom right
              %option{value: 'bottom center'} Bottom center
              %option{value: 'bottom left'} Bottom left
              %option{value: 'left bottom'} Left bottom
              %option{value: 'left center'} Left center
              %option{value: 'left top'} Left top
          %td
            %select{class: 'at'}
              %option{value: 'top left'} Top left
              %option{value: 'top center'} Top center
              %option{value: 'top right'} Top right
              %option{value: 'right top'} Right top
              %option{value: 'right center'} Right center
              %option{value: 'right bottom'} Right bottom
              %option{value: 'bottom right'} Bottom right
              %option{value: 'bottom center'} Bottom center
              %option{value: 'bottom left'} Bottom left
              %option{value: 'left bottom'} Left bottom
              %option{value: 'left center'} Left center
              %option{value: 'left top'} Left top
          %td
            %input{class: 'on', type: 'text', placeholder: 'function_editor_opened'}
          %td
            %input{class: 'x' , type: 'number', style: 'width: 80px;'}
          %td
            %input{class: 'y', type: 'number', style: 'width: 80px;'}
          %td
            %input{class: 'classes', type: 'text', placeholder: 'no-tip', style: 'width: 60px;'}
      %button{class: 'remove_callout', type: 'button'} Remove callout
      %hr
  %div{id: 'all_callouts_editor'}
  %button{id: 'add_callout', type: 'button'} Add a callout

.field
  = f.label :callout_json
  %div{style: '-webkit-user-select: text'}
  = f.text_area :callout_json, rows: 4

:javascript
  // <![CDATA[
    var callout_editor = CodeMirror.fromTextArea($('#level_callout_json').get(0), {
      mode: 'javascript',
      viewportMargin: Infinity,
      matchBrackets: true
    });

    var calloutJSON = callout_editor.getValue();
    var calloutModel = {
      localization_key: "",
      callout_text: "",
      element_id: "",
      on: "",
      qtip_config: {
        style: {classes: ""},
        position: {
          my: "",
          at: "",
          adjust: {x: 0, y: 0}
        }
      }
    };

    // Create callout spaces for each callout in the original JSON
    if (calloutJSON.length > 0) {
      var callouts_to_update = JSON.parse(callout_editor.getValue());
      $.each(callouts_to_update, function (index, callout) {
        updateTemplate(callout, $createNewCalloutSpace());
      });
    }

    /**
     * For each key in the given model, set the <input> with a matching class name to the key's value.
     * @param {model} The model to use when updating the DOM.
     * @param {$template} The jQuery element to search for <input> elements.
     */
    function updateTemplate(model, $template) {
      $.each(model, function (key, value) {
        if (value && typeof value === 'object') {
          updateTemplate(value, $template);
        } else {
          $template.find('.' + key).val(model[key]);
        }
      });
    }

    /**
     * For each key in the given model, set the key's value to the value of the <input> with a matching class name.
     * @param {model} The model to update from the DOM.
     * @param {$template} The jQuery element to search for <input> elements.
     */
    function updateModel(model, $template) {
      $.each(model, function (key, value) {
        if (typeof value === 'object') {
          updateModel(value, $template);
        } else {
          var value = $template.find('.' + key).val();
          model[key] = typeof model[key] === 'number' ? +value : value;
        }
      });
    }

    function updateCalloutJSON() {
      var updated_callouts = [];
      $('#all_callouts_editor .callout_space').each(function () {
        var model = $.extend(true, {}, calloutModel);
        updateModel(model, $(this));
        updated_callouts.push(model);
      });
      callout_editor.setValue(JSON.stringify(updated_callouts, null, ' '));
    }

    function $createNewCalloutSpace() {
      var $newCallout = $("#callout_template").children(":first").clone();
      $("#all_callouts_editor").append($newCallout);
      return $newCallout;
    }

    $(document).on("click", "#add_callout", function () {
      $createNewCalloutSpace();
      updateCalloutJSON();
    });

    $(document).on("click", ".remove_callout", function () {
      $(this).closest(".callout_space").remove();
      updateCalloutJSON();
    });

    $(".callouteditor").on("input", function () {
      updateCalloutJSON();
    });
  // ]]>
