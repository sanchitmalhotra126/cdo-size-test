%fieldset.control-group

  %h1.control-legend{data: {toggle: "collapse", target: "#instructions"}}
    Instructions

  #instructions.in.collapse
    - unless (@level.is_a?(Applab) || (@level.is_a?(Gamelab) && !@level.is_a?(GamelabJr)) || @level.is_a?(Weblab))
      %p
        Learn how to use long and short instructions
        = link_to 'here', 'https://github.com/code-dot-org/code-dot-org/wiki/%5BLevelbuilder%5D-Editing-Level-Instructions', target: '_blank'
      .field
        = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :instructions_important, description: "Mark Instructions as Important"}
        %p
          Are these instructions particularly important? Is this level
          introducing some new concept or is set up in some unusual way that
          would be particularly confusing if the student were to jump right in
          and start solving without looking at the instructions first?
      .field
        = f.label :short_instructions, "Short Instructions"
        ~ f.text_area :short_instructions,
          placeholder: 'some short, plaintext instructions, used to quickly communicate the goals of the level without taking up too much vertical real estate',
          rows: 2, class:"input-block-level"

    .field
      = f.label :long_instructions, "Long Instructions"
      %li
        You can drag-and-drop or paste images in to this box, and they will be
        uploaded to a suitable location.
      %li
        markdown-enabled instructions can take advantage of
        = link_to 'various markdown rendering options', 'https://commonmark.org/help/', target: '_blank'
        to provide more in-depth (and more vertically intrusive) instruction.

      %div{ style: 'border: 8px solid rgb(239, 239, 239)' }
        #level_long_instructions_preview{ style: 'padding: 20px' }
        %div{ style: 'background-color: rgb(239, 239, 239); padding-top: 12px' }
          ~ f.text_area :long_instructions, rows: 4

    = render partial: 'levels/editors/fields/tts', locals: {f: f}

:javascript
  var mdEditor = levelbuilder.initializeCodeMirror('level_long_instructions', 'markdown', {
    callback: function (editor, change) {
      convertXmlToBlockly(document.getElementById('level_long_instructions_preview'));

      localStorage.setItem('markdown_' + '#{@level.id || html_escape(params[:type])}', editor.getValue());
    },
    attachments: true
  });

  var locallyStoredMarkdown = localStorage.getItem('markdown_' + '#{@level.id || html_escape(params[:type])}');
  if (locallyStoredMarkdown) {
    mdEditor.setValue(locallyStoredMarkdown);
  }
