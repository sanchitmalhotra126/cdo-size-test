%h1.control-legend{data: {toggle: "collapse", target: "#csa_features"}}
  CSA Features

#csa_features.in.collapse
  .field
    = f.label :csa_view_mode, 'CSA view mode'
    = f.select :csa_view_mode, options_for_select(@level.class.csa_view_modes, @level.csa_view_mode), {}, onchange: 'toggleFields(this.value);'

  #neighborhood{class: ('collapse' if @level.csa_view_mode != 'neighborhood')}
    .field
      = f.label :start_direction
      = f.select :start_direction, options_for_select(@level.class.start_directions, @level.start_direction)

  .field
    = f.label :serialized_maze
    - maze_value = @level.serialized_maze ? JSON.pretty_generate(@level.serialized_maze) : ''
    = f.text_area :serialized_maze, value: maze_value, rows: 20, class: 'input-block-level'

-# This element exists instead of the _encrypted_examples element as a temporary workaround in order
-# to facilitate level urls instead of project urls in the example solutions. This is needed because
-# Java Lab has mini-app types, such as neighborhood, which are highly dependent on their level
-# definition and do not have a standalone type. However, we can't use the same method used by Maze
-# or other puzzle level types. Those send the solution to every client's browser. If we used that
-# method, the student would be available to view the solution from the browser. Instead, we encrypt
-# the solution url and put the level in a pilot script. The link will only be sent to verified
-# teachers, but their students could access the level if they know the URL. In the future, we will
-# add an "exemplar mode" similar to "start mode" that can be used to create exemplars.
%h1.control-legend{data: {toggle: "collapse", target: "#examples"}}
  Example Solutions

#examples.in.collapse

  = f.label :examples, 'Example solutions'
  %p
    Create a new level in a hidden script. Copy the level url here as it would show up on
    production.
    %br
    Note: The level must be in a hidden script. Otherwise students will be able to find
    the solution.
  %p
  %p
    %strong
      Example:
    https://studio.code.org/s/csp3-2021/lessons/6/levels/3
  %p
  %p
    DO NOT use the levelbuilder URL. Incorrect example: https://levelbuilder-studio.code.org/s/csp3-2021/lessons/6/levels/3
    %br
    DO NOT use the level ID. Incorrect example: https://studio.code.org/levels/25959
  %p
  - unless f.object.examples.blank?
    - f.object.examples.each do |example|
      - next if example.blank?
      = text_field_tag "level[examples][]", example
  - 5.times do
    = text_field_tag "level[examples][]"

:javascript
  function toggleFields(val) {
    const neighborhoodFields = document.getElementById('neighborhood');
    if (val.toLowerCase() === 'neighborhood') {
      neighborhoodFields.classList.remove('collapse');
    } else {
      neighborhoodFields.classList.add('collapse');
    }
  }

  - content_for :body_scripts do
  %script{src: webpack_asset_path('js/levels/editors/fields/_preload_assets_theater.js')}

#preload_asset.in.collapse{class: ('collapse' if @level.csa_view_mode != 'theater')}
  = f.label :preload_asset_list, 'Preload asset list'
  %p A list of assets to be preloaded at page load time. The extension must be wav, png, jpg, or jpeg. (click the plus sign to add an asset)
  - @level.preload_asset_list = [''] unless @level.preload_asset_list.try(:present?)
  - @level.preload_asset_list.each do |url|
    = text_field_tag 'level[preload_asset_list][]', url, placeholder: 'Asset URL', style: 'width: 100%; box-sizing: border-box; min-height: 28px;'
  #plusPreloadAssetList
    %i.fa.fa-plus-circle
