/ This partial contains general logic+view for displaying modal dialogs and handling submit button interactions.
- app, data = %i(app data).map{ |x| local_assigns[x] }

- unless app == 'external'
  .buttons{class: @level.properties['submittable'] == 'true' ? 'submittable' : nil}
    - if local_assigns[:previous_button]
      %a.btn.btn-large.btn-primary.previousPageButton
        =t('previous_page')
    - if local_assigns[:next_button]
      %a.btn.btn-large.btn-primary.nextPageButton
        =t('next_page')
    - elsif local_assigns[:continue_button]
      %a.btn.btn-large.btn-primary.next-stage.submitButton
        =t('continue')
    - else
      %a.btn.btn-large.btn-primary.next-stage.submitButton
        =t('submit')
      - if @level.properties['submittable']
        %a.btn.btn-large.btn-primary.unsubmitButton{style: 'display: none'}
          =t('unsubmit')
.clear
%div{style: 'display: none;'}
  #success-dialogcontent
    .modal-content.no-modal-icon.scrollable-element
      %p.dialog-title
        - if data['options'].try(:[], 'success_title')
          = data['options']['success_title']
        - elsif app == 'text_match' && data['answers'].blank?
          =t('text_match.open_response_title')
        - else
          - if data['submittable']
            =t("#{app}-submittable.correct_title")
          - else
            =t("#{app}.correct_title")
      %p
        - if data['options'].try(:[], 'success_body')
          = data['options']['success_body']
        - elsif app == 'text_match' && data['answers'].blank?
          =t('text_match.open_response_body')
        - else
          - if data['submittable']
            =t("#{app}-submittable.correct_body")
          - else
            =t("#{app}.correct_body")
      .farSide
        %button#ok-button
          =t('dialog.ok')

%script{src: minifiable_asset_path('js/levels/_dialog.js')}
