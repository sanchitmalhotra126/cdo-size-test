/ This partial contains general logic+view for displaying modal dialogs and handling submit button interactions.
- app, data = %i(app data).map{ |x| local_assigns[x] }

- unless app == 'external'
  .buttons
    %a.btn.btn-large.btn-primary.next-stage.submitButton
      =t('submit')
.clear
%div{style: 'display: none;'}
  #error-dialogcontent
    .modal-content
      %p.dialog-title
        =t("#{app == 'match' ? 'match' : 'multi'}.wrong_title")
      %p
        =t("#{app == 'match' ? 'match' : 'multi'}.wrong_body")
      .farSide
        %button#ok-button.secondary
          =t('dialog.ok')

  #pre-dialogcontent
    - if data['pre_image']
      .modal-image{style: 'margin-top: 0px;'}
        != string_or_image(app, data['pre_image'])
    .modal-content
      - if data['pre_image'].blank?
        - adjust_layout_class = 'unindentContent'
      - else
        - adjust_layout_class = ''
      %p.dialog-title{class: adjust_layout_class}
        != string_or_image(app, data['pre_title']) if data['pre_title']
      %p{class: adjust_layout_class}
        != string_or_image(app, data['pre_body']) if data['pre_body']
      - if data['pre_ani']
        .aniGif.example-image{style: 'overflow: hidden;'}
          != string_or_image(app, data['pre_ani'])
      .farSide
        %button#ok-button.secondary
          =t('dialog.ok')

  #success-dialogcontent
    .modal-content
      %p.dialog-title
        - if data['options'].try(:[], 'success_title')
          = data['options']['success_title']
        - elsif app == 'text_match' && data['answers'].blank?
          =t('text_match.open_response_title')
        - else
          =t("#{app == 'match' ? 'match' : 'multi'}.correct_title")
      %p
        - if data['options'].try(:[], 'success_body')
          = data['options']['success_body']
        - elsif app == 'text_match' && data['answers'].blank?
          =t('text_match.open_response_body')
        - else
          =t("#{app == 'match' ? 'match' : 'multi'}.correct_body")
      .farSide
        %button#ok-button.secondary
          =t('dialog.ok')

:javascript
  var dialogType = null;
  var adjustedScroll = false;
  var skipSound = #{ !!(data['options'].try(:[], 'skip_sound'))};

  $(function () {
    if ("#{ data['pre_title']}" != "") {
      setTimeout(function () {
        showDialog("pre");
      }, 1000);
    }
  });

  function dialogHidden() {
    if (dialogType == "success" && lastServerResponse.nextRedirect) {
      window.location.href = lastServerResponse.nextRedirect;
    }

    if (dialogType == "error") {
      adjustScroll();
    }
  }

  function showDialog(type) {
    dialogType = type;

    var dialog = new Dialog({ body: "", onHidden: dialogHidden });

    // Use our prefabricated dialog content.
    $(".modal-body").append($("#" + type + "-dialogcontent").clone(true));

    // Clicking the okay button in the dialog box dismisses it.
    $(".modal-body #ok-button").click(function () {
      dialog.hide();
    });

    dialog.show();
  }

  function adjustScroll() {
    if (adjustedScroll) {
      return;
    }

    var win = $(window);
    var el = $('.mainblock');
    var winPos = win.scrollTop() + win.height();
    var elPos = el.offset().top + el.height() - 10;

    if (winPos < elPos) {
      $('html, body').animate({
        scrollTop: $(".submitButton:first").offset().top - 10
      }, 1000);
    }

    adjustedScroll = true;
  }

  $('.submitButton').click(function () {
    var submitButton = $('.submitButton');
    if (submitButton.attr('disabled')) {
      return;
    }

    var results = getResult();
    var response = results['response'];
    var result = results['result'];
    var errorType = results['errorType'];

    // Avoid multiple simultaneous submissions.
    submitButton.attr('disabled', true);

    if (!result) {
      showDialog(errorType || "error");
      if (!skipSound) {
        CDOSounds.play('failure');
      }
    } else {
      if (!skipSound) {
        CDOSounds.play('success');
      }
    }

    sendReport({
      program: response,
      fallbackResponse: '#{ @fallback_response.to_json}',
      callback: '#{ @callback}',
      app: '#{ app}',
      level: '#{ @level.level_num}',
      result: result,
      testResult: result ? 100 : 0,
      onComplete: function () {
        if (!lastServerResponse.nextRedirect) {
          $('.submitButton').attr('disabled', false);
        }
        if (lastServerResponse.videoInfo)
        {
          showVideoDialog(lastServerResponse.videoInfo);
        } else if (lastServerResponse.nextRedirect) {
          if (#{ data['options'].try(:[], 'skip_dialog').blank?}) {
            showDialog("success");
          } else {
            window.location.href = lastServerResponse.nextRedirect;
          }
        }
      }
    });
  });
