/ This view creates a page that transparently provides fallback-player support to the specified YouTube video.
/ See VideosController#embed for usage
!!! 5
- video = local_assigns[:video]
- process_fallback_videos = current_user.try(:admin?) && !(Rails.env.production? || Rails.env.test?)
- Youtube.process(video.key) if process_fallback_videos
%head
  = stylesheet_link_tag    'video-js', media: 'all'
  = javascript_include_tag 'video/video'
%html{:dir => locale_dir}
  %script{src: '/shared/js/url_test/url_test.js'}

  :css
    #video-container {
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    #video {
      border: 0;
    }

    body {
      background-color: #000;
      color: #fff;
      height: 100%;
      width: 100%;
      overflow: hidden;
      position: absolute;
      padding: 0;
      margin: 0;
    }

  #video-container

  :javascript
    var width = $(window).width();
    var height = $(window).height();

    var videoInfo = #{video.summarize(params.has_key?(:autoplay)).to_json};
    videoInfo['enable_fallback'] = #{!params.has_key?(:youtube_only)};
    videoInfo['force_fallback'] = #{params.has_key?(:fallback_only) || process_fallback_videos};
    $('#video-container').append(createVideoWithFallback(videoInfo, width, height));
