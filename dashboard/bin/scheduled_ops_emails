#!/usr/bin/env ruby
require_relative '../../lib/cdo/only_one'
require_relative '../../lib/cdo/activity_constants'
require_relative '../config/environment'

def main
  Dir.chdir(dashboard_dir) do
    # Get all workshops that start two weeks from today
    workshops = DASHBOARD_DB.fetch('SELECT * FROM segments JOIN workshops ON workshops.id = workshop_id  GROUP BY workshop_id HAVING DATE(MIN(start)) = (DATE_ADD(CURDATE(), INTERVAL 2 WEEK));')
    workshops.each do |workshop|
      workshop_segments = DASHBOARD_DB.fetch("SELECT * FROM segments WHERE workshop_id = #{workshop[:id]};")

      # Get all attendees of a single workshop (teachers, drop-ins, and facilitators)
      teachers = DASHBOARD_DB.fetch("SELECT * FROM users JOIN cohorts_users ON id = user_id JOIN workshop_cohorts ON workshop_cohorts.cohort_id = cohorts_users.cohort_id WHERE workshop_cohorts.workshop_id = #{workshop[:id]};")
      drop_ins = DASHBOARD_DB.fetch("SELECT * FROM users JOIN unexpected_teachers_workshops ON id = unexpected_teacher_id WHERE workshop_id = #{workshop[:id]};")
      facilitators = DASHBOARD_DB.fetch("SELECT * FROM users JOIN facilitators_workshops ON id = facilitator_id WHERE workshop_id = #{workshop[:id]};")

      [teachers, drop_ins, facilitators].each do |recipient_list|
        recipient_list.each do |recipient|
          recipient_ops_data = JSON.parse(recipient[:properties])
          workshop[:segments] = workshop_segments
          puts("Sending email to #{recipient_ops_data['ops_first_name']}")
          OpsMailer.workshop_in_2_weeks_reminder(workshop, recipient, recipient_ops_data).deliver
        end
      end

    end
  end
end

main if only_one_running?(__FILE__)
