#!/usr/bin/env ruby

require_relative '../../../dashboard/config/environment'

# num_users_updated = 0
# batch_size = 10000

# puts "Processing...."
# start = Time.now
# User.where.not(school_info: nil).where(user_type: "teacher").find_in_batches(batch_size: batch_size) do |batch|
#   ActiveRecord::Base.transaction do
#     batch.each do |user|
#       user.user_school_infos.where(school_info_id: user.school_info_id).first_or_create(
#         start_date: user.created_at,
#         # last_confirmation_date: user.last_seen_school_info_interstitial.present? ? user.last_seen_school_info_interstitial : user.created_at
#         # last_confirmation_date: user.last_seen_school_info_interstitial.any || user.created_at
#         last_confirmation_date: user.last_seen_school_info_interstitial.any? ? user.last_seen_school_info_interstitial : user.created_at
#       )
#       num_users_updated += 1
#     rescue StandardError => e
#       p e
#       puts "Error: teacher with user id #{user.id} with school id #{user.school_info.id}"
#       num_users_updated -= 1 #why is this needed?
#     end
#   end
# end
# # Output how many total users were updated.
# finish = Time.now
# puts "\nFinished updating #{num_users_updated} users school information in #{finish - start}s."

### active record import
num_users_updated = 0
batch_size = 10000

puts "Processing...."
start = Time.now
User.where.not(school_info: nil).where(user_type: "teacher").find_in_batches(batch_size: batch_size) do |batch|
  user_ids = []
  school_ids = []
  batch.each do |user|
    user_ids << user.id
    school_ids << user.school_info_id
  end

  user_sch_infs = UserSchoolInfo.where(user_id: user_ids, school_info_id: school_ids)

  user_school_infos = batch.map do |user|
    if user_sch_infs.any? {|inf| user.id == inf.user_id && user.school_info_id == inf.school_info_id}
      nil
    else
      UserSchoolInfo.new (
        user_id: user.id,
        school_info_id: user.school_info_id,
        start_date: user.created_at,
        last_confirmation_date: user.last_seen_school_info_interstitial.nil? ? user.created_at : user.last_seen_school_info_interstitial
      )
    end
  end.compact

  #[nil, nil, nil, user, user_2]
  # [user, user_2]

  batch_result = UserSchoolInfo.import user_school_infos
  p batch_result.failed_instances
  num_users_updated += user_school_infos.size - batch_result.failed_instances.size
  # rescue StandardError => e
  #   puts e
  #   puts "Error: teacher with user id #{user.id} with school id #{user.school_info.id}"
end
# Output how many total users were updated.
finish = Time.now
puts "\nFinished updating #{num_users_updated} users school information in #{finish - start}s."
