#!/usr/bin/env ruby
#
# This script reads a CSV of teacher email addresses. For each, it  checks to
# see if there is a user account without a plaintext email matching the email
# address (comparing the hashes). If there is, it upgrades the (student) account
# to a teacher account, populating the plaintext email field with the email
# address.
#
# This is being done to alleviate account issues impacting the PLC team.
#
# Note that this script assumes a list of email addresses within the file
# /tmp/teacher_emails.csv. Since this file contains PII, it will live only
# temporarily (also not within source control) at that location.

require 'csv'
require_relative '../../dashboard/config/environment'

CSV.foreach('/tmp/teacher_emails.csv') do |row|
  email = row[0]
  next if email.nil?

  # As we don't want to hammer production (too badly) with queries, we sleep for
  # a (arbitrary) fraction of a second. Note that there are roughly 40K emails,
  # so the script will spend approximately thirty-three minutes sleeping.
  sleep(0.05)

  user = User.find_by_email_or_hashed_email(email)
  next if user.nil? || user.email.present?

  begin
    # As we know the email address to be associated with a teacher, we upgrade
    # the account to a teacher account, populating the plaintext email address.
    puts "UPDATING: #{user.id}..."
    user.update(user_type: 'teacher', email: email)
  rescue Exception => e
    # Since exceptions may happen naturally, we simply log the relevant
    # information to the console and give the executing user a chance to abort
    # the script.
    puts "EXCEPTION:"
    puts "  USER: #{user}"
    puts "  MESSAGE: #{e.message}"
    sleep(10)
  end
end
