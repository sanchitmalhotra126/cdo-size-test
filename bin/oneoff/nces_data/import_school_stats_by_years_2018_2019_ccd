#!/usr/bin/env ruby

require_relative '../../../dashboard/config/environment'

CDO.log = Logger.new(STDOUT)

SURVEY_YEAR = '2018-2019'.freeze

VIRTUAL_SCHOOL_MAP = {
  'Full Virtual' => 'Yes',
  'Missing' => nil,
  'Not reported' => nil,
  'Not Virtual' => 'No',
  'Supplemental Virtual' => 'No',
  'Virtual with face to face options' => 'Yes'
}.freeze

TITLE_I_MAP = {
  'Title I targeted assistance eligible school-No program' => '1',
  'Title I targeted assistance school' => '2',
  'Title I schoolwide eligible-Title I targeted assistance program' => '3',
  'Title I schoolwide eligible school-No program' => '4',
  'Title I schoolwide school' => '5',
  'Not a Title I school' => '6',
  'Missing' => nil,
  'Not reported' => nil
}.freeze

COMMUNITY_TYPE_MAP = {
  '11' => 'city_large',
  '12' => 'city_midsize',
  '13' => 'city_small',
  '21' => 'suburban_large',
  '22' => 'suburban_midsize',
  '23' => 'suburban_small',
  '31' => 'town_fringe',
  '32' => 'town_distant',
  '33' => 'town_remote',
  '41' => 'rural_fringe',
  '42' => 'rural_distant',
  '43' => 'rural_remote'
}.freeze

# @param unsanitized [String, nil] the unsanitized string
# @returns [String, nil] the sanitized version of the string, with equal signs and double
#   quotations removed. Returns nil on nil input, or if value is a dash (signifies missing in NCES data).
def sanitize_string_for_db(unsanitized)
  # May be required for school student count import.
  #unsanitized = unsanitized == '-' ? nil : unsanitized
  unsanitized&.tr('="', '')
end

AWS::S3.process_file('cdo-nces', "#{SURVEY_YEAR}/ccd/ccd_sch_029_1819_w_1a_091019.csv") do |filename|
  SchoolStatsByYear.transaction do
    SchoolStatsByYear.merge_from_csv(filename, {col_sep: ",", headers: true, quote_char: "\x00", encoding: 'ISO-8859-1:UTF-8'}) do |row|
      {
        school_id:          row['NCESSCH'].to_i.to_s,
        school_year:        SURVEY_YEAR,
        grades_offered_lo:  row['GSLO'],
        grades_offered_hi:  row['GSHI'],
        grade_pk_offered:   row['G_PK_OFFERED'] == 'Yes',
        grade_kg_offered:   row['G_KG_OFFERED'] == 'Yes',
        grade_01_offered:   row['G_1_OFFERED'] == 'Yes',
        grade_02_offered:   row['G_2_OFFERED'] == 'Yes',
        grade_03_offered:   row['G_3_OFFERED'] == 'Yes',
        grade_04_offered:   row['G_4_OFFERED'] == 'Yes',
        grade_05_offered:   row['G_5_OFFERED'] == 'Yes',
        grade_06_offered:   row['G_6_OFFERED'] == 'Yes',
        grade_07_offered:   row['G_7_OFFERED'] == 'Yes',
        grade_08_offered:   row['G_8_OFFERED'] == 'Yes',
        grade_09_offered:   row['G_9_OFFERED'] == 'Yes',
        grade_10_offered:   row['G_10_OFFERED'] == 'Yes',
        grade_11_offered:   row['G_11_OFFERED'] == 'Yes',
        grade_12_offered:   row['G_12_OFFERED'] == 'Yes',
        grade_13_offered:   row['G_13_OFFERED'] == 'Yes',
      }
    end
  end
end

AWS::S3.process_file('cdo-nces', "#{SURVEY_YEAR}/ccd/ccd_sch_129_1819_w_1a_091019.csv") do |filename|
  SchoolStatsByYear.transaction do
    SchoolStatsByYear.merge_from_csv(filename, {col_sep: ",", headers: true, quote_char: "\x00", encoding: 'ISO-8859-1:UTF-8'}) do |row|
      {
        school_id:      row['NCESSCH'].to_i.to_s,
        school_year:    SURVEY_YEAR,
        virtual_status: VIRTUAL_SCHOOL_MAP[row['VIRTUAL_TEXT']],
        title_i_status: TITLE_I_MAP[row['TITLEI_STATUS_TEXT']]
      }
    end
  end
end

# TO DO: Import student counts (by race/ethnicity)

# TO DO: Import free and reduced lunch student counts

AWS::S3.process_file('cdo-nces', "#{SURVEY_YEAR}/ccd/EDGE_GEOCODE_PUBLICSCH_1819.csv") do |filename|
  SchoolStatsByYear.transaction do
    SchoolStatsByYear.merge_from_csv(filename, {col_sep: ",", headers: true, quote_char: "\x00", encoding: 'ISO-8859-1:UTF-8'}) do |row|
      {
        school_id:      row['NCESSCH'].to_i.to_s,
        school_year:    SURVEY_YEAR,
        community_type: COMMUNITY_TYPE_MAP[row['LOCALE']]
      }
    end
  end
end
