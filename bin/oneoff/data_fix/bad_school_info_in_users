#!/usr/bin/env ruby

require_relative '../../../dashboard/config/environment'

UPDATING = (ARGV[0].eql? "true").freeze
puts "Called with UPDATING=#{UPDATING}"

start_time = Time.now

school_info_ids = ActiveRecord::Base.connection.execute(%Q{
      SELECT DISTINCT t.id FROM (
        SELECT MIN(id) AS id FROM school_infos WHERE validation_type = 'none' AND country = 'US'
        AND school_type in ('public','charter')
        GROUP BY school_type
      UNION ALL
        SELECT MIN(id) AS id FROM school_infos WHERE validation_type = 'none' AND country = 'US'
        AND school_type in ('public','charter') AND state IS NOT NULL
        GROUP BY school_type, state
      UNION ALL
        SELECT MIN(id) AS id FROM school_infos WHERE validation_type = 'none' AND country = 'US'
        AND school_type in ('public','charter') AND state IS NOT NULL AND school_district_id IS NOT NULL
        GROUP BY school_type, state, school_district_id
      ) t JOIN school_infos si ON si.id = t.id
      WHERE (si.school_id IS NOT NULL OR si.school_name IS NOT NULL)
    }
  ).each do |row|
  row[0]
end

info_count = 0
user_count = 0

school_info_ids.each do |school_info_id|
  users = User.where("user_type = 'teacher' AND school_info_id = ?", school_info_id)
  next unless users.count > 1

  users.each do |user|
    if UPDATING
      user.update(school_info_id: nil)
    end
    user_count += 1
  end

  info_count += 1
end

puts "Updated #{user_count} user(s) from #{info_count} school_info(s) in #{Time.now - start_time} second(s)."
