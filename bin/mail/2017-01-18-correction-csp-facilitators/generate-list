#!/usr/bin/env ruby
require_relative '../mailing-common/mailing-list-utils'
require_relative '../../../dashboard/config/environment'

DASHBOARD_REPORTING_DB_READONLY = sequel_connect(
  CDO.dashboard_reporting_db_reader,
  CDO.dashboard_reporting_db_reader
).freeze
OUTPUT_FILE = 'contacts.csv'.freeze
ALREADY_APPLIED_FILE = 'already_applied.csv'.freeze
CURRENT_FACILITATORS_FILE = 'current_facilitators.csv'.freeze

# @return [Hash] A hash mapping email addresses to a hash containing email,
#   name, and (US) state.
def generate_csp_list
  # All US teachers that are teaching CSP (via a section assigned a CSP script)
  # for which we have a state.
  dashboard_query_csp = '
    SELECT users.name, users.email, user_geos.state
    FROM users
    INNER JOIN user_geos
      ON user_geos.user_id = users.id
    INNER JOIN sections
      ON sections.user_id = users.id
    WHERE users.user_type = "teacher"
      AND users.email <> ""
      AND user_geos.country = "United States"
      AND user_geos.state IS NOT NULL
      AND sections.script_id IN (
        41, 63, 57, 111, 112, 116, 122, 123, 124, 125, 126, 127
      )
    GROUP BY users.email
  '

  results = {}

  DASHBOARD_REPORTING_DB_READONLY.fetch(dashboard_query_csp).each do |row|
    email = row[:email]
    next if UNSUBSCRIBERS.include? email
    results[email] = {
      name: row[:name],
      name_s: row[:name],
      state_s: row[:state],
      email: email
    }
  end

  # Remove the overlap between CSP and CSD teachers.
  dashboard_query_csd = '
    SELECT users.name, users.email, user_geos.state
    FROM users
    INNER JOIN user_geos
      ON user_geos.user_id = users.id
    INNER JOIN sections
      ON sections.user_id = users.id
    WHERE users.user_type = "teacher"
      AND users.email <> ""
      AND user_geos.country = "United States"
      AND user_geos.state IS NOT NULL
      AND sections.script_id IN (181, 187, 169, 189)
    GROUP BY users.email
  '

  start_count = results.size
  DASHBOARD_REPORTING_DB_READONLY.fetch(dashboard_query_csd).each do |row|
    email = row[:email]
    results.delete(email)
  end
  end_count = results.size
  puts "TRUNCATED #{start_count - end_count} VIA CSP and CSD overlap."

  results
end

# @param csp_list [Hash] Map from emails to hashes of information
#   (email, name, state).
def truncate_csp_list(csp_list)
  [ALREADY_APPLIED_FILE, CURRENT_FACILITATORS_FILE].each do |file|
    start_count = csp_list.size
    CSV.foreach(file) do |row|
      normalized_email = row['email'] ? row['email'].downcase : nil
      csp_list.delete(normalized_email)
    end
    end_count = csp_list.size

    puts "TRUNCATED #{start_count - end_count} VIA #{file}."
  end
end

csp_list = generate_csp_list
truncate_csp_list(csp_list)

export_contacts_to_csv csp_list, OUTPUT_FILE

puts "Exported #{csp_list.size} contacts."
