#!/usr/bin/env ruby
require_relative '../deployment'
require_relative '../lib/cdo/aws/s3'
require_relative '../shared/middleware/helpers/storage_id'

MAX_THREADS = 200
MAX_KEYS = 1000

if ARGV.length < 2 || ARGV.length.odd?
  $stderr.puts "usage: #{$0} <regex1> <output1>.tsv [<regex2> <output2>.tsv] ..."
  exit(1)
end

# Searches all applab source code for each regex and prints results to a corresponding tsv file.
# This is useful for seeing if we will break anyone's program if we change how a block works.
# Multiple regex-filename pairs can be specified to avoid having to run the script multiple times.
#
# The 'match' field is either the first '()' grouping in the regex if one is specified, or
# the entire matched string otherwise.
#
# With 200 threads this script takes approximately 4-5 hours on production-console to process
# 2.5M source files in s3://cdo-v3-sources/sources/ .

# a list of pairs of regexes and filenames, e.g. [[regex1, filename1], [regex2, filename2]]
commands = ARGV.map(&:to_s).map(&:strip).each_slice(2).to_a

commands.each do |_, filename|
  # print tsv headers
  File.open(filename, 'w') do |file|
    file << %w{owner_storage_id match project_url}.join("\t") + "\n"
  end
end

s3 = Aws::S3::Client.new
marker = nil
bucket = CDO.sources_s3_bucket
base_dir = CDO.sources_s3_directory
count = 0

loop do
  contents = s3.list_objects(bucket: bucket, prefix: base_dir, :max_keys=>MAX_KEYS, :marker=>marker).contents
  break if contents.empty?
  marker = contents.last.key

  contents.each_slice(MAX_THREADS) do |chunk|
    threads = []
    chunk.each do |fileinfo|
      threads << Thread.new do
        _, owner_storage_id, channel_id, filename = %r{#{base_dir}/([^/]+)/([^/]+)/([^/]+)$}.match(fileinfo.key).to_a
        if filename == 'main.json'
          body = s3.get_object(bucket: bucket, key: fileinfo.key)[:body].read
          source = JSON.parse(body)['source']
          commands.each do |regex, filename|
            match = source.match(regex) if source
            if match
              match_string = match[1] || match[0]
              channel = storage_encrypt_channel_id(owner_storage_id, channel_id)
              project_url = "https://#{CDO.dashboard_hostname}/projects/applab/#{channel}/view"

              File.open(filename, 'a') do |file|
                file.flock(File::LOCK_EX)
                file << "#{owner_storage_id}\t#{match_string}\t#{project_url}\n"
                file.flock(File::LOCK_UN)
              end
            end
          end
        end
      end
    end
    threads.each &:join
  end
  count += contents.length
  puts "#{count} files scanned..."
end
puts "#{count} files scanned total"
