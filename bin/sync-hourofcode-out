#! /usr/bin/env ruby

require File.expand_path('../../pegasus/src/env', __FILE__)
require 'cdo/languages'
require 'fileutils'

def push_out_translated_files
  # rename_downloads_from_crowdin_code_to_locale
end

def rename_downloads_from_crowdin_code_to_locale
  puts "Updating crowdin codes to our codes..."
  Languages.get_hoc_languages.each do |prop|
    # rename downloaded folders from language to locale
    if File.directory?("i18n/locales/#{prop[:crowdin_name_s]}/")
      FileUtils.cp_r "i18n/locales/#{prop[:crowdin_name_s]}/.", "i18n/locales/#{prop[:locale_s]}"
      FileUtils.rm_r "i18n/locales/#{prop[:crowdin_name_s]}"
    end

    # rename yml file from en.yml to code
    old_path = "i18n/locales/#{prop[:locale_s]}/hourofcode/en.yml"
    new_path = "i18n/locales/#{prop[:locale_s]}/hourofcode/#{prop[:unique_language_s]}.yml"

    File.rename(old_path, new_path)
    file = "i18n/locales/#{prop[:locale_s]}/hourofcode/#{prop[:unique_language_s]}.yml"
    File.write(file, File.read(file).gsub(/#{prop[:crowdin_code_s]}:/, "#{prop[:unique_language_s]}:"))
    puts "Renaming #{prop[:locale_s]}.yml to #{prop[:unique_language_s]}.yml"
  end
end

push_out_translated_files

# #########################################################################################
# ##                                                                                     ##
# ## copy files from i18n to hoc.com                                                     ##
# ##                                                                                     ##
# #########################################################################################

# puts "Copying files from cdo/i18n to hoc.com/i18n..."
# languages.each_value do |codes|
#   unless codes[locale_index] == "en-US"
#     puts "Copied locale #{codes[code_index]}"

#     i18n_path = "../locales/#{codes[locale_index]}/hourofcode"
#     hoc_path = "../../pegasus/sites.v3/hourofcode.com/i18n"
#     FileUtils.cp(i18n_path + "/#{codes[code_index]}.yml", hoc_path)

#     language_folder = hoc_path + "/public/#{codes[code_index]}"
#     unless File.directory?(language_folder)
#       FileUtils.mkdir_p(language_folder)
#       FileUtils.mkdir_p(language_folder + "/files")
#       FileUtils.mkdir_p(language_folder + "/images")
#       FileUtils.mkdir_p(language_folder + "/how-to")
#       FileUtils.mkdir_p(language_folder + "/promote")
#       FileUtils.mkdir_p(language_folder + "/prizes")
#     end

#     i18n_dir = Dir["../locales/#{codes[locale_index]}/hourofcode/*.md"]
#     i18n_dir.each do |file|
#       FileUtils.cp(file, hoc_path + "/public/#{codes[code_index]}/#{File.basename(file)}")
#     end

#     i18n_dir = Dir["../locales/#{codes[locale_index]}/hourofcode/how-to/*.md"]
#     i18n_dir.each do |file|
#       FileUtils.cp(file, hoc_path + "/public/#{codes[code_index]}/how-to/#{File.basename(file)}")
#     end

#     i18n_dir = Dir["../locales/#{codes[locale_index]}/hourofcode/promote/*.md"]
#     i18n_dir.each do |file|
#       FileUtils.cp(file, hoc_path + "/public/#{codes[code_index]}/promote/#{File.basename(file)}")
#     end

#     i18n_dir = Dir["../locales/#{codes[locale_index]}/hourofcode/prizes/*.md"]
#     i18n_dir.each do |file|
#       FileUtils.cp(file, hoc_path + "/public/#{codes[code_index]}/prizes/#{File.basename(file)}")
#     end
#   end
# end

# #########################################################################################
# ##                                                                                     ##
# ## clean up crowdin markdown errors                                                    ##
# ##                                                                                     ##
# #########################################################################################

# puts "Fixing crowdin markdown errors..."
# # replace * * * with ---
# Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/*.md").each do |file|
#   File.write(file, File.read(file).gsub(/^.*\*\s\*\s\*/, "---"))
# end

# # fix metadata to be multiline
# Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/*.md").each do |file|
#   puts file
#   metadata_pattern = /(---.*?---)/m
#   metadata_matches = File.read(file).match metadata_pattern
#   if metadata_matches
#     original_metadata = metadata_matches.captures.first
#     fixed_metadata = original_metadata.gsub(/ ([a-z]*:)/m, "\n\\1")
#     File.write(file, File.read(file).gsub(original_metadata, fixed_metadata))
#   end
# end

# # fix social media buttons in promote/index
# Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/promote/index.md").each do |file|
#   puts file
#   string_replacement = '#{request.host}'
#   social_media_buttons = "<%
#   facebook = {:u=>\"http://#{string_replacement}/us\"}\n
#   twitter = {:url=>\"http://hourofcode.com\", :related=>'codeorg', :hashtags=>'', :text=>hoc_s(:twitter_default_text)}
#   twitter[:hashtags] = 'HourOfCode' unless hoc_s(:twitter_default_text).include? '#HourOfCode'\n%>"
#   File.write(file, File.read(file).gsub(/^<% facebook.*?%>/m, social_media_buttons))
# end

# # fix social media buttons in public/thanks
# Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/thanks.md").each do |file|
#   puts file
#   string_replacement = '#{request.host}'
#   social_media_buttons = "<%
#   facebook = {:u=>\"http://#{string_replacement}/us\"}\n
#   twitter = {:url=>\"http://hourofcode.com\", :related=>'codeorg', :hashtags=>'', :text=>hoc_s(:twitter_default_text)}
#   twitter[:hashtags] = 'HourOfCode' unless hoc_s(:twitter_default_text).include? '#HourOfCode'\n%>"
#   File.write(file, File.read(file).gsub(/^<% facebook.*?%>/m, social_media_buttons))
# end

# # fix social media metadata in public/thanks
# Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/thanks.md").each do |file|
#   puts file
#   social_media_metada = "---
# title: <%= hoc_s(:title_signup_thanks) %>
# layout: wide
# nav: how_to_nav

# social:
#   \"og:title\": \"<%= hoc_s(:meta_tag_og_title) %>\"
#   \"og:description\": \"<%= hoc_s(:meta_tag_og_description) %>\"
#   \"og:image\": \"http://<%=request.host%>/images/hourofcode-2015-video-thumbnail.png\"
#   \"og:image:width\": 1440
#   \"og:image:height\": 900
#   \"og:url\": \"http://<%=request.host%>\"

#   \"twitter:card\": player
#   \"twitter:site\": \"@codeorg\"
#   \"twitter:url\": \"http://<%=request.host%>\"
#   \"twitter:title\": \"<%= hoc_s(:meta_tag_twitter_title) %>\"
#   \"twitter:description\": \"<%= hoc_s(:meta_tag_twitter_description) %>\"
#   \"twitter:image:src\": \"http://<%=request.host%>/images/hourofcode-2015-video-thumbnail.png\"
# ---"
#   if file.split('/').last(2).first.size == 2
#     File.write(file, File.read(file).gsub(/^---.*?---/m, social_media_metada))
#   end
# end

# # fix embedded ruby in markdown
# Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/*.md").each do |file|
#   puts file
#   File.write(file, File.read(file).gsub(/\((%[^%]*%)\)/, "(<\\1>)"))
# end

# #########################################################################################
# ##                                                                                     ##
# ## check for bad translations                                                          ##
# ##                                                                                     ##
# #########################################################################################

# def compare_files
#   Dir.glob("../../pegasus/sites.v3/hourofcode.com/i18n/public/**/*.md").each do |i18n_file|
#     pattern = /..\/..\/pegasus\/sites.v3\/hourofcode.com\/i18n\/public\/[a-z][a-z]/
#     source_file = i18n_file.gsub(pattern, "../locales/source/hourofcode")

#     puts "checking: " + i18n_file
#     system("./diff_code.rb", i18n_file, source_file)
#   end
# end
# compare_files
