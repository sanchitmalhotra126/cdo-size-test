#!/usr/bin/env ruby

Dir.chdir(File.expand_path('../../../dashboard', __FILE__))
require_relative '../../dashboard/config/environment'
require 'aws-sdk'
require 'cdo/hip_chat'

# This script pushes backup snapshots of our production database into a
# write-only backup account, with the following steps:
#
# 1) Copy the latest automated snapshot to a temporary manual one
# 2) Wait until ready, and share the manual snapshot with the backup acct
# 3) On the backup account, copy the shared snapshot to a manual one
# 4) Wait until ready, and finally go back to the main account and delete the temp snapshot
#
# Credential sets must be set up with the names 'default' and 'backup' in the aws config directory,
# which requires setting appropriate secrets in our Chef config (which will come through via crontab.erb)
#

def get_aws_account_id(credentials)
  # based on https://gist.github.com/thomaswitt/3952303, updated for new Aws SDK
  begin
    iam = Aws::IAM::Client.new(credentials: credentials)
    iam = iam.get_user
    id, user = iam[:user][:arn].match('^arn:aws:iam::([0-9]{12}):(.*)$').captures
  rescue Aws::IAM::Errors::AccessDenied
    # This happens because in our case, we have some accounts that are so locked down
    # that they don't even have IAM get_user permissions. But AWS still spits the
    # user back in the error message. This is gross, but there doesn't seem to be
    # any other way.
    result = $!
    id, user = result.to_s.match('^User: arn:aws:iam::([0-9]{12}):(.*) is not auth.*$').captures
  end
  # rubocop:disable Performance/RedundantMatch
  raise 'incorrect account id' unless id.match(/^[0-9]{12}$/)
  # rubocop:enable Performance/RedundantMatch

  [id, user]
end

def wait_for_snapshot_copy(snapshot)
  waited = 0
  until snapshot.status == 'available'
    snapshot.reload
    puts "Snapshot status for #{snapshot.snapshot_id}: " + snapshot.status + ' - ' + Time.now.to_s
    sleep(5)
    waited += 5
    if waited > 10 * 60
      HipChat.developers "Timed out waiting for RDS snapshot #{snapshot.snapshot_id} to be available, aborting snapshot backup"
      exit(1)
    end
  end
end

def main
  HipChat.developers "Beginning cross-account RDS backup"
  credentials_primary = Aws::SharedCredentials.new(profile_name: 'default')
  rds_primary = Aws::RDS::Resource.new(credentials: credentials_primary)
  credentials_backup = Aws::SharedCredentials.new(profile_name: 'backup')
  rds_backup = Aws::RDS::Resource.new(credentials: credentials_backup)

  production_instance = rds_primary.db_instances.find{ |i| i.id == 'production' }

  # Find the latest automated backup
  sorted_snapshots = production_instance.snapshots.
      select{ |snap| snap.status == 'available' && !snap.snapshot_id.start_with?('temp-snapshot-') }.
      sort{ |a, b| a.snapshot_create_time <=> b.snapshot_create_time }
  latest_snapshot = sorted_snapshots.last

  # Copy the automated backup into a shareable manual one
  temp_snapshot_name = 'temp-snapshot-' + Time.now.to_i.to_s
  copied_snapshot = latest_snapshot.copy({
    target_db_snapshot_identifier: temp_snapshot_name
  })

  wait_for_snapshot_copy(copied_snapshot)
  puts "Temporary snapshot #{copied_snapshot.snapshot_id} is ready" + ' - ' + Time.now.to_s

  # Share the new snapshot with the backup account
  backup_account_id = get_aws_account_id(credentials_backup).first
  restore_attribute = copied_snapshot.attributes.find{ |attr| attr.name == 'restore' }
  restore_attribute.modify({
      values_to_add: [backup_account_id],
      values_to_remove: []
  })

  # Find the shared snapshot on the backup account, tolerate a propagation delay
  shared_snapshots = []
  until shared_snapshots.count > 0
    sleep(1)
    shared_snapshots = rds_backup.db_snapshots({
      max_records: 100,
      include_shared: true,
    }).select{ |snap|
      snap.snapshot_id.start_with?('arn:aws:rds:') && snap.snapshot_id.end_with?(temp_snapshot_name)
    }
  end
  shared_snapshot = shared_snapshots.first

  # On the backup account, copy the shared snapshot
  begin
    backed_up_snapshot = shared_snapshot.copy({
      target_db_snapshot_identifier: latest_snapshot.snapshot_id.sub('rds:', '')
    })
  rescue Aws::RDS::Errors::DBSnapshotAlreadyExists
    HipChat.developers "RDS snapshot backup error: #{latest_snapshot.snapshot_id} already backed up"
    copied_snapshot.delete
    exit(1)
  end

  wait_for_snapshot_copy(backed_up_snapshot)

  # We're done now, we just need to clean up the temporary snapshot
  copied_snapshot.delete

  HipChat.developers "Completed cross account RDS backup: #{latest_snapshot.snapshot_id}"
end

main
