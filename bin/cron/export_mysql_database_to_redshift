#!/usr/bin/env ruby
require_relative '../../lib/cdo/only_one'
exit unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'
exit unless rack_env?(:production) && CDO.dashboard_hostname == 'studio.code.org'

require 'aws-sdk-databasemigrationservice'
require 'cdo/chat_client'

# Export production Aurora MySQL tables to Redshift once a day.
# 1) Start Data Migration Service (DMS) Replication Tasks, which are configured to drop existing tables in a parallel
# set of `import_` Redshift schemas and then carry out full load of Aurora MySQL tables into the temporary `import_` schemas.
# 2) Verify that all tables have replicated from MySQL to the staging schemas in Redshift within a configurable timeout.
# 3) Drop the existing tables in the main Redshift schemas and rename / move the newly transferred tables into the main
# Redshift schemas.
def main
  ChatClient.message 'cron-daily', 'Beginning export from Aurora MySQL database to Redshift.'
  dms_client = Aws::DatabaseMigrationService::Client.new
  replication_tasks = dms_client.describe_replication_tasks({without_settings: true}).replication_tasks
  replication_tasks.each do |replication_task|
    puts dms_client.list_tags_for_resource({resource_arn: replication_task.replication_task_arn}).tag_list
  end
  ChatClient.message'cron-daily', "Completed export from Aurora MySQL database to Redshift."
rescue StandardError => error
  ChatClient.message'cron-daily', "Error during export from Aurora MySQL database to Redshift #{error.message}", color: 'red'
  raise error
end

main
