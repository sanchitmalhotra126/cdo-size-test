#!/usr/bin/env ruby
require_relative '../../lib/cdo/only_one'
exit unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'
exit unless rack_env?(:production) && CDO.dashboard_hostname == 'studio.code.org'

require 'cdo/aws/dms'
require 'cdo/chat_client'

def main
  ChatClient.message 'cron-daily', 'Beginning export from Aurora MySQL database to Redshift.'

  production_tasks = Cdo::DMS.production_replication_tasks

  # Spawn one thread for each replication task, so we can start and monitor them independently.
  threads = []
  Thread.abort_on_exception = true
  production_tasks.each do |task|
    threads << Thread.new {Cdo::DMS.start_replication_task(task.replication_task_arn)}
  end
  threads.each(&:join)

  ChatClient.message'cron-daily', "Completed export from Aurora MySQL database to Redshift."
rescue StandardError => error
  ChatClient.message'cron-daily', "Error during export from Aurora MySQL database to Redshift #{error.message}", color: 'red'
  raise error
end

main
