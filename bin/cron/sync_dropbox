#!/usr/bin/env ruby

# This syncs content changes from the shared dropbox folder to our github repo
# on the staging machine. This is required for contents changes from dropbox to
# be deployed.

SCRIPT_START = Time.now

require_relative "../../lib/cdo/only_one"
require_relative "../../deployment"
require "cdo/slack"
require "cdo/high_frequency_reporter"
require "open3"
exit unless only_one_running?(__FILE__)

FOLDERS = {
  "a" => "b"
}.freeze

INTERVAL_SECONDS = 5
TOTAL_SECONDS = 60 - INTERVAL_SECONDS
error_message = ""
# will repeat loop for up to TOTAL_SECONDS (currently 55) after start time
logger = HighFrequencyReporter.new(Slack, 'ben-test-slack-notification', '/Users/benjaminbrooks/dropbox_sync_error_log.csv')
logger.load
while (Time.now - SCRIPT_START) < TOTAL_SECONDS
  attempt_start = Time.now
  FOLDERS.each do |key, value|
    # 'unison' will sync the two folders. It will return true on success and false on failure.
    # For full details, see unison's man page. Docs are also here: https://www.cis.upenn.edu/~bcpierce/unison/download/releases/stable/unison-manual.html
    command = "unison /Users/benjaminbrooks/code-dot-org/applab_docs_1 /Users/benjaminbrooks/code-dot-org/applab_docs_2 -silent -auto -perms 0 -dontchmod"
    stdout, stderr, _ = Open3.capture3(command)
    next if stdout == "" && stderr == ""
    error_message = <<~ERROR_MSG
                      <!here> Error syncing Dropbox and staging
                      applab_docs_1 directory: #{key}
                      applab_docs_2 directory: #{value}
                      stdout: #{stdout}
                      stderr: #{stderr}
                    ERROR_MSG
    logger.record error_message
  end
  current_time = Time.now
  logger.save
  # sleep until INTERVAL_SECONDS have passed since while loop above started OR
  while current_time - attempt_start < INTERVAL_SECONDS && (current_time - SCRIPT_START) < TOTAL_SECONDS
    sleep 0.1
    current_time = Time.now
  end
end
# Reports to Slack if current minute is a multiple of 5
logger.report! 5
