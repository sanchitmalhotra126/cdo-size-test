#!/usr/bin/env ruby

require_relative '../../dashboard/config/environment'
require 'aws-sdk'
require 'cdo/chat_client'

# This script stops AWS EC2 instances being used to run adhoc environments if they have not been used recently:
#
# 1) for each AWS CloudFormation Stacks with the 'adhoc' tag or with 'adhoc' at the beginning of the name
#   a) get AWS CloudWatch Metrics to determine if it has been inactive for more than a configurable time period
#   b) if instance is inactive
#     i) stop EC2 instance
#     ii) notify owner of the CloudFormation stack (via email? Slack?)
# 2) publish final status to slack cron-job (list of all adhoc environments and which ones were stopped)

def main
  ChatClient.message 'cron-daily', 'Beginning to stop inactive adhoc instances'

  cloudformation_client = Aws::CloudFormation::Client.new
  cloudwatch_client = Aws::CloudWatch::Client.new

  cloudformation_client.describe_stacks.stacks.select {|stack| stack.stack_name.starts_with?('adhoc-')}.each do |stack|
    dashboard_url = stack.outputs.select {|output| output.output_key == 'DashboardURL'}.first.try(:output_value)
    puts "Name - #{stack.stack_name}, Status - #{stack.stack_status}, DashboardURL - #{dashboard_url}"

    puts cloudwatch_client.list_metrics(
      {
        namespace: 'Unicorn',
        metric_name: 'active',
        dimensions: [
          {
            name: 'Environment',
            value: 'adhoc',
          },
          {
            name: 'Host',
            value: "#{stack.stack_name}.cdn-code.org",
          }
        ]
      }
    ).metrics
  end
end

main
