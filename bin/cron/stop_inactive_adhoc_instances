#!/usr/bin/env ruby

require_relative '../../dashboard/config/environment'
require 'aws-sdk'
require 'cdo/chat_client'

# This script stops AWS EC2 instances being used to run adhoc environments if they have not been used recently:
#
# 1) for each AWS CloudFormation Stacks with the 'adhoc' tag or with 'adhoc' at the beginning of the name
#   a) get AWS CloudWatch Metrics to determine if it has been inactive for more than a configurable time period
#   b) if instance is inactive
#     i) stop EC2 instance
#     ii) notify owner of the CloudFormation stack (via email? Slack?)
# 2) publish final status to slack cron-job (list of all adhoc environments and which ones were stopped)

def main
  ChatClient.message 'cron-daily', 'Beginning to stop inactive adhoc instances'

  cloudformation_client = Aws::CloudFormation::Client.new
  cloudformation_resource = Aws::CloudFormation::Resource.new(client: cloudformation_client)
  cloudwatch_client = Aws::CloudWatch::Client.new

  # get list of CloudFormation stacks that start with the name "adhoc-"
  cloudformation_resource.stacks.select {|stack| stack.name.starts_with?('adhoc-')}.each do |stack|
    # stack = Aws::CloudFormation::Stack.new(name: stack_struct.stack_name)
    dashboard_url = stack.outputs.select {|output| output.output_key == 'DashboardURL'}.first.try(:output_value)

    # get Unicorn active HTTP request count CloudWatch metric for the current adhoc stack
    metric = Aws::CloudWatch::Metric.new(namespace: 'Unicorn', name: 'active', client: cloudwatch_client)
    unicorn_metric = metric.get_statistics(
      {
        dimensions: [
          {
            name: 'Environment',
            value: 'adhoc',
          },
          {
            name: 'Host',
            value: "#{stack.name}.cdn-code.org",
          }
        ],
        start_time: Time.now - (10 * 24 * 60 * 60), # 10 days ago
        end_time: Time.now,
        period: 10 * 24 * 60 * 60,
        statistics: ['Sum'],
        unit: 'Count'
      }
    )

    # each datapoint in the metric statistics array contains an attribute called 'sum'
    total_http_requests = unicorn_metric.try(:datapoints).sum(&:sum) unless unicorn_metric.nil?

    puts "Name - #{stack.name}, Status - #{stack.stack_status}, DashboardURL - #{dashboard_url}, HTTP Requests - #{total_http_requests}"

    if total_http_requests.between?(1, 1000)
      puts "Terminating EC2 instance for Stack - #{stack.name} due to inactivity"
      puts stack.resource('WebServer').physical_resource_id
    end
  end
end

main
