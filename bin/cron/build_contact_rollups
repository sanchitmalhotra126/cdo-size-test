#!/usr/bin/env ruby

require_relative('../../dashboard/config/environment')
require 'cdo/contact_rollups'
require 'cdo/contact_rollups_validation'
require 'cdo/pardot'
require 'cdo/chat_client'
require 'cdo/only_one'
require 'aws-sdk-rds'
require 'cdo/log_object'

CHAT_CHANNEL = "cron-daily".freeze

def main
  time_start = Time.now
  log_object = LogObject.new

  # Delete clone database cluster if it was left behind by the last execution of Contact Rollups.
  # log_object.time!('Delete db clone') {ContactRollups.delete_database_clone}
  # log_object.time!('Create db clone') {ContactRollups.create_database_clone}

  # Build new daily table of contact rollups
  log_object.time!('Build contact rollups') {ContactRollups.build_contact_rollups(log_object)}

  # Validate that daily contact rollups meets sanity expectations
  log_object.time!('Validate contact rollups') do
    validation_results = ContactRollupsValidation.validate_contact_rollups

    raise "Validation of daily rollup failed:\n#{validation_results[:output]}" unless validation_results[:pass]
  end

  # Sync daily rollup to master rollup and compute deltas
  log_object.time!('Sync to main db') {ContactRollups.sync_contact_rollups_to_main}

  # TODO: uncomment before running in production
  # Sync deltas into Pardot
  # log_object.time!('Sync to Pardot') do
  #   sync_results = Pardot.sync_contact_rollups_to_pardot
  #   log_object.info(
  #     "Syncing completed: #{sync_results[:num_inserts]} inserts, #{sync_results[:num_updates]} updates."
  #   )
  # end if log_object.ok?

  raise 'test'
rescue => e
  log_object.record_exception(e)
ensure
  # log_object.time('Clean up db clone') {ContactRollups.delete_database_clone}

  log_object.info("Script finished with #{log_object.error_count} error(s) in #{Time.now - time_start} seconds.")

  ChatClient.message(CHAT_CHANNEL, log_object.to_s)
  puts log_object.to_s  # TODO: remove

  # TODO: uncomment before running in production
  # Notify HoneyBadger if there is caught error/exception.
  # raise log_object.error_str unless log_object.ok?
end

main if only_one_running?(__FILE__)
