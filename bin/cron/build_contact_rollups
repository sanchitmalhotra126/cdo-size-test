#!/usr/bin/env ruby

require_relative('../../dashboard/config/environment')
require 'cdo/contact_rollups'
require 'cdo/contact_rollups_validation'
require 'cdo/pardot'
require 'cdo/chat_client'
require 'cdo/only_one'
# require 'aws-sdk-rds'
require 'cdo/log_object'

CHAT_CHANNEL = "cron-daily".freeze

def main
  # time_start = Time.now

  # Delete clone database cluster if it was left behind by the last execution of Contact Rollups.
  # TODO: log timing after each main task. Always write to Slack. do not bail out.
  # Result/Log object: log level

  log_object = LogObject.new

  # log_object.time('Delete db clone') {ContactRollups.delete_database_clone}
  # log_object.time('Create db clone') {ContactRollups.create_database_clone}

  # Build new daily table of contact rollups
  log_object.time('Build contact rollups') {ContactRollups.build_contact_rollups(log_object)}

  # Validate that daily contact rollups meets sanity expectations
  # TODO: how to propagate result up
  # results = ContactRollupsValidation.validate_contact_rollups
  # unless results[:pass]
  #   message = "Contact rollups process failed. "\
  #             "Validation of daily rollup failed:\n#{results[:output]}"
  #   ChatClient.message(CHAT_CHANNEL, message)
  #   # Raise exception so this goes to HoneyBadger
  #   raise message
  # end

  # # Sync daily rollup to master rollup and compute deltas
  # ContactRollups.sync_contact_rollups_to_main

  # # Sync deltas into Pardot
  # results = Pardot.sync_contact_rollups_to_pardot

  # time_elapsed = (Time.now - time_start).to_i
  # message = "Contact rollups process complete. #{results[:num_inserts]} "\
  #   "inserts and #{results[:num_updates]} updates to Pardot. "\
  #   "Total time: #{time_elapsed} sec"

  # ChatClient.message(CHAT_CHANNEL, message)

  # Any other failures along the way will be unrescued exceptions that
  # go to HoneyBadger
ensure
  # log_object.time('Clean up db clone') {ContactRollups.delete_database_clone}
  puts log_object.to_s
end

# main if only_one_running?(__FILE__)
main
