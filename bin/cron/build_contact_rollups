#!/usr/bin/env ruby

require_relative('../../dashboard/config/environment')
require 'cdo/contact_rollups'
require 'cdo/contact_rollups_validation'
require 'cdo/pardot'
require 'cdo/chat_client'
require 'cdo/only_one'
require 'cdo/log_collector'
require 'honeybadger/ruby'

CHAT_CHANNEL = "cron-daily".freeze

def main
  start_time = Time.now
  log_collector = LogCollector.new "Build contact rollups"

  # Build new daily table of contact rollups
  log_collector.time!('Build contact rollups') {ContactRollups.build_contact_rollups(log_collector)}

  # Validate that daily contact rollups meets sanity expectations
  log_collector.time!('Validate contact rollups') do
    validation_results = ContactRollupsValidation.validate_contact_rollups

    raise "Validation of daily rollup failed:\n#{validation_results[:output]}" unless validation_results[:pass]
  end

  # Sync daily rollup to master rollup and compute deltas
  log_collector.time!('Sync to main db') {ContactRollups.sync_contact_rollups_to_main(log_collector)}

  # Sync deltas into Pardot
  log_collector.time!('Sync to Pardot') do
    sync_results = Pardot.sync_contact_rollups_to_pardot log_collector
    log_collector.info(
      "Syncing completed: #{sync_results[:num_inserts]} inserts, #{sync_results[:num_updates]} updates."
    )
  end
rescue => e
  log_collector.record_exception(e)
ensure
  log_collector.info("Script finished with #{log_collector.errors.size} caught exception(s) in"\
    " #{LogCollector.get_friendly_time(Time.now - start_time)}."
  )

  ChatClient.message(CHAT_CHANNEL, log_collector.to_s)

  # Notify HoneyBadger about all caught exceptions.
  log_collector.errors.each do |error|
    Honeybadger.notify(error)
  end
end

main if only_one_running?(__FILE__)
