#!/usr/bin/env ruby

require 'open-uri'
require 'json'
require File.expand_path('../../../pegasus/src/env', __FILE__)
require_relative '../../deployment'

SLACK_TOKEN = CDO.SLACK_TOKEN.freeze
PAGERDUTY_TOKEN = CDO.PAGERDUTY_TOKEN.freeze
CHANNEL_ID = CDO.developers_CHANNEL_ID.freeze

# @param user [Hash] PagerDuty information for a user
# @return [Boolean] whether the user is the current DOTD primary oncall.
def dotd?(user)
  return false unless user['on_call']
  user['on_call'].each do |on_call|
    if on_call['level'] == 1 &&
      on_call['escalation_policy']['name'] == 'Dev of the day issues'
      return true
    end
  end
  return false
end

def main
  return unless only_one_running?(__FILE__)

  # Get current developers room topic.
  channel_info = open("https://slack.com/api/channels.info?token=#{SLACK_TOKEN}&channel=#{CHANNEL_ID}").read
  current_topic = JSON.parse(channel_info)["channel"]["topic"]["value"]

  # Get DOTD on call from PagerDuty.
  on_call = `curl -H "Content-type: application/json" -H "Authorization: Token token=#{PAGERDUTY_TOKEN}" -X GET -G "https://codeorg.pagerduty.com/api/v1/users/on_call"`
  on_call_parsed = JSON.parse(on_call)
  dotd_email = nil
  on_call_parsed['users'].each do |user|
    dotd_email = user["email"] if dotd?(user)
  end

  # Match PagerDuty email to Slack mention name.
  users_list = open("https://slack.com/api/users.list?token=#{SLACK_TOKEN}").read
  dotd_user = JSON.parse(users_list)["members"].find { |member| dotd_email == member["profile"]["email"] }
  dotd_mention = dotd_user ? "@#{dotd_user['name']} is DotD" : "(error: check schedule for DotD)"

  # Set the new developers room topic
  new_topic = current_topic.gsub(/[^\s]* is DotD|^(?!.* is DotD)/, dotd_mention)
  open("https://slack.com/api/channels.setTopic?token=#{SLACK_TOKEN}&channel=#{CHANNEL_ID}&topic=#{new_topic}")
end

main
