#!/usr/bin/env ruby
require_relative '../../lib/cdo/only_one'
exit unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'
require 'cdo/google/sheets'
require 'honeybadger/ruby'

# Writes teacher application data for this year into
# a spreadsheet in Google Drive (with permissions locked down to our organization) for exploration
# by our programs team.
def update_tabs(sheet)
  # Update application sheet
  applications = [%w(course regional_partner status scholarship_status school_type pay_fee email created_at
                     meets_minimum_requirements meets_scholarship_criteria registered_for_workshop rural_status
                     free_reduced_lunch_percent urm_percent accepted_at)]
  Pd::Application::Teacher2021Application.find_each do |app|
    stats = app.get_latest_school_stats(app.school_id)
    pay_fee = app.sanitize_form_data_hash[:principal_pay_fee] || app.sanitize_form_data_hash[:pay_fee]
    frl_percent = stats&.frl_eligible_percent
    # principal data is stored as a string with % at the end. Convert to float
    if app.sanitize_form_data_hash[:principal_free_lunch_percent]
      frl_percent = app.sanitize_form_data_hash[:principal_free_lunch_percent].to_f
    end
    urm_percent = stats&.urm_percent
    if app.sanitize_form_data_hash[:principal_underrepresented_minority_percent]
      urm_percent = app.sanitize_form_data_hash[:principal_underrepresented_minority_percent].to_f
    end

    applications << [
      app.course,
      app.regional_partner.try(:name),
      app.status,
      app.scholarship_status,
      app.school_type,
      pay_fee,
      app.email,
      app.created_at,
      app.meets_criteria,
      app.meets_scholarship_criteria,
      app.friendly_registered_workshop,
      stats&.rural_school?,
      frl_percent,
      urm_percent,
      app.accepted_at
    ]
  end

  sheet.export(
    sheet_name: 'all_apps',
    rows: applications
  )
end

def notify_of_external_sharing(sheet)
  # List of external emails that we can share this document with.
  # This list is saved in DCDO as an array. To append a new value to this list:
  # DCDO.set(key_name, DCDO.get(key_name, []) << new_value)
  allowed_list = DCDO.get('external_emails_with_application_data_access', [])
  external_emails = sheet.external_emails_with_access - allowed_list

  if external_emails.present?
    email_domains = external_emails.map {|email| email.slice(/@.*/)}.uniq
    error_msg = "Document containing PII information is shared to "\
      "#{external_emails.length} external account(s) at the following domain(s): #{email_domains.join(', ')}. "\
      "Please check with PLC team that this is intentional!"

    Honeybadger.notify error_msg
    puts error_msg
  end
end

def main
  # Uses a Google Cloud service account to access Google Drive
  sheet = Google::Sheet.new CDO.applications_2020_2021_gsheet_key
  update_tabs(sheet)
  notify_of_external_sharing(sheet)
end

main
