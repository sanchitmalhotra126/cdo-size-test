#!/usr/bin/env ruby

# This script attempts to automate and guide the Developer Of The Day through
# our deploy processes. In particular, it includes the AM DTT, the PM DTT with
# content scoops from staging and levelbuilder, the DTP, and the DTL.

require 'cgi'
require 'logger'
require 'tmpdir'
require_relative '../lib/cdo/cdo_cli'
require_relative '../lib/cdo/developers_topic'
require_relative '../lib/cdo/github'
include CdoCli

LOG_FILE = "#{Dir.tmpdir}/dotd.log".freeze
# TODO(asher): This is not a constant, so should not be NAMED as one.
LOGGER = Logger.new(LOG_FILE, 'daily')

LOGGER.formatter = proc do |_serverity, time, _progname, msg|
  "[#{time.strftime('%I:%M %p')}]: #{msg}\n"
end

# Global to prevent it from being passed around everywhere.
@dotd_name = ''

# Prints the script intro to the console.
def puts_script_intro
  puts <<-EOS.unindent

    #{bold 'Welcome to Robo-Dev-of-the-Day!'}

      d[ o_0 ]b

    #{bold 'Documentation'}

      Dev-of-the-Day Checklist
      #{dim 'http://wiki.code.org/display/PROD/Dev+of+the+Day+Checklist'}

      Known Issues
      #{dim 'http://wiki.code.org/display/PROD/Known+Issues'}

  EOS
end

# Prints the script conclusion to the console.
def puts_script_conclusion
  puts <<-EOS.unindent
    * Send your DOTD Report to dev@code.org. You can find a log of your day at #{LOG_FILE}
  EOS
  press_enter_to_continue

  puts <<-EOS.unindent

  #{bold "You're done!"}

      d[ o_0 ]b
  EOS
end

# Prompts the user for their name, setting the global variable @dotd_name and
# warns them of changing options.
def ask_for_name
  until @dotd_name != ''
    print "Who are you? "
    @dotd_name = gets.chomp
  end

  welcome = "  Hi #{@dotd_name}! Please follow along carefully, as options "\
    "and codepaths are changing often."
  puts ''
  puts welcome
  puts ''

  LOGGER.info("#{Time.new.strftime('%A, %B %d %Y')}: #{@dotd_name} is DotD")
end

# Prompts the user whether block should be executed by asking question,
# executing the block, doing nothing, or exiting the program depending on user
# response.
# @param question [String] The question to prompt the user with.
# @param log_action [Boolean] Whether to log the action to LOGGER. Default is
#   true.
# @block The block to run if the user responsds affirmatively.
def should_i(question, log_action: true)
  loop do
    print "Should I #{question}? [#{underline 'Y'}es]/#{underline 'S'}kip/#{underline 'Q'}uit: "
    response = gets.strip.downcase
    puts ''
    if 'yes'.start_with?(response) # also catches blank/return ;)
      LOGGER.info(question) if log_action
      yield
      return
    elsif 'skip'.start_with?(response) || 'no'.start_with?(response)
      return
    elsif 'quit'.start_with?(response)
      puts bold "  Something weird going on? Take a look at: "\
        "http://wiki.code.org/display/PROD/Daily+Deployment"
      puts ''
      exit(-1)
    else
      puts "Sorry, I didn't understand that.\n\n"
    end
  end
end

# Prompts the user to press enter, pausing until any key is pressed.
def press_enter_to_continue
  puts dim 'Press enter to continue...'
  gets
end

# Prompts the user to wait for thing, pausing until any key is pressed.
# @param thing [String] The thing to wait for.
def wait_for(thing)
  puts "\nWait for #{thing}"
  press_enter_to_continue
end

# Runs command on server_name.
# @param server_name [String] The server to run the command on.
# @param command [String] The command to be run.
def run_on(server_name, command)
  # Double-escape the command string, once for each remote shell we're passing
  # through.
  system "ssh -t gateway.code.org ssh -t #{server_name} #{command.inspect.inspect}"
end

# Performs a guided content push.
# @param server_name [String] The name of the server on which to perform the
#   content push, e.g., 'staging' or 'levelbuilder-staging'.
# @param environment_name [String] The environment name for the server, e.g.,
#   'staging' or 'levelbuilder'.
def content_push(server_name, environment_name)
  puts <<-EOS.unindent
    Follow the prompts given by the content-push script.
      If you need to do something fancier (or if the changed files do not
      "look ok" when it asks you), log in to staging and hand-craft the commit.
  EOS
  success = run_on(server_name, "#{environment_name}/bin/content-push --name=\"#{@dotd_name}\"")

  puts ''
  # Notice if the content push fails, and be helpful about fixing the problem.
  unless success
    puts "#{bold 'Uh-oh!'}  It looks like the #{server_name} content push failed!"
    should_i "ssh to #{server_name} so you can fix the problem manually" do
      puts <<-EOS.unindent

      #{bold "Connecting to #{server_name}."} Type 'logout' when you're done.

      #{dim 'd[ o_0 ]b'}

      EOS
      system "ssh -t gateway.code.org ssh #{server_name}"
      puts <<-EOS.unindent

      #{dim 'd[ o_0 ]b'}

      #{bold 'Welcome back!'}

      EOS
      press_enter_to_continue
    end
  end
end

# Prints the commit messages of commits present in branch head but not branch
# base. Truncates all such messages to the first line.
# @param base [String] The base branch to compare.
# @param head [String] The head branch to compare against.
# @example For a DTT: view_commits(base: 'test', head: 'staging')
def view_commits(base:, head:)
  puts "  Commits in #{head} to be merged into #{base}"
  puts ''
  GitHub.compare(base: base, head: head).each do |commit_message|
    # Truncate the message to its first line.
    commit_message_truncated = "    #{commit_message[/.*/].chomp}"
    puts dim(commit_message_truncated).to_s
  end
  puts ''
end

# Prints the DTT subtopic, formatted based on its contents.
def print_dtt_subtopic
  if DevelopersTopic.dtt?
    output_text = dim "CURRENT DTT SUBTOPIC: #{DevelopersTopic.dtt_subtopic}"
  else
    output_text = red "CURRENT DTT SUBTOPIC: #{DevelopersTopic.dtt_subtopic}"
  end
  puts output_text
end

# Asks if the DTT subroutine should be performed, doing so if requested.
def do_dtt_subroutine
  print_dtt_subtopic
  should_i "DTT" do
    view_commits base: 'test', head: 'staging'
    should_i "merge from staging to test" do
      DevelopersTopic.set_dtt_subtopic "no (@#{@dotd_name} in progress)"
      pr_number = GitHub.create_and_merge_pull_request(
        base: 'test',
        head: 'staging',
        title: 'DTT (Staging > Test)'
      )
      new_sha = GitHub.sha 'test'
      url = GitHub.html_url(pr_number)
      wait_for "DTT (#{url}) to complete, re-run / investigate failures, and "\
        "update infra#test topic to commit #{new_sha}"
      # TODO(asher): Prompt for whether the DTT was green, update
      # Slack#infra-test topic appropriately.

      should_i "reset DTT subtopic to yes", log_action: false do
        DevelopersTopic.set_dtt_subtopic "yes"
      end
    end
  end
end

def main
  puts_script_intro
  ask_for_name

  do_dtt_subroutine

  should_i "commit content changes from staging" do
    content_push 'staging', 'staging'
  end

  should_i "commit content changes from levelbuilder" do
    content_push 'levelbuilder-staging', 'levelbuilder'

    view_commits base: 'staging', head: 'levelbuilder'
    should_i "merge from levelbuilder to staging" do
      GitHub.create_and_merge_pull_request(
        base: 'staging', head: 'levelbuilder', title: 'DTS (Levelbuilder > Staging)'
      )
      new_sha = GitHub.sha 'staging'
      new_sha_abbr = new_sha[0, 4] + '...' + new_sha[-4, 4]
      wait_for "staging to finish building with sha #{new_sha_abbr}."
      should_i "commit content changes from staging again, to prevent dsls.en.yml issues for the next DotD" do
        content_push 'staging', 'staging'
      end
    end
  end

  do_dtt_subroutine

  wait_for "between 1:30PM and 3:30PM (Pacific) to DTP"
  should_i "DTP" do
    GitHub.open_pull_request_in_browser(
      base: 'production',
      head: 'test',
      title: 'DTP (Test > Production)'
    )

    should_i "DTL" do
      # TODO(asher): Remove this wait step if it is truly unnecessary now.
      wait_for "Slack#levelbuilder to indicate they are ready for a deploy"
      view_commits base: 'levelbuilder', head: 'test'
      should_i "merge from test to levelbuilder" do
        pr_number = GitHub.create_and_merge_pull_request(
          base: 'levelbuilder', head: 'test', title: 'DTL (Test > Levelbuilder)'
        )
        dtl_message = "  DTL PR: #{GitHub.html_url(pr_number)}"
        puts dim(dtl_message).to_s
      end
    end

    wait_for "DTP to finish"

    puts <<-EOS.unindent

      * Verify that the release at https://github.com/code-dot-org/code-dot-org/releases/latest looks correct
      * Update the #infra-production room status: e.g. "DTP status: successful DTP 6a4f800ae2616cd5da88cf520c595d7ed36b0611 at 2:06 PM PST on 2016/02/16"
      * Check https://code.org/ and http://studio.code.org/ after the deploy reaches all the frontends.
      * Verify that you're able to completely load a puzzle progression page (e.g. https://studio.code.org/hoc/1).
      * Ensure that no frontends were skipped in the Production room on Slack.
      * Watch HoneyBadger and New Relic for new errors popping up after the deploy.
    EOS
  end

  puts_script_conclusion
end

main
