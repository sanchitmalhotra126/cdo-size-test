[Service]
# Should we start varnishd at boot?  Set to "no" to disable.
Environment = START=yes

# Maximum number of open files (for ulimit -n)
Environment = NFILES=131072

# Maximum locked memory size (for ulimit -l)
# Used for locking the shared memory log in memory.  If you increase log size,
# you need to increase this number as well
Environment = MEMLOCK=82000

# Default varnish instance name is the local nodename.  Can be overridden with
# the -n switch, to have more instances on a single server.
# INSTANCE=$(uname -n)


#
# See varnishd(1) for more information.
#

# Main configuration file. You probably want to change it :)
Environment = VARNISH_VCL_CONF=/etc/varnish/default.vcl

# Default address and port to bind to
# Blank address means all IPv4 and IPv6 interfaces, otherwise specify
# a host name, an IPv4 dotted quad, or an IPv6 address in brackets.
# VARNISH_LISTEN_ADDRESS=
Environment = VARNISH_LISTEN_PORT=80

# Telnet admin interface listen address and port
# VARNISH_ADMIN_LISTEN_ADDRESS=127.0.0.1
Environment = VARNISH_ADMIN_LISTEN_PORT=6082

# Thread Pool
Environment = VARNISH_MIN_THREADS=1000
Environment = VARNISH_MAX_THREADS=4000
Environment = VARNISH_THREAD_POOL_ADD_DELAY=2
Environment = VARNISH_THREAD_TIMEOUT=120

# Cache file location
#VARNISH_STORAGE_FILE=/var/lib/varnish/$INSTANCE/varnish_storage.bin
#VARNISH_STORAGE_SIZE=10G
#VARNISH_STORAGE_FILE=/mnt/varnish.cache
#VARNISH_STORAGE="file,${VARNISH_STORAGE_FILE},${VARNISH_STORAGE_SIZE}"
Environment = VARNISH_STORAGE="<%= node['cdo-varnish']['storage'] %>"

# File containing administration secret
Environment = VARNISH_SECRET_FILE=/etc/varnish/secret

# Default TTL used when the backend does not specify one
Environment = VARNISH_TTL=120

# Idle timeout for client connections. Must be greater than any upstream's backend idle timeout (60-sec default on ELB).
# Ref: http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html
Environment = VARNISH_TIMEOUT_IDLE=65

# When there's not enough space to cache a new response, varnish starts "nuking" old entries from the cache to make room,
# but if it hits its configured "nuke limit" then it gives up and truncates the response. We set this to a high value
# to approximate not having this limit, which was the old behavior before our upgrade to Varnish 5. This was
# recommended by Varnish maintainers in: https://github.com/varnishcache/varnish-cache/issues/1764#issuecomment-323750334
Environment = VARNISH_NUKE_LIMIT=9999999

ExecStart=
ExecStart=/usr/sbin/varnishd \
  -a ${VARNISH_LISTEN_ADDRESS}:${VARNISH_LISTEN_PORT} \
  -f ${VARNISH_VCL_CONF} \
  -T ${VARNISH_ADMIN_LISTEN_ADDRESS}:${VARNISH_ADMIN_LISTEN_PORT} \
  -t ${VARNISH_TTL} \
  -S ${VARNISH_SECRET_FILE} \
  -s ${VARNISH_STORAGE} \
  -p thread_pool_min=${VARNISH_MIN_THREADS} \
  -p thread_pool_max=${VARNISH_MAX_THREADS} \
  -p thread_pool_timeout=${VARNISH_THREAD_TIMEOUT} \
  -p thread_pool_add_delay=${VARNISH_THREAD_POOL_ADD_DELAY} \
  -p timeout_idle=${VARNISH_TIMEOUT_IDLE} \
  -p vcc_allow_inline_c=true \
  -p nuke_limit=${VARNISH_NUKE_LIMIT} \
  -F
