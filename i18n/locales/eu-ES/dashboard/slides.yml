eu:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Ongi etorri zure lehen kode ordura! Goazen ba sakontzera programazioko zure lehen esperientzian.
      2:
        image: notes/hoc1_2.jpg
        text: Blockly erabiliko dugu, blokeak arrastatu eta utziz kodea idazteko programazio lengoaia bisuala.
      3:
        image: notes/hoc1_3.jpg
        text: 'Normalean kodea idatziz egiten da, baina Blockly bisuala da. Bloke bakoitzak "benetako" kode lerro bat adierazten du.'
      4:
        image: notes/hoc1_4.jpg
        text: Konputazio zientzien oinarriak ikasiko dituzu. Kontzeptu hauek appak egiteko edota Mars rover-a kontrolatzeko erabiltzen dira.
      5:
        image: notes/hoc1_5.jpg
        text: Programa bat, zure ordenagailuak jarraituko duen agindu talde bat da.
      6:
        image: notes/hoc1_6.jpg
        text: Zure leheneno programaren helburua Angry Bird bat labirintoan zehar gidatzea da txerri berde bat jotzeko.
      7:
        image: notes/hoc1_7.jpg
        text: Ezkerreko aldea zure programa exekutatzen den labirintoa da. Jarraibideak labirintoaren azpian daude.
      8:
        image: notes/hoc1_8.jpg
        text: Erdiko tresna kutxak Angry Bird-entzako aginduak ditu. Kodea eraikitzeko erabiliko dituzu.
      9:
        image: notes/hoc1_9.jpg
        text: Eskuinaldean lan eremua dago. Bertara tresna kutxako blokeak arrastatuko dituzu zure programa eraikitzkeo. Bloke bat ezabatzeko, eskineko zakarrontzira arrastatu.
      10:
        image: notes/hoc1_10.jpg
        text: 'Bloke bakoitza instruzio bat da. "aurrera mugitu" bloke bat zure lan eremura mugitzen baduzu eta "Hasi programa" sakatzen baduzu, txoria espazio bat mugituko da labirintoan.'
      11:
        image: notes/hoc1_11.jpg
        text: Ekintza bat baino gehiago burutzeko, bloke asko arrastatu ditzakezu zure lan eremura eta elkar itsatsi. Txoriak aginduak goitik behera egingo ditu.
      12:
        image: notes/hoc1_12.jpg
        text: 'Programa bat martxan jarri eta konpondu nahi baduzu, "Berrabiarazi" botoia sakatu.'
      13:
        image: notes/hoc1_13.jpg
        text: Goazen txerri horiek harrapatzera!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Kaixo, JR naiz! Edozein kotxe lasterketak zientzilari informatikoak behar ditu irabazteko. Kotxearen datuak aztertzen dituzte azkarragoa egiteko.
      2:
        image: notes/stage5_2.jpg
        text: Puzle hauetan bere azpian, edozein tokitara doala ere, bere azpian lerro bat marrazten duen artista bat izango zara.
      3:
        image: notes/stage5_3.jpg
        text: 'Bloke honek "mugitu aurrera 100 pixel" esaten du. "Pixelak" zure pantailako puntu txikiak dira.'
      4:
        image: notes/stage5_4.jpg
        text: 'Bloke honek "zure artista 90 gradu biratu" esaten du. Honek zure artista labirintoko puzleetako "biratu" blokeak bezain beste biratuko du.'
      5:
        image: notes/stage5_5.jpg
        text: Klikatu edozein bloketako gezian artista zenbateko kopuruan aurrera mugitzen edo biratzen den aldatzeko. Jolastu bloke berri hauekin trebatzeko.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Kaixo, Paola naiz! Puzle hauetan, landatzeko zelaia guztiz berdindu behar duen baserritarra zara.
      2:
        image: notes/stage9_2.jpg
        text: Zikinkeriak kentzen eta zuloak betetzen lagundu behar diozu.
      3:
        image: notes/stage9_3.jpg
        text: Bloke berriek palakada zikinkeri kentzen dute eta palakada lurrekin betetzen dute zuloa.
      4:
        image: notes/stage9_4.jpg
        text: Zikinkeriak eta zuloak tamaina ezberdinetakoak dira, beraz baserritarrari zenbat palakada erabili behar dituen esan behar diozue.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Kaixo, Katie naiz! Konputazio zientziei buruzko gauzarik interesgarrienetakoa ordenagailu programa bat elkarreragilea izan daitekeela da.
      2:
        image: notes/flappy02.jpg
        text: Ordenagailu edo telefono batean norbaitek klikatu, pantaila ikutu edo tekleatzen duen unean, honek GERTAERA bat sortzen du, eta badago kode bat erabakitzen duena zer egin GERTAERA bat jazotzen denean.
      3:
        image: notes/flappy03.jpg
        text: 'Adibidez, GERTAERA-KONTROLATZAILE bat eduki zenezake "Sagua klikatuta dagoenean, jo soinu bat" esaten duena '
      4:
        image: notes/flappy04.jpg
        text: Noizbait entzun duzu FlappyBird jokoari buruz zerbait? Gertaera kontrolatzaileak erabiliz, gure FlappyBird bertsio propioa programatzen ikasiko dugu!
      5:
        image: notes/flappy05.jpg
        text: Idatziko duzun kodeak blokeak arrastatu eta askatzea ekartzen du eta honek ordeangailuaren aginduak irudikatzen ditu. Horren azpian, bloketako bakoitzak benetako kodea irudikatzen du.
      6:
        image: notes/flappy06.jpg
        text: 'Lan eremuari begirada bat ematen badiozu, badaude zenbait bloke handi zuretzako beteta daudenak, hauek "gertaera kontrolatzaileak" dira '
      7:
        image: notes/flappy07.jpg
        text: 'Nahi baduzu txoriak HEGATZEA sagua klikatzean, "HEGATU" blokea gertaera kudeatzailea egokiari elkartuz  egin dezakezu, eta orain sagua klikatzen duzun bakoitzean txoriak hegatuko du.'
      8:
        image: notes/flappy08.jpg
        text: Ekintza honen puzle bakoitzean gertaera mota berriak sartuko ditugu lan eremuko bloke berde moduan, eta zuk erabakiko duzu zein diren bloke egokiak gertaera horien erantzun moduan gehitzeko.
      9:
        image: notes/flappy09.jpg
        text: 'Honelako menu zabalgarri bat ikusten duzunean, horrek esan nahi du aukerak aldatu ditzakezula  - flappyk lurra jotzean egiten duen soinua adibidez.'
      10:
        image: notes/flappy10.jpg
        text: Azken jokuan zure gustoko jokua sortu eta zure lagunekin partekatzeko gai izango zara. Ondo pasa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Kaixo, Mark naiz! Ikas dezagun begiztei buruz. Begiztak erabiliz ordenagailu bati edozein ekintza multzo behin eta berriro errepikatzeko esan diezaiokezu, milaka edo milioika aldiz.
      2:
        image: notes/hoc2_2.jpg
        text: Puzle honetan, txerriarengana iristeko txoria 5 espazio aurrera mugiarazi nahi dugu.
      3:
        image: notes/hoc2_3.jpg
        text: '"errepikatu" bloke berria erabili dezakegu gure buruari laguntzeko.'
      4:
        image: notes/hoc2_4.jpg
        text: '5 "mugitu aurrera" bloke arrastatu beharrean...'
      5:
        image: notes/hoc2_5.jpg
        text: '"aurrera mugitu" blokea "errepikatu" blokearen barruan jarri dezakegu eta zenbaki bat idatzi blokean esateko zenbat aldiz errepikatu nahi dugun.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Eta hau garrantzitusa da: "errepikatu" bloke baten barruan agindu bat baino gahiago jarri dezakezu.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Ondo pasa zure "errepikatu" bloke berria erabiliz!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Kaixo, Chris naiz. Miami Heat taldearekin jokatu baino lehen, Georgia Techera joan nintzen Konputazio Zientziak ikastera. Probatu dezagun gure bloke berria, "errepikatu arte" blokea.'
      2:
        image: notes/hoc3_2.jpg
        text: "What if we didn't know how far the bird had to move to get to the pig?"
      3:
        image: notes/hoc3_3.jpg
        text: 'If we put a "move forward" block inside the "repeat until" block, the bird will move forward UNTIL it reaches the pig (or crashes into a wall).'
      4:
        image: notes/hoc3_4.jpg
        text: 'And this is important: just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: |-
          Hi, I'm Bill! Let's learn a new fundamental concept: "If" statements. This is how computers make decisions.
      2:
        image: notes/hoc4_2.jpg
        text: |-
          You use "If" statements yourself everday. Before you go outside each morning, you say IF it's raining outside, I need to wear my jacket.
      3:
        image: notes/hoc4_3.jpg
        text: "We can tell the zombie to check IF there's path to the left, and if he finds a path to the left, we can have him turn in that direction."
      4:
        image: notes/hoc4_4.jpg
        text: |-
          To write the code for this, let's drag out our "if" block and put a "turn left" block inside it.
      5:
        image: notes/hoc4_5.jpg
        text: |-
          Now, if we put a "move forward" block above it and a "repeat" block around everything, each time the zombie moves, he'll check if there's a path to the left and turn. The "repeat" command is critical, to check for a turn at every step.
      6:
        image: notes/hoc4_6.jpg
        text: If statements are really important in computer science. One of the first programs I wrote was a tic-tac-toe game, and there was a If statement that said IF the other person is about to win, block the spot that lets them win.
      7:
        image: notes/hoc4_7.jpg
        text: 'Have fun using the "if" block!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: notes/stage13_2.jpg
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: notes/stage13_3.jpg
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: notes/stage13_4.jpg
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5" function block from functions category.
      5:
        image: notes/stage13_5.jpg
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: notes/stage9_6.jpg
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statement on the top is TRUE.'
      3:
        image: notes/stage9_7.jpg
        text: For example, if the farmer is standing on a pile, she will continue to remove 1 shovelful WHILE there is still a pile beneath her.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: notes/stage11_2.jpg
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: notes/stage11_3.jpg
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: notes/stage11_4.jpg
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: notes/stage15_2.jpg
        text: What if we want to draw a bunch of triangles and have their lengths be different sizes?
      3:
        image: notes/stage15_3.jpg
        text: We could write all that code out by hand or we can use a function with parameters.
      4:
        image: notes/stage15_4.jpg
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: notes/stage15_5.jpg
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: notes/stage15_6.jpg
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: notes/stage15_7.jpg
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: notes/stage15_8.jpg
        text: Now you can use the math block to input different numbers to draw triangles of different sizes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: notes/hoc6_2.jpg
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: notes/hoc6_3.jpg
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: notes/hoc6_4.jpg
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
