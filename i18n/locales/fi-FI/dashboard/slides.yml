fi:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Tervetuloa ensimmäiselle kooditunnille! Sukelletaanpa heti ohjelmoinnin maailmaan.
      2:
        image: notes/hoc1_2.jpg
        text: Käytämme Blocklyä. Se on on visuaalinen ohjelmointikieli, jossa koodia kirjoitetaan vetämällä ja pudottamalla lohkoja.
      3:
        image: notes/hoc1_3.jpg
        text: 'Yleensä koodi kirjoitetaan, mutta Blockly on visuaalinen. Jokainen lohko vastaa riviä "oikeaa" koodia.'
      4:
        image: notes/hoc1_4.jpg
        text: Opit kohta tietotekniikan perusteet. Näitä käsitteitä käytetään kaikkialla aina pienistä sovelluksista Mars-mönkijän ohjaamiseen saakka.
      5:
        image: notes/hoc1_5.jpg
        text: Ohjelma on joukko ohjeita, joita tietokoneesi noudattaa.
      6:
        image: notes/hoc1_6.jpg
        text: Ensimmäisen ohjelmasi tehtävä on ohjata Angry Bird -lintu sokkelon läpi ja osua vihreään possuun.
      7:
        image: notes/hoc1_7.jpg
        text: Vasemmalla on sokkelo, jossa ohjelmasi suoritetaan. Jokaisen pulman ohjeet löytyvät sokkelon alapuolelta.
      8:
        image: notes/hoc1_8.jpg
        text: Keskimmäinen työkalupakki sisältää komentoja Angry Bird -linnulle. Näitä käytetään koodisi rakentamiseen.
      9:
        image: notes/hoc1_9.jpg
        text: Oikealla on työtilasi, johon rakennat ohjelmasi raahamalla lohkoja työkalupakista. Jos haluat poistaa lohkon, vedä se nurkasta löytyvään roskakoriin.
      10:
        image: notes/hoc1_10.jpg
        text: 'Jokainen lohko on ohje. Jos vedät "siirry eteenpäin" -lohkon työtilaasi ja painat "suorita ohjelma" -nappia, lintu liikkuu yhden ruudun sokkelossa.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Jos suoritat ohjelman ja haluat korjata ja yrittää uudelleen, paina "alusta" -nappulaa.'
      13:
        image: notes/hoc1_13.jpg
        text: Ja eikun vain possujen kimppuun!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, olen JR! Kaikki ralliautotiimit tarvitsevat tietojenkäsittelyasiantuntijan voittaakseen. He analysoivat auton tietoja saadakseen sen kulkemaan nopeammin.
      2:
        image: notes/stage5_2.jpg
        text: Näissä pulmissa olet taiteilija, joka piirtää viivaa kulkiessaan.
      3:
        image: notes/stage5_3.jpg
        text: 'Tässä lohkossa lukee "mene eteenpäin 100 kuvapistettä". Kuvapisteet ovat pieniä pisteitä näytölläsi.'
      4:
        image: notes/stage5_4.jpg
        text: 'Tässä lohkossa lukee "käänny oikealle 90 astetta". Se kääntää taiteilijaasi saman verran kuin "käännä"-lohkot sokkelotehtävissä.'
      5:
        image: notes/stage5_5.jpg
        text: Napsauttamalla lohkon päissä olevia nuolia, voit muuttaa sitä määrää, jonka hahmo kulkee tai kääntyy. Leiki nyt hetki näillä lohkoilla tutustuaksesi niihin paremmin.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, olen Paola! Näissä pulmissa olet maanviljelijä, jonka täytyy saada peltonsa täysin tasaiseksi aloittaakseen istutukset.
      2:
        image: notes/stage9_2.jpg
        text: Sinun täytyy auttaa häntä poistamaan kaikki multakasat ja täyttämään kaikki kuopat.
      3:
        image: notes/stage9_3.jpg
        text: Uudet lohkot poistavat yhden lapiollisen multaa kasasta ja täyttävät yhden lapiollisen multaa kuoppaan.
      4:
        image: notes/stage9_4.jpg
        text: Kasat ja kuopat ovat erikokoisia, joten sinun täytyy kertoa maanviljelijälle kuinka monta lapiollista hänen tulisi käyttää.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei olen Katie! Yksi mielenkiintoisimmista asioista tietotekniikassa on, että tietokoneohjelma voi olla vuorovaikutteinen.
      2:
        image: notes/flappy02.jpg
        text: "Any time somebody clicks or taps or types on a computer or phone, that generates an EVENT, and there's some code that decides what to do when an EVENT occurs."
      3:
        image: notes/flappy03.jpg
        text: 'For example, you could have an EVENT-HANDLER that says "when the mouse is clicked, play a sound" '
      4:
        image: notes/flappy04.jpg
        text: "Have you ever heard of the game FlappyBird? By using Event handlers, we're going to learn to program our own custom version of FlappyBird!"
      5:
        image: notes/flappy05.jpg
        text: "The code you'll write involves dragging and dropping blocks that represent commands for the computer. Under the hood, each of these blocks is represented by real code."
      6:
        image: notes/flappy06.jpg
        text: 'Kun tarkastelet työtilaa, huomaat joitain vihreitä lohkoja valmiiksi täytettynä - nämä ovat "tapahtumakäsittelijöitä"'
      7:
        image: notes/flappy07.jpg
        text: 'If you want the bird to FLAP when you CLICK the mouse, you can do that by attaching the "FLAP" block to the appropriate event handler, and now in your game whenever you click the mouse, the bird will flap.'
      8:
        image: notes/flappy08.jpg
        text: "In each puzzle of this activity we'll introduce new types of events as green blocks on the workspace, and you can decide the appropriate blocks to add in response to those events."
      9:
        image: notes/flappy09.jpg
        text: 'Kun näet tälläisen nuolen alaspäin, se tarkoittaa että voit muuttaa asetuksia - kuten esimerkiksi, mikä ääni kuuluu kun flappy osuu maahan.'
      10:
        image: notes/flappy10.jpg
        text: Viimeisessä pulmassa voit luoda oman pelin ja jakaa sen ystäviesi kanssa. Pidä hauskaa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, olen Mark! Opetellaanpa silmukoita. Silmukalla voit ohjata tietokonetta toistamaan mitä vain toimintoa uudelleen ja uudelleen, tuhansia tai jopa miljardeja kertoja.
      2:
        image: notes/hoc2_2.jpg
        text: Tässä pulmassa haluamme liikuttaa lintua 5 ruutua eteenpäin osuaksemme possuun.
      3:
        image: notes/hoc2_3.jpg
        text: 'Voimme käyttää uutta "toista"-lohkoa apunamme.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Sen sijaan että vetäisimme 5 "liiku eteenpäin" -lohkoa...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Voimme laittaa "liiku eteenpäin" -lohkon "toista"-lohkon sisään ja kirjoittaa luvun lohkoon kertoaksemme sille, kuinka monta kertaa pitää toistaa.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Ja tämä on tärkeää: voit laittaa enemmän kuin yhden komennon "toista"-lohkoon.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Pidä hauskaa uuden "toista"-lohkon kanssa!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hei, olen Chris. Ennen kuin liityin Miami Heatiin, opiskelin tietojenkäsittelyä Georgian teknillisessä oppilaitoksessa. Kokeillaanpa uutta "toista kunnes" -lohkoa.'
      2:
        image: notes/hoc3_2.jpg
        text: Mitä jos emme tietäisi, kuinka pitkälle linnun pitäisi liikkua saavuttaakseen possun?
      3:
        image: notes/hoc3_3.jpg
        text: 'Jos laitamme "liiku eteenpäin" -lohkon "toista kunnes" -lohkon sisälle, lintu liikkuu eteenpäin KUNNES se saavuttaa possun (tai törmää seinään).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Ja tämä on tärkeää: aivan kuin ennenkin, voimme laittaa monta lohkoa yhteen "toista kunnes" -lohkoon, niin että ne kaikki toistuvat.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, olen Bill! Opetellaanpa uusi keskeinen käsite: "jos"-lause. Tämän avulla tietokoneet tekevät päätöksiä.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Käytät "Jos"-lausetta itse joka päivä. Esimerkiksi, ennen kuin lähdet ulos, sanot itsellesi: "jos ulkona sataa, tarvitsen sadetakkini."'
      3:
        image: notes/hoc4_3.jpg
        text: Voimme laittaa zombit tarkistamaan, JOS vasemmalle on reitti ja kun zombie tulee sellaiseen kohtaan, voimme laittaa sen kääntymään sinne.
      4:
        image: notes/hoc4_4.jpg
        text: 'Raahataan siis yksi "Jos"-lohko ja sen sisään "käänny vasemmalle" -lohko.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Nyt, jos laitamme "siirry eteenpäin" -lohkon sen yläpuolelle ja "toista"-lohkon sen ympärille, joka kerta kun zombie liikkuu, se tarkistaa onko vasemmalle reittiä ja kääntyy, JOS on. "Toista"-lohko on hyvin tärkeä, jotta tarkistus tehdään joka askeleella.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Jos-lauseet ovat hyvin tärkeitä tietojenkäsittelyssä. Yksi ensimmäisistä ohjelmista, jonka kirjoitin, oli peli nimeltä ristinolla. Siinä oli jos-lause, joka sanoi "JOS toinen henkilö on voittamassa, estä se siirto, jolla hän voittaisi."'
      7:
        image: notes/hoc4_7.jpg
        text: 'Pidä hauskaa "Jos"-lohkolla!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, olen Brina, insinööri Instagramilla. Funktio on joukko koodirivejä, joita haluat käyttää uudelleen ja uudelleen. Niinpä sen sijaan, että kirjoittaisit kaiken tuon koodin joka kerta, voit käyttää yhtä lohkoa.
      2:
        image: notes/stage13_2.jpg
        text: Nyt opettelemme, miten määritellään funktioita. Funktion määritelmän nurkassa on tähti. Funktion nimi kirjoitetaan ylimmälle riville.
      3:
        image: notes/stage13_3.jpg
        text: 'Määrittelyn sisällä olevat lohkot kertovat, mitä se tekee. Tämän funktion nimi on "täytä 5", ja se koostuu "toista"-lohkosta ja "täytä"-lohkosta.'
      4:
        image: notes/stage13_4.jpg
        text: 'Määritelmät ovat työtilassa, mutta maanviljelijä ei suorita funktiota ennen kuin raahaamme "täytä 5" -funktiolohkon funktiot-valikosta.'
      5:
        image: notes/stage13_5.jpg
        text: 'Laitetaanpa funktiot käytöön! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, olen Makinde! Opetellaanpa "niin kauan kuin" -lohkon toimintaa. '
      2:
        image: notes/stage9_6.jpg
        text: '"Niin kauan kuin" -lohko toistaa mitä tahansa asetat sen sisälle, niin kauan kuin ylhäällä oleva ehto pitää paikkansa eli on TOSI.'
      3:
        image: notes/stage9_7.jpg
        text: Esimerkiksi, jos maanviljelijä seisoo kasan päällä, hän jatkaa yhden lapiollisen poistamista niin kauan kuin hänen allaan on kasaa jäljellä.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, minä olen Trina ja työskentelen Pixarilla. Olen tehnyt töitä liutaan elokuvia, kuten Shrekiin.
      2:
        image: notes/stage11_2.jpg
        text: 'Tämä on uusi "laskuri"-silmukkamme. Se suorittaa komentoja yhä uudelleen ja voit muuttaa silmukan toimintaa hieman jokaisella kerralla.'
      3:
        image: notes/stage11_3.jpg
        text: 'Tässä esimerkissä "laskuri" -silmukkamme sanoo "laske laskurilla  50:stä 90:een 10 välein" ja sen sisällä meillä on "piirrä neliö" -lohko. Raahaa "laskuri" -lohko "Muuttujat"-valikosta "pituus"-kohtaan.'
      4:
        image: notes/stage11_4.jpg
        text: Tämä tarkoittaa, että taiteilijamme aikoo piirtää neliön, jonka sivujen pituus on 50 kuvapistettä, lisätä tähän 10 ja piirtää neliön, jonka sivujen pituus on 60 kuvapistettä. Sitten hän uudelleen ja uudelleen lisää 10 kuvapistettä ja piirtää neliön, kunnes neliön sivun pituus on 90. Lopulta meillä on neliöt, joiden koot ovat 50, 60, 70, 80 ja 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, olen Janete, ja olen insinööri Zyngalla.
      2:
        image: notes/stage15_2.jpg
        text: Mitä jos haluamme piirtää joukon kolmioita, jotka ovat kaikki eri pituisia?
      3:
        image: notes/stage15_3.jpg
        text: Voisimme kirjoittaa kaiken tuon koodin käsin, tai sitten voimme käyttää funktioita, joille annetaan parametreja.
      4:
        image: notes/stage15_4.jpg
        text: 'Tehdäksesi tämän, napsauta sinistä tähteä "piirrä kolmio" -funktion määrittelyssä. Sitten raahaa "syötä nimi" "syöte"-lohkoon.'
      5:
        image: notes/stage15_5.jpg
        text: 'Jos sitten kirjoitat "pituus" kohtaan, jossa lukee "x" ja painat rivinvaihtonäppäintä ("Enter"), olet määrittänyt pituussyötteen funktiollesi.'
      6:
        image: notes/stage15_6.jpg
        text: 'Napsauta sitten tähteä. Seuraavaksi avaa muuttujat-valikko ja raahaa "pituus"-lohko "siirry eteenpäin" -lohkoon funktiomäärityksessäsi. Rahaa myös pois vanha numero-lohko.'
      7:
        image: notes/stage15_7.jpg
        text: 'Kun haluat käyttää parametrillista funktiota, avaa Funktiot-valikko ja raahaa sieltä "piirrä kolmio arvolla pituus" -funktio.'
      8:
        image: notes/stage15_8.jpg
        text: 'Nyt voit käyttää "matematiikka"-lohkoa ja syöttää eri numeroita piirtääksesi eri kokoisia kolmioita.'
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Onneksi olkoon! Viime pulman ratkaisussa kirjoitit koodin, joka voi ohjata minkä tahansa robotin läpi haarautumattomasta labyrintistä tai kuinka tahansa pitkästä tunnelista, oli kulkijasi sitten zombi, lintu, Mars-mönkijä tai jopa itsestään ajava auto.
      2:
        image: notes/hoc6_2.jpg
        text: Käyttämäsi peruskäsitteet esiintyvät kaikissa ohjelmissa ja mobiilisovelluksissa joita koskaan tulet käyttämään. Opimme toistosilmukat, toista kunnes -lauseet, jos-lauseet ja jos-muuten-lauseet.
      3:
        image: notes/hoc6_3.jpg
        text: Jos pidit ensimmäisestä kooditunnistasi, vieraile code.org-sivustolla jatkaaksesi tietotekniikan opintojasi! Kun suoritat 20 tunnin kurssimme, opit ohjelmoinnin perusteet ja voit ryhtyä opettelemaan miten tehdään sovelluksia puhelimille, robottien ohjeita, pelejä tai mitä tahansa.
      4:
        image: notes/hoc6_4.jpg
        text: 'Tekniikkaa muuttaa kaikkea mitä teemme, eikä sillä ole väliä, oletko nuori tai vanha: ohjelmointi on hauskaa, se on luovaa, ja kuka tahansa voi oppia!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Esityksen muistiinpanot tulossa pian!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
