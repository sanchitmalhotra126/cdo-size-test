it:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Benvenuto alla tua prima Ora del Codice! Tuffati subito in un primo assaggio di programmazione.
      2:
        image: notes/hoc1_2.jpg
        text: 'Useremo "Blockly", un linguaggio visuale di programmazione in cui usi blocchi colorati per scrivere programmi.'
      3:
        image: notes/hoc1_3.jpg
        text: 'Gran parte del codice reale viene digitato, mentre Blockly è un linguaggio visuale. Ogni "blocco" corrisponde ad una riga di codice reale.'
      4:
        image: notes/hoc1_4.jpg
        text: "Imparerai i fondamenti dell'informatica: concetti che sono utilizzati dovunque, dalla creazione di app per gli smart-phone al controllo del robot che esplora il pianeta Marte."
      5:
        image: notes/hoc1_5.jpg
        text: Un programma è un insieme di istruzioni che il tuo computer deve eseguire.
      6:
        image: notes/hoc1_6.jpg
        text: |-
          L'obiettivo del tuo primo programma è quello di far attraversare un labirinto ad un uccello di "Angry Birds" e fargli catturare un maiale verde.
      7:
        image: notes/hoc1_7.jpg
        text: "Sul lato sinistro viene visualizzato il labirinto attraverso cui il tuo programma deve guidare l'uccello. Le spiegazioni per ciascun esercizio sono scritte al di sotto del labirinto."
      8:
        image: notes/hoc1_8.jpg
        text: 'La "cassetta degli attrezzi" visualizzata nel mezzo contiene le istruzioni per guidare un uccello di Angry Birds. Le devi usare per costruire il tuo programma.'
      9:
        image: notes/hoc1_9.jpg
        text: "Sulla destra c'è la tua area di lavoro, nella quale devi spostare i blocchi, prendendoli dalla cassetta degli attrezzi, ed unirli in modo da costruire il tuo programma. Per eliminare un blocco, spostalo nel cestino nell'angolo."
      10:
        image: notes/hoc1_10.jpg
        text: |-
          Ogni blocco è un'istruzione. Se sposti un blocco "vai avanti" (move forward) nell'area di lavoro e premi "Esegui" (Run Program), l'uccello si sposta di una casella in avanti nel labirinto.
      11:
        image: notes/hoc1_11.jpg
        text: "Per fare più di un'azione, sposta più blocchi nell'area di lavoro e attaccali uno sotto l'altro. L'uccello eseguirà le istruzioni associate ai blocchi procedendo dall'alto verso il basso."
      12:
        image: notes/hoc1_12.jpg
        text: 'Se dopo aver eseguito un programma vuoi cambiarlo ed eseguirlo di nuovo, premi "Riprova".'
      13:
        image: notes/hoc1_13.jpg
        text: Andiamo a prendere quei maiali!
    artist_intro:
      1:
        image: note/stadio5_1.jpg
        text: "Ciao, sono JR! Ogni squadra di corse automobilistiche ha bisogno degli informatici per vincere. Analizzano i dati dell'auto per farla andare più velocemente."
      2:
        image: note/stadio5_2.jpg
        text: In questi esercizi, sarai un artista che disegna una linea dietro di sé dovunque va.
      3:
        image: note/stadio5_3.jpg
        text: 'Questo blocco dice "vai avanti di 100 pixel" (move forward by 100 pixels) . I pixel sono i minuscoli puntini del tuo schermo.'
      4:
        image: note/stadio5_4.jpg
        text: |-
          Questo blocco dice "gira a destra di 90 gradi" (turn right by 90 degrees). Questo fa girare il tuo artista della stessa quantità, come fa il blocco "gira" nell'esercizio del labirinto.
      5:
        image: note/stadio5_5.jpg
        text: "Se in questi blocchi clicchi sui numeri puoi cambiare di quanto l'artista si sposta in avanti o gira. Fai qualche prova per prendere confidenza con questi nuovi blocchi."
    farmer_intro:
      1:
        image: note/stadio9_1.jpg
        text: Ciao, sono Paola! In questi esercizi devi aiutare una contadina che deve completamente livellare il suo terreno per iniziare a seminarlo.
      2:
        image: note/stadio9_2.jpg
        text: Devi aiutarla a rimuovere tutti i mucchi di terra e a riempire tutte le buche.
      3:
        image: note/stadio9_3.jpg
        text: 'Il nuovo blocco "rimuovi 1" (remove 1) toglie 1 palata di terra da un mucchio. Il nuovo blocco "riempi 1" (fill 1) mette 1 palata di terra dentro una buca.'
      4:
        image: note/stadio9_4.jpg
        text: I mucchi e le buche sono di dimensioni differenti, quindi devi dire alla contadina quante palate deve utilizzare.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: "Ciao, io sono Katie! Una delle cose più eccitanti nell'informatica è che un programma per calcolatore può essere interattivo."
      2:
        image: notes/flappy02.jpg
        text: "Ogni volta che qualcuno fa clic o tocca o preme un tasto su un calcolatore o un telefono, questo genera un EVENTO, e c'è del codice che decide cosa fare quando si verifica un EVENTO."
      3:
        image: notes/flappy03.jpg
        text: 'Ad esempio, si potrebbe avere un GESTORE DI EVENTI che dice "quando il mouse viene cliccato, riproduci un suono" '
      4:
        image: notes/flappy04.jpg
        text: Hai mai sentito parlare del gioco FlappyBird? Tramite i gestori di eventi, imparerai a programmare la tua versione personalizzata di FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Scriverai il codice unendo i blocchi colorati che rappresentano i comandi per il calcolatore. Ognuno di questi blocchi rappresenta del codice vero e proprio.
      6:
        image: notes/flappy06.jpg
        text: |-
          Se dai un'occhiata all'area di lavoro, ci sono alcuni blocchi verdi che sono stati riempiti per te: questi sono i "gestori di eventi" 
      7:
        image: notes/flappy07.jpg
        text: |-
          Se desideri che l'uccello SBATTA LE ALI quando tu CLICCHI il mouse, puoi farlo attaccando il blocco "sbatti le ali" (flap) al gestore di eventi appropriato, ed adesso nel tuo gioco ogni volta che si clicca il mouse, l'uccello sbatterà le ali.
      8:
        image: notes/flappy08.jpg
        text: "In ogni esercizio di questa attività introduciamo nuovi tipi di eventi, rappresentati come blocchi verdi nell'area di lavoro, e tu puoi decidere i blocchi appropriati da aggiungere in risposta a questi eventi."
      9:
        image: notes/flappy09.jpg
        text: "Quando vedi un triangolino con la punta in basso come qui, significa che è possibile modificare le impostazioni - come il suono da riprodurre quando l'uccello precipita a terra."
      10:
        image: notes/flappy10.jpg
        text: "Nell'esercizio finale sarai in grado di creare il tuo gioco e condividerlo con i tuoi amici. Buon divertimento!"
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Ciao, sono Mark! Impariamo ad usare i blocchi di ripetizione. Con questi puoi dire a un calcolatore di ripetere qualsiasi serie di azioni più e più volte, migliaia o addirittura miliardi di volte.
      2:
        image: notes/hoc2_2.jpg
        text: "In questo esercizio, vogliamo fare in modo che l'uccello si sposti di 5 caselle in avanti per raggiungere il maiale."
      3:
        image: notes/hoc2_3.jpg
        text: 'Puoi usare il blocco di ripetizione "ripeti ... volte" (repeat ... times) per aiutarci.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Invece di usare 5 blocchi "vai avanti" (move forward) ...'
      5:
        image: notes/hoc2_5.jpg
        text: |-
          Puoi mettere il blocco "vai avanti" all'interno del blocco di ripetizione "ripeti ... volte" e scrivere un numero nel blocco "ripeti ... volte" per stabilire quante ripetizioni fare.
      6:
        image: notes/hoc2_6.jpg
        text: |-
          Fai attenzione: è possibile inserire più di un blocco all'interno di un blocco di ripetizione "ripeti ... volte" .
      7:
        image: notes/hoc2_7.jpg
        text: 'Divertiti ad usare il blocco di ripetizione "ripeti ... volte" !'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Ciao, sono Chris. Prima di entrare nel Miami Heat, ho studiato informatica al Georgia Tech. Proviamo il nuovo blocco di ripetizione, il blocco "ripeti fino a che" (repeat until).'
      2:
        image: notes/hoc3_2.jpg
        text: "Cosa succede se non sappiamo di quanto l'uccello deve spostarsi in avanti per raggiungere il maiale?"
      3:
        image: notes/hoc3_3.jpg
        text: |-
          Se mettiamo un blocco "vai avanti" (move forward) all'interno del blocco di ripetizione "ripeti fino a che" (repeat until), l'uccello si sposta in avanti FINO A CHE raggiunge il maiale (o sbatte contro un muro).
      4:
        image: notes/hoc3_4.jpg
        text: |-
          Fai attenzione: proprio come prima, possiamo mettere più blocchi all'interno del blocco di ripetizione "ripeti fino a che", ed essi verranno tutti ripetuti.
    if:
      1:
        image: notes/hoc4_1.jpg
        text: |-
          Ciao, sono Bill! Impariamo un nuovo concetto fondamentale: l'istruzione "se". I calcolatori prendono le decisioni utilizzando proprio questa istruzione.
      2:
        image: notes/hoc4_2.jpg
        text: |-
          Tu stesso usi le istruzioni "se" ogni giorno. Prima di uscire di casa al mattino ti dici: SE (IF) fuori piove ALLORA (THEN) devo prendere l'impermeabile.
      3:
        image: notes/hoc4_3.jpg
        text: |-
          Possiamo dire allo zombie di verificare "se c'è strada a sinistra" (if path to the left), e se trova strada a sinistra, possiamo farlo girare in quella direzione.
      4:
        image: notes/hoc4_4.jpg
        text: |-
          Per scrivere il codice per fare questo, sposta nell'area di lavoro un blocco "se c'è strada a sinistra" e metti un blocco "gira a sinistra" (turn left) all'interno di esso.
      5:
        image: notes/hoc4_5.jpg
        text: |-
          Ora, se mettiamo un blocco "vai avanti" (move forward) al di sopra di esso e un blocco di ripetizione "ripeti fino a che" (repeat until) intorno a tutto, ogni volta che lo zombie si muove controllerà se c'è strada a sinistra e in caso positivo girerà. L'istruzione "ripeti fino a che" è fondamentale per effettuare il controllo ad ogni passo.
      6:
        image: notes/hoc4_6.jpg
        text: |-
          Le istruzioni "se" sono davvero importanti nell'informatica. Uno dei primi programmi che ho scritto era un gioco di tris, e c'era un'istruzione "se" che diceva "se l'altra persona sta per vincere, blocca la casella che le consente di vincere".
      7:
        image: notes/hoc4_7.jpg
        text: |-
          Divertiti utilizzando l'istruzione "se"!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Ciao, mi chiamo Saloni. Uso l'informatica per aiutare a risolvere problemi nella sanità e nella medicina. Impariamo ad usare il blocco "se-altrimenti" (if-else). Assomiglia al blocco "se", ma ha una parte supplementare alla fine che dice "altrimenti" (else).
      2:
        image: notes/hoc5_2.jpg
        text: |-
          Se metti un blocco "vai avanti" (move forward) dove dice "fai" (do) e un blocco "gira a sinistra" (turn left) dove dice "altrimenti" (else) questo significa che lo zombie sceglierà tra 2 alternative. SE c'è strada in avanti, lo zombie si sposterà in avanti e ALTRIMENTI (cioè se non c'è strada in avanti), lo zombie svolterà a sinistra.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Proprio come con il blocco "se", quando mettiamo un blocco "se-altrimenti" all'interno un blocco di ripetizione, lo zombie continuerà a muoversi mentre il blocco "se-altrimenti" continuerà a controllare se esiste un posto per girare.
      4:
        image: notes/hoc5_4.jpg
        text: Ora, rimanda quegli zombie là da dove sono venuti!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'Un blocco "se-altrimenti" (if-else) decide tra due possibilità. Vediamo come possiamo utilizzare un blocco "se-altrimenti" con il nostro amico Scrat lo scoiattolo.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          Questo blocco assomiglia al blocco "se", ma ha una parte supplementare alla fine che dice "altrimenti" (else). Se metti un blocco "vai avanti" (move forward) dove dice "fai" (do) e un blocco "gira a sinistra" (turn left) dove dice "altrimenti", questo significa che lo scoiattolo Scrat andrà avanti SE c'è strada in avanti. ALTRIMENTI (cioè se non c'è strada in avanti), Scrat svolterà a sinistra.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          Si tratta di prendere una decisione e compiere una delle due azioni in base a tale decisione. E proprio come i  blocchi "se", si possono mettere i blocchi "se-altrimenti" all'interno di blocchi "ripeti".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Ora aiutiamo lo scoiattolo Scrat a prendere quella ghianda!
    function:
      1:
        image: note/stadio13_1.jpg
        text: "Ciao, sono Brina, un'ingegnera di Instagram. Una funzione è fatta da alcune righe di codice che vuoi utilizzare più e più volte. Se hai definito una funzione, invece di scrivere ogni volta le stesse righe puoi usare un unico blocco."
      2:
        image: note/stadio13_2.jpg
        text: "Adesso impariamo come definire le funzioni. Le definizioni di funzioni hanno una stella nell'angolo. Il nome della funzione è scritto sulla linea in alto."
      3:
        image: note/stadio13_3.jpg
        text: |-
          I blocchi che vanno all'interno della definizione ci dicono che cosa viene eseguito. Questa definizione di funzione è chiamata "riempi 5" (fill 5) e si compone di un blocco di ripetizione "ripeti ... volte" (repeat ... times) e di un blocco "riempi 1" (fill 1).
      4:
        image: note/stadio13_4.jpg
        text: |-
          La definizione si trova nell'area di lavoro, ma per far eseguire la funzione alla contadina devi prendere  il blocco funzione "riempi 5" dalla categoria "Funzioni" ed unirlo al blocco "vai avanti" (move forward).
      5:
        image: note/stadio13_5.jpg
        text: 'Mettiamo il "divertimento" in "FUNZIONE!" '
    loop_while:
      1:
        image: note/stadio9_5.jpg
        text: 'Ciao, sono Makinde! Impariamo il blocco di ripetizione "mentre" '
      2:
        image: note/stadio9_6.jpg
        text: |-
          Il blocco "mentre" (while) farà qualunque cosa si trova all'interno di esso PER TUTTO IL TEMPO IN CUI la condizione scritta accanto a "mentre" è VERA.
      3:
        image: Note/stadio9_7.jpg
        text: |-
          In questo esempio, se la contadina è sopra un mucchio, il blocco "mentre" gli farà rimuovere 1 palata di terra (remove 1) PER TUTTO IL TEMPO IN CUI c'è ancora un mucchio (while there is a pile) sotto di lei.
    loop_for:
      1:
        image: note/stadio11_1.jpg
        text: Ciao, sono Trina, e lavoro per Pixar. Ho lavorato in molti film, tra cui Shrek.
      2:
        image: note/stadio11_2.jpg
        text: |-
          Questo è il nuovo blocco di ripetizione "ripeti con contatore" (count with counter). Si usa per eseguire alcune azioni più e più volte facendo in modo che ogni volta le azioni cambino un po'.
      3:
        image: note/stadio11_3.jpg
        text: |-
          In questo esempio, il blocco "ripeti con contatore" dice "ripeti con il contatore che va da 50 a 90 aumentando di 10 per volta" e all'interno di esso abbiamo il blocco "disegna un quadrato" (draw a a square). Se prendi il blocco "contatore" (counter) dalla categoria "Variabili" (Variables) e lo inserisci al fianco di "lunghezza" (length) ...
      4:
        image: note/stadio11_4.jpg
        text: ...questo significa che il nostro artista inizia disegnando un quadrato con lati lunghi 50 pixel. Poi aggiungerà 10 e disegnerà un quadrato con lati lunghi 60 pixel. Poi continuerà ad aggiungere 10 e disegnare quadrati con lati sempre più lunghi fino a quando raggiungerà 90. Così avremo quadrati di 50, 60, 70, 80 e 90 pixel.
    parameters:
      1:
        image: note/stadio15_1.jpg
        text: "Ciao, sono Janete, e sono un'ingegnera di Zynga."
      2:
        image: note/stadio15_2.jpg
        text: "Come fai per disegnare un po' di triangoli con lati di differenti lunghezze?"
      3:
        image: note/stadi15_3.jpg
        text: Puoi scrivere esplicitamente tutto il codice o puoi utilizzare una funzione con parametri.
      4:
        image: note/stadio15_4.jpg
        text: 'Per fare ciò, clicca la stella bianca su sfondo blu nella definizione della funzione "disegna un triangolo" (draw a triangle). Poi sposta il blocco "nome del parametro" (input name) nel blocco "parametri" (inputs).'
      5:
        image: note/stadio15_5.jpg
        text: |-
          Poi se scrivi "lunghezza" (length) nel punto dove c'è la "X" e premi "Invio" creerai il parametro "lunghezza" per la tua funzione.
      6:
        image: note/stadio15_6.jpg
        text: 'Poi clicca sulla stella per terminare la definizione del parametro. Ora, clicca sulla categoria "Variabili" (Variables) e sposta il blocco "lunghezza" nel blocco "vai avanti" (move forward) della tua definizione di funzione. E trascina via il vecchio blocco col numero.'
      7:
        image: note/stadio15_7.jpg
        text: |-
          Per usare la tua funzione con parametri, clicca sulla categoria "Funzioni" (Functions) e sposta la tua funzione "disegna un triangolo di lunghezza" nell'area di lavoro.
      8:
        image: note/stadio15_8.jpg
        text: 'Ora puoi usare i blocchi nella categoria "Matematica" (Math) per inserire numeri diversi e disegnare triangoli di dimensioni diverse.'
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Complimenti! Con l'ultimo esercizio che hai risolto, hai appena scritto il codice che dice a QUALUNQUE robot come trovare la sua strada attraverso un labirinto senza ramificazioni o attraverso un tunnel di qualsiasi lunghezza, sia che si tratti di uno zombie, di un uccello, di un robot che esplora il pianeta Marte o anche una macchina che si guida da sola."
      2:
        image: notes/hoc6_2.jpg
        text: 'I concetti di base che hai usato sono al centro di ogni programma o applicazione che scriverai.  Hai imparato le istruzioni di ripetizione "ripeti" e "ripeti fino a che", e le istruzioni "se" e "se-altrimenti".'
      3:
        image: notes/hoc6_3.jpg
        text: "Se ti è piaciuta la tua prima Ora del Codice, visita code.org per continuare la tua formazione sull'informatica! Dopo che avrai completato il nostro corso in 20 lezioni, avrai imparato i concetti base della programmazione e potrai iniziare ad imparare come scrivere applicazioni per smart-phone, programmi per robot, giochi, e molto altro."
      4:
        image: notes/hoc6_4.jpg
        text: 'La tecnologia sta cambiando tutto ciò che facciamo e non importa se sei giovane o anziano: la programmazione è divertente, è creativa, e chiunque può impararla!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Le note sono in corso di preparazione!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Ciao, mi chiamo Lyndsey. Faccio la modella, recito e ... scrivo le mie app. Usiamo la programmazione per unirci a Anna ed Elsa mentre esplorano la magia e la bellezza del ghiaccio.
      2:
        image: notes/frozen1_2.jpg
        text: Potrai creare fiocchi di neve e trame di ghiaccio mentre pattini e realizzare un meraviglioso paesaggio invernale da condividere con i tuoi amici.
      3:
        image: notes/frozen1_3.jpg
        text: 'Nella prossima ora, imparerai le basi della programmazione. I programmi tradizionali sono di solito del testo detto "codice".  Tu invece scriverai programmi con Blockly, che usa blocchi colorati. I blocchi vengono uniti per scrivere programmi. Anche gli studenti universitari imparano le basi della programmazione in questo modo. Anche se usi i blocchi, in realtà stai sempre scrivendo del codice.'
      4:
        image: notes/frozen1_4.jpg
        text: 'Un programma è un insieme di istruzioni che dice al computer cosa fare. Adesso costruiamo un programma, cioè scriviamo del "codice", che aiuta Elsa a disegnare una semplice linea. Più avanti lo useremo per creare figure più complesse.'
      5:
        image: notes/frozen1_5.jpg
        text: "Lo schermo è diviso in tre parti principali. A sinistra, c'è la superficie di ghiaccio dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto la superficie di ghiaccio."
      6:
        image: notes/frozen1_6.jpg
        text: |-
          Questa zona centrale è la "cassetta degli attrezzi"; ognuno di questi blocchi corrisponde  ad un'azione che Elsa e Anna possono compiere.
      7:
        image: notes/frozen1_7.jpg
        text: 'Lo spazio bianco sulla destra si chiama "area di lavoro", e qui costruisci il tuo programma. Per spostarti sulla superficie di ghiaccio, usa il blocco "vai avanti".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Qui, il blocco "vai avanti" dice "vai avanti di 100 pixel" (move forward by 100 pixels). Quando clicco su "Esegui" che cosa succede? Elsa si sposta in avanti sullo schermo di 100 pixel! I pixel sono i minuscoli puntini sullo schermo del tuo computer.'
      9:
        image: notes/frozen1_9.jpg
        text: |-
          L'altro blocco che c'è in questo esercizio dice "gira a destra di 90 gradi". Quando usi questo blocco "gira a destra" Elsa gira a destra. Puoi fare dei tentativi per capire di quanto far girare Elsa. L'angolo è misurato rispetto al percorso davanti ad Elsa. Quindi, questo è un giro di 90 gradi. E questo è un giro di 120 gradi.
      10:
        image: notes/frozen1_10.jpg
        text: Ricorda, è possibile modificare il numero dei pixel e dei gradi cliccando sui triangolini con la punta verso il basso accanto a loro.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Ciao, sono Paola! I computer sono davvero bravi nel ripetere le cose. Tu puoi contare sino a 10, 20 o 100. Ma un computer può contare fino a un miliardo o a mille miliardi. Non si annoia e ci mette solo pochi secondi. Che si tratti di contare, o disegnare, o di fare qualsiasi cosa - i computer possono ripeterlo centinaia o persino miliardi di volte.'
      2:
        image: notes/frozen2_2.jpg
        text: 'Nella programmazione, questo si chiama ciclo (loop). Un ciclo permette di ripetere le istruzioni più e più volte. Nel prossimo esercizio il tuo obiettivo è quello di aiutare Anna a creare un quadrato usando il blocco "Ripeti".'
      3:
        image: notes/frozen2_3.jpg
        text: |-
          Tutti i blocchi di codice che inserisci all'interno del blocco "ripeti" (repeat) vengono ripetuti in sequenza, tutte le volte che vuoi.
      4:
        image: notes/frozen2_4.jpg
        text: |-
          Per disegnare un quadrato, puoi usare i blocchi "vai avanti" (move forward) e "gira a destra" (turn right) per 4 volte. Ma il modo più semplice è quello di dire una volta sola al computer "vai avanti" e "gira a destra di 90 gradi" e poi dirgli di ripetere queste due azioni per 4 volte. Per farlo, è necessario mettere i blocchi "vai avanti" e "gira a destra" all'interno del blocco "ripeti".
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Ricorda che puoi sostituire il numero nel blocco "ripeti" con qualunque altro numero. In questo modo tutte le istruzioni all'interno del blocco verranno ripetute per il numero di volte che hai impostato.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "Ciao, sono Chris Bosh. Sono un giocatore di basket professionista. Ho programmato quando ero all'università."
      2:
        image: notes/frozen3_2.jpg
        text: Una dei meccanismi più importanti in informatica è la definizione di nuovi comandi. La maggior parte dei linguaggi di programmazione hanno solo circa 100 parole o comandi. Ed è davvero arte e magia la possibilità di definire le tue nuove parole mediante i blocchi già esistenti.
      3:
        image: notes/frozen3_3.jpg
        text: |-
          Una volta che hai insegnato ad un computer come fare un'azione utilizzando una certa sequenza di comandi, puoi dare un tuo nome a questa azione così che sia facile ripeterlo nuovamente. Quando definisci un tuo comando e gli dai un nome, hai realizzato una "funzione".
      4:
        image: notes/frozen3_4.jpg
        text: "Ciao, sono Jess. Quando programmi con i blocchi utilizzi le funzioni quando c'è un insieme di azioni che vuoi usare più volte. Ad esempio, hai scritto il codice per creare un quadrato."
      5:
        image: notes/frozen3_5.jpg
        text: 'Puoi definire questo codice come una funzione chiamata "crea un quadrato" (create a square).'
      6:
        image: notes/frozen3_6.jpg
        text: Ora hai un nuovo blocco che puoi usare più volte per creare più quadrati.
      7:
        image: notes/frozen3_7.jpg
        text: Molte forme semplici possono essere usate per creare figure più complesse. Nel prossimo esercizio il codice che hai appena scritto per creare un cerchio è disponibile come una nuova funzione (create a circle) che può disegnare cerchi di diverse dimensioni. Puoi usarla per aiutare Elsa a creare delle belle figure complesse sulla neve?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "Finora hai realizzato un'animazione o una storia che fanno sempre le stesse cose ogni volta che le avvii. Ora è possibile realizzare un gioco interattivo con cui puoi veramente giocare."
      2:
        image: notes/playlab_2.png
        text: |-
          C'è il blocco "quando si preme la freccia ..." ('when ... arrow') e il blocco "sposta personaggio" ('move ...'). Puoi usare insieme questi due blocchi per far muovere i personaggi con i tasti freccia.
      3:
        image: notes/playlab_3.png
        text: "E ci sono alcuni blocchi che fanno delle cose quando i personaggi si scontrano o si clicca su di essi. Dagli un'occhiata e buon divertimento!"
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Creiamo giochi usando il Laboratorio. I giochi migliori hanno una storia ed ogni storia ha i suoi personaggi. Impariamo a far sì che i nostri personaggi, quali streghe, alieni e animali, parlino, si muovano ed interagiscano tra loro. Alla fine di questa lezione, saprai realizzare un gioco a partire da zero e condividerlo con i tuoi amici.
      2:
        image: notes/playlab_intro_2.png
        text: "Lo schermo è suddiviso in tre parti principali. Sulla sinistra c'è lo spazio del gioco dove viene eseguito il programma. Le spiegazioni per ogni esercizio sono scritte qui sotto."
      3:
        image: notes/playlab_intro_3.png
        text: 'La zona centrale è la "cassetta degli attrezzi". Ognuno di questi blocchi è un pezzo di codice. Lo spazio bianco sulla destra si chiama "area di lavoro" e qui costruisci il tuo programma.'
      4:
        image: notes/playlab_intro_4.png
        text: |-
          Per cominciare, è necessario collegare i blocchi al blocco arancione 'quando si clicca su "Esegui" '. È possibile collegare più blocchi insieme trascinandoli fino a che non vedrai formarsi la linea gialla di contorno e non si attaccheranno tra loro.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In questo primo esercizio il personaggio è un pinguino. Fagli dire "Ciao!" trascinando il blocco "pronuncia" dalla cassetta degli attrezzi, collegandolo al blocco 'quando si clicca su "Esegui" ' e scrivendo al suo interno "Ciao!". Puoi anche fare muovere il pinguino utilizzando i blocchi "sposta a destra" e "sposta a sinistra". Una volta che i blocchi sono stati posizionati, clicca il pulsante "Esegui" per vedere quello che hai programmato.
      6:
        image: notes/playlab_intro_6.png
        text: "Inizia a lavorarci su e alla fine sarai in grado di creare il tuo gioco con tanti tipi di giocatori che possono interagire, andare in giro felici o tristi, guadagnare punti, lanciare palle di fuoco o perfino farsi scomparire l'un l'altro. Dipende tutto da te e dal gioco che vuoi creare."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Adesso impari un meccanismo che tutti i programmatori di giochi usano ogni giorno. Parliamo degli eventi. Un evento dice al programma quando succede qualcosa. Quando quella cosa accade il programma svolge una azione.
      2:
        image: notes/playlab_events_2.png
        text: "Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo sullo schermo."
      3:
        image: notes/playlab_events_3.png
        text: |-
          In questo esercizio il robot spaziale saluta i terrestri quando un giocatore lo clicca. Usa il blocco "quando si clicca sul personaggio" ('when actor clicked') attaccandoci sotto un blocco "pronuncia" ('say'). Quando il giocatore clicca sul robot spaziale, tutto ciò che è attaccato al blocco "quando si clicca sul personaggio" viene eseguito. Cosa dice il tuo robot?
      4:
        image: notes/playlab_events_4.png
        text: |-
          Ci sono anche i blocchi  "quando si preme la freccia ..." ('when ... arrow'). Se gli colleghi i blocchi "sposta il personaggio ..." ('move ...'), puoi iniziare a muovere gli attori in su, in giù, a sinistra o a destra. Passo dopo passo, il tuo  gioco diventa sempre più interattivo.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: |-
          Questo è il blocco "ripeti per sempre". Qualsiasi istruzione all'interno di questo blocco verrà ripetuta in continuazione durante il gioco.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          Se vogliamo che un personaggio faccia qualcosa in continuazione, senza che il giocatore faccia nulla,  metteremo i relativi blocchi all'interno del blocco "ripeti per sempre".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: 'In questo esercizio il nostro obiettivo è aiutare il mago a sorvegliare i confini del regno, muovendosi in continuazione a destra e a sinistra. Imparare come funziona il comando "ripeti" ti risparmierà moltissimo tempo quando costruirai il tuo gioco.'
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: "These are jump blocks. When you use these, your artist moves but doesn't draw, so use these to jump to the next grey line."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Aren't bees super cool? In this next set of puzzles, your goal is to help the bee get to the flowers and get nectar from the flowers and fly over to the honeycomb to make honey. You'll need to use the "get nectar" and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We know how much nectar is in the red flowers, by the little number in the corner. So be sure to get all the nectar from the flower before you move forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: |-
          If you're able to get all the nectar and make all the honey, you succeed and go to the next level. Otherwise, you need to try this puzzle again. Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "A loop is a repetition of activity. So going into a hive to inspect, I look at a frame and then I put it back, so I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          In this level, we want the bee to collect three nectars from the flower. Instead of using three "get nectar" blocks, you're going to use the repeat block to get nectar three times. Hit "Run" and see if you got it right. Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "This lesson is called the big event. It's all about how we can control our programs and actually change the way a program runs on the fly using events, like the push of a button or the click of a mouse."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "For this lesson, you'll be controlled with a paper remote control. It's just like a real-live video game."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "An event is an action  that causes something to happen. It's like when you click the button on a mouse and a webpage loads. That's an event. When you touch your screen on a tablet to scroll, that's an event also. Events are a great way of letting the user direct your program whenever they need or want to."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Things happen that we all respond to. We feel hungry and we go to the fridge. We hear the mailman come and he puts our mail in the mailbox  and then we go get our mail. Those are just like the events of pushing a button or moving a joystick. They are something that happens that triggers us to do something.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: |-
          In video games, there's an event called "Update" and it happens 30 or 60 times a second. For videogame programmers that's almost more important as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |-
          The main event we're watching for is that "Update" tick happening. And then we check the joystick in the tick. So we say, "Oh, has somebody pushed the button this frame? Yes or no?" Without events, the player couldn't move, you couldn't jump, you wouldn't be able to control what's going on. The videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "In sand sculpture you've got to know that failure is part of the program. But if you're persist, it's just going to get nothing but better and more exciting for you.Persistence is the name of the game. Stay with it, you'll love it."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "This lesson is called building a foundation. In this lesson, we'll work on a task that is meant to be really difficult. You will figure out how to make a structure at least as tall as one of these cups and it's got to be strong enough to hold the weight of a book."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "There might be times that our creation doesn't work out. There might be times that we get frusrated and want to give up. There might be a lot of those moments. But if we keep on trying, give it our best shot over and over again, then we're sure to get it before long."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Persistence is all about hanging in there when you really want to give up. If you want to create something new and different, there's going to be a lot of failures along the way."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "The trick to persistence is choosing to keep on going and learn from your failures instead of quitting because you're frustrated. Frustration actually just means there's something wonderful around the corner. So don't quit before you get to it. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the internet. The internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the internet I talk to peeople I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the internet had smellorama!" I can talk to different people on the internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "Finora hai realizzato un'animazione o una storia che fanno sempre le stesse cose ogni volta che le avvii. Ora è possibile realizzare un gioco interattivo con cui puoi veramente giocare."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: |-
          There are some new blocks to try out. There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys. And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
