es-AR:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: ¡Bienvenido a tu primera hora de código! Vamos a sumergirnos bien en tu primera experiencia de programación.
      2:
        image: notes/hoc1_2.jpg
        text: Usaremos Blockly, un lenguaje de programación visual donde puedes arrastrar y soltar bloques para escribir código.
      3:
        image: notes/hoc1_3.jpg
        text: 'La mayoría del código se escribe a mano, en cambio Blockly es visual. Cada bloque corresponde a una línea de código "real".'
      4:
        image: notes/hoc1_4.jpg
        text: Aprenderás los fundamentos de la informática, los conceptos que se utilizan en cualquier lugar, desde hacer aplicaciones hasta controlar el Mars rover.
      5:
        image: notes/hoc1_5.jpg
        text: Un programa es un conjunto de instrucciones que tu ordenador sigue.
      6:
        image: notes/hoc1_6.jpg
        text: El objetivo de tu primer programa es guiar un Angry Bird a través de un laberinto para golpear al cerdo verde.
      7:
        image: notes/hoc1_7.jpg
        text: El lado izquierdo es el laberinto donde se ejecuta tu programa. Las instrucciones para cada rompecabezas están debajo del laberinto.
      8:
        image: notes/hoc1_8.jpg
        text: La barra de herramientas del medio contiene los comandos para el Angry Bird. Puedes usarlos para construir tu código.
      9:
        image: notes/hoc1_9.jpg
        text: A la derecha está tu área de trabajo donde podrás arrastrar los bloques del cuadro de herramientas para construir tu programa. Para eliminar un bloque, arrástralo a la papelera que se encuentra en la esquina.
      10:
        image: notes/hoc1_10.jpg
        text: 'Cada bloque es una instrucción. Si arrastras el bloque "avanzar" a tu espacio de trabajo y oprimes el botón "Ejecutar Programa", el pájaro se mueve una casilla en el laberinto.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Si ejecutas un programa y quieres arreglarlo e intentar de nuevo, presiona el botón "Reiniciar".'
      13:
        image: notes/hoc1_13.jpg
        text: ¡Vamos por esos cerdos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hola, me llamo JR! Cada equipo de coches de carrera necesita programadores de computadoras para ganar. Ellos analizan datos del coche para hacerlo más rápido.
      2:
        image: notes/stage5_2.jpg
        text: En estos rompecabezas, serás un artista que dibuja una línea detrás de ellos dondequiera que vayan.
      3:
        image: notes/stage5_3.jpg
        text: 'Este bloque dice "avanzar 100 pixeles". Los pixeles son pequeños puntos en tu pantalla.'
      4:
        image: notes/stage5_4.jpg
        text: 'Este bloque dice "girar a la derecha 90 grados". Esto girará a tu artista la misma cantidad como los bloques "girar" en los rompecabezas laberinto.'
      5:
        image: notes/stage5_5.jpg
        text: Haga clic en la flecha en cualquiera de estos bloques para cambiar la cantidad que el artista se mueve hacia adelante o gira. Juega para familiarizarte con estos nuevos bloques.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hola, soy Paola! En estos rompecabezas, tu eres una granjera que tiene que aplanar completamente su campo para iniciar la siembra de cultivos.
      2:
        image: notes/stage9_2.jpg
        text: Tienes que ayudarla a quitar todos los montones de tierra y rellenar todos los huecos.
      3:
        image: notes/stage9_3.jpg
        text: 'Los nuevos bloques eliminan una palada llena de tierra de un montón y rellanan  con una palada de tierra un hueco.'
      4:
        image: notes/stage9_4.jpg
        text: Los montones y los huecos son de diferente tamaño así que tienes que decir al granjero cuantas palas debe usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hola, ¡Soy Katie! Una de las cosas más excitantes de la computación es que un programa de ordenador puede ser interactivo.
      2:
        image: notes/flappy02.jpg
        text: Siempre que alguien hace click, pulsa o teclea en un ordenador o teléfono genera un EVENTO, y hay un código que decide qué ejecutar cuando ocurre un EVENTO.
      3:
        image: notes/flappy03.jpg
        text: 'Por ejemplo, tienes un CONTROLADOR DE EVENTOS que dice "cuando se hace clic en el ratón, reproduce un sonido" '
      4:
        image: notes/flappy04.jpg
        text: ¿Has oído del juego FlappyBird? Mediante el uso de controladores de eventos, vamos a aprender a programar nuestra propia versión personalizada de FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: El código que escribirás consiste de arrastrar y soltar bloques que representan los comandos de la computadora. Sin que puedas verlo, cada uno de estos bloques está representado por código real.
      6:
        image: notes/flappy06.jpg
        text: 'Si echas un vistazo en el espacio de trabajo, hay algunos bloques verdes que son rellenados por ti - son "los controladores de eventos" '
      7:
        image: notes/flappy07.jpg
        text: 'Si deseas que el pájaro ALETEE cuando haces CLIC en el ratón, puedes hacerlo uniendo el bloque "ALETEAR" al manejador de eventos adecuado, y ahora en tu juego cada vez que haces clic en el ratón, el pájaro aleteará.'
      8:
        image: notes/flappy08.jpg
        text: En cada puzzle de esta actividad te presentamos nuevos tipos de eventos como bloques verdes en el espacio de trabajo, tu puedes decidir los bloques apropiados para agregar en respuesta a esos eventos.
      9:
        image: notes/flappy09.jpg
        text: 'Cuando ves un menú desplegable como este, significa que puedes cambiar los ajustes - como qué sonido usar cuando flappy caiga al suelo.'
      10:
        image: notes/flappy10.jpg
        text: En el puzzle final serás capaz de crear tu propio juego y compartirlo con tus amigos. ¡Que te diviertas!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hola, soy Mark! Aprendamos acerca de las iteraciones. Usando iteraciones puedes decirle a una computadora que repita una y otra vez cualquier conjunto de acciones, miles o incluso millones de veces.
      2:
        image: notes/hoc2_2.jpg
        text: En este puzzle, queremos que el pájaro se mueva hacia adelante 5 espacios para llegar al cerdo.
      3:
        image: notes/hoc2_3.jpg
        text: 'Podemos usar el nuevo bloque "repetir" para ayudarnos.'
      4:
        image: notes/hoc2_4.jpg
        text: 'En lugar arrastrar 5 bloques "avanzar"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Podemos poner el bloque "avanzar" dentro del bloque "repetir" y escribir un número en el bloque para decirle cuántas veces repetirlo.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Y esto es importante: puedes poner más de un comando dentro de un bloque "repetir".'
      7:
        image: notes/hoc2_7.jpg
        text: '¡Disfruta usando tu nuevo bloque "repetir"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hola, soy Chris. Antes de unirme a los Miami Heat, fui a Georgia Tech a estudiar Ciencias de la Computación. Vamos a probar nuestro nuevo bloque, el bloque "repetir hasta".'
      2:
        image: notes/hoc3_2.jpg
        text: ¿Qué sucedería si no supiéramos cuanto debería moverse el pájaro para llegar al cerdo?
      3:
        image: notes/hoc3_3.jpg
        text: 'Si ponemos un bloque "avanzar" dentro del bloque "repetir hasta" , el pájaro avanzará HASTA que alcance al cerdo (o choque con una pared).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Y esto es importante; así como antes, podemos poner múltiples bloques dentro del bloque "repetir hasta" y todo ello se repetirá.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '¡Hola, soy Bill! Aprendamos un nuevo concepto fundamental: las declaraciones "si". A través de ellas las computadoras toman decisiones.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Tu mismo usas declaraciones "sí", "If", diariamente.  Antes de salir afuera cada mañana, dices "sí", "IF", lloviera afuera, yo me pondría una chubasquero.'
      3:
        image: notes/hoc4_3.jpg
        text: Podemos decirle al zombie que compruebe si hay un camino a la izquierda, y si encuentra un camino a la izquierda, podemos hacerlo girar en esa dirección.
      4:
        image: notes/hoc4_4.jpg
        text: 'Para escribir el código para esto, vamos a sacar nuestro bloque "si" y colocaremos un bloque "gira a la izquierda" en su interior.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Ahora, si ponemos un bloque "avanzar" encima de este, y un bloque "repetir" alrededor de todo, cada vez que el zombie se mueva, el comprobará si hay un camino a la izquierda y girará. El comando "repetir" es crítico, para comprobar si tiene que girar en cada paso.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Las declaraciones "si" son muy importantes en las ciencias de la computación. Uno de los primeros programas que escribí era un juego de tic-tac-toe, y había una declaración "Si" que decía que si la otra persona está a punto de ganar, bloquea el lugar que le permite ganar.'
      7:
        image: notes/hoc4_7.jpg
        text: '¡Diviértete cuando uses el bloque "if" (si)!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: '!Hola! soy Brina, una ingeniera de Instagram. Una función es un conjunto de líneas de código que quieres usar una y otra vez, así que en vez de escribir ese código cada vez, puedes usar solo un bloque.'
      2:
        image: notes/stage13_2.jpg
        text: Vamos a aprender cómo definir funciones. Las definiciones de funciones tienen una estrella en la esquina. El nombre de la función está escrito en la línea superior.
      3:
        image: notes/stage13_3.jpg
        text: 'Los bloques que se encuentran dentro de la definición nos dicen qué hace. Así que esta definición de función se llama "rellena 5" y está formada por un bloque "repetir" y un bloque "rellenar".'
      4:
        image: notes/stage13_4.jpg
        text: 'La definición se encuentra en el espacio de trabajo, pero nuestro agricultor no ejecutará la función hasta que arrastremos el bloque "llenar 5" desde la categoría de funciones.'
      5:
        image: notes/stage13_5.jpg
        text: '¡Volvamos a hacer divertidas las funciones! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '¡Hola! soy Makinde. Vamos a aprender acerca del bloque "mientras". '
      2:
        image: notes/stage9_6.jpg
        text: 'El "bloque mientras que (While)" hará todo lo que pones en su interior mientras la declaración en la parte superior es verdadera.'
      3:
        image: notes/stage9_7.jpg
        text: Por ejemplo, si la granjera está sobre un montón, continuará eliminando una palada llena mientras(WHILE) quede tierra debajo de ella.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: '!Hola! soy Trina y trabajo para Pixar. He trabajado en un montón de películas incluyendo Shrek.'
      2:
        image: notes/stage11_2.jpg
        text: 'Esta es nuestra nueva iteración "contador". Realizará acciones una y otra ves y puedes hacer que las acciones cambien un poco cada vez.'
      3:
        image: notes/stage11_3.jpg
        text: 'En este ejemplo, nuestra iteración "contador" dice "cuenta con un contador de 50 a 90 de 10 en 10" y dentro de ella tenemos un bloque "dibuja un cuadrado". Arrastra el bloque "contador" desde la sección "Variables" al sitio "longitud".'
      4:
        image: notes/stage11_4.jpg
        text: Esto significa que nuestro artista dibujará un cuadrado que tiene lados de 50 píxeles de longitud, luego agregará 10 para dibujar un cuadrado con lados de 60 píxeles de longitud, Después continuará agregando 10 para dibujar cuadrados hasta que alcance 90. Así que tendremos cuadrados de 50, 60, 70, 80 y 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: ¡Hola! soy Janete y soy ingeniera en Zynga.
      2:
        image: notes/stage15_2.jpg
        text: ¿Qué pasa si queremos dibujar un montón de triángulos y sus lados tienen que ser de longitudes diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escribir a mano ese código o podemos usar una función con parámetros.
      4:
        image: notes/stage15_4.jpg
        text: 'Para hacer esto, haz clic en la estrella azul sobre la definición de la función "dibuja un triángulo". Después arrastra "nombre de entrada" en el bloque "entrada".'
      5:
        image: notes/stage15_5.jpg
        text: 'Después si escribes "longitud" en el lugar que dice "x" y presionas "Enter" crearás una entrada longitud para tu función.'
      6:
        image: notes/stage15_6.jpg
        text: 'Después haz clic en la estrella. Ahora, haz clic en la categoría de las variables y arrastrar el bloque "longitud" dentro del bloque "avanzar" de la definición de tu función. Y arrastra hacia afuera el antiguo bloque número.'
      7:
        image: notes/stage15_7.jpg
        text: 'Para usar tu función con parámetros, haz clic en la categoría funciones y arrastra tu función "dibuja un triángulo con longitud".'
      8:
        image: notes/stage15_8.jpg
        text: Ahora puedes usar el bloque matemáticas para introducir diferentes números para dibujar triángulos de diferente tamaño.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: ¡Felicidades! Con el último puzzle resuelto, acabas de escribir código que puede decir a cualquier robot cómo encontrar su camino a través de un laberinto sin ramificación o túnel de cualquier longitud, no importa si es un zombie, un pájaro, un rover de Marte o incluso un coche sin conductor.
      2:
        image: notes/hoc6_2.jpg
        text: 'Los conceptos básicos que utilizaste son el corazón de cualquier programa o aplicación que encuentres.  Aprendimos acerca de iteraciones, las declaraciones "repetir hasta", las declaraciones "si" y las "si sí no".'
      3:
        image: notes/hoc6_3.jpg
        text: Si te gustó tu primera hora del código, visita code.org para continuar tu educación en Ciencias de la Computación. Una vez que completes nuestro curso de 20 horas, habrás dominado los fundamentos de la programación y podrás empezar a aprender cómo escribir aplicaciones para teléfonos, instrucciones para robots, juegos, o lo que quieras.
      4:
        image: notes/hoc6_4.jpg
        text: 'La tecnología está cambiando todo lo que hacemos y no importa si eres joven o viejo: la programación es divertida, es creativa, y cualquier persona puede aprenderla!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: ¡Mostrar notas estará disponible pronto!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
