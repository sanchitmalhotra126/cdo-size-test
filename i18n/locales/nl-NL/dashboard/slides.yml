nl:
  slides:
    maze_intro:
      1:
        image: notities/hoc1_1.jpg
        text: Welkom bij je eerste uur code! We duiken direct je eerste ontmoeting met programmeren in.
      2:
        image: notities/hoc1_1.jpg
        text: We zullen Blockly gebruiken, een visuele programmeertaal waar je met drag-en-drop code schrijft.
      3:
        image: notes/hoc1_3.jpg
        text: 'De meeste code wordt ingetypt, maar Blockly is visueel. Ieder blok komt overeen met een "echte" regel code.'
      4:
        image: notes/hoc1_4.jpg
        text: Je zal de basis van computerwetenschappen leren. Deze concepten worden overal gebruikt, van apps voor je mobiele telefoon tot het besturen van de Mars-lander.
      5:
        image: notes/hoc1_5.jpg
        text: Een programma is een reeks instructies die de computer opvolgt.
      6:
        image: notes/hoc1_6.jpg
        text: Het doel van je eerste programma is om een Angry Bird door een doolhof te krijgen om een Groen Varken te raken.
      7:
        image: notes/hoc1_7.jpg
        text: De linkerkant is het doolhof waar je programma in draait. De opdrachten voor iedere puzzel staan onder het doolhof.
      8:
        image: notes/hoc1_8.jpg
        text: De middelste toolbox heeft de opdrachten voor de Angry Bird. Deze gebruik je om je code op te bouwen.
      9:
        image: notes/hoc1_9.jpg
        text: Aan de rechterkant heb je je werkruimte waar je blokken uit je toolbox heen sleept om je programma op te bouwen. Om een blok te verwijderen sleep je het naar de prullenbak in de hoek.
      10:
        image: notes/hoc1_10.jpg
        text: 'Ieder blok is een opdracht. Wanneer je een "vooruit"-blok naar je werkruimte sleept en op "Voer Programma Uit" klikt, dan beweegt de vogel een stapje in het doolhof.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Wanneer je een programma uit hebt gevoerd en het wil repareren en opnieuw beginnen, klik je op de "Opnieuw"-knop.'
      13:
        image: notes/hoc1_13.jpg
        text: We zullen dit varkentje wel eens wassen!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hallo, ik ben JR! Elk raceauto team heeft een computer wetenschapper nodig om te winnen. Ze analyseren data van de auto om hem sneller te laten maken.
      2:
        image: notes/stage5_2.jpg
        text: In deze puzzels, ben jij de artiest dat een lijn moet laten trekken overal waar ze gaan.
      3:
        image: notes/stage5_3.jpg
        text: 'Deze blok zegt "beweeg 100 pixels vooruit." Pixels zijn zeer kleine puntjes op je scherm.'
      4:
        image: notes/stage5_4.jpg
        text: 'Deze blok zegt "draai rechts voor 90 graden." Dit zal je artiest evenveel draaien als de "draai blok in de doolhof puzzels.'
      5:
        image: notes/stage5_5.jpg
        text: Klik op de pijl in deze blokken om de afstand die de kunstenaar naar voren gaat of draait. Speel hier een beetje mee om handig te worden met deze blokken.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hallo, ik ben Paola! In deze puzzels ben jij de boer die zijn veld volledig vlak wilt zodat je gewassen kan aanplanten.
      2:
        image: notes/stage9_2.jpg
        text: Je zal haar moeten helpen alle hopen grond te verwijderen en alle gaten in te vullen.
      3:
        image: notes/stage9_3.jpg
        text: De nieuwe blokken verwijderen 1 schep modder van een hoop en vult een gat met 1 schep modder.
      4:
        image: notes/stage9_4.jpg
        text: De hopen en gaten zijn verschillend van grootte, dus je moet de boer vertellen hoeveel scheppen hij moet gebruiken.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hoi, ik ben Katie! Een van de meest spannende dingen over informatica is dat een computerprogramma interactief kan zijn.
      2:
        image: notes/flappy02.jpg
        text: Elke keer dat iemand klikt of drukt of typt op een computer of telefoon, dat genereert een gebeurtenis, en er is wat code die beslist wat er gebeurd als er wat gebeurd.
      3:
        image: notes/flappy03.jpg
        text: 'Bijvoorbeeld, je zou een gebeurtenis-verwerker kunnen hebben die zegt "wanneer iemand met de muis klikt, speel een geluid af" '
      4:
        image: notes/flappy04.jpg
        text: 'Heb je ooit van het spel FlappyBird gehoord? Met behulp van gebeurtenis-verwerkers gaan we leren om  onze eigen aangepaste versie van FlappyBird te programmeren!'
      5:
        image: notes/flappy05.jpg
        text: De code die zul je schrijven omvat slepen en neerzetten van blokken met daarin opdrachten voor de computer. Onder de motorkap wordt elk van deze blokken vertegenwoordigd door echte code.
      6:
        image: notes/flappy06.jpg
        text: 'Als je een kijkje neemt in de werkplaats, zie je een aantal groene blokken die voor je zijn ingevuld - dit zijn "gebeurtenis-verwerkers" '
      7:
        image: notes/flappy07.jpg
        text: 'Als je wilt dat de vogel FLAPPERT als je met de muis KLIKT, krijg je dat voor elkaar door het "FLAP" blok aan de goede gebeurtenis-verwerker te verbinden. Telkens als je nu in je spel met de muis klikt, zal de vogel flapperen.'
      8:
        image: notes/flappy08.jpg
        text: In elke puzzel van deze activiteit introduceren we nieuwe gebeurtenis-types als groene blokken op de werkplaats, en dan kun je de juiste blokken kiezen die reageren op de nieuwe gebeurtenissen.
      9:
        image: notes/flappy09.jpg
        text: 'Als je een drop-down pijl zoals deze ziet dan kun je de instellingen veranderen - zoals wel geluid af te spelen wanneer flappy de grond raakt.'
      10:
        image: notes/flappy10.jpg
        text: In de laatste puzzel kun je je eigen spel maken en deze delen met je virenden. Veel plezier!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hallo, ik ben Mark! We gaan leren over lussen. Met lussen kun je een computer vertellen om een reeks acties telkens te herhalen, duizenden of zelfs miljarden keren.
      2:
        image: notes/hoc2_2.jpg
        text: In deze puzzel willen we de vogel 5 vakjes naar voren laten bewegen om het varken te krijgen.
      3:
        image: notes/hoc2_3.jpg
        text: 'We kunnen het nieuwe "herhaal"-blok gebruiken om ons te helpen.'
      4:
        image: notes/hoc2_4.jpg
        text: 'In plaats van 5 "vooruit"-blokken hierheen te slepen...'
      5:
        image: notes/hoc2_5.jpg
        text: 'We kunnen een "vooruit"-blok in het "herhalen"-blok zetten en een getal in het blok zetten om aan te geven hoe vaak het moet herhalen.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Dit is belangrijk: je kunt meer dan een commando in een "herhalen"-blok zetten.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Veel plezier met je nieuwe "herhalen"-blok!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hallo, ik ben Chris. Voordat ik bij Miami Heat ging basketballen heb ik in Amerika Informatica gestudeerd. We gaan nu ons nieuwe blok uitproberen: het "herhalen totdat"-blok.'
      2:
        image: notes/hoc3_2.jpg
        text: Wat moeten we doen als we niet weten hoe ver de vogel moet bewegen om het varken te krijgen?
      3:
        image: notes/hoc3_3.jpg
        text: 'Wanneer we een "vooruit"-blok binnen een "herhalen totdat"-blok zetten, dan gaat de vogel vooruit TOT het bij het varken komt (of tegen een muur aanloopt).'
      4:
        image: notes/hoc3_4.jpg
        text: 'En dit is belangrijk: net als eerder, kunnen we meerdere blokken binnen het "herhalen totdat" blok zetten, en zij zullen allemaal worden herhaald.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hallo, ik ben Bill! We gaan een fundamenteel nieuw concept leren: "Als"-statements. Zo maken computers beslissingen.'
      2:
        image: notes/hoc4_2.jpg
        text: |-
          Je gebruikt zelf ook dagelijks "Als"-statements. Voor je 's-ochtends naar buiten gaat, zeg je: ALS het regent, dan moet ik mijn regenjas aan.
      3:
        image: notes/hoc4_3.jpg
        text: We kunnen de zombie vertellen dat ALS er een pad naar links is, hij die richting op moet draaien.
      4:
        image: notes/hoc4_4.jpg
        text: 'Om hier de code voor te schrijven slepen we ons "Als"-blok naar het midden en stoppen we er een "linksaf"-blok in.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Als we er nu een "vooruit"-blok boven zetten en een "herhalen"-blok om alles heen, dan kijkt de zombie iedere keer als hij beweegt of hij naar een pad naar links kan draaien. Het "herhalen"-commando is belangrijk om te zorgen dat hij iedere stap kijkt of er een pad is.'
      6:
        image: notes/hoc4_6.jpg
        text: |-
          "Als"-statements zijn heel belangrijk in de informatica. Een van de eerste programma's die ik heb geschreven was een boter-, kaas- en eieren-spelletje, en er was een "Als"-statement dat zei dat ALS de ander bijna ging winnen, ik het vakje waarmee hij zou winnen in ging pikken.
      7:
        image: notes/hoc4_7.jpg
        text: 'Veel plezier met het "Als"-blok!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hoi, ik ben Brina, een engineer bij Instagram. Een functie is een aantal regels code dat je steeds weer wilt kunnen gebruiken, dus in plaats van die code iedere keer helemaal uit te schrijven, kun je gewoon een blok gebruiken.
      2:
        image: notes/stage13_2.jpg
        text: We gaan leren hoe je functies maakt. Functies hebben een ster in het hoekje. De naam van de functie wordt op de bovenste regel geschreven.
      3:
        image: notes/stage13_3.jpg
        text: "De blokken in de definitie vertellen ons wat de functie doet. Dus deze functiedefinitie hebben we 'vul 5' genoemd, en bestaat uit een 'herhalen' en een 'vul'-blok."
      4:
        image: notes/stage13_4.jpg
        text: "De definitie zit op de werkplaats, maar onze boer voert de functie niet uit tot we ons 'vul 5 functie'-blok uit de 'functies'-categorie slepen."
      5:
        image: notes/stage13_5.jpg
        text: |-
          Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: 'Het "while" blok voert alles uit wat er in staat, ZOLANG het statement bovenaan WAAR is.'
      3:
        image: notes/stage9_7.jpg
        text: Bijvoorbeeld, als de boer op een hoop staat, blijft ze 1 schep verwijderen ZOLANG er nog een hoop onder haar is.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hoi, ik ben Trina, en ik werk voor Pixar. Ik heb aan een heel stel films gewerkt, waaronder Shrek.
      2:
        image: notes/stage11_2.jpg
        text: "Dit is onze nieuwe 'teller'-lus. Het voert acties steeds weer uit, en je kunt de actie iedere keer ietsje anders maken."
      3:
        image: notes/stage11_3.jpg
        text: |-
          In dit voorbeeld zegt onze 'teller'-lus "tel van 50 tot 90 met 10 tegelijk", en in het blok hebben we ons "teken een vierkant"-blok. Sleep het 'teller'-blok van het 'Variabelen'-stuk naar 'lengte'.
      4:
        image: notes/stage11_4.jpg
        text: Dit betekent dat onze kunstenaar een vierkant gaat tekenen met zijden van 50 pixels, daarna telt het daar 10 bij op en tekent een vierkant met zijden van 60 pixels. Daarna blijft het 10 optellen en vierkanten tekenen tot het bij de 90 komt. Dus krijgen we vierkanten van 50, 60, 70, 80 en 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hoi, ik ben Janete, en ik ben een engineer bij Zynga.
      2:
        image: notes/stage15_2.jpg
        text: En als we nu een stel driehoeken willen tekenen met zijden van verschillende lengten?
      3:
        image: notes/stage15_3.jpg
        text: Ze zouden al die code met de hand kunnen schrijven, of we kunnen een functie met parameters maken.
      4:
        image: notes/stage15_4.jpg
        text: |-
          Klik om dat te doen op de blauwe ster op de "teken een driehoek"-functie. Sleep daarna 'invoer naam' naar het 'invoer'-blok.
      5:
        image: notes/stage15_5.jpg
        text: "Als we dan 'lengte' schrijven op de plek waar nu 'x' staat en op 'enter' drukken, maak je een 'lengte'-invoer voor je functie."
      6:
        image: notes/stage15_6.jpg
        text: "Klik daarna op de ster. Nu wil je op de 'variabelen'-categorie klikken en het 'lengte'-blok in het 'vooruit'-blok van je functie slepen. En sleep het oude nummer-blok weg."
      7:
        image: notes/stage15_7.jpg
        text: |-
          Klik om je nieuwe functie met parameters te gebruiken op de 'functies'-categorie en sleep je "teken een driehoek met lengte'-functie eruit.
      8:
        image: notes/stage15_8.jpg
        text: Je kunt nu het reken-blok gebruiken om verschillende nummers in te voeren om driehoeken te tekenen met verschillende groottes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gefeliciteerd! Met die oplossing voor de laatste puzzel heb je net code geschreven die IEDERE robot kan vertellen hoe hij uit een doolhof zonder splitsingen moet komen, of het nu een zombie is, een vogel, een Mars-lander of zelfs een automatisch rijdende auto.
      2:
        image: notes/hoc6_2.jpg
        text: 'De basisbegrippen die je hebt gebruikt zijn de kern van ieder programma of app die je gebruikt. We hebben geleerd over lussen, herhalings-statements, "als"-statements en "als anders"-statements.'
      3:
        image: notes/hoc6_3.jpg
        text: "Als je je eerste uur code leuk vond, ga dan naar code.org om verder te gaan met je informatica-opleiding! Zogau je onze cursus van 20 uur klaar hebt, beheers je de grondbeginselen van het programmeren, en kun je beginnen te leren hoe je apps kunt maken voor mobiele telefoons, programma's voor robots, spelletjes, je kunt het zo gek niet bedenken."
      4:
        image: notes/hoc6_4.jpg
        text: 'Technologie verandert alles wat we doen en of je nu jong of oud bent: programmeren is leuk, creatief, en iedereen kan het leren!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Ondertiteling komt eraan!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
