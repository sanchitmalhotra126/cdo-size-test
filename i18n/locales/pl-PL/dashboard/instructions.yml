pl:
  data:
    instructions:
      2-3 Artist 1 new_instruction: 'Witam jestem artystą. Jeżeli napiszesz mi kod - mogę narysować prawie wszystko. Użyj kilku bloków, abym rysował nad szarymi liniami (Każda linia ma długość 100 pikseli)'
      2-3 Artist 11_instruction: 'Utwórz znak stopu na granicy tworząc ośmiokąt o 8 bokach, każdy długości 100 pikseli. O ile stopni musisz się obrócić? (Podpowiedź: ile wynosi 360 podzielone przez 8?) '
      2-3 Artist 12_instruction: 'Ustaw blok "powtórz razy" tak, aby rysował on "krąg" na zakończenie tworzenia gałki ocznej. Jeśli każdy ruch polega na obrocie w prawo o jeden stopień, to ile razy należy powtórzyć ten ruch aby utworzyć krąg? 180? 360? 500?'
      2-3 Artist 2 new_instruction: Ten dom na ścianę wybudowaną w połowie. Każda strona ma 100, ale ściana w połowie ukończona ma 50. Ukończ ścianę.
      2-3 Artist 2_instruction: |
        This house has a half-finished wall. Each side is
        100, but the half-finished wall is only 50. Complete the wall. 
      2-3 Artist 3.4_instruction: 'Blok "skok" (jump) przesuwa artystę bez rysowania. Narysuj linię przerywaną za pomocą obu bloków, skoku i rysowania.'
      2-3 Artist 3_instruction: Ten kapelusz jest wysoki na 100 pikseli. Narysuj kapelusz, który o 70 pikseli niższy.
      2-3 Artist 3new_instruction: Czerwony kapelusz ma 100 pixeli wysokości. Dokończ rysować czarny kapelusz. Czarny kapelusz jest o 70 pixeli krótszy. Szerokość czarnego kapelusza to 50 pixeli.
      2-3 Artist 4_instruction: Pomóż mi dokończyć domek dla kota.
      2-3 Artist 5_instruction: 'Zastąp ten kod blokiem "powtórz razy", aby narysować taki sam dom przy użyciu tylko tylko 3 bloków.'
      2-3 Artist 6_instruction: 'Ten dom potrzebuje dachu ! Narysuj trójkąt. Wskazówka: Wszystkie trzy boki mają taką samą długość.'
      2-3 Artist 7_instruction: 'Dokończ rysunek prawej połowy ostatniego okna. Każdy kwadrat okna ma 25 pikseli. '
      2-3 Artist 8_instruction: Utwórz pokoje dla każdego ze zwierząt, dzieląc prostokąt na 2 równej wielkości kwadraty. Prostokąt jest 200 pikseli szeroki i 100 pikseli wysoki.
      2-3 Artist 9_instruction: Dokończ ten latawiec
      2-3 Artist Assessment 1_instruction: 'Ocena: Zakończ rysowanie ostatniego zęba, szerokiego na 25 pikseli i wysokiego na 25 pikseli.'
      2-3 Artist Debugging 1_instruction: Czy możesz wykonać ten kapelusz z górną częścią długości 100?
      2-3 Artist Debugging 10_instruction: 'Podkładka kierunkowa mojego kontrolera gier jest zbyt wąska. Wskazówka: Poszerz ją o 10 pikseli'
      2-3 Artist Debugging 11_instruction: 'Pomóż mi ukończyć mój piękny płatek śniegu. Ile razy muszę "powtórzyć", aby go skończyć?'
      2-3 Artist Debugging 12_instruction: 'Powinienem dodać falę oceanu do tej sceny.  Czy możesz mi pomóc?'
      2-3 Artist Debugging 2_instruction: 'Kod dla trzech wąsów, które widzisz, jest zły. Wskazówka: każdy wąs jest długi na 75 pikseli. Napraw ten kod, by rysował te wąsy.'
      2-3 Artist Debugging 3_instruction: 'Moja łódź ma dziurę! Możesz ją naprawić zmieniając kąt nachylenia linii? Wskazówka: Ostatni kąt jest zły o 15 stopni.'
      2-3 Artist Debugging 4_instruction: Co jest na obrazku, który staramy się narysować? Ukończ rysunek, łącząc punkty przy użyciu właściwych linii i kątów.
      2-3 Artist Debugging 5_instruction: 'Kod nogi i stopy, które widzisz, jest zły. Wskazówka: Stopa jest za długa, może to wymagać usunięcie kroku'
      2-3 Artist Debugging 6_instruction: Wygląda na to, że siedzę na krześle, któremu brakuje nogi. Przystosuj bloki, aby narysować nogę.
      2-3 Artist Debugging 7_instruction: Wygląda na to, że C w kodzie jest narysowane odwrotnie. Czy mógłbyś je poprawić, by wyglądało jak C?
      2-3 Artist Debugging 8_instruction: 'Mój wiatraczek nie jest ukończony. Ile razy trzeba "powtórzyć", aby go skończyć?'
      2-3 Artist Debugging 9_instruction: 'Kod tej łodygi nie jest prawidłowy. Wskazówka: Kąt jest o 60 stopni zły'
      2-3 Artist Debugging Assessment 1_instruction: 'Ten kształt jest za mały. Czy mógłbyś go powiększyć? Wskazówka: powinien być o 75 pikseli dłuższy z każdej strony.'
      2-3 Artist Free Play_instruction: Darmowe gry! Narysuj cokolwiek chesz.
      2-3 Artist Functions 1_instruction: 'Cześć. Mnie jest zombie artysta. Mnie podoba się rysowanie! Pomóż mi narysować kwadratowe okulary.  Wskazówka: połączenie między szkłami okularów jest o 25 pikseli krótsze niż wielkość kwadratu.'
      2-3 Artist Functions 10_instruction: Oto dwie funkcje, jedna do rysowania dużego trybu, a druga do rysowania małego biegu. Użyj ich, by narysować wnętrze maszyny!
      2-3 Artist Functions 11.5_instruction: 'Tutaj jest ta sama funkcja "Narysuj sześciokąt". Co się stanie, jeśli obrócisz się tylko o 60 stopni w każdym obrocie pętli?'
      2-3 Artist Functions 11_instruction: 'Zmieniliśmy nazwę funkcji "narysuj kwadrat" na "narysuj sześciokąt", ale ona nadal rysuje tylko kwadraty! Czy mógłbyś zmodyfikować funkcję "narysuj sześciokąt", by rysowała sześciokąt o boku 50 pikseli, i wykonaj rysunek używając tej funkcji?'
      2-3 Artist Functions 12_instruction: 'Funkcje są naprawdę świetne do rysowania złożonych rzeczy wiele razy. Czy mógłbyś użyć funkcji "narysuj kwiat", aby wypełnić resztę pola plantatora? (Wskazówka: Wszystkie rośliny są oddalone o 100 pikseli)  '
      2-3 Artist Functions 13_instruction: Daliśmy ci cztery funkcje. Skorzystaj z nich, jak chcesz, wewnątrz jednej lub więcej pętli, by wykonać obrazek, którym mógłbyś podzielić się ze swoimi znajomymi. Naciśnij przycisk Uruchom, aby zobaczyć przykład.
      2-3 Artist Functions 2_instruction: 'Funkcje umożliwiają definiowanie nowych bloków! Przenieśliśmy bloki służące do rysowania kwadratu do funkcji o nazwie "narysuj kwadrat". Czy mógłbyś posłużyć się funkcją "narysuj kwadrat", aby utworzyć okulary? Kwadraty są oddalone od siebie o 75 pikseli.'
      2-3 Artist Functions 3_instruction: Zmodyfikuj funkcję, aby narysować kwadrat o boku długości 115 i narysuj większe okulary. Kwadraty są teraz oddalone od siebie o 45 pikseli.
      2-3 Artist Functions 4_instruction: 'Użyj bloku "powtórz", aby narysować te 3 kwadraty.'
      2-3 Artist Functions 7_instruction: 'Użyj funkcji "narysuj dom" aby narysować dwa domy używając różnych parametrów. (Podpowiedź: pierwszy dom ma 100 pikseli).'
      2-3 Artist Functions 9_instruction: Tutaj jest funkcja płatka śniegu. Poeksperymentuj z nią, by utworzyć zimową scenę! To jest poziom zabawy, nie ma więc zagadki do rozwiązania. Baw się dobrze!
      2-3 Artist Loops 1_instruction: Czy mógłbyś utworzyć sześciokąt o bokach długości 100 pikseli, aby ukończyć komórkę? Pamiętaj, że oznacza to, iż będzie trzeba obracać się o 60 stopni!
      2-3 Artist Loops 10_instruction: Jaki będzie efekt, jeśli nasz ostatni krok do przodu będzie o połowę krótszy?
      2-3 Artist Loops 11_instruction: Teraz umieśćmy cały nasz wytwór w pętli! Nie zapomnij dodać kąta na koniec zewnętrznej pętli.
      2-3 Artist Loops 2_instruction: Teraz użyj bloku powtórz, aby z komórki utworzyć powłokę.
      2-3 Artist Loops 4_instruction: Czy chcesz zobaczyć, co się stanie, gdy będziemy powtarzać ten kształt wiele razy za pomocą pętli?
      2-3 Artist Loops 5_instruction: Zmieńmy nieco pętlę i zobaczmy, jak zmieni się obrazek.
      2-3 Artist Loops 6_instruction: Dodaj jeszcze jeden ruch i obrót wewnątrz pętli i zobacz, jak zmieni się twój obrazek.
      2-3 Artist Loops 7_instruction: 'Posługując się pętlami możemy tworzyć różnego rodzaju wielokąty.  Czy mógłbyś utworzyć romb wewnątrz tego sześciokąt?'
      2-3 Artist Loops 8_instruction: Umieśćmy oba elementy wewnątrz pętli.
      2-3 Artist Loops 9_instruction: "Mamy zamiar powtórzyć te same elementy w pętli, ale teraz chcemy dodać pewne odległości między nimi. \r Użyj tego samego kodu jak poprzednio, ale dodaj krok do przodu na końcu zewnętrznej pętli."
      2-3 Artist Loops New 1_instruction: Narysujmy głowę tego robota! Czy mógłbyś utworzyć kwadrat o boku 100 pikseli?
      2-3 Artist Loops New 10_instruction: Teraz połączmy kilka V rysując je w pętli.
      2-3 Artist Loops New 11_instruction: Tym razem narysujmy to 24 razy. Dodaj do tego kodu skręt (obrót) w lewo o 30 stopni i wszystko umieść w bloku powtórz.
      2-3 Artist Loops New 12_instruction: |
        Narysuj diament o bokach 100 pikseli.
        
      2-3 Artist Loops New 13_instruction: Teraz narysuj diament 3 razy w pętli.
      2-3 Artist Loops New 14_instruction: Teraz narysujmy diament 10 razy, ale wykonując obrót o 90 stopni między każdym diamentem.
      2-3 Artist Loops New 15_instruction: Narysuj coś fajnego.
      2-3 Artist Loops New 2_instruction: Oto jeden z kodów, który używałeś do rysowania tego kwadratu. Co się stanie, jeśli użyjesz bloku powtórz, aby uruchomić ten kod 4 razy?
      2-3 Artist Loops New 9_instruction: Narysuj prosty V, gdzie oba boki mają długość 50 pikseli, aby wykonać strzałkę.
      2-3 Artist Match Hex Pic_instruction: 'Połącz: Pomóż ukończyć sześciokąt.'
      2-3 Artist Match Rho Pic_instruction: 'Dopasuj: Ukończ brakujący kod.'
      2-3 Artist Match Sq Pic_instruction: 'Dopasuj: Ukończ brakujący kod'
      2-3 Artist Match Tri pic_instruction: 'Dopasuj: Wypełnij brakujący kod.'
      2-3 Artist Nested Loops 1_instruction: "Używałeś wcześniej pętli do rysowania kształtów, ale czy wiesz, że możesz umieścić pętlę wewnątrz innej pętli? \r Powtórz w pętli cały ten blok kodu 3 razy, aby narysować wzór."
      2-3 Artist Nested Loops 10_instruction: Powtórz w pętli ten kod 12 razy, aby ukończyć ten wzór.
      2-3 Artist Nested Loops 11_instruction: Powtórz w pętla ten kod 4 razy, aby ukończyć wzór, obróć o 90 stopni po każdym obiegu.
      2-3 Artist Nested Loops 12_instruction: Powtórz w pętli ten kod 12 razy, aby otrzymać loki.
      2-3 Artist Nested Loops 2_instruction: Teraz powtórz w pętli trójkąt 6 razy. Po każdym trójkącie, musisz wykonać obrót o 60 stopni przed narysowaniem kolejnego trójkąta.
      2-3 Artist Nested Loops 3_instruction: Musisz powtórzyć w pętli trójkąt 12 razy, aby narysować ten wzór. Liczbę stopni w okręgu (360) należy podzielić przez liczbę kształtów do narysowania (12), aby określić, ile wynosi obrót po każdym kształcie.
      2-3 Artist Nested Loops 4_instruction: 'Powtórz w pętli ten diament 12 razy, aby narysować kwiat. Wskazówka: 12 diamentów jest jak 12 trójkątów, które wykonałeś - ile powinien wynosić obrót po każdym diamencie?'
      2-3 Artist Nested Loops 5_instruction: Wypełnij okna w tym budynku zagnieżdżającą się pętlą. Okna mają długość 20 pikseli i znajdują się 20 pikseli od siebie.
      2-3 Artist Nested Loops 6_instruction: Ten dinozaur ma 8 kolców wystających z jego ogona; każdy kolec ma długość 30 pikseli. Powtórz w pętli trójkąt 8 razy, ale bądź pewien, że przesuwasz się do przodu po każdym z nich.
      2-3 Artist Nested Loops 7_instruction: Powtórz w pętli ten trójkąt 10 razy, aby narysować słońce. Po każdym trójkącie będziesz musiał wykonać ruch i obrót. Aby określić, ile ma wynieść obrót, podziel liczbę stopni w okręgu przez liczbę kształtów, które go tworzą.
      2-3 Artist Nested Loops 8_instruction: Teraz dodajmy trochę trawy do naszego obrazka. Kępy trawy są oddalone od siebie o 50 pikseli.
      2-3 Artist Nested Loops 9_instruction: Ukończymy ten obrazek dodając kwiat. Powtórz w pętli diament 12 razy, aby narysować swój kwiat.
      2-3 Artist Nested Loops Free Play_instruction: Masz wolną rękę, narysuj coś fajnego używając zagnieżdżonych pętli.
      2-3 Bee Conditionals 1_instruction: Cześć, jestem pszczółka! Pomóż mi zebrać nektar z kwiatka.
      2-3 Bee Conditionals 10_instruction: "Fioletowe kwiaty mogą mieć 1 lub 0 nektaru. Uważaj, by nie zbierać nektaru z fioletowego kwiatka, jeśli go nie ma. \r\n"
      2-3 Bee Conditionals 11_instruction: Zbieraj nektar z kwiatów, które go mają.
      2-3 Bee Conditionals 12_instruction: Użyj pętli, aby sprawdzać i zbierać nektar z wszystkich tych kwiatów.
      2-3 Bee Conditionals 13_instruction: 'Zbierz nektar i zrób miodu. Wskazówka: co się stanie, jeśli użyjesz warunku "jeśli nektar" na czerwonym kwiatku? Czy możesz to wykonać z pomocą pętli?'
      2-3 Bee Conditionals 14_instruction: Zbierz nektar i zrób miodu. Uważaj, aby nie zbierać nektaru z fioletowego kwiatka, który go nie ma.
      2-3 Bee Conditionals 15_instruction: Zbierz naktar z wszystkich czterech kwiatów.
      2-3 Bee Conditionals 2_instruction: Cześć, jestem pszczółka! Pomóż mi zebrać cały nektar z kwiatów. Użyj pętli.
      2-3 Bee Conditionals 3_instruction: Pomóż mi zebrać cały nektar z kwiatów i zrobić miód. Użyj pętli.
      2-3 Bee Conditionals 4_instruction: Pomóż mi zebrać cały nektar z kwiatów i zrobić miód.
      2-3 Bee Conditionals 5_instruction: Fioletowe kwiaty mogą mieć 1 lub 0 nektaru, ale nie wiesz który. Uważaj, by nie zbierać nektaru z fioletowego kwiatka, jeśli go nie ma. Sprawdzaj, czy nektar jest równy 1 przy użyciu bloku Jeśli (if).
      2-3 Bee Conditionals 6_instruction: 'Sprawdź ten kwiat za pomoc bloku "Jeśli", czy zawiera nektar.'
      2-3 Bee Conditionals 7_instruction: Zbierz nektar z każdego kwiatka, który go zawiera.
      2-3 Bee Conditionals 8_instruction: To pole zawiera czerwone i fioletowe kwiaty. Czerwone kwiaty zawierają znaną ilość nektaru, ale ilość nektaru na fioletowym kwiatku jest nieznana. Zbierz cały nektar.
      2-3 Bee Conditionals 9_instruction: Zbierz cały nektar z każdego kwiatka.
      2-3 Bee Conditionals Assessment 1_instruction: 'Ewaluacja: Zbierz cały nektar. Uważaj, aby nie zbierać nektaru z fioletowego kwiatka, który go nie ma.'
      2-3 Bee Debugging 1_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 10_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 2_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 3_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 4_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 5_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód. Możesz teraz użyć uruchom i krok.
      2-3 Bee Debugging 6_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 7_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 8_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 9_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging Assessment 1_instruction: 'Ewaluacja: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.'
      2-3 Bee Functions 1_instruction: 'Funkcje są blokami kodu, które wykonują określone zadanie. Użyj funkcji "pobierz 2 nektar", aby zebrać nektar z każdy kwiatka.'
      2-3 Bee Functions 10_instruction: Fioletowe kwiaty mogą mieć 1 lub 0 nektaru, Utwórz funkcję, która zbiera nektar tylko z tych fioletowych kwiatów, które mają nektar.
      2-3 Bee Functions 2_instruction: 'Funkcje są blokami kodu, które wykonują określone zadanie. Użyj funkcji "pobierz 5", aby pobrać 5 nektarów naraz. Użyj pętli, aby otrzymać również idealną liczbę bloków.'
      2-3 Bee Functions 3_instruction: Zbierz cały nektar z każdego kwiatka.
      2-3 Bee Functions 4_instruction: 'Funkcja "przejdź i pobierz nektar" uruchamia pszczołę, zbiera nektar, a następnie zwraca pszczołę do miejsca, gdzie to się zaczęło. Użyj tej funkcji, aby zebrać cały nektar.'
      2-3 Bee Functions 5_instruction: Teraz jest więcej nektaru na kwiatkach. Zmodyfikuj daną funkcję tak, że zbiera ona 4 nektary i użyj jej, aby zebrać cały nektar z kwiatów.
      2-3 Bee Functions 6_instruction: Teraz użyj tej samej funkcji, aby zebrać nektar z trzech kwiatów.
      2-3 Bee Functions 7_instruction: Kwiaty znajdują się dalej. Zmodyfikuj daną funkcję i użyj jej, aby zebrać cały nektar z kwiatów.
      2-3 Bee Functions 8_instruction: Utwórz własną funkcję, która pobiera 7 nektarów, porusza się do przodu i tworzy 7 miodów. Użyj tej funkcji, aby zebrać nektar z każdego kwiatka i zrobić miód na każdym plastrze miodu.
      2-3 Bee Functions 9_instruction: Utwórz własną funkcję, która idzie w dół ścieżką, pobiera nektar, robi miód, a następnie zwraca pszczołę na górę ścieżki.
      2-3 Bee Functions Assessment 1_instruction: 'Ewaluacja: Użyj danej funkcji,aby zebrać nektar z każdego kwiatka.'
      2-3 Bee Functions Assessment 2_instruction: 'Ewaluacja: Utwórz funkcję, która robi 3 miody na raz.'
      2-3 Bee Loops 1_instruction: 'Każdy kwiat zawiera jedną jednostkę nektaru. Zbierz nektar z każdego z kwiatów. '
      2-3 Bee Loops 10_instruction: Czy potrafisz użyć pętli dopóki (while) wewnątrz dwóch innych pętli, by zebrać cały nektar?
      2-3 Bee Loops 11_instruction: Użyj pętli dopóki (while), aby zebrać cały nektar z kwiatów na tej łące
      2-3 Bee Loops 12_instruction: Użyj pętli dopóki (while), aby zebrać cały nektar z kwiatów na tej łące
      2-3 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      2-3 Bee Loops 1A_instruction: 'Witam, jestem Pszczółka. Czy mógłbyś mi pomóc zebrać nektar z tych kwiatów? '
      2-3 Bee Loops 2_instruction: Użyj pętli, by zebrać nektar i zrobić miód.
      2-3 Bee Loops 2A_instruction: Czy potrafisz zrobić to samo prościej z użyciem pętli?
      2-3 Bee Loops 3_instruction: Zbierz nektar z każdego kwiatka i zrób miód na każdym plasterze miodu.
      2-3 Bee Loops 3A_instruction: Czy potrafisz użyć pętli, by zebrać cały nektar?
      2-3 Bee Loops 3B_instruction: 'Teraz użyj nowego bloku "powtarzaj", aby zebrać cały nektar i zrobić cały miód.'
      2-3 Bee Loops 4_instruction: Użyj podobnej pętli, jak w ostatniej łamigłówce, ale wprowadź do niej obrót.
      2-3 Bee Loops 4A_instruction: Co się stanie, jeśli powtórzysz w pętli tę sekwencję 3 razy? Nie zapomnij zrobić na końcu miodu!
      2-3 Bee Loops 5_instruction: Użyj pętli, by zejść stopniami na dół i zebrać cały nektar.
      2-3 Bee Loops 6_instruction: Użyj pętli, by zebrać nektar z każdego kwiatka i zrobić miód na każdy plasterze miodu.
      2-3 Bee Loops 7_instruction: Umieść te bloki w pętli, by zebrać nektar z każdego kwiatka.
      2-3 Bee Loops 8_instruction: 'Te fioletowe kwiaty zawierają nieznaną ilość nektaru. Użyj pętli "dopóki nektar", aby zebrać cały nektar. Ta pętla działa tak długo, jak długo warunek jest prawdziwy, w tym przypadku nektar > 0.'
      2-3 Bee Loops 9_instruction: Pętla while (dopóki) może wykonywać te same działania, jak instrukcja jeśli (if) w pętli. Dodaj pętlę dopóki do tego kodu do wykonania tego samego zadania.
      2-3 Bee Loops Assessment 1_instruction: 'Ocena - Użyj pętli dopóki (while), aby zebrać cały nektar z tego kwiatu.'
      2-3 Maze 1_instruction: 'Czy pomożesz mi złapać tę niegrzeczną świnkę? Ustaw razem kilka bloków "idź przodu" i naciśnij przycisk "Uruchom". '
      2-3 Maze 10_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 11_instruction: Doprowadź mnie do kwiatu, jestem głodny! Ile razy musisz powtórzyć blok?
      2-3 Maze 12 (copy 1)_instruction: 'Czy możesz zastąpić poprzednią odpowiedź przez tylko dwa bloki? (Wskazówka: utwórz pętlę z użyciem bloku "powtórz razy")'
      2-3 Maze 12 (copy 2)_instruction: 'Czy możesz zastąpić poprzednią odpowiedź przez tylko dwa bloki? (Wskazówka: utwórz pętlę z użyciem bloku "powtórz razy")'
      2-3 Maze 12 (old)_instruction: 'Doprowadź mnie do świnki, teraz z użyciem bloku "powtarzaj razy"!'
      2-3 Maze 12_instruction: 'Czy możesz zastąpić te pięć bloków tylko dwoma blokami? (Wskazówka: Utwórz pętlę z użyciem bloku "powtórz razy".)'
      2-3 Maze 13 (old)_instruction: 'Doprowadź mnie do świnki, teraz z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 13_instruction: Doprowadź mnie do świnki z użyciem tylko dwóch bloków.
      2-3 Maze 14 (old)_instruction: 'Doprowadź mnie do świnki z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 14_instruction: 'Doprowadź mnie do słonecznika! (Gdzie jest ten blok "powtórz razy", gdy go potrzebuję?)'
      2-3 Maze 15 (old)_instruction: 'Doprowadź mnie do świnki z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 15_instruction: Użyj dwóch pętli, aby dostać się do świnki za pomocą mniejszej liczby bloków.
      2-3 Maze 16 (old)_instruction: 'Doprowadź mnie do świnki z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 16 before_instruction: Doprowadź mnie do świnki.
      2-3 Maze 16_instruction: Doprowadź mnie do słonecznika. Ustaw ciąg bloków w pętli!
      2-3 Maze 2_instruction: Ta świnka jeży moje pióra. Pomóż mi, by ją dopaść!
      2-3 Maze 3_instruction: Wyznacz trasę i prowadź mnie do tej głupiej świnki. Unikaj TNT lub inaczej będą latać pióra!
      2-3 Maze 4_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 5_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 6_instruction: Zachowaj spokój i pomóż mi znaleźć tę złą świnkę. W przeciwnym razie mogę się rozgniewać!
      2-3 Maze 7_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 8_instruction: Doprowadź mnie do świnki!
      2-3 Maze 9_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze Loops 1_instruction: Czy potrafisz doprowadzić mnie do świnki przy użyciu 5 bloków?
      2-3 Maze Loops 17_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 18_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 19_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 20_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 21_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops Assessment 1_instruction: 'Ocena: Doprowadź mnie do słonecznika przy użyciu tylko 5 bloków! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Doprowadź mnie do świnki! Które bloki powtórzysz?
      2-3 Maze sq10v2_instruction: Doprowadź mnie do świnki! Które bloki powtórzysz?
      2-3 maze sq11_instruction: Doprowadź mnie do świnki! Które bloki powtórzysz?
      2-3 maze sq12_instruction: 'Czy potrafisz zastąpić poprzednią odpowiedź z pętlą stosując blok "powtórz razy"?'
      2-3 maze sq13_instruction: 'Drodzy. Mnie zombie. ... Muszę dostać ... do słonecznika. Utwórz pętlę z blokiem "powtarzaj aż".'
      2-3 maze sq14_instruction: Czy możesz dostać się do słonecznika przy użyciu tylko czterech bloków?
      2-3 maze sq15_instruction: Czy możesz dostać się do słonecznika przy użyciu tylko pięciu bloków?
      2-3 maze sq16_instruction: OK, to jest podobne, ale nieco inne. Czy potrafisz to wykonać z zaledwie pięcioma blokami?
      2-3 Maze sq2_instruction: Wyznacz trasę i prowadź mnie do tej głupiej świnki. Unikaj TNT lub inaczej będą latać pióra!
      2-3 Maze sq3_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze sq4_instruction: Zachowaj spokój i pomóż mi znaleźć tę złą świnkę. W przeciwnym razie mogę się rozgniewać!
      2-3 Maze sq5_instruction: Doprowadź mnie do świnki! Ile razy musisz powtórzyć blok?
      2-3 Maze sq6_instruction: 'Czy potrafisz zastąpić poprzednią odpowiedź tylko z dwoma blokami? (Wskazówka: Utwórz pętlę z użyciem bloku "powtarzaj razy".)'
      2-3 Maze sq7_instruction: Doprowadź mnie do tego zielonego intruza używając tylko trzech bloków.
      2-3 Maze sq8_instruction: 'Doprowadź mnie do świnki! (Gdzie jest ten blok "powtarzaj razy", gdy go potrzebuję?)'
      2-3 Maze sq9_instruction: Utwórz pętlę, aby dotrzeć do świnki używając mniejszej liczby bloków.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Pomóż ptakowi złapać niegrzeczną świnkę przesuwając go do przodu
      4-5 Artist 1_instruction: 'Pomóż mi skończyć rysować moje pudełko. (Każda linia ma długość 300 pikseli) '
      4-5 Artist 10_instruction: 'Naciśnij przycisk "Uruchom", aby sprawdzić kod. Następnie, powtórz to tyle razy, aby zakończyć rysowanie. Kolory będą różne za każdym razem.'
      4-5 Artist 11_instruction: Dokończ zielone linie. Linie maja długość 300 pikseli i leżą 15 pikseli od siebie.
      4-5 Artist 2_instruction: Czy potrafisz powtórzyć ten kod w pętli, aby utworzyć kwadrat?
      4-5 Artist 3.5_instruction: 'OK, zobacz, co się dzieje, gdy uruchomisz ten kod (lub naciśnij przycisk "Uruchom"). Następnie powtórz to kilka razy, aby ukończyć rysowanie. Kolory (najprawdopodobniej) będą za każdym razem inne.'
      4-5 Artist 3_instruction: To prostokątne pole kwiatowe ma obwód 600. Dłuższy bok ma długość 200. Narysuj ten prostokąt.
      4-5 Artist 4_instruction: 'Ile stopni jest w okręgu?  Umieść bloki w pętli, aby utworzyć koło kolorów.'
      4-5 Artist 5_instruction: Jakiego używasz kąta?
      4-5 Artist 6_instruction: Ten równoboczny trójkąt ma kąty 60, 60 i 60 stopni. Każdy z boków ma długość 200 pikseli. Ukończ rysunek.
      4-5 Artist 7_instruction: Ten prostokątny trójkąt ma kąty 30, 60 i 90 stopni. Długość pochyłego boku jest równa podwójnej wysokości wynoszącej 100 pikseli. Ukończ rysunek.
      4-5 Artist 8_instruction: Linia w połowie boiska do piłki nożnej jest prostopadła do linii bocznej. To boisko ma obwód 800 pikseli i jest 240 pikseli długie. Jaką ma szerokość? Narysuj boki boiska i linię w jego połowie.
      4-5 Artist 9_instruction: Narysuj ować drugą połowę tak, że rysunek jest symetryczny. Trójkąty są równoboczne i 50 pikseli długie.
      4-5 Artist Assessment 1_instruction: 'Ocena: Użyj pętli, aby narysować trójkąt równoboczny. Każdy bok ma długość 300 pikseli.'
      4-5 Artist For Loops 1_instruction: Umieść liczby od 1 do 10 w blokach szerokości i uruchom kod.
      4-5 Artist For Loops 11_instruction: 'Uzupełnij blok "dla" tak, aby liczył: 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Co się stanie, jeżeli zamienisz miejscami liczby "od" i "do"? Uzupełnij blok "dla" tak, że on liczy 200, 180, 160, 140, 120... 0. '
      4-5 Artist For Loops 13_instruction: 'Ten rysunek zaczęło bez pętli "dla" (for) i używa zbyt wielu bloków!  Użyj bloku "dla" do wykonania spirali.  Wskazówka: Długość ostatniej linii wynosi 250 pikseli.'
      4-5 Artist For Loops 14_instruction: 'Ktoś zaczął pisać kod, ale uświadomił sobie, że musi istnieć szybszy sposób! Użyj bloku "dla" (for), by zastąpić inne bloki i ukończyć trójkątną spiralę. Wskazówka: Długość ostatniej linii wynosi 300 pikseli.'
      4-5 Artist For Loops 15_instruction: 'Ktoś zaczął pisać kod, ale uświadomił sobie, że musi istnieć szybszy sposób! Użyj bloku "dla" (for), by zastąpić inne bloki i ukończyć sześciokątną spiralę. Wskazówka: Długość ostatniej linii wynosi 200 pikseli.'
      4-5 Artist For Loops 2_instruction: 'To jest blok "dla". Zamiast wypisywać 1, 2, 3, ..., 10, blok "dla" służy do powtarzania bloków w nim zawartych, może także zliczać liczby. Umieść liczbę 10 w sekcji "do" w bloku "dla".'
      4-5 Artist For Loops 3_instruction: 'Jak możemy liczyć od 1 do 50? Zmodyfikuj blok "dla".'
      4-5 Artist For Loops 4_instruction: 'Uzupełnij blok "dla" tak, że liczy on od 1 co 1 do 10.'
      4-5 Artist For Loops 6_instruction: 'Narysuj kwadraty o bokach 50, 60, 70, 80 i 90 pikseli. Musisz użyć funkcji "narysuj kwadrat" pięć razy.'
      4-5 Artist For Loops 7_instruction: 'Narysuj takie same kwadraty, ale użyj bloku "licz z" (count with), dla zmiany rozmiaru. Umieść blok "licznik" (counter) w funkcji "rysuj kwadrat". Wskazówka: ten blok znajduje się w kategorii "Zmienne" (Variables).'
      4-5 Artist For Loops 8_instruction: 'Czy potrafisz ukończyć program umieszczając w bloku "dla" bloki, które liczą od 10 do 200 co 10? Blok "dla" możesz znaleźć w kategorii Pętle (Loops).'
      4-5 Artist For Loops 9_instruction: 'Te okręgi mają rozmiar 5, 10, 15, 20, 25, 30 i 35. Narysuj te okręgi przy użyciu bloku "dla".'
      4-5 Artist Free Draw 1_instruction: 'Wolny wybór!  Narysuj cokolwiek, co inspiruje Cię do kreatywnosci.'
      4-5 Artist Functions 1_instruction: Użyj pętli Powtórz, aby narysować ten trójkąt.
      4-5 Artist Functions 10a_instruction: 'Umieść ten kod w funkcji "rysuj płatek śniegu" i zastąp 50 przez parametr "rozmiar". Ta funkcja jest już wywoływana, by utworzyć płatek śniegu, który ma 100 pikseli.'
      4-5 Artist Functions 10b_instruction: 'Użyj funkcji "rysuj płatek śniegu" do tworzenia płatków różnej wielkości.  Wskazówka: pierwszy płatek śniegu ma długość 25 i każdy następny płatek śniegu jest dwa razy większy niż poprzedni płatek.'
      4-5 Artist Functions 11_instruction: 'Funkcja "rysuj sześciokąt" wykorzystuje funkcję "rysuj trójkąt". Ukończ funkcję rysującą sześciokąt. (Wskazówka: sześciokąt ma 6 boków, każdy o długości 100 pikseli)'
      4-5 Artist Functions 12_instruction: 'Ukończ funkcję "rysuj fale".  Każda fala składa się z jednej fali górnej i jednej fali dolnej.   Wskazówka: Narysuj 5 błękitnych fal.'
      4-5 Artist Functions 13 Free play_instruction: Oto niektóre funkcje do rysowania planet, gwiazd, rakiet i robotów. Skorzystaj z nich, by wykonać rysunki, którymi podzielisz się ze swoim znajomymi.
      4-5 Artist Functions 14 Free play_instruction: 'Tutaj udostępniamy Ci kilka funkcji.  Użyj ich jak uważasz wewnątrz jednej lub wielu pętli, by wykonać rysunki, którymi podzielisz się ze swoimi znajomymi. Kliknij przycisk "Uruchom", aby zobaczyć, jak wyglądają.'
      4-5 Artist Functions 15 Assessment_instruction: 'Ocena: Użyj funkcji "rysuj kwadrat", by tworzyć kwadraty. Kwadraty mają 50, 100 i 150 pikseli.'
      4-5 Artist Functions 2a_instruction: 'Teraz umieść te bloki w nowej funkcji o nazwie "rysuj mały trójkąt" i wywołaj ją.'
      4-5 Artist Functions 2b_instruction: 'Teraz utwórz funkcję o nazwie "rysuj mały trójkąt" przy użyciu dostępnych bloków.'
      4-5 Artist Functions 3_instruction: 'Teraz utwórz funkcje "rysuj średni trójkąt" i "rysuj duży trójkąt". Funkcję "rysuj mały trójkąt" wykonaliśmy już dla Ciebie. Długości boków trójkątów wynoszą 50 (mały), 100 (średni) i 150 (duży). '
      4-5 Artist Functions 4_instruction: 'Ta nowa funkcja "rysuj trójkąt" ma parametr i może wykonać to, co robią wszystkie trzy wcześniejsze funkcje. Narysuj te same trójkąty przy użyciu tej nowej funkcji.'
      4-5 Artist Functions 5_instruction: 'Czy potrafisz zmodyfikować funkcję "rysuj trójkąt" jako "rysuj kwadrat", aby zmienić rysunek?'
      4-5 Artist Functions 6_instruction: 'Użyj funkcji "narysuj kwadrat" i "narysuj trójkąt", aby narysować dom. (Wskazówka: Boki kwadratu mają długość 200 pikseli)'
      4-5 Artist Functions 6b_instruction: 'Użyj funkcji służących do rysowania kwadratu i trójkąta wraz z innymi blokami, aby utworzyć dom dodając je do funkcji "rysuj dom" a następnie wywołaj ją.'
      4-5 Artist Functions 7_instruction: 'Użyj funkcji "rysuj dom", aby narysować domy, które mają 100 pikseli i 50 pikseli. Te dwa domy są oddzielone o 50 pikseli.'
      4-5 Artist Functions 8_instruction: 'Funkcja "rysuj kwiat" ma parametr, który pozwala ustawić wysokość łodygi.  Ustaw go na 200 i obserwuj, co się dzieje.'
      4-5 Artist Functions 9_instruction: Narysuj te 3 kwiaty. Pierwszy ma ma wysokość 100 i kolejny kwiat jest zawsze 50 pikseli wyższy niż poprzedni kwiat. Odległość między kwiatami wynosi 100 pikseli.
      4-5 Artist Patterns 1_instruction: Czy potrafisz narysować ten kwadrat używając pętli? Każdy z boków ma długość 20 pikseli.
      4-5 Artist Patterns 10_instruction: 'Ten kod rysuje dwa rzędy sześciokątów - całość powtórz w pętli 4 razy, by narysować cały plaster miodu. Wskazówka: Musisz skoczyć z powrotem 120 pikseli w najbardziej zewnętrznej pętli, by mieć pewność, że artysta nie rysuje poza ekranem.'
      4-5 Artist Patterns 11_instruction: 'Ile razy trzeba wykonać to w pętli, by narysować półokrąg? Wskazówka: Jeśli okrąg ma 360 stopni i w każdym obrocie pętli następuje przesunięcie o 3 stopnie, to ile razy trzeba wykonać pętlę, by narysować pełny okrąg?'
      4-5 Artist Patterns 12_instruction: Jeśli skopiujesz tę pętlę i zamiast skrętu w lewo wykonasz skręt w prawo, to co się stanie? Czy możesz to powtórzyć, by narysować tę falę?
      4-5 Artist Patterns 13_instruction: 'Teraz powtórz to wszystko 4 razy w pętli, aby utworzyć ramkę na obrazek. Uważaj na rogi - nie możesz tak po prostu obrócić się o 90 stopni! Jeśli powtórzenie w pętli 3 stopni 60 razy tworzy półokrąg, to które z tych bloków kodu sprawi, ze utworzy że ćwierć okręgu na rogach?'
      4-5 Artist Patterns 2_instruction: Jeśli umieścisz pętlę dla kwadratu w innej pętli, to otrzymasz zagnieżdżoną pętlę. Co powinieneś dodać do swojej zewnętrznej pętli, aby mieć pewność, że wszystkie 15 kwadratów będzie leżeć w linii obok siebie?
      4-5 Artist Patterns 3_instruction: Przejdźmy teraz jeden poziom dalej! Zagnieździliśmy cały blok kodu w innej pętli, ale teraz musisz wydostać artystę z powrotem do miejsca, w którym narysuje następną linię. Które z tych bloków kodu możesz umieścić na końcu najbardziej zewnętrznej pętli, aby narysować całą siatkę?
      4-5 Artist Patterns 4_instruction: Ten diament ma boki długości 50 pikseli i kąty 120 oraz 60 stopni. Użyj pętli, by go narysować.
      4-5 Artist Patterns 5.5_instruction: Ile razy trzeba powtórzyć ten blok, by narysować pełną siatkę diamentów?
      4-5 Artist Patterns 5_instruction: 'Powtórzmy to, aby otrzymać rząd 6 diamentów. Zauważ, że zmieniliśmy nasz kod diamentu, by powtarzać 3 razy zamiast 2 - jak uważasz, dlaczego?'
      4-5 Artist Patterns 6_instruction: Ile razy trzeba powtórzyć ten blok, by narysować pełną siatkę diamentów?
      4-5 Artist Patterns 7_instruction: 'Zmodyfikujmy kod z ostatniej łamigłówki, aby utworzyć ten bardziej złożony wzór. Zauważ, jak diamenty pokrywają się teraz, spróbuj zmienić pierwszy blok "skocz do tyłu" ze 100 na 50 (o połowę bliżej) - a teraz jak daleko powinien pójść artysta w drugim bloku "skocz do tyłu"?'
      4-5 Artist Patterns 8_instruction: Użyj pętli, by narysować ten sześciokąt z bokami o długości 40 pikseli i kątami 60 stopni.
      4-5 Artist Patterns 9.5_instruction: Umieść ten kod w pętli ten kod, by narysować dwa rzędy sześciokątów. Zauważ, w jaki sposób nasz drugi rząd jest przesunięty w prawo.
      4-5 Artist Patterns 9_instruction: 'Teraz powtórz ten kod 3 razy, aby narysować cały rząd. Wskazówka: Każdy sześciokąt jest szeroki na 80 pikseli od lewej do prawej.'
      4-5 Artist Patterns Free Play_instruction: 'Dowolna gra - spróbuj swoich sił tworząc własny wzór!'
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Pszczółka nie rozpoznaje, czy to jest kwiat czy plaster miodu. Zbierz nektar z kwiatów, ale najpierw sprawdź, czy to jest kwiat czy plaster miodu.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Pszczółka chce teraz tylko nektaru. Pamiętaj, że nie wszystkie obiekty są kwiatami, upewniaj się więc, że nektar jest zbierany tylko z kwiatów.
      4-5 Bee Conditionals 3_instruction: Teraz pszczółka chce robić miód. Upewniaj się, że miód jest robiony tylko na plastrze miodu.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 'Nieznany obiekt jest kwiatem lub plastrem miodu. Użyj bloku "jeśli/w przeciwnym razie" (if/else), by zbierać nektar, jeśli jest to kwiat, lub w przeciwnym razie robić miód (bo to jest plaster miodu).'
      4-5 Bee Conditionals 5_instruction: 'Może to być kwiat lub plaster miodu. Użyj bloku "jeśli/w przeciwnym razie" (if/else), by zbierać nektar, jeśli jest to kwiat, lub w przeciwnym razie robić miód (bo to jest plaster miodu).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 'Ten fioletowy kwiat może mieć 3, 2 lub 1 nektaru. Tutaj, blok "jeśli/w przeciwnym razie" (if/else) jest połączony z innym blokiem "jeśli/w przeciwnym razie", by utworzyć blok "jeśli/w przeciwnym razie-jeśli/w przeciwnym razie". Ukończ rozwiązanie, by zebrać nieznaną ilość nektaru.'
      4-5 Bee Conditionals 7_instruction: 'Pamiętaj, że fioletowe kwiaty mogą mieć 3, 2 lub 1 nektarów. Ukończ funkcję "sprawdź fioletowy kwiat" i użyj jej, by zebrać cały nektar z kwiatów.'
      4-5 Bee Conditionals 8_instruction: 'Napisz funkcję wewnątrz bloku o nazwie "sprawdź kwiat zrób miód". Twoja funkcja powinna sprawdzać jak dużo nektaru ma fioletowy kwiat, zebrać go, przejść dalej a następnie zrobić miód.'
      4-5 Bee Conditionals Assessment 1_instruction: 'Ocena: Ten kod nie jest poprawny. Ukończ funkcję "zbierz nektar lub zrób miód", a następnie wywołaj ją, by zebrać cały nektar i miód. Pamiętaj, że fioletowe kwiaty mogą mieć 3, 2 lub 1 nektarów.'
      4-5 Bee Debugging 1_instruction: Te bloki nie odpowiadaj mi. Czy mógłbyś je naprawić?
      4-5 Bee Debugging 10_instruction: Znajdź błędy i napraw je.
      4-5 Bee Debugging 11_instruction: Czy to liczy poprawnie?
      4-5 Bee Debugging 2_instruction: Pomóż pszczółce zebrać nektar i zrobić miodu.
      4-5 Bee Debugging 3_instruction: Znajdź błędy i napraw je.
      4-5 Bee Debugging 4_instruction: Te bloki nie działają. Jaki jest wzór?
      4-5 Bee Debugging 5_instruction: Coś tu nie gra ...
      4-5 Bee Debugging 6_instruction: Fioletowy kwiatek zawiera nieznaną ilość nektaru. Napraw bloki, aby zebrać cały nektar z kwiatka.
      4-5 Bee Debugging 7_instruction: Czegoś brakuje w tej funkcji...
      4-5 Bee Debugging 8_instruction: Ta funkcja jest w porządku, ale nie jest prawidłowo wykorzystana.
      4-5 Bee Debugging 9_instruction: Dlaczego pszczółka nie robi wystarczająco dużo miodu?
      4-5 Bee Debugging Assessment 1_instruction: 'Ocena: Popraw kod.'
      4-5 Bee Nested Loops 1_instruction: Użyj pętli, by zebrać cały nektar.
      4-5 Bee Nested Loops 2_instruction: 'Zbierz cały nektar z każdego kwiatka. Użyj zagnieżdżonej pętli. '
      4-5 Bee Nested Loops 3_instruction: Zbierz cały nektar umieszczając kod startowy w zagnieżdżonej pętli.
      4-5 Bee Nested Loops 4_instruction: 'Zbierz cały nektar z każdego kwiatka i zrób miód na każdym plastrze miodu. Użyj zagnieżdżonej pętli. '
      4-5 Bee Nested Loops 5_instruction: Zbierz cały nektar tworząc zagnieżdżoną pętlę.
      4-5 Bee Nested Loops 6_instruction: Zbierz cały nektar.
      4-5 Bee Nested Loops 7_instruction: Umieść tę pętlę wewnątrz innej pętli, by utworzyć zagnieżdżoną pętlę i zebrać cały nektar z kwiatów.
      4-5 Bee Nested Loops 8_instruction: 'Zbierz cały nektar z tych kwiatów używając zagnieżdżonej pętli "dopóki" (while). Zastąp wewnętrzny blok "powtórz razy" przez blok "dopóki". '
      4-5 Bee Nested Loops 9_instruction: 'Zbierz cały nektar z tych kwiatów umieszczając pętlę "dopóki" w pętli "powtórz".'
      4-5 Bee Nested Loops Assessment 1_instruction: 'Ocena: Zbierz cały nektar i zrób cały miód używając pętli.'
      4-5 Bee Nested Loops Rows_instruction: Zbierz nektar z rzędów kwiatów! Użyj zagnieżdżonych pętli.
      4-5 Maze 1 (copy 1)_instruction: Drodzy. Mnie zombie. ... Musi dotrzeć... do słonecznika.
      4-5 Maze 1_instruction: Drodzy. Mnie zombie. ... Musi dotrzeć... do słonecznika.
      4-5 Maze 10_instruction: Czy możesz dostać się do słonecznika przy użyciu tylko czterech bloków?
      4-5 Maze 11_instruction: Czy możesz dotrzeć do słonecznika przy użyciu tylko sześciu bloków?
      4-5 Maze 12_instruction: OK, to jest nieco inne. Czy możesz to zrobić w zaledwie sześciu blokach?
      4-5 Maze 13_instruction: Doprowadź mnie do świnki!
      4-5 Maze 14_instruction: 'Doprowadź mnie do świnki! Użyj bloku "powtarzaj aż" (repeat until).'
      4-5 Maze 2 (copy 1)_instruction: Doprowadź zombie do słonecznika, ale unikaj chrupacza!
      4-5 Maze 2_instruction: Doprowadź zombie do słonecznika, ale unikaj chrupacza!
      4-5 Maze 3 (copy 1)_instruction: Muszę ... dotrzeć ... do słonecznika.
      4-5 Maze 3_instruction: Muszę ... dotrzeć ... do słonecznika.
      4-5 Maze 4 (copy 1)_instruction: 'Spróbuj użyć blok "powtórz", by użyć mniej bloków...'
      4-5 Maze 4_instruction: 'Spróbuj użyć blok "powtórz", by użyć mniej bloków...'
      4-5 Maze 5 (copy 1)_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 5_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 6 (copy 1)_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 6_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 7_instruction: Drodzy. Mnie zombie. ... Musi dotrzeć... do słonecznika.
      4-5 Maze 8_instruction: 'Użyj bloku "powtórz", aby doprowadzić zombie do słonecznika. (Unikaj chrupacza!)'
      4-5 Maze 9_instruction: 'Utwórz pętlę z użyciem bloku "powtarzaj aż".'
      4-5 Maze Assessment 1_instruction: 'Ocena: Dostać się do słonecznika.'
      4-5 Maze Conditionals 1_instruction: 'Użyj bloku "powtarzaj aż", by doprowadzić zombie do słonecznika.'
      4-5 Maze Conditionals 10_instruction: Czy możesz dodać tylko 3 bloczki aby pomóc mi przejść bardziej skomplikowany labirynt? Jeśli znajdziesz prawidłowe rozwizanie pokonam każdą krętą drogę bez względu na jej długość.
      4-5 Maze Conditionals 2_instruction: 'Użyj bloku "powtarzaj aż", by doprowadzić zombie do słonecznika.'
      4-5 Maze Conditionals 3_instruction: 'Użyj bloku "jeśli" (if), by pozwolić mi decydować, kiedy skręcić. Wskazówka: potrzebujesz tylko jednego więcej bloku, ale dowiedz się, jak został on ustawiony, abyś mógł to zrobić samodzielnie następnym razem.'
      4-5 Maze Conditionals 4_instruction: 'OK, to jest podobne do ostatniej łamigłówki, ale musisz pamiętać, jak użyłeś bloków "jeśli" (if) i "powtórz" (repeat) razem.'
      4-5 Maze Conditionals 5_instruction: 'Potrzeba mi słonecznik! Użyj bloku "jeśli" (if), aby doprowadzić mnie tam z najmniejszą liczbę bloków.'
      4-5 Maze Conditionals 6_instruction: 'Potrzeba mi słonecznik! Użyj bloku "jeśli" (if), aby doprowadzić mnie tam z najmniejszą liczbę bloków.'
      4-5 Maze Conditionals 7_instruction: 'OK, zróbmy to ponownie dla wprawy - to nie jest specjalnie inne, ale uważaj na chrupaczy!'
      4-5 Maze Conditionals 8_instruction: 'Blok "jeśli-w przeciwnym razie" (If-else) sprawdza warunek, a następnie wykonuje jedno albo drugie. Użyj tego nowego bloku, aby doprowadzić mnie do słonecznika.'
      4-5 Maze Conditionals 9_instruction: 'Jeszcze jedno ćwiczenie z wykorzystaniem bloczku "Jeśli - w przeciwnym razie". Ciekawe czy uda Ci się za pierwszym razem?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Użyj bloków "powtarzaj aż" (repeat until) i "jeśli-w przeciwnym razie" (if-else), aby doprowadzić mnie do słonecznika za pomocą możliwie najmniejszej liczby bloków.'
      4-5 Nested Loops 1_instruction: 'Uzupełnij kod do rysowania tych trójkątów.  Pierwszy z nich już wykonano dla Ciebie.  Wskazówka: 3 trójkąty w rotacji 360 stopni.'
      4-5 Nested Loops 10_instruction: Narysuj ostatni rząd gwiazd na tej fladze powtarzając dane bloki. Gwiazdy są oddalone o 50 pikseli, ale pamiętaj, że same gwiazdy są szerokie na 30 pikseli.
      4-5 Nested Loops 11_instruction: Czy potrafisz narysować te 10 kwadratów na tym chodniku przy użyciu zagnieżdżonej pętli? Każdy kwadrat ma 30 pikseli.
      4-5 Nested Loops 12_instruction: Czy potrafisz narysować tych 36 trójkątów za pomocą zagnieżdżonej pętli?
      4-5 Nested Loops 2_instruction: 'Teraz umieść tę pętlę wewnątrz innej pętli, by narysować 10 trójkątów.  To się nazywa zagnieżdżoną pętlą.  Wskazówka: Te 10 trójkątów wykonuje obrót o 360 stopni.  '
      4-5 Nested Loops 3_instruction: "Utwórz słońce zagnieżdżając początkowy kod w innej pętli. To się nazywa zagnieżdżoną pętlą. \r\n"
      4-5 Nested Loops 5_instruction: Zapętl dany kod, aby stworzyć wiatrak.
      4-5 Nested Loops 6_instruction: Czy potrafisz narysować sześciokąt powtarzając kod trójkąta?
      4-5 Nested Loops 7_instruction: 'Powtórz ten wzór 10 razy. O ile trzeba skręcić w każdym obrocie pętli? (Wskazówka:  ile wynosi 360 podzielone przez 10?)'
      4-5 Nested Loops 8_instruction: 'Powtórz ten wzór 6 razy. O ile trzeba skręcić w każdym obrocie pętli? (Wskazówka:  ile wynosi 360 podzielone przez 6?)'
      4-5 Nested Loops 9_instruction: Narysuj zęby w paszczy aligatora!
      4-5 Nested Loops Assessment 1_instruction: Użyj zagnieżdżonej pętli, aby ukończyć projekt.
      4-5 While Loops 1_instruction: 'Doprowadź mnie do otworu i wypełnij go z dwoma szufelkami śmieci przy użyciu bloku "wypełnij" (fill).'
      4-5 While Loops 2_instruction: 'Doprowadź mnie do kupy śmieci i usuń je za pomocą 5 szufelek przy użyciu bloku "usuń" (remove).'
      4-5 While Loops 3_instruction: 'Doprowadź mnie stosu i usunąć go, a następnie przejdź do otworu i wypełnij go całkowicie.  Wskazówka: Użyj możliwie jak najmniej bloków.'
      4-5 While Loops 4_instruction: 'Wow, znalazłem naprawdę głęboki otwór! Nie wiem, ile szufelek śmieci potrzeba.  Czy potrafisz napisać program, który wypełni go do poziomu ziemi?  Wskazówka: Spróbuj użyć pętli "dopóki" (while).'
      4-5 While Loops 5_instruction: Wow, teraz są dwa głębokie otwory! Czy potrafisz napisać program, który wypełnia je do poziomu ziemi?
      4-5 While Loops 6_instruction: Wow, tam jest duża kupa śmieci! Czy mógłbyś napisać program, który usuwa wszystko do poziomu ziemi?
      4-5 While Loops 7_instruction: Wow, teraz tam są trzy kupy śmieci! Czy mógłbyś napisać program, który usuwa każdą z nich aż do poziomu ziemi?
      4-5 While Loops 8_instruction: ' To naprawdę jest głęboki dół i duża kupa śmieci.  Ile trzeba usunąć szufli śmieci, aby wyrównać teren do poziomu ziemi?  Wskazówka: Użyj pętli "dopóki" (while).'
      4-5 While Loops Assessment 1_instruction: 'Jest tutaj wiele otworów i stert.  Pomóż mi wypełnić otwory i usunąć stery, by wyrównać teren.'
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Użyj zagnieżdżonej pętli, aby ukończyć projekt.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point your game your danger should
        run across the screen from right to left, and your target should run across
        from left to right. They don't ever come back on screen once they've left,
        but we'll take care of that later. Take a minute to make sure your game is
        working like you want it to, and then click finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your danger should run across
        the screen from right to left, your target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete (copy 1)_instruction: |
        A demo of the completed CS in Algebra
        Big Game project
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!Last
        time you worked on your game, you used booleans to make your Target and Danger
        return to the screen once they've left. Click Run to see how your game looks
        right now, and then we'll get to making your Player move up and down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should have a domain of Number, range
        of Number, and return the given number to the power of 3. Make sure to write
        two example cases! When you're done, use your new function to calculate 7
        cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction rocket-height that states it has a range of Number, domain of Number,\nand should return the height of the rocket traveling at 15 m/s after a given\nnumber of seconds. Let's write an example case now for the height of the\nrocket at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      course 1 artist 1 level 10_instruction: |
        Draw the dashed line by using both
        the jump and draw blocks
      course 1 artist 1 level 9_instruction: Draw this using three lines
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Czy potrafisz doprowadzić mnie do świnki przy użyciu 5 bloków?
      Course 4 2_instruction: Pszczółka chce nektaru. Pamiętaj, że nie wszystkie obiekty są kwiatami, upewniaj się więc, że nektar jest zbierany tylko kwiatów.
      Course 4 Artist 1_instruction: 'Pomóż mi ukończyć rysowanie mojego pudełka. (Każda linia ma długość 300 pikseli) '
      Course 4 Artist 10_instruction: 'To czas na zabawę! Baw się rysując cokolwiek chcesz. '
      Course 4 Artist 2_instruction: Czy potrafisz powtórzyć ten kod, aby pomalować na szaro obszar poza kwadratem?
      Course 4 Artist 3_instruction: 'OK, zorientuj się, co się dzieje, jeśli uruchomisz ten kod (naciśnij przycisk "Uruchom"). Następnie, powtórz to dość razy, aby ukończyć rysunek.'
      Course 4 Artist 4_instruction: 'Ile stopni jest w okręgu?  Uzupełnij blok "powtórz" tą liczbą, by otrzymać koło kolorów.'
      Course 4 Artist 5_instruction: Narysuj drugą połowę tego wzoru tak, aby był symetryczny. Trójkąty są równoboczne i mają boki o długości 50 pikseli.
      Course 4 Artist 6_instruction: 'Uzupełnij kod, by narysować te trójkąty. Wskazówka: 3 trójkąty w rotacji 360 stopni.'
      Course 4 Artist 7_instruction: 'Umieść tę pętlę wewnątrz innej pętli, narysować 10 trójkątów.  To się nazywa zagnieżdżoną pętlą.  Wskazówka: Tych 10 trójkąty wypełnia obrót o 360 stopni.  '
      Course 4 Artist 8_instruction: Narysuj to słońce powtarzając ten blok kodu 12 razy.
      Course 4 Artist 9_instruction: 'Powtórz ten wzór 10 razy i bądź pewien, że  obracasz się między każdymi dwoma kształtami. Oto wskazówka, ile ma wynosić obrót: ile wynosi 360 podzielone przez 10?'
      Course 4 Artist Binary 1_instruction: |
        Here's a function that takes a binary
        string of 1's and 0's and instructs the artist to turn on the go from left
        to right, top to bottom, filling in the squares when it sees a 1 and ignoring
        it when it sees a 0. Run this code to see how the artist uses binary to draw
        this pattern.
      Course 4 Artist Binary 2_instruction: |
        Which of these binary strings could
        you loop 8 times to draw this image?
      Course 4 Artist Binary 3_instruction: |
        Can you draw this pattern by looping
        a three digit binary string?
      Course 4 Artist Binary 4_instruction: |
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      Course 4 Artist Binary 5_instruction: Który 6-cyfrowy binarny łańcuch, powtórzony 11 razy, narysuje ten obraz?
      Course 4 Artist Binary 6_instruction: Jaki jest najkrótszy łańcuch binarny, który możesz powtórzyć, by narysować ten obraz?
      Course 4 Artist Binary 7_instruction: Ukończ ten rysunek.
      Course 4 Artist Binary Free Play 2_instruction: |
        Free Play: Here's a higher
        resolution canvas to draw on - 16 bits by 16 bits!
      Course 4 Artist Binary Free Play_instruction: 'Czas na zabawę: Narysuj cokolwiek tak jak z binary.'
      Course 4 Artist For  Functions 10_instruction: |
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For  Functions 11_instruction: |
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For Loops 1_instruction: 'Narysuj ten trójkąt, który ma 50 pikseli. Wskazówka: Użyj bloku "powtarzaj" (repeat).'
      Course 4 Artist For Loops 10_instruction: |
        Free Play Time! Have fun drawing
        whatever you like with the blocks you have learned how to use
      Course 4 Artist For Loops 11_instruction: |
        Remember when we used a variable
        to control the number of sides in a shape? This pattern starts with a triangle
        and adds one side at a time until it draws a decagon (10 sides). Each side
        should be 100 pixels long. Hint: 360 divided by the number of sides a shape
        has is the number of degrees you'll need to turn.
      Course 4 Artist For Loops 12_instruction: |
        That looked pretty cool, but now
        I'd like to draw each shape next to the last one. This time each side is
        20 pixels. Use a jump block to jump forward 40 pixels after each shape. 
      Course 4 Artist For Loops 13_instruction: |
        Hmmm, those shapes are getting bigger
        every time! Didn't we already solve this problem with variables? How can
        we use the counter variable to make the sides smaller as there are more of
        them? Instead of moving forward by a set amount, try moving forward (100 /
        counter) pixels.
      Course 4 Artist For Loops 14_instruction: |
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect. Try turning
        89 degrees to create this twisted square spiral.
      Course 4 Artist For Loops 15_instruction: |
        Free Play: Try making some drawings
        of your own using For Loops. We've added a few generic variables for you
        to use as well.
      Course 4 Artist For Loops 2_instruction: |
        I've put the code for drawing a
        triangle inside a for loop that counts from 50 to 100 by 10. Take a look at
        how I built the code then click on "Run" when you are ready to see it in
        action. 
      Course 4 Artist For Loops 3_instruction: |
        The smallest triangle has 20 pixel
        sides, the largest has 200 pixel sides, and each triangle is 20 pixels larger
        than the last. Update the for loop to draw these triangles.
      Course 4 Artist For Loops 4_instruction: |
        Use a for loop to draw these squares.
        They start at 50 pixels long, the largest is 300 pixels long, and each square
        is 25 pixels larger than the last. I have given you almost all the code you
        will need - you're missing one block, which one is it?
      Course 4 Artist For Loops 5_instruction: |
        Good job on the last puzzle! Let's
        use that "counter" variable block again to draw this cool picture. 
      Course 4 Artist For Loops 6_instruction: |
        Free Play! Try using a for loop to
        draw a growing shape pattern of your own design.
      Course 4 Artist For Loops 7_instruction: |
        What happens if you remove the "Repeat
        3" from this algorithm, keeping the "move" and "turn" blocks in the for
        loop? In this spiraling triangle, each side is a 20 pixels longer than the
        last.
      Course 4 Artist For Loops 8_instruction: |
        The smallest line of this square
        spiral is 10, the largest is 200, and each line is 10 pixels longer than the
        last. Can you fill in the missing blocks to complete this awesome picture?
      Course 4 Artist For Loops 9_instruction: |
        Can you make a spiral? Move forward
        from 1 to 75 pixels, increasing by 1 pixel each time.
      Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is 100
        pixels in length, using a loop?
      Course 4 Artist Functions 10_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 11_instruction: |
        Check out this code that draws a
        cube - can you move it into a function called "Draw a Cube"
      Course 4 Artist Functions 12_instruction: Loop square function to draw a line
      Course 4 Artist Functions 13_instruction: |
        Check it out we have a new function
        called "draw a line of squares". Feel free to take a look inside the function
        block to see how we built it. Click on "Run" when your are ready for the
        next puzzle.
      Course 4 Artist Functions 14_instruction: |
        You're doing great! Let's use
        your new "Draw a line of squares" function to draw a Square shape. Remember
        each square is 40 pixels in length.
      Course 4 Artist Functions 15_instruction: |
        Let's Step it up a little, can
        you draw a star shape using the "draw a line of squares" function? Good
        luck! Hint: you may have to turn 144 degrees
      Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      Course 4 Artist Functions 3_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 120 pixels apart.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Are you ready to create your own
        "Function Block"? Click on the "Functions" block in the tool box, name
        it "draw a triangle", then create a triangle as you have done before with
        the Action and Loops blocks. Then click on the Save and Close in the upper
        right hand corner. Hint: Create a triangle that is 100 pixels in length. Good
        luck!
      Course 4 Artist Functions 5 OLD_instruction: |
        Let's try to use our two functions
        to draw a house - what needs to be fixed in this code to draw the house properly?
      Course 4 Artist Functions 5_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 120 pixels apart.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 7_instruction: |
        Can you draw a line of squares using
        a Square function? Each square is 40 pixel's in length.
      Course 4 Artist Functions 8_instruction: |
        Are you getting the hang of how to
        use function blocks? Let's modify this square so that it is 200 pixels in
        size. Hint: click on "edit" to change the size of the "draw a square"
        function editor. Remember to click on "save and close" to get out of the
        function editor. 
      Course 4 Artist Functions 9_instruction: |
        We have given you most of the code
        to create a function. However there seems to be something missing. Can you
        make this function block complete?
      Course 4 Artist Params 1_instruction: |
        Let's edit a function that draws a
        square with 50 pixel sides
      Course 4 Artist Params 10_instruction: |
        You can call functions from inside
        other functions! Using your "shape" function as a base, create 3 house shapes
        each 20 pixels larger than the last starting at 50 pixels in length. Using
        a counter loop might be helpful. 
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use your "pinwheel" function to draw
        each of these shapes. The side length for each image is 50.
      Course 4 Artist Params 13_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Awesome, can you draw each of these
        triangles with that new function? The first is 25 pixels long, the second
        is 50, and the third is 75. 
      Course 4 Artist Params 4_instruction: |
        Can you add a new function called square?
        It should also take a length parameter, just like the triangle. This time
        draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
        
      Course 4 Artist Params 6_instruction: |
        Let's edit this "draw a shape" function.
        It already has a "length" parameter. Now, let's edit the function to also
        add a "sides" parameter. Remember the angle to turn for a given shape is
        360 divided by the sides it has. Hint: lengths for each shape are the triangle
        is 100 pixels, the hexagon is 25 pixels and the square is 50 pixels. 
      Course 4 Artist Params 7_instruction: |
        Can you draw these shapes by filling
        in the "???" The square and triangle are 100 pixels in size while the hexagon
        is 75 pixels in size. 
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
        
      Course 4 Artist Params 9_instruction: |
        Do you remember when we used the counter
        loop but removed a loop within? Let's have some fun and use the "draw a
        shape" function with "sides" and "length" parameters. Can you re create
        these shapes? The square counter should be 5/100/5, the triangle counter should
        be 10/100/10 and the hexagon is 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Here's the algorithm to draw a triangle,
        modify it so it uses the "sides" variable instead. Replace the number 3
        with the "sides" variable. Hint: remember to use the "set sides to" block.
      Course 4 Artist Vars 1_instruction: |
        Can you help me draw a triangle? It's
        100 pixels long on each side.
      Course 4 Artist Vars 10_instruction: |
        Here's an algorithm that draws a triangle
        out of smaller triangles. Can you modify it so that it uses the "sides"
        variable to draw each triangle? Look through the code, and every time you
        see the number 3, replace it with your "sides" variable. Remember to use
        the "set sides" block.
      Course 4 Artist Vars 11_instruction: |
        Here's the same algorithm that we came
        up with for the last puzzle - what should you set the "sides" variable to
        in order to draw this picture of squares?
      Course 4 Artist Vars 12_instruction: |
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Let's add a new variable called "length" and use that wherever you
        have a "move forward." Set the "length" variable to 75 for this shape.
      Course 4 Artist Vars 13_instruction: |
        The more sides a shape has, the shorter
        each side needs to be in order for the whole pattern to fit on the screen.
        Instead of manually setting the "length" variable, let's use the "sides"
        variable and a math block to set the "length." Choose the correct equation
        from the toolbox to set the "length" variable, and also update the "sides"
        variable.
      Course 4 Artist Vars 14_instruction: |
        Free Play: Check it out, now your algorithm
        is nested within one more loop. Experiment with changing the values of the
        your two variables to draw cool patterns.
      Course 4 Artist Vars 2_instruction: |
        Instead of "moving forward by 100,"
        the "move" block is now referencing the variable "length." Can you set
        "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 3_instruction: |
        Here's a loop that draws a square, but
        something's missing. Can you fix it so that it uses the variable "length"
        to figure out how long each side should be? 
      Course 4 Artist Vars 4_instruction: |
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that is
        set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: |
        Hmmm, I tried changing the "sides" variable
        to 4 from the code in the last puzzle, but it's still drawing a triangle.
        Can you use the "sides" variable (along with a math block) to make sure
        that I turn the right amount too? Hint: 360 divided by the number of sides
        will give you the number of degrees to turn.
      Course 4 Artist Vars 7_instruction: |
        Can you modify the "sides" variable
        to help me draw this hexagon?
      Course 4 Artist Vars 8_instruction: |
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: You
        might have to use your math blocks (360 divided by "sides" in two places
        this time) 
      Course 4 Artist Vars 9_instruction: |
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Replace the number
        3 with the "sides" variable, and use the "set sides to" block.
      Course 4 Bee 1_instruction: |
        The bee can't tell if this is a flower or a honeycomb.
        Check first if it is a flower or a honeycomb, and then only gather nectar
        from it if it is a flower. 
      Course 4 Bee 2_instruction: |
        Check each object to see if it's a flower. If
        it is, collect nectar...otherwise, you can ignore it!
      Course 4 Bee 3_instruction: |
        The unknown object is either a flower or a honeycomb.
        Use the if/else block to collect nectar if it is a flower, else make honey
        (because then it would be a honeycomb).
      Course 4 Bee 4_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Here an if-else block is combined with another if-else block to create
        an if, else-if, else block. Complete the solution to collect the unknown amount
        of nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar from
        each flower.
      Course 4 Bee For Loops 10_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 2_instruction: |
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 3_instruction: |
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: |
        Ah, the for loop makes this much easier!
        Using the "counter" variable from the for loop to loop the "get nectar"
        block the same number of times as the loop. Whew! That's a lot of loops.
        All the code you need it there, take a look at how it is put together then
        click on Run and see how it works. 
      Course 4 Bee For Loops 6_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 7_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: |
        Can you use the loop variable to control
        movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Params 1_instruction: |
        Use the function "get 3 nectar" which
        turns, moves to collect the nectar, and then returns to the original location.
        Write a sequence to collect all of the nectar using "get 3 nectar."
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: |
        Now there are flowers on both sides! I've
        added a parameter called "direction" to the function. Use the "left" and
        "right" variables to control direction. Fill in the rest of the function
        definition and then click "Save and Close."
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 backup_instruction: |
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: |
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectars" to control the amount of nectar to collect.
        You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8_instruction: |
        Oooh, now there's honey to deal with too!
        How could you update your function to either get nectar or make honey.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Avoid the TNT!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: 'Spróbuj użyć blok "powtórz", by użyć mniej bloków...'
      Course 4 Maze 5_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      Course 4 Maze 6_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called "jump"
        that causes your main character to jump up 100 pixels. Use the jump function
        to collect all of the flags.
      Course 4 Play Lab Params 10_instruction: |
        We've added one last function for
        you to use. Program your game to call the "level_up" function if "player_points"
        > 10. Play the game, and make it past level 4 to move to the next puzzle.
        
      Course 4 Play Lab Params 2_instruction: |
        Now we've got flags that are too
        high for our current jump! Let's add a parameter to our jump function called
        "height." The up arrow should jump 200 pixels, but the down arrow should
        jump 100 pixels. Click "edit" on the jump function and update it so that
        it uses the height parameter instead of just jumping 100 pixels.
      Course 4 Play Lab Params 3_instruction: |
        Let's add another parameter to the
        jump function so that we can use it with other actors. Each actor is represented
        by a number, starting from one. Edit the "jump" function so that the definition
        includes the "actor" parameter. 
      Course 4 Play Lab Params 4_instruction: |
        Here's a function called "patrol."
        Edit it to move the Cat up 400 pixels and then down 400 pixels.
      Course 4 Play Lab Params 5_instruction: |
        Fill in the "actor" parameter input
        so that we can call the "patrol" function for each of the actors. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Use a "set speed" block with the new "speed"
        parameter.
      Course 4 Play Lab Params 7_instruction: |
        Use the arrow keys to control the
        Dog and collect all of the flags.
      Course 4 Play Lab Params 8_instruction: |
        Use a "when touching" block to send
        the Dog back to the top-left if the Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: |
        Here's one of the games we were working
        on earlier. We've added a function called "score_points" that takes a parameter
        "points." Edit the function so that the "points" parameter is added to
        the "player_points" variable. Have the Dog score 10 points to move on to
        the next puzzle. 
      Course 4 Play Lab Vars 1_instruction: |
        You don't have to write any code, just
        hit "run" to play the game! In this game, you're the Dog who is trying
        to collect more flags than the Cat. Use the down arrow to control the Dog.
        Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        That race wasn't very fair! Change
        the "dog_speed" variable to make sure you can collect more flags than the
        Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_instruction: |
        Here's a new kind of game! Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags. Hint: the new flags are
        200 pixels high.
      Course 4 Play Lab Vars 5_instruction: |
        Let's build a game! First we'll need
        a score. Use the "set points to" block to set the score to 10. 
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: |
        In our game, how should we score points?
        Add 1 to your "points" variable each time the Dog hits the Cat with a fireball.
        Use the "when actor 2 touches anything" event to trigger an update to your
        score. You can increment your variable by setting "points = points + 1."
        Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy - any time the Dog (actor 1) gets hit by a fireball, you should
        lose a point. Start with 10 points so it's not too hard. Let your score drop
        down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: |
        Free Play time! Here are all of the
        variables we've played with so far, as well as a few more in case you want
        them. Make a game or story that uses these variables. Hint: scroll down to
        see all the commands in the work space.
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, by 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343….)
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        What for loop would make me speak
        19, 27, 35, 43, 51?
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string parameter for the shape. Complete the conditions so that the correct
        shape is drawn when the function is run with circle, triangle, square, or
        rectangle.
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        parameter for size. Complete the conditionals so the correct image is drawn
        for circle, triangle, and star.
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\r\nOne example - and part of the definition -  has\nalready been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write this "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though, it always draws a circle
        of 50 pixel radius instead of using the radius parameter. Replace the current
        Number with the radius block from the domain. 
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radiuses of 25, 50, and 75.
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst that has two domains. 1) a number of points and 2) a radius. starburst
        returns a yellow radial star with given points, and an inner radius that is
        half the outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Using the Design Recipe, write a function
        large-polygon that should output a polygon of given sides and color that takes
        up most of the window, regardless of the number of sides. To make sure that
        the polygon doesn't get too large as you increase the number of sides, side
        length should be inversely proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a solid orange star with an inner radius of 75
        pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: |
        Now let's create 20 overlapping
        circles, turning 18 degrees between each circle.
      frozen circle function with parameter_instruction: |
        Here's a ”Create circle”
        block that can make circles of different sizes. Can you use this to create
        a small circle of size 5 and a larger circle of size 10?
      frozen circle function_instruction: |
        Use the new “Create a circle” block to
        create 10 overlapping circles. Don't forget to jump forward between circles.
      frozen circle_instruction: |
        A circle is a special shape. Can you figure out
        what number to replace the question marks with to draw a circle?
      frozen cross rotate dense_instruction: |
        Let's repeat it 90 times! How many
        times does 90 go into 360? Hint: It's a really small number.
      frozen cross rotate_instruction: |
        Now try repeating it 10 times. How many degrees
        do you need to turn between each line?
      frozen cross_instruction: |
        Use the “Repeat” block to create a plus sign. Did
        you notice Elsa can move forward and backward?
      frozen diamond mini snowflake_instruction: |
        Did you know every snowflake is
        a different shape? Let's create a new snowflake by using the “Repeat" block
        to repeat a parallelogram 4 times, turning right by 90 degrees between each
        parallelogram.
      frozen diamond snowflake_instruction: |
        Now, let's create a new snowflake by
        using the repeat block to repeat a parallelogram 10 times, turning right by
        36 degrees between each one.
      frozen diamond_instruction: |
        Let's create a parallelogram. It's just like
        a square but has different angles: 60 and 120 degree angles instead of 90
        degree angles.
      frozen freeplay_instruction: |
        You've officially become a master artist! Create
        a winter wonderland.
      frozen line_instruction: Cześć! jestem Elsa z Arendelle. Proszę pomóż mi utworzyć pojedynczą linię.
      frozen perpendicular_instruction: 'Teraz sprawdźmy, czy potrafisz utworzyć dwie linie, które są pod kątem 90 stopni. Będziesz musiał użyć bloczku "obróć" razem z bloczkiem "przesuń o ".'
      frozen snowflake branch_instruction: |
        Try using the ”Create a snowflake branch”
        block to create three branches, which starts to look like a snowflake.
      frozen snowflake full_instruction: |
        Now let's repeat it 8 times to make a
        beautiful snowflake!
      frozen snowflower_instruction: |
        Intricate snow patterns can be created with
        very simple shapes. Can you make a pattern by repeating 5 circles of size
        5 and 5 circles of size 10?
      frozen square iterative_instruction: Wygląda na to, że jesteśmy w połowie drogi by narysować kwadrat. Połącz 4 linie by powstał kwadrat.
      frozen square loop 3x_instruction: |
        Let's create three squares, turning after
        each square. Be sure to turn by 120 degrees before each new square.
      frozen square loop_instruction: |
        Hi, I’m Anna of Arendelle! Let’s make a square
        with the “Repeat” block, which uses fewer blocks. How many times (???) should
        the “Repeat” block loop the blocks inside it to make a square?
      frozen square snowflake_instruction: |
        Can you create a snowflake using the
        “Repeat” block to make a square 10 times, and the “Turn” block to turn 36
        degrees between each square?
      Infinity_catch_instruction: |
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale_instruction: Create anything you like and share it!
      Infinity_move_collide_instruction: |
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions_instruction: |
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right_instruction: |
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat_instruction: |
        Use a "repeat forever" block to make Anna move
        up and down 400 pixels.
      Infinity_say_instruction: 'Make Anna say "Hi there." by using the Say block.'
      Infinity_shoot_instruction: |
        Baymax is "actor 2".  Make Baymax throw a rocket
        at Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro is "actor 3".  Make Hiro throw
        a projectile to each of the four characters.  Wait one second between each
        throw.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: |
        Move Anna up, down left, and right to touch
        each of the four snowflakes.
      Infinity_touch_score_instruction: |
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      K-1 Artist 1 Assessment 1_instruction: |
        Draw a short line up and a long one
        to the right!
      K-1 artist 1 level 10_instruction: |
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 Artist Loops 1_instruction: Draw this line by moving East 4 times.
      K-1 Artist Loops 2_instruction: Can you draw the same line using a loop?
      K-1 Artist Loops 3_instruction: Can you loop these blocks to draw 6 lines?
      K-1 Artist Loops 4_instruction: |
        Could a loop help us draw the top of this
        castle?
      K-1 Artist Loops 5_instruction: What can you loop 4 times to draw these stairs?
      K-1 Artist Loops 6_instruction: |
        This one needs two loops: one to go up the
        stairs and one to go down.
      K-1 Artist Loops 7_instruction: Can you finish this pattern with two loops?
      K-1 Artist Loops 8_instruction: This staircase has longer steps.
      K-1 Artist Loops 9_instruction: 'Assessment: Use a loop to draw the stairs'
      K-1 Artist Loops Free Play_instruction: Free play, draw something fun!
      K-1 Artist1 1_instruction: Draw the foot of the man with one line
      K-1 Artist1 10_instruction: |
        Draw and Jump to make the dashed path to the treasure
        X
      K-1 Artist1 2_instruction: Draw the whisker on the cat with two lines!
      K-1 Artist1 3_instruction: |
        Draw two lines east and two lines north to finish
        the house!
      K-1 Artist1 4_instruction: Draw lines up, over, and down to complete the castle!
      K-1 Artist1 5.5_instruction: |
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Draw the stem of this flower with two lines!
      K-1 Artist1 6_instruction: Finish the picture by using a jump block!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |
        Draw the dashed line by using both the jump and
        draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Draw a square below the triangle.
      K-1 Artist2 2_instruction: Jump and draw a square next to the house.
      K-1 Artist2 3_instruction: Draw a square above the other square
      K-1 Artist2 4_instruction: Draw a rectangle to complete the bridge.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Narysuj cokolwiek!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Get four nectar and then make two honey!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Get three nectar and then make one honey
      K-1 Bee 12_instruction: Get three nectar and then make two honey!
      K-1 Bee 13_instruction: Get three nectar and then make one honey!
      K-1 Bee 14_instruction: |
        Get me to the nectar, pick it up, get me to the honey,
        and make honey
      K-1 Bee 15_instruction: Get two nectar to make two honey!
      K-1 Bee 2_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: Get two nectar and then make two honey!
      K-1 Bee 5_instruction: Get three nectar and then make three honey!
      K-1 Bee 6_instruction: Get two nectar and then make two honey!
      K-1 Bee 7_instruction: Get three nectar and then make two honey!
      K-1 Bee 8_instruction: Get two nectar and then make two honey!
      K-1 Bee 9_instruction: Get two nectar and then make two honey!
      K-1 Bee Assessment 1_instruction: Get nectar to make honey!
      K-1 Bee Assessment 2_instruction: Get nectar to make honey!
      K-1 Bee Loops 1_instruction: Get the nectar to make honey!
      K-1 Bee Loops 10_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 11_instruction: |
        Assessment: Use loops and get the nectar and
        honey!
      K-1 Bee Loops 12_instruction: |
        Assessment: Use loops to get the nectar, honey,
        and to move!
      K-1 Bee Loops 2_instruction: |
        Use a loop to move and then get the nectar and
        make honey!
      K-1 Bee Loops 3_instruction: Use loops to get the nectar and make honey!
      K-1 Bee Loops 4_instruction: |
        Use loops to get the nectar, make honey, and
        to move!
      K-1 Bee Loops 5_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 7_instruction: Use loops to get the nectar and make honey!
      K-1 Bee Loops 8_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 9_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops Assessment 1_instruction: |
        Get nectar to make honey and use loops
        to move!
      K-1 Bee Loops Assessment 2_instruction: Zbierz nektar, by zrobić miód za pomocą pętli!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      K-1 Maze 10_instruction: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or the feathers will fly! Hint: He's South of me.
      K-1 Maze 2_instruction: Przenieś mnie na wschód, aby doprowadzić mnie do świnki!
      K-1 Maze 3_instruction: Przenieś mnie na południe, aby doprowadzić mnie do świnki!
      K-1 Maze 4_instruction: Przenieś mnie na północ, aby doprowadzić mnie do świnki!
      K-1 Maze 5_instruction: Przenieś mnie na wschód, aby doprowadzić mnie do świnki!
      K-1 Maze 6_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze 7_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze 8_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze 9_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze Assessment 1_instruction: 'Ocena: Doprowadź mnie do świnki!'
      K-1 Maze Assessment 12_instruction: Poziom oceniania
      K-1 Maze Assessment 13_instruction: Poziom oceniania
      K-1 Maze Assessment 2_instruction: 'Ocena: Doprowadź mnie do świnki!'
      K-1 maze debug 1_instruction: Zmień kod, aby doprowadzić mnie do świnki!
      K-1 maze debug 10_instruction: |
        Debug this level by rearranging and adding
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand adding blocks to get me to the pig"
      K-1 maze debug 2_instruction: |
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |
        Figure out what is missing and then REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 6_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 7_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 8_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 Maze debug Assessment 1_instruction: |
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 Maze Loops 1_instruction: Doprowadź mnie do świnki!
      K-1 Maze Loops 10_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 11_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 12_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 2_instruction: Use the Repeat block to get me to the pig!
      K-1 Maze Loops 3_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 4_instruction: Doprowadź mnie do świnki!
      K-1 Maze Loops 5_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 6_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 7_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 8_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtarzaj" (repeat).'
      K-1 Maze Loops 9_instruction: Doprowadź mnie do świnki!
      K-1 Maze Loops Assessment 1_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Loops Assessment 2_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Multi 14_instruction: Poziom oceniania
      K-1 Maze Multi 15_instruction: Poziom oceniania
      K-1 Maze Sequence Assessment 1_instruction: "This is a test!\r\nMove one way,\nthen another to get me to the pig"
      K-1 Maze Sequence Assessment 2_instruction: "This is a test!\r\nMove one way,\nthen another to get me to the pig."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a loop?
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: |
        We have a new function called
        "draw a line of squares." Feel free to take a look inside the function block
        to see how we built it. Click on "Run" when your are ready for the next
        puzzle.
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the "draw a line of squares" function? Hint: you may have to move forward
        60 pixels and  turn 144 degrees
      NEW Course 4 Artist Functions 14_instruction: 'Czas zabawy! '
      NEW Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      NEW Course 4 Artist Functions 3_instruction: |
        Here is a new type of Block.
        It is called a "Function block." Click "Run" to see what it can do. 
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Are you getting the hang of how
        to use function blocks? Let's modify this square so that it is 200 pixels
        in size. Hint: click on "edit" to change the size of the "draw a square"
        function editor. Remember to click on "save and close" to get out of the
        function editor. 
      NEW Course 4 Artist Functions 8_instruction: |
        We have given you most of the
        code to create a function. However there seems to be something missing. Can
        you edit the function definition to draw the triangle?
      NEW Course 4 Artist Functions 9_instruction: |
        Which block do you need to add
        to get the triangle to sit on top of the square?
      New Course 4 Artist Functions Level 4_instruction: 'Użyj funkcji "rysuj kwadrat" do narysowania tego wzoru.'
      NEW Course 4 Artist Params 1_instruction: 'Zdefiniuj funkcje do narysowania kwadratu o boku długości 50 pikseli. Kliknij "edytuj" aby zacząć.'
      NEW Course 4 Artist Params 10_instruction: |
        Stwórz blok z funkcją "rysuj sześciokąt", która będzie posiadać parametr "wysokość". 
        Podpowiedź: rozmiar tego sześciokąta to 100 pikseli. 
      NEW Course 4 Artist Params 11_instruction: |
        Spróbuj wymyśleć jak narysować ten kształt? 
        Edytuj funkcję, aby użyć parametru "boki".
      NEW Course 4 Artist Params 12_instruction: |
        Czy możesz dokończyć rysowanie?
        Boki wszystkich kształtów mają długość 100 pikseli.
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to also add a "sides" parameter. Remember the angle to turn for a given
        shape is 360 divided by the sides it has. Hint: lengths for each shape are;
        the triangle is 100 pixels, the hexagon is 25 pixels and the square is 50
        pixels.
      NEW Course 4 Artist Params 14_instruction: |
        Czy jesteś w stanie odtworzyć te kształty?
        Przeciągnij parametr "długość" do definicji funkcji.
      NEW Course 4 Artist Params 15_instruction: 'Czas na zabawę: To są funkcje, które napisałeś do tej pory, oraz kilka dodatkowych. Narysuj coś wspaniałego!'
      NEW Course 4 Artist Params 2_instruction: 'Stwórz funkcję "rysuj trójkąt" o długości boku 50 pikseli. '
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n3 triangles from the last puzzle in a row. Hint: each triangle is 50 pixel\napart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: |
        Fill in the ??? in the length parameter
        input block. Hint: The pentagon is 100 pixels in size. 
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Vars 1.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 12_instruction: |
        Modify this algorithm so it uses
        the "sides" variable instead of a fixed number to draw a pentagon. Replace
        the number 5 with the "sides" variable, and use the "set sides to" block.
      NEW Course 4 Artist Vars 2.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 2_instruction: |
        Drag a number block to the "set length"
        block to draw a set of 50 pixel triangles. 
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Now, let's make
        this cool design with with 60 pixel hexagons.
      NEW Course 4 Artist Vars 6_instruction: |
        Can you help me draw this cool pattern
        by dropping in the "length" variable block into the correct places?
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, the for loop makes this much
        easier! All the code you need is there, take a look at how it is put together
        then click "Run" to see how it works. 
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Can you help the Bee collect the
        rest of the honey using this for loop? 
      NEW Course 4 Bee For Loops 4_instruction: |
        Replace the ??? in the for loop
        with the largest amount of nectar the bee has to collect. 
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the for loop? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Are you getting the hang of for
        Loops? This is similar to last puzzle, but you have to get 2,4,6,8,10 nectar.
        You’re given the starter code except for the numbers in the counter loops.
        Let's collect some nectar!
      NEW Course 4 Bee For Loops 8_instruction: "If your loop is counting up, the\nincrement is added to your counter variable each loop. What should your increment\nbe to collect 3, 6, 9 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      NEW Course 4 Play Lab Params 11_instruction: |
        It's Free Play time! Have fun
        with all the blocks in your tool box. 
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Fill in actor parameter inputs
        with numbers (1, 2, and 3) to make these actors patrol. 
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        It's Free Play
        time, have fun with all the blocks in your tool box. 
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n  \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 'Funkcje umożliwiają definiowanie nowych bloków! Przenieśliśmy bloki służące do rysowania kwadratu do funkcji o nazwie "narysuj kwadrat". Czy mógłbyś posłużyć się funkcją "narysuj kwadrat", aby utworzyć okulary? Kwadraty są oddalone od siebie o 75 pikseli.'
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image!  Find error and fix it!  Hint: a few extra bits
        were added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'.  The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101.  Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want.  Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2 (copy 1)_instruction: |
        We've added your contract and two
        examples into the Design Recipe for rocket-height. Now write the function
        for rocket-height.
      Play Lab Rocket 2 (copy 2)_instruction: |
        We've started the Design Recipe for
        rocket-height using the contract and examples you just wrote. Complete the
        function definition for rocket-height and run your animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B (copy 1)_instruction: |
        We've started the Design Recipe
        for rocket-height using the contract and examples you just wrote. Complete
        the function definition for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3 (copy 1)_instruction: |
        Awesome, now can you update that function
        so that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Use the arrow keys to move Sam
        around his yard, making note of Sam's coordinates at different locations.
        Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's inside the left boundary of the yard (x > -25). If
        your function works, Sam shouldn't be able to leave the yard from the left
        side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Fill out the safe-right?
        function to make sure Sam can't go past x = 425.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, now Sam can't leave
        the yard from the left or the right, but what about up and down? We've added
        an additional parameter y to the onscreen? function. Can you update your program
        so Sam can't leave from the top (y = 425) or bottom (y = -25) either? Test
        your program by moving Sam as far as he can go in all four directions. Click
        Finish when Sam is completely protected.
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Żołądź! Żołądź! Żołądź! Użyj bloku "Jeśli", aby przenieść mnie tam używając jak najmniejszej liczby bloczków.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Ok, zróbmy to jeszcze raz by potrenować. To ćwiczenie nie różni się bardzo od poprzedniego, ale uważaj na ścianę!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: 'Bloczek "Jeśli - w przeciwnym razie" sprawdza warunek, a następnie wykonuje jedną lub drugą rzecz. Spróbuj użyć tego bloczku abym dotarł do żołędzia.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        One more practice of the "if-else" block, can you
        get it right on your first try?
      scrat 20_instruction: |
        Can you add just 3 blocks to help me solve a more complex
        maze? If you do it right, I can walk any curvy path no matter the length.
        Hurry! The ice is melting!
      SpecialFrozenLevel_instruction: |
        You've officially become a master artist!
        Create a winter wonderland.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Teraz przejdź dalej i zrób rysunek na jaki masz ochotę! 
        Dostępna jest nawet pusta funkcja, w której możesz robić co chcesz!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Text Compression Peter Piper_instruction: |
        Ten wiersz został skompresowany przez zastapienie dwóch pospolitych wyrazów, symbolem ze słownika. 
        Czy jesteś w stanie podać kolejny wzorzec do skompresowania wiersza?
      U1L4 NetSim SendAB_instruction: |
        Send a message by setting the state of the
        wire to A or B.
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the simulator a
        DNS service is provided for you. Send a message in the form GET [hostname]
        to the DNS service at address 15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: |
        Create a turnRight()
        function and draw a rectangle twice as tall as it is wide by having the turtle
        navigate clockwise to draw the rectangle. 
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with other movement made between calls.  HINT: you might want\nto make another function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: |
        Drag a button out onto the screen
        and set its text to "Go forth!".  Add an event handler for the button, that
        makes the turtle move forward.  Run the program to make sure it works. 
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd event handler to textInput with the event type ‘input’ that shows\nthe “Say hi” button when that event occurs.\r\nAdd event handler to button\nso that on click, it writes a hello message to the screen and hides the textInput\nand button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        We'll be building upon some simple
        starting code throughout this lesson.  Your first task: use moveTo and randomNumber
        to get the turtle to move to a random location with each button click.  We've
        given you starting code for our common setup: a button that moves the turtle
        when clicked.  You should modify this code.  
      U3L16 - text labels_instruction: |
        Introducing textLabels.  First try replacing
        your button with a textLabel.  Will the text respond to events just like the
        button?  Try connecting an event handler to it.  We've started you out with
        code similar to the result of the last level, you can copy your code from
        that level into here if you prefer. 
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto foo to see the string change. \r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe error and get the program to run.  Also note the error message since it\nmight come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis an example of the kind of app we want to make.  Study this for the elements\ncontained in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1. what happens when you click on the Code.org logo? \r\n2. What happens\nwhen you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements contained in this app appear to be simple, and they are in some ways.\nHowever, the computing principles involved - controlling and keeping track\nof things in memory while the program is running - get into some deeper issues\nof programming and computer science in general.  There are some devilish details\nand paths that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep this app in mind as you go through the different levels in this lesson.  It\nmight seem like you need to learn a lot in order to get this simple thing\nworking.  But it's worth taking the time to understand at a deeper level\nwhat is going on.  Because this one topic: controlling memory leads to many\npossible misunderstandings about coding, and how computers work.  We want\nto make sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough the issues.  Read the explanations.  You'll come out on the other\nside a better programmer with much deeper knowledge and understanding of how\nthings work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou the three lines of code shown in the previous page.  Add three lines of\ncode just below the ones shown here to make your own variable, assign it a\nvalue and write it to the screen.  NOTE: change the variable name from the\ndefault x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: |
        Here is the code from
        previous page that has a subtle problem with it.  FIRST: run the app and try
        it to see the problem. NOTE: NaN stands for "Not a Number".   DO THIS: figure
        out what's happening, where, and fix the problem.  We'll explain the issue
        on the next page. 
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square using only moveForward
        and turnLeft.  The square should be drawn above and to the left of the turtle's
        starting position.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid above and to the right of
        the turtle. Try to do so with the fewest number of commands possible. NOTE:
        This is a very challenging problem.  You may need to play with it for a while
        and tweak it.  You might also consider using pencil and paper to sketch your
        ideas.
      U3L2_TurtleSquare_right_instruction: |
        Draw a square using only moveForward
        and turnLeft, but this time, make the square appear ABOVE and to the RIGHT
        of the starting location.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
