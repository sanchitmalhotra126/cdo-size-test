pt-BR:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bem-vindo à sua primeira hora de programação! Vamos mergulhar logo em sua primeira experiência com programação.
      2:
        image: notes/hoc1_2.jpg
        text: Vamos usar o Blockly, uma linguagem de programação visual onde você arrasta e solta blocos para escrever código.
      3:
        image: notes/hoc1_3.jpg
        text: 'A programação é geralmente em linhas de código escrito, porém o "Blockly" é visual. Cada bloco corresponde a uma linha de código "real".'
      4:
        image: notes/hoc1_4.jpg
        text: Você vai aprender o básico da ciência da computação, que consiste em conceitos usados no desenvolvimento de aplicativos e até mesmo para controlar uma sonda em Marte.
      5:
        image: notes/hoc1_5.jpg
        text: Um programa é um conjunto de instruções a serem seguidas pelo seu computador.
      6:
        image: notes/hoc1_6.jpg
        text: O objetivo do seu primeiro programa é levar o Angry Bird até um Porco Verde através do labirinto.
      7:
        image: notes/hoc1_7.jpg
        text: O lado esquerdo é o labirinto onde o programa é executado. As instruções para cada desafio estão abaixo do labirinto.
      8:
        image: notes/hoc1_8.jpg
        text: A caixa de ferramentas do meio contém os comandos do Angry Bird. Você vai usá-los para criar o seu programa.
      9:
        image: notes/hoc1_9.jpg
        text: À direita você tem sua área de trabalho, onde você vai arrastar os blocos da caixa de ferramentas para criar o seu programa. Para excluir um bloco, arraste-o para a lixeira no canto.
      10:
        image: notes/hoc1_10.jpg
        text: 'Cada bloco é uma instrução. Se você arrastar um bloco "avance" para a sua área de trabalho e clicar em "Executar Programa", o pássaro se move um espaço à frente no labirinto.'
      11:
        image: notes/hoc1_11.jpg
        text: Para fazer mais do que uma ação, você pode arrastar vários blocos para sua área de trabalho e conectá-los uns aos outros. O passarinho obedecerá os comandos de cima para baixo.
      12:
        image: notes/hoc1_12.jpg
        text: 'Se você executar um programa e quiser corrigi-lo, clique em "Recomeçar".'
      13:
        image: notes/hoc1_13.jpg
        text: Vamos pegar esses porcos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Oi, sou o JR! Toda equipe de corrida precisa de cientistas da computação para ganhar. Eles analisam os dados do carro para torná-lo mais rápido.
      2:
        image: notes/stage5_2.jpg
        text: Nesses desafios, você vai ser um artista que desenha por todo lugar que passa.
      3:
        image: notes/stage5_3.jpg
        text: 'Esse bloco diz "avance por 100 pixels". Pixels são pontos minúsculos na sua tela.'
      4:
        image: notes/stage5_4.jpg
        text: 'Este bloco diz "vire à direita 90 graus". Esse bloco funciona da mesma forma que o bloco "vire" no desafio do labirinto.'
      5:
        image: notes/stage5_5.jpg
        text: Clique na seta em qualquer um desses blocos para alterar o número de movimentos do artista, tanto para avançar quanto para virar. Brinque com os novos blocos para ver como eles funcionam.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Oi, eu sou a Paola! Nesses desafios, você é uma fazendeira que precisa deixar seu terreno completamente plano para começar o plantio.
      2:
        image: notes/stage9_2.jpg
        text: Você precisa ajudá-la a remover todos os montes de terra e preencher todos os buracos.
      3:
        image: notes/stage9_3.jpg
        text: Os novos blocos removem 1 pá de terra de um monte, e preenchem o buraco com 1 pá de terra.
      4:
        image: notes/stage9_4.jpg
        text: Os montes de terra e os buracos são de tamanhos diferentes, então você tem que dizer à fazendeira quantas pás usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Oi, eu sou Katie! Uma das coisas mais emocionantes sobre ciência da computação é que um programa de computador pode ser interativo.
      2:
        image: notes/flappy02.jpg
        text: Sempre que alguém clica, digita, ou toca na tela de um celular, é gerado um EVENTO, e existe alguns códigos que decidem o que fazer quando um EVENTO ocorre.
      3:
        image: notes/flappy03.jpg
        text: 'Por exemplo, você poderia ter um MANIPULADOR DE EVENTOS que diz "quando o mouse for clicado, toque um som" '
      4:
        image: notes/flappy04.jpg
        text: Você já ouviu falar do jogo Flappy Bird? Usando manipuladores de eventos, vamos aprender a programar nossa própria versão do Flappy Bird!
      5:
        image: notes/flappy05.jpg
        text: O código que você vai escrever consiste em arrastar e soltar blocos que representam os comandos para o computador. Na verdade, cada um desses blocos é representado pelo código real.
      6:
        image: notes/flappy06.jpg
        text: 'Se você der uma olhada na área de trabalho, existem alguns blocos verdes que são preenchidos para você - esses são os "manipuladores de evento" '
      7:
        image: notes/flappy07.jpg
        text: 'Se você quer que o passarinho VOE quando você CLICAR, você pode anexar o bloco "FLAP" ao manipulador de evento apropriado. Assim, sempre que você clicar, o passarinho vai voar.'
      8:
        image: notes/flappy08.jpg
        text: Em cada desafio dessa atividade, vamos introduzir novos tipos de eventos, como os blocos verdes na área de trabalho, e você pode decidir que blocos são apropriados para adicionar em resposta a esses eventos.
      9:
        image: notes/flappy09.jpg
        text: Quando você observar uma seta suspensa como essa, significa que você pode alterar as configurações, como o som a ser reproduzido quando o pássaro bater no chão.
      10:
        image: notes/flappy10.jpg
        text: No desafio final, você vai poder criar seu próprio jogo e compartilhar com seus amigos. Divirta-se!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Olá, eu sou o Mark! Vamos aprender sobre laços. Usando laços, você pode dizer para um computador repetir qualquer conjunto de ações continuamente, milhares ou mesmo milhões de vezes.
      2:
        image: notes/hoc2_2.jpg
        text: Nesse desafio, queremos fazer o pássaro avançar 5 espaços para chegar ao porco.
      3:
        image: notes/hoc2_3.jpg
        text: 'Podemos usar o novo bloco "repita" para nos ajudar.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Ao invés de arrastar 5 blocos "avance"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Podemos colocar o bloco "avance" dentro do bloco "repita" e escrever um número no bloco para definir o número de repetições.'
      6:
        image: notes/hoc2_6.jpg
        text: 'E isso é importante: você pode colocar mais de um comando dentro de um bloco "repita".'
      7:
        image: notes/hoc2_7.jpg
        text: 'Aproveite seu novo bloco "repita"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Oi, eu sou o Chris. Antes de entrar para o Miami Heat, fui para a Georgia Tech para estudar Ciência da Computação. Vamos dar uma olhada no nosso novo bloco, o bloco "repita até".'
      2:
        image: notes/hoc3_2.jpg
        text: E se nós não soubermos quanto o pássaro teve que se mover para chegar ao porco?
      3:
        image: notes/hoc3_3.jpg
        text: 'Se colocarmos um bloco "avance" dentro do bloco "repita até", o pássaro vai seguir em frente ATÉ chegar ao porco (ou se chocar contra uma parede).'
      4:
        image: notes/hoc3_4.jpg
        text: 'E isso é importante: assim como antes, podemos colocar vários blocos dentro do bloco "repita até", e todos eles serão repetidos.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Oi, eu sou o Bill! Vamos aprender um novo conceito fundamental: instruções "se". É assim que computadores tomam decisões.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Você usa a instrução "se" todos os dias. Toda manhã, antes de sair, você diz: SE estiver chovendo lá fora, vou precisar da minha jaqueta.'
      3:
        image: notes/hoc4_3.jpg
        text: Podemos dizer ao zumbi para verificar SE há caminho para a esquerda e, se ele encontrar um caminho para a esquerda, precisamos virá-lo naquela direção.
      4:
        image: notes/hoc4_4.jpg
        text: 'Para programar isso, vamos arrastar o nosso bloco "se" e colocar um bloco "vire à esquerda" dentro dele.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Agora, se colocarmos um bloco "avance" acima dele e colocarmos tudo dentro de um bloco "repita", a cada vez que o zumbi se mover, ele vai verificar se há um caminho para a esquerda e virar. O comando "repita" é fundamental para verificar a necessidade de virar a cada passo.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Instruções "se" são muito importantes para a ciência da computação. Um dos primeiros programas que escrevi foi um jogo da velha, e havia uma instrução "se" que dizia: SE a outra pessoa está prestes a ganhar, bloqueie a casa que lhe permitiria ganhar.'
      7:
        image: notes/hoc4_7.jpg
        text: 'Divirta-se usando o bloco  "se"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Olá, meu nome é Saloni. A ciência da computação me ajuda a resolver problemas das áreas da saúde e medicina. Vamos aprender sobre o bloco "se-senão". Ele parece o bloco "se", mas com uma parte extra no final que diz "senão".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Se eu colocar um bloco "avance" na instrução "faça", e um bloco "vire à esquerda" na instrução "senão", significa que o zumbi vai escolher entre 2 opções. SE existir um caminho à frente, o zumbi vai avançar e, CASO CONTRÁRIO (não há um caminho em frente), o zumbi vai virar à esquerda.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Assim como o bloco "se", nós podemos colocar blocos "se-senão" dentro de blocos "repita", assim o zumbi continuará se movendo, e o bloco "se-senão" continuará verificando se é possível virar para algum lugar.'
      4:
        image: notes/hoc5_4.jpg
        text: Agora, coloque os zumbis em seus devidos lugares!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Um comando se-senão é uma decisão entre duas opções. Vamos ver como podemos usar um comando se-senão com nosso amigo Scrat, o esquilo.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Este bloco parece igual ao bloco "se", mas há uma parte extra no final que diz "senão". Se eu colocar um bloco "avance" na instrução "faça", e um bloco "vire à esquerda" na instrução "senão", significa que o esquilo Scrat vai avançar se houver um caminho à frente. Se não houver caminho à frente, o Scrat vai virar à esquerda.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Significa tomar uma decisão e fazer uma das duas ações com base nessa decisão. E, assim como os blocos "se", você pode colocar blocos "se-senão" dentro de blocos "repita".'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Agora vamos ajudar Scrat, o esquilo, a pegar essa bolota!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Oi, eu sou a Brina, uma engenheira do Instagram. Uma função é um conjunto de linhas de código que você deseja usar várias vezes. Então, ao invés de escrever esse código toda vez, você pode usar apenas um bloco.
      2:
        image: notes/stage13_2.jpg
        text: Vamos aprender a definir funções. Definições de função têm uma estrela no canto. O nome da função está escrito na linha superior.
      3:
        image: notes/stage13_3.jpg
        text: 'Os blocos que vão dentro da definição nos dizem o que ela faz. Então, essa definição de função se chama "preencha 5", e é composta por um bloco "repita" e um bloco "preencha".'
      4:
        image: notes/stage13_4.jpg
        text: 'A definição está na área de trabalho, mas a fazendeira não vai executar a função até que arrastemos o bloco "preencha 5" para fora da categoria funções.'
      5:
        image: notes/stage13_5.jpg
        text: 'Vamos agir em "função" da diversão! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Oi, eu sou o Makinde! Vamos aprender sobre o bloco "enquanto". '
      2:
        image: notes/stage9_6.jpg
        text: 'O bloco "enquanto" vai fazer tudo o que você colocar no seu interior, DESDE QUE a declaração na parte superior seja VERDADEIRA.'
      3:
        image: notes/stage9_7.jpg
        text: Por exemplo, se a fazendeira está em um monte de terra, ela continuará a remover 1 pá ENQUANTO houver terra debaixo dela.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Oi, eu sou a Trina, e trabalho para a Pixar. Já trabalhei em um monte de filmes, incluindo o Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Este é nosso novo laço "contador". Ele executará ações repetidamente, e você pode fazer com que as ações mudem aos poucos.'
      3:
        image: notes/stage11_3.jpg
        text: 'Neste exemplo, nosso laço "contador" diz "conte de 50 até 90, indo de 10 em 10" e, dentro dele, temos o nosso bloco "desenhe um quadrado". Arraste o bloco "contador" da seção "Variáveis" para local que indica "comprimento".'
      4:
        image: notes/stage11_4.jpg
        text: Isso significa que nosso artista vai desenhar um quadrado com lados de 50 pixels de comprimento, e então vai acrescentar 10 e desenhar um quadrado com lados de 60 pixels de comprimento. Ele vai continuar adicionando 10 e desenhando quadrados até que ele atinja 90 pixels. Assim, vamos ter quadrados de 50, 60, 70, 80 e 90 pixels.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Oi, eu sou a Janete, e eu sou uma engenheira da Zynga.
      2:
        image: notes/stage15_2.jpg
        text: E se quisermos desenhar um monte de triângulos de tamanhos diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escrever todo o código à mão, ou podemos usar uma função com parâmetros.
      4:
        image: notes/stage15_4.jpg
        text: 'Para fazer isso, clique na estrela azul sobre a definição da função "desenhe um triângulo". Arraste o "nome de entrada" para o bloco "entrada".'
      5:
        image: notes/stage15_5.jpg
        text: 'Então, se você escrever "comprimento" no local onde há um "x" e apertar "Enter", você vai criar um comprimento de entrada para sua função.'
      6:
        image: notes/stage15_6.jpg
        text: 'Então, clique na estrela. Agora, você vai clicar na categoria de variáveis e arrastar o bloco "comprimento" para dentro do bloco "avance" da sua definição da função. E arraste para fora o antigo bloco de número.'
      7:
        image: notes/stage15_7.jpg
        text: 'Para usar sua função com parâmetros, clique na categoria funções e arraste para fora a função "desenhe um triângulo com comprimento".'
      8:
        image: notes/stage15_8.jpg
        text: Agora você pode usar o bloco de matemática para entrar com números diferentes e desenhar triângulos de tamanhos diferentes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Parabéns! Com o último desafio resolvido, você acabou de escrever o código que pode dizer a QUALQUER robô como encontrar o seu caminho através de um labirinto sem ramificação ou de um túnel de qualquer comprimento, seja ele um zumbi, um pássaro, uma sonda em Marte ou até mesmo um carro sem motorista.
      2:
        image: notes/hoc6_2.jpg
        text: Os conceitos básicos que você usou são o coração de qualquer programa ou aplicativo. Aprendemos sobre laços de repetição, instruções de repetições condicionais, instruções se, e instruções se senão.
      3:
        image: notes/hoc6_3.jpg
        text: Se você gostou de sua primeira hora de programação, visite a code.org para continuar a aprender a ciência da computação! Ao completar o nosso curso de 20 horas, você terá dominado o básico de programação, e vai estar apto a aprender como programar aplicativos para celular, instruções robóticas, jogos, e muito mais.
      4:
        image: notes/hoc6_4.jpg
        text: 'A tecnologia está mudando tudo o que fazemos, e não importa se você é jovem ou velho: programar é divertido, é criativo, e qualquer um pode aprender!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Olá, meu nome é Lyndsey. Eu sou modelo, atriz e também escrevo meus próprios aplicativos. Vamos usar a programação para explorar a magia e a beleza do gelo com Anna e Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Você vai criar flocos de neve e padrões enquanto esquia, e um país das maravilhas congelante para compartilhar com seus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: Na próxima hora, você vai aprender os conceitos básicos da programação. A programação tradicional é escrita, mas nós usaremos Blockly, blocos visuais que você pode arrastar e soltar para escrever programas. Também é assim que estudantes universitários aprendem o básico. E por trás desses blocos, você está criando códigos.
      4:
        image: notes/frozen1_4.jpg
        text: Um programa é um conjunto de instruções que diz a um computador o que ele deve fazer. Vamos construir um código, ou programa, que ajudará Elsa a criar uma reta simples. Mais adiante, nós vamos usar isso para criar padrões mais complexos.
      5:
        image: notes/frozen1_5.jpg
        text: Sua tela é dividida em três partes principais. À esquerda você tem a superfície de gelo onde vai executar seu programa. As instruções de cada nível estão escritas logo abaixo da superfície.
      6:
        image: notes/frozen1_6.jpg
        text: A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma ação que pode ser realizada por Elsa e Anna.
      7:
        image: notes/frozen1_7.jpg
        text: 'O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa. Para se mover pela superfície de gelo, você usará o bloco "avance".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Aqui, o bloco "avance" diz: "avance por 100 pixels". Quando clicamos em "Executar", o que acontece? Elsa se move por uma certa distância na tela, 100 pixels, na verdade! Os pixels são, basicamente, minúsculos quadrados na tela do seu computador.'
      9:
        image: notes/frozen1_9.jpg
        text: 'O outro bloco que temos neste desafio diz "vire à direita 90 graus". Quando usamos o bloco "vire à direita", Elsa faz uma determinada curva. Você pode brincar com o quanto deseja que Elsa vire. O ângulo é medido a partir do caminho à frente de Elsa. Então, este é um giro de 90 graus. E este é um giro de 120 graus.'
      10:
        image: notes/frozen1_10.jpg
        text: Lembre-se de que é possível mudar o número de pixels e graus, clicando nas setas ao lado deles.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Olá, eu sou a Paola! Os computadores são realmente muito bons em repetir ações. Você pode contar até 10, 20 ou até 100, mas um computador pode contar até um bilhão ou um trilhão sem se cansar, e ele só levará alguns segundos. Seja contar, desenhar ou qualquer outra atividade, os computadores podem repetir ações centenas ou até bilhões de vezes.
      2:
        image: notes/frozen2_2.jpg
        text: 'Na programação, podemos chamar isso de laço. Um laço é o modo como você repete seu código diversas vezes. No próximo desafio, sua meta é ajudar Anna a criar um quadrado com o bloco "repita".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Todos os blocos de código que colocar dentro do bloco "repita" serão repetidos em sequência, quantas vezes você quiser.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Para desenhar um quadrado, você pode usar os blocos "avance" e "vire à direita" quatro vezes. Mas o modo mais fácil de fazer isso é dizer ao computador "avance" e "vire à direita 90 graus" uma vez e, depois, fazer ele repetir este par de ações quatro vezes. Para isso, você precisa colocar os blocos "avance" e "vire à direita" dentro de um bloco "repita".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Lembre-se de que é possível mudar o valor no bloco "repita" para qualquer número, e ele repetirá o que está dentro do bloco de acordo com o número que você escolher.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Olá, eu sou Chris Bosh. Sou jogador de basquete profissional, e já programei quando estava na faculdade.
      2:
        image: notes/frozen3_2.jpg
        text: Um dos conceitos mais importantes da ciência da computação é como definir novos comandos. A maioria das linguagens de computador tem apenas 100 palavras ou comandos. A arte e a magia estão, então, em definir suas próprias palavras novas a partir do básico.
      3:
        image: notes/frozen3_3.jpg
        text: Depois de ensinar a um computador como fazer uma ação uma vez usando esta sequência de comandos, você pode criar o nome que quiser para essa ação, assim será mais fácil repeti-la depois. Ao definir e nomear seu próprio comando, você estará criando uma função.
      4:
        image: notes/frozen3_4.jpg
        text: Olá, eu sou Jess. Na programação com blocos, use funções quando houver um conjunto de ações que você quer repetir várias vezes. Por exemplo, você escreveu um código para criar um quadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Você pode definir isso como uma função chamada "crie um quadrado". '
      6:
        image: notes/frozen3_6.jpg
        text: Agora você tem um novo bloco que pode ser usado várias vezes para criar diversos quadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Inúmeras formas simples podem ser usadas para criar padrões mais complexos. No próximo desafio, o código que você acabou de escrever para fazer um círculo estará disponível como uma nova função que pode fazer círculos de diferentes tamanhos. Você pode usá-la para ajudar Elsa a criar padrões belos e intrincados na neve?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nós vamos criar jogos usando o Laboratório. Os bons jogos têm histórias, e toda história tem personagens. Nós vamos aprender como criar nossos personagens, como bruxas, alienígenas e animais que falam, andam e interagem uns com os outros. Ao final deste tutorial, você poderá criar um jogo a partir do zero e compartilhá-lo com seus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: Sua tela está dividida em três partes principais. À esquerda está o espaço do jogo, onde seu programa será executado. As instruções para cada nível estão escritas abaixo.
      3:
        image: notes/playlab_intro_3.png
        text: A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma parte do código. O espaço em branco à direita é chamado de área de trabalho e é onde criaremos nosso programa.
      4:
        image: notes/playlab_intro_4.png
        text: 'Para começar, você terá que conectar seus blocos ao bloco laranja "quando executar". É possível conectar diversos blocos uns aos outros, arrastando-os até ver a linha amarela e, então, eles se encaixam.'
      5:
        image: notes/playlab_intro_5.png
        text: 'Neste primeiro desafio, nosso personagem é um pinguim, e nós o faremos dizer "Olá!", arrastando o bloco "diga", conectando-o ao bloco "quando executar" e digitando "Olá". Nós também podemos fazer com que o pinguim se mova usando os blocos "mova à direita" e "mova à esquerda". Depois que seus blocos estiverem no lugar certo, aperte o botão "executar" para ver o que você programou.'
      6:
        image: notes/playlab_intro_6.png
        text: Comece agora mesmo! Ao final, você conseguirá criar seu próprio jogo, com todos os tipos de jogadores que poderão interagir, ficar felizes ou tristes, marcar pontos ou lançar bolas de fogo, ou até mesmo fazer desaparecer uns aos outros. Depende da sua imaginação e do jogo que você quer criar.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: 'Agora, vamos aprender um pouco sobre algo que os programadores de jogos usam todos os dias: os eventos. Um evento diz ao seu programa que ele deve ouvir quando algo acontece. Quando tal coisa acontece, ele realiza uma ação.'
      2:
        image: notes/playlab_events_2.png
        text: 'Alguns exemplos de eventos são: ouvir o clique de mouse, pressionar uma tecla de direção ou tocar a tela.'
      3:
        image: notes/playlab_events_2.png
        text: 'Agora, vamos fazer o robô espacial cumprimentar os terráqueos quando um jogador clicar nele. Nós usaremos o bloco "quando clicado" e conectaremos o bloco "diga" a ele. Quando o jogador clicar no robô espacial, tudo que estiver conectado ao bloco de evento "quando clicado" será realizado. O que seu alienígena diz?'
      4:
        image: notes/playlab_events_4.png
        text: 'Há também os blocos "quando a seta estiver pressionada". Se você conectar os blocos "mova" a eles, será possível começar a mover seus personagens para cima, para baixo, para esquerda e para a direita. Pouco a pouco, seu jogo está ficando cada vez mais interativo.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Este é o bloco "repita infinitamente". Tudo que estiver contido neste bloco acontecerá repetidamente no jogo.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Se quisermos que um personagem faça algo repetidamente, sem nenhuma ação do jogador, colocaremos esses blocos dentro do bloco "repita infinitamente".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Neste desafio, nosso objetivo é ajudar o mago a proteger as fronteiras do reino, andando da esquerda para a direita e vice-versa, continuamente. Aprender como repetir ações de comandos vai economizar muito do seu tempo no futuro, quando você for criar seu próprio jogo.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Estes são seus blocos de desenho. Use o bloco correto para mover o artista para onde ele precisa preencher as linhas cinzas.
      2:
        image: notes/C1_artist_intro_2.png
        text: Estes são os blocos pule. Quando você os usa, seu artista se move mas não desenha, então use-os para pular para a próxima linha cinza.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Abelhas não são super legais? Nesse próximo conjunto de desafios, seu objetivo é ajudar a abelha a chegar até as flores, obter seu néctar e voar até a colmeia para produzir mel. Você precisa usar os blocos "obtenha néctar" e "faça mel" nesse exercício.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Cada flor tem um número diferente de néctares: 1, 2, 3, ou mais. Sabemos a quantidade de néctar presente nas flores vermelhas, por meio do pequeno número no canto. Então lembre-se de obter todo o néctar da flor antes de avançar. Além disso, cada colmeia pode armazenar apenas uma certa quantidade de mel: 1, 2, 3, ou mais. Então lembre-se de produzir o máximo de mel que uma colmeia pode armazenar.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Se você puder obter todo o néctar e produzir todo o mel, você vai para o próximo nível. Caso contrário, você precisa realizar esse desafio novamente. Brinque um pouco e veja como a programação é doce como o mel!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Um laço é uma repetição de uma atividade. Ao entrar em uma colmeia para inspecionar, eu olho para um quadro e o coloco de volta, e então eu repito essa mesma atividade várias vezes. Estou repetindo, fazendo a mesma atividade várias vezes.
      2:
        image: notes/C1_bee_loops_2.png
        text: 'Nesse nível, queremos que a abelha colete três néctares da flor. Ao invés de usar três blocos "obtenha néctar", você vai usar o bloco repita para obter néctar três vezes. Clique em "Executar" e veja se você acertou. Legal!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Essa lição é chamada de o grande evento. Ela é sobre como podemos controlar nossos programas e de fato alterar um programa em execução usando eventos, como apertar um botão ou clicar no mouse.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Para esta lição, você será controlado por um controle remoto de papel. É como um jogo da vida real.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Um evento é uma ação que faz algo acontecer. É como quando você clica no botão do mouse e uma página carrega. Isso é um evento. Quando você toca a tela do seu tablet para deslizar, isso também é um evento. Os eventos são uma ótima maneira de deixar que o usuário direcione seu programa para onde ele quiser ou precisar.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Acontecem coisas às quais todos respondemos. Sentimos fome e vamos até a geladeira. Escutamos o carteiro chegar e entregar a correspondência e vamos até a porta buscá-la. Esses eventos são como apertar um botão ou mover um controle de video game. Eles são coisas que acontecem e que fazem com que realizemos algo.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'Nos jogos, há um evento chamado "atualização" e ele acontece 30 ou 60 vezes por segundo. Para programadores de jogos, isso é quase mais importante como um evento que os botões ou o controle do jogo.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'O principal evento que estamos observando é a "atualização". Então olhamos para o controle por um momento e dizemos "ah, alguém apertou o botão nesse quadro? Sim ou não?". Sem eventos, o jogador não poderia se mover, pular, nem poderia controlar o que está acontecendo. O jogo não poderia animar coisa alguma.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Na escultura de areia você tem que saber que a falha faz parte do programa. Mas se você persistir, ela não representará nada além de mais emoção. Persistência é o nome do jogo. Fique com ela, você não vai se arrepender.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Esta lição é chamada de criando uma base. Nesta lição, vamos trabalhar em uma tarefa realmente difícil. Você vai descobrir como criar uma estrutura tão alta quanto um desses copos e ela será forte o suficiente para suportar o peso de um livro.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Pode haver momentos em que nossa criação não funcionará. Pode haver momentos em que nos frustraremos e pensaremos em desistir. Pode haver vários desses momentos. Mas se continuarmos tentando e dando nosso melhor, com certeza teremos sucesso em pouco tempo.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistência significa aguentar firme quando você realmente quer desistir. Se você quiser criar algo novo e diferente, você vai se deparar com muitas falhas no caminho.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: O truque para persistir é escolher seguir em frente e aprender com seus fracassos ao invés de desistir por estar frustrado. A frustração na verdade significa que há algo maravilhoso esperando por nós. Então, não desista antes de conseguir!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: 'Olá, meu nome é Miral Kotb e sou o criador do Iluminate. Em meu trabalho, há algo que usamos na dança e na programação de trajes luminosos: são os laços! Os laços repetem uma ação várias vezes.'
      2:
        image: notes/C1_getting_loopy_2.png
        text: Quando você repete algo várias vezes, como minhas ações para manter o bambolê girando, você realiza uma repetição daquela ação. Isso é uma repetição. Isso é uma repetição. E isso é uma repetição.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Hoje vamos ter uma festa dançante. Vamos fazer repetições com uma nova dança, a iteração. Vamos aprender mais sobre repetições usando uma dança. Você vai aprender alguns passos fáceis e repeti-los várias vezes para completar a dança.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Aqui estão os passos que você precisa aprender. Bata palmas. Coloque suas mãos atrás da cabeça. Coloque as mãos na cintura. Levante sua mão esquerda. Levante sua mão direita. Fácil, não é? Você vai descobrir que você pode encurtar as direções colocando alguns passos de dança em laços de repetição.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Na verdade usamos repetições em nossa dança. Os dançarinos estão usando computadores, todos na mesma rede. Eu posso repetir as luzes para os mesmos dançarinos várias vezes. Na repetição eu posso ter uma iteração na qual eu vou dizer que quero iterar por esses seis dançarinos várias vezes e então, dentro do laço, aumentar a velocidade da luz. Tudo isso é criado usando laços de repetição. Laços são importantes na ciência da computação porque eles tornam nosso trabalho mais breve e mais fácil.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Essa lição se chama Mapas divertidos. Hoje vamos ajudar nossa amiguinha peluda Flurb a chegar até sua fruta.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Faça a Flurb ir até a fruta. Para fazer isso você precisa descobrir o caminho que ela deve percorrer e direcioná-la com as setas. Para a Flurb chegar até a maçã, em que direções ela precisa ir? Circule a seta para cima.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Para fazê-la chegar até lá, circule a direção na qual ela tem que ir.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Crie seu algoritmo colando as setas próximas ao mapa que você está tentando resolver. O segundo é igual, mas ela vai para baixo.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: É como programar com papel. E é isso mesmo!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Depurar é encontrar e corrigir problemas. Há várias formas de depurar problemas. Uma das mais fáceis é avançar passo a passo até você encontrar algo de errado. Eu estou tentando fazer uma parada de mão para trás, mas continuo caindo.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Eu fiz todo o caminho, passo a passo, e descobri onde estava meu erro. Eu não estava colocando minhas mãos na trave corretamente. Então eu tentei fazer uma parada de mão para trás na trave com minha nova posição de mãos e consegui. Eu fiquei realmente feliz por ter depurado minha parada de mão.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Para aprender sobre depuração, já começamos com um conjunto de blocos na fase. Você vai perceber que esses blocos não vão levar você até o objetivo. Precisamos depurar a solução para corrigi-la. O que deu errado? Você vai perceber que era preciso ir mais um bloco para o oeste.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Vamos corrigir isso adicionando outro bloco para o oeste e clicando em Executar para ver se deu certo. Você conseguiu!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Para este desafio, você precisa levar o pássaro até o porco. Olhe para o desafio e veja em que direções ele precisa ir.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: 'Você precisa arrastar os blocos da caixa de ferramentas para a área de trabalho. Verifique se ele está sob o bloco "quando executar" e, quando você achar que encontrou a solução correta, clique em "Executar" e veja o pássaro ir até o porco.'
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Os computadores são muito bons em repetir comandos. Como pessoa, você ficaria realmente entediado se tivesse que fazer a mesma coisa várias vezes em sequência. Mas um computador pode fazer a mesma coisa milhões, ou até mesmo bilhões de vezes, sem ficar entediado e ainda fazer muito bem.
      2:
        image: notes/C1_maze_loops_2.png
        text: Por exemplo, se eu quisesse desejar a todos no Facebook um feliz aniversário enviando um e-mail, isso levaria mais de um século para de fato escrever todos os e-mails para todos. Mas com apenas algumas linhas de código, eu posso fazer um sistema enviar um e-mail para todos no Facebook desejando um feliz aniversário.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'Para levar o pássaro até o porco neste nível... ao invés de arrastar três blocos para o norte na área de trabalho, você vai usar o bloco "repita". Arraste o bloco "repita" para a área de trabalho e coloque o número 3. Então, arraste o bloco "mova para o norte" para dentro do bloco "repita" e clique em "Executar" para ver se você acertou. Parabéns, você conseguiu!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Esta lição se chama Criando caminhos. Juntos, vamos escrever um programa para levar nossos amigos do início, com a bússola, até o rostinho feliz.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Mas o rostinho feliz está voltado para baixo e apenas uma pessoa sabe como chegar lá. Vamos iniciar esse programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Um programa é um algoritmo que foi programado em algo que pode ser executado por uma máquina. A maioria pensa em um programa como algo que escrevemos para um computador. Os programas são realmente bons para isso, mas eles também são úteis em outros lugares. Você pode criar seu próprio jogo ou mesmo programar um robô para realizar tarefas para você.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Oi, meu nome é Jeremiah! Eu tenho sete anos. Eu adoro jogar no computador da minha mãe, mas eu sempre peço permissão primeiro. "Mãe, posso usar o computador? É claro, querido!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: Eu adoro o computador da minha mãe porque eu posso acessar a internet. A internet é como o seu bairro. Você pode visitar lugares legais, falar com sua família e amigos e aprender um monte de coisas novas.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Ontem, eu visitei um zoológico perto da minha casa. Eu vi uma zebra bebê. Tirei foto dela e alterei a cor de suas listras, então eu coloquei um chapéu nela e a adicionei à minha coleção de animais estranhos. Incrível! Depois, fui a um lugar muito distante. Eu visitei o Quênia, um país da África. Muitas zebras moram lá.
      4:
        image: notes/C1_going_places_safely_4.png
        text: 'Às vezes eu uso a internet para conversar com pessoas que eu conheço, como minha avó, que mora em outro Estado. Oi vovó! Ela está fazendo cookies para me mandar no meu aniversário. "Hmm, queria que a internet tivesse cheiro!". Eu posso conversar com pessoas diferentes na internet, como meu primo faz, mas eu só converso com pessoas que eu conheço.'
      5:
        image: notes/C1_going_places_safely_5.png
        text: O que eu mais gosto na internet é que eu posso jogar jogos divertidos. Ponto! Eu também gosto de desenhar e criar novas coisas para compartilhar com meus amigos. Legal! Às vezes eu visito sites nos quais eu aprendo coisas novas, mas eu sempre acesso sites apropriados para mim. Uau, dinossauros!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'A internet é um lugar superdivertido. Mas, assim como quando você atravessa uma rua em seu bairro, você também precisa tomar cuidado quando você fica on-line. Aqui estão três regras que não podemos esquecer. Regra número 1: sempre peça a permissão de seus pais. Regra número 2: fale somente com pessoas conhecidas. Regra número 3: fique em lugares apropriados para você.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Uau, isso foi divertido! Hora do jantar. Vou sair agora. Mal posso esperar para me conectar novamente e ver o que mais posso visitar.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Hoje vamos aprender sobre programação em duplas. Na programação em duplas vocês trabalham como uma equipe. Por que duas pessoas deveriam usar um único computador? Porque duas cabeças pensam melhor que uma. Na programação em duplas, você e seu parceiro vão sentar juntos em um computador e ambos vão trabalhar no mesmo projeto.
      2:
        image: notes/C1_pair_programming_2.png
        text: Na programação em duplas, uma pessoa é o piloto e a outra é o navegador, como em um carro. O piloto senta no computador e é quem usa o teclado e o mouse, ou a tela de toque, e controla as principais ações do computador. A outra pessoa é o navegador. Ela ajuda o piloto respondendo às perguntas dele e apontando possíveis problemas ou erros.
      3:
        image: notes/C1_pair_programming_3.png
        text: A comunicação é a chave para o sucesso da programação em duplas. Não insulte, seja respeitoso, não seja um navegador mandão, porque ninguém gosta de quem fica dando palpite e tentando controlar a direção o tempo todo. Você e seu parceiro devem conversar sempre. O piloto pode explicar o que está fazendo, e o navegador pode ajudar sugerindo o que fazer em seguida.
      4:
        image: notes/C1_pair_programming_4.png
        text: O navegador deve pensar sobre o problema todo, enquanto o piloto se concentra nos detalhes. Ambos os papéis são importantes. A programação em duplas é sobre como trabalhar em equipe.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Esta lição se chama Plantando uma semente e vai nos ajudar a entender algoritmos. Os algoritmos são instruções específicas que explicam a ordem de fazer alguma coisa. Mesmo atividades cotidianas, como tomar café ou escovar os dentes, são algoritmos que exigem pequenas etapas para realizar um trabalho.
      2:
        image: notes/C1_planting_seed_2.png
        text: Os computadores podem ser muito espertos, mas eles só entendem você se você lhes informar exatamente o que quer, passo a passo. O mais interessante sobre algoritmos é que se você seguir as instruções em ordem, é possível fazer algo que você não sabia como fazer de antemão. É como seguir uma receita.
      3:
        image: notes/C1_planting_seed_3.png
        text: Hoje vamos plantar nossas próprias sementes usando um algoritmo. Crie seu próprio algoritmo separando as imagens. Selecione as imagens que mostram etapas do plantio de uma semente e organize essas imagens na ordem correta.
      4:
        image: notes/C1_planting_seed_4.png
        text: Agora, vamos ver se seu algoritmo funciona. Siga os passos do algoritmo cuidadosamente. Eles estão na ordem correta? Você conseguiu plantar uma semente seguindo o algoritmo? Isso é como programar com imagens!
      5:
        image: notes/C1_planting_seed_5.png
        text: Quando queremos fazer chocolate, há várias etapas grandes nesse processo, cada uma delas tem um conjunto de passos menores e há diferentes receitas ou algoritmos, dependendo do gosto que queremos para o chocolate. Cada etapa é importante, mesmo as menores, então se pularmos uma delas as demais não podem ser concluídas. Criar algoritmos que os outros possam entender é muito importante. É por isso que cada etapa deve ser escrita de forma que o resultado seja sempre o mesmo, não importa quem faça.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Hora de ser criativo e usar suas habilidades de programação para contar uma história. Sua história terá personagens e você vai poder fazer esses personagens conversarem e interagir uns com os outros. Comece pensando no tipo de história que você quer contar.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: 'O gato está sempre com medo do cão, mas e se o gato descobrir que o cão está tentando ser legal? O bloco "quando executar" inicia tudo. O bloco "mova" vai mover seu personagem e o bloco "diga" vai fazer seu personagem dizer o que você digitar.'
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Esse é o bloco "quando os personagens trombam" que você pode conectar aos outros blocos.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'Eu estava fazendo o cão vir aqui e dizer "Oi", mas o gato se assustou e saiu correndo. "Ahh". Se houvesse mais tempo, esse seria um final feliz. Fim!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Este é o nível do Soletrando. Use as peças para mover a abelha. Conforme ela se move, ela vai coletar letras para soletrar palavras.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Veja se você pode soletrar a palavra fornecida na caixa abaixo da fase. Mas cuidado! Ir para a direção errada vai adicionar letras que você não quer.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Os computadores são muito bons em repetir comandos. Como pessoa, você ficaria realmente entediado se tivesse que fazer a mesma coisa várias vezes em sequência. Mas um computador pode fazer a mesma coisa milhões, ou até mesmo bilhões de vezes, sem ficar entediado e ainda fazer muito bem.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Por exemplo, se eu quisesse desejar a todos no Facebook um feliz aniversário enviando um e-mail, isso levaria mais de um século para de fato escrever todos os e-mails para todos. Mas com apenas algumas linhas de código, eu posso fazer um sistema enviar um e-mail para todos no Facebook desejando um feliz aniversário.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Neste exemplo, seu objetivo é levar o pássaro até o porco. Agora, podemos usar o bloco repita para fazer isso com mais facilidade. Você pode fazer isso passando ao computador um comando avance cinco vezes para que o pássaro dê um passo em direção ao porco toda vez, ou você pode simplesmente dizer ao computador para avançar uma vez e então dizer para ele repetir isso cinco vezes, e ele vai fazer a mesma coisa.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Para fazer isso, você deve arrastar seu comando avance e colocá-lo em um bloco repita. Então, você clica e escolhe quantas vezes o bloco repita deve realizar a ação de avançar.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Outra coisa, você pode colocar quantos comandos quiser dentro do bloco repita. Então, nesse exemplo, você está dizendo para ele avançar e virar à esquerda, o que ele fará cinco vezes. Divirta-se!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Você nem se classificaria para a corrida se não tivesse pessoas proficientes em ciência da computação, por causa da quantidade de dados que os carros coletam e a necessidade de ter pessoas que possam escrever programas para descobrir como continuar a melhorar a performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: Nesses desafios, você será um artista que usa um lápis para desenhar formas diferentes. O artista vai desenhar uma linha por onde quer que ele passe.
      3:
        image: notes/C2_artist_intro_3.png
        text: Para se mover na tela, você vai usar o bloco avance. Aqui o bloco avance diz para avançar 100 pixels. Quando clicamos em Executar, o que acontece? O artista avança uma certa quantidade, e essa quantidade é 100 pixels. Pixels são, basicamente, quadradinhos muito pequenos na tela do seu computador.
      4:
        image: notes/C2_artist_intro_4.png
        text: O outro bloco que temos nesse desafio diz para virar 90 graus à direita. Quando arrastamos isso, o artista vira uma certa quantidade de graus. Então, você pode brincar com o quanto deseja que o artista vire. Essa é uma curva de 90 graus.
      5:
        image: notes/C2_artist_intro_5.png
        text: E essa é uma curva de 120 graus. Lembre-se, você pode alterar esses valores clicando nas setas próximas aos números de pixels e graus. Divirta-se desenhando com seu artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Este é o bloco condicional. Ele diz que SE houver néctar ou mel menor que, igual a, ou maior que um número, ENTÃO algo deve ser feito.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Isso é útil quando não sabemos quanto néctar ou mel obter, como vemos aqui com esse ponto de interrogação.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Neste exemplo, vamos dizer que SE a flor roxa tem néctar maior que 0, obtenha néctar. Isso fará com que nossa abelha continue coletando néctar enquanto for possível. Bingo!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Está é a lição das Pulseiras binárias. Vamos programar nossas iniciais em uma pulseira que podemos usar e mostrar a todos os nossos amigos!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: A forma binária é uma maneira de representar informações usando apenas duas opções. Às vezes as pessoas pensam nela como apenas 1s e 0s. Mas a forma binária pode ser representada com combinações de ligado e desligado, para cima e para baixo, entrada e saída, ou qualquer conjunto de coisas opostas.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Olá, meu nome é Orion e eu programo robôs aqui na Play-im. Todos os computadores e cérebros de robôs são basicamente pequenos portões eletrônicos. Quando o portão está aberto, a eletricidade pode passar e, quando está fechado, ela não pode passar.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Um exemplo de binário em robôs são os olhos. Os olhos dos robôs são LEDs, luzes que estão acesas ou apagadas. É um sistema binário, ou uma coisa, ou outra. Podemos usar luzes para representar números binários. Se temos um conjunto de robôs, podemos dizer que o primeiro robô está na casa dos 1s, o segundo na casa dos 2s, o terceiro na casa dos 4s, e assim por diante. É assim que você representa um número binário. Os robôs fazem isso com seus olhos binários e contam para você.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Esta lição se chama Condicionais com cartas. Todos os dias você toma decisões com base no que você vê e ouve.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Eu quero ir até o parque, mas primeiro preciso decidir se devo levar um guarda-chuva ou não. Então eu olho pela janela. Se o tempo estiver nublado, vou levar meu guarda-chuva. Senão, vou levar meus óculos de sol. Acho que é melhor levar o guarda-chuva. O que eu vejo e ouço determina o que vou levar ao parque.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: 'Condicionais também são usadas em jogos. Hoje vamos praticar usando condicionais com um jogo de cartas. Nesse jogo, a carta que eu tiro determina o que meus amigos vão fazer. Se eu tirar um sete, todos batem palmas. Senão, todos dizem "ahhhh". Vamos tentar! "Ahhhh" "aplausos"'
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Aposto que você consegue fazer jogos ainda mais divertidos com condicionais. Tente! Condicionais fazem os computadores parecerem espertos. Um programa de computador que inclui condicionais pode reagir ao usuário e alterar seu curso de ação.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pense no seu jogo preferido. Você ganha mais pontos por fazer algumas ações em comparação com outras? Isso ocorre porque o computador está usando condicionais. Essa é a forma de o computador tomar uma decisão. Por exemplo, se você atinge o alvo, você ganha dez pontos. Senão, você perde três. Quando você sabe como essas condições funcionam é possível criar todo o tipo de jogos emocionantes.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Aqui já temos alguns blocos em nossa área de trabalho. Mas algo está errado.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Vamos depurar esse código diminuindo a velocidade e vendo como ele passa por cada bloco, passo a passo.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ah, aí está o problema! Os bigodes do gato têm 75 pixels de comprimento, e não 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Você já ouvi falar em depurar um programa? Essa é uma forma de descobrir o que não está funcionando. Quando você depura um código, você identifica e remove os erros.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Aqui, já temos alguns blocos em nossa área de trabalho. Vamos usar o botão do passo para caminhar pelos blocos, passo a passo, para ver se esta é a solução correta e onde podemos corrigi-la.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Parece que nosso problema está aí! Precisamos de mais um bloco avance. O botão de passo nos ajuda a depurar nosso problema, identificando onde está o erro para corrigi-lo.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Você segura seu chapéu na cabeça e seu cérebro lhe diz onde você está e para pensar sobre o zoológico, para acenar e dizer oi! Use a cabeça quando estiver on-line para manter o que é seu em sua mente e para saber se proteger, como dar um pouco de privacidade para você mesmo! Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use seu coração para crescer, dê a si mesmo um brilho saudável, e para conquistar alguém, diga a esse alguém você será meu! Use seu coração quando estiver on-line, seja gentil, correto e mostre respeito por seus amigos, seja justo e bom na internet. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use seus braços para abraçar seu bichinho de estimação, para evitar que suas roupas se molhem, para usar suas mangas favoritas e para voar e acreditar. Use seus braços quando estiver on-line, para dar um tempo, equilibrar o tempo, deixar a tecnologia para trás e subir em uma árvore. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use sua barriga para armazenar comida, para ouvir seu estômago roncar, para mexer a pança e para sentir o gás do refrigerante. Use seus instintos quando estiver on-line, para ficar de olho em alguns sinais e guiar-se pelo caminho, dizendo quando as coisas não estiverem bem. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Então pense com sua cabeça, sinta com seu coração, equilibre-se com seus braços e ouça seus instintos, on-line. Use suas pernas para correr e chutar, para pular em um pula-pula, para dançar e para pular com suas meias suadas. Use suas pernas quando estiver on-line, para enfrentar os valentões e lembre-se de manter-se em pé, de ser bom com as criaturas pequenas e grandes.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line! Então pense com sua cabeça, sinta com seu coração, equilibre-se com seus braços, ouça seus instintos e fique de pé com suas pernas. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Toda vez que você fica on-line, você deixa uma pegada que pode ser pesquisada, copiada, compartilhada e transmitida, e ela é permanente. Que tipo de pegada digital você está deixando? Que tipo de pegada digital você quer deixar?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: 'Esta lição se chama "Programação em papel quadriculado", e ela é sobre algoritmos. Hoje vamos aprender a escrever programas que mostram uns aos outros como recriar imagens simples em preto e branco, usando apenas setas desenhadas à mão.'
      2:
        image: notes/C2_graph_paper_2.png
        text: Um algoritmo é uma lista de instruções para realizar uma tarefa. Vamos seguir esse conjunto de instruções para fazer a tigela. Os algoritmos são realmente úteis quando você precisa que alguém entenda como fazer alguma coisa.
      3:
        image: notes/C2_graph_paper_3.png
        text: Se você está escrevendo um algoritmo para um computador, você precisa dividi-lo em pequenas etapas. Então termine esta linha e vá para a próxima, então para a próxima, e você chegará no fim.
      4:
        image: notes/C2_graph_paper_4.png
        text: Eu uso algoritmos no meu trabalho. Se eu escrevo todas as etapas, eu posso recriar a mesma peça novamente, ou eu posso ensinar outra pessoa a fazer isso. Coloque o vidro no forno, faça a fundição, siga o resto das instruções para fazer a tigela. Os algoritmos dão um mapa para fazer alguma coisa.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Aqui, vamos usar o bloco repita para economizar passos quando estivermos programando nosso artista. Já temos alguns blocos, mas eles estão aqui somente para darmos início ao programa.
      2:
        image: notes/C2_artist_loops_2.png
        text: Para repetir esses blocos quatro vezes para desenhar o quadrado inteiro, arrastamos o bloco repita e colocamos os blocos avance e vire à direita dentro dele. Quando clicarmos em Executar, o artista vai repetir esses passos quatro vezes para completar o quadrado.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Um laço é uma repetição de uma atividade. Ao entrar em uma colmeia para inspecionar, eu olho para um quadro e o coloco de volta. Eu repito essa mesma atividade várias vezes. Estou repetindo, fazendo a mesma atividade várias vezes.
      2:
        image: notes/C2_bee_loops_2.png
        text: Este é o bloco repita. Tudo o que você colocar dentro do bloco repita será repetido o número de vezes que você quiser. Por exemplo, nesse nível, ao invés de arrastar os blocos avance e obtenha néctar três vezes, vamos arrastá-los uma vez cada e repetir a ação três vezes. Assim fica fácil!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalmente a programação é feita toda em texto, mas vamos usar o Blockly, que usa blocos visuais que podem ser arrastados e posicionados para escrever programas. Indiretamente, você ainda está criando código. Para começar, vamos criar o código para um programa que vai ajudar esse Angry Bird a andar por um labirinto para chegar até o porco malvado que roubou seus ovos.
      2:
        image: notes/C2_maze_intro_2.png
        text: O Blockly é dividido em três partes principais. À esquerda está o labirinto do pássaro, onde seu programa será executado. As instruções para cada nível estão escritas abaixo do labirinto. Essa área do meio é a caixa de ferramentas, e cada um desses blocos é um comando que o pássaro consegue entender. O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: 'Se eu arrastar um bloco mova para nossa área de trabalho e clicar em "Executar", o que acontece? O pássaro avança um quadradinho na grade. E se eu quiser que o pássaro faça algo depois de avançar um quadradinho? Eu posso adicionar outro bloco ao nosso programa.'
      4:
        image: notes/C2_maze_intro_4.png
        text: 'Eu vou escolher o bloco "vire à direita" e vou arrastá-lo para baixo do meu bloco avance até que a seta amarela apareça. Então, vou soltá-lo e os dois blocos vão se juntar. Quando eu apertar "Executar" novamente, o pássaro vai realizar os comandos que estão empilhados de cima para baixo em nossa área de trabalho.'
      5:
        image: notes/C2_maze_intro_5.png
        text: Se você quiser excluir um bloco, simplesmente remova-o da pilha e arraste-o para a lixeira. Depois de clicar em Executar, você sempre pode clicar no botão Reiniciar para fazer o pássaro voltar para o início. Agora vamos pegar os porcos!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Esta lição se chama Algoritmos da vida real. Os algoritmos descrevem coisas que as pessoas fazem todos os dias. Receitas de cookies e instruções para construir uma casa de passarinho são exemplos de algoritmos da vida cotidiana.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Hoje vamos fazer, criar e testar um algoritmo para um avião de papel. Mas, primeiro, precisamos dividir esse grande projeto em pequenas etapas fáceis de seguir. Para criar um avião de papel, precisamos decidir quais passos dar e em que ordem dá-los.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Você vai criar seu algoritmo primeiro cortando as imagens. Em seguida, você vai selecionar as 6 imagens que mostram as etapas necessárias para criar um avião de papel e organizar essas imagens na ordem correta. Depois de colocar tudo em ordem, você vai trocar de algoritmo com outra equipe de alunos para testá-lo e ver se ele funciona. Um algoritmo bem projetado é superimportante para criar o melhor avião de papel.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Quando queremos fazer chocolate, há várias etapas grandes nesse processo. Cada uma delas tem seu próprio conjunto de passos menores. E há diferentes receitas ou algoritmos, dependendo do gosto que queremos para o chocolate. Todas as etapas são importantes, mesmo as menores, então se pularmos uma delas as demais não poderão ser concluídas. Criar algoritmos que os outros possam entender é muito importante. É por isso que cada etapa deve ser escrita de forma que o resultado seja sempre o mesmo, não importa quem faça.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Existem alguns novos blocos para experimentar. Há os blocos "quando a seta estiver pressionada" e "mova o personagem". Você pode juntar esses blocos para mover os personagens com as setas do teclado. E há alguns blocos que fazem coisas quando os personagens trombam ou são clicados. Dê uma olhada e divirta-se!'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Hoje vamos fazer programação por revezamento. Isso significa programar sob pressão e depurar os erros que às vezes acontecem quando você trabalha muito rápido ou em equipe. Vamos usar a programação em papel quadriculado para simular a programação e usar corridas de revezamento para simular um prazo de entrega.
      2:
        image: notes/C2_relay_programming_2.png
        text: Na programação por revezamento, as equipes vão competir para terminar um programa em papel quadriculado. Você precisa verificar o trabalho do seu companheiro de time, ou depurá-lo, corrigi-lo se houver um erro, adicionar sua seta, voltar e marcar seu companheiro.
      3:
        image: notes/C2_relay_programming_3.png
        text: Os programadores usam muito a depuração para encontrar e corrigir problemas em seus algoritmos ou códigos. Há várias formas de depurar problemas. Uma das mais fáceis é seguir a execução passo a passo até você encontrar algo errado, e então corrigir o problema.
      4:
        image: notes/C2_relay_programming_4.png
        text: Aqui, estou tentando fazer uma parada de mão para trás, mas eu continuo caindo. Eu passei por cada parte, passo a passo, e descobri onde estava meu erro. Meu treinador me mostrou que eu não estava colocando as mãos na trave corretamente. Então, eu tentei fazer outra parada de mão para trás com minha nova posição de mãos e eu consegui! Fiquei realmente feliz por ter depurado minha parada de mão para trás. Descobrimos o problema! Depurar é encontrar e corrigir problemas. Bom trabalho!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Uma coisa na qual os computadores são muito bons é repetir comandos. Como pessoa, você ficaria realmente entediado se tivesse que fazer a mesma coisa várias vezes em sequência. Mas um computador pode fazer a mesma coisa milhões, ou até mesmo bilhões de vezes, sem ficar entediado e ainda fazer muito bem.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Então, por exemplo, se eu quisesse desejar feliz aniversário a todos no Facebook enviando um e-mail, eu levaria mais de um século para de fato escrever todos os e-mails para todo o mundo. Mas, com apenas algumas linhas de código, eu posso fazer um sistema enviar um e-mail para todos no Facebook desejando um feliz aniversário. É isso que são as repetições, e é por isso que são valiosas, algo que os computadores conseguem fazer muito bem.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: 'Neste exemplo, seu objetivo é levar o pássaro até o porco. Agora estamos aptos a usar o bloco "repita" para fazer isso facilmente. Você também pode fazer isso dando ao computador o comando "avance" cinco vezes para levar o pássaro até o porco, um passo por vez.'
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Ou você pode simplesmente dizer ao computador "avance" uma única vez, e então dizer a ele "repita" isso 5 vezes, e ele fará a mesma coisa. Então, para fazer isso, você arrasta seu comando "avance" e o coloca dentro do bloco "repita". Você pode clicar nele e escolher quantas vezes você quer repetir o bloco, para dizer quantos passos você quer que ele avance.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'Você também pode colocar quantos comandos quiser dentro do bloco "repita". Então, neste exemplo, você está dizendo para ele avançar e virar à esquerda, o que ele fará cinco vezes. Certo, bom trabalho e divirta-se!'
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Uma das melhores coisas na programação é que quando você ensina um computador a realizar uma ação você pode chamar essa função novamente. Você dá um nome a ela e então você a chama. Isso é realmente como estender a linguagem.
      2:
        image: notes/C3_artist_functions_2.png
        text: 'No programa que criamos, aprendemos como desenhar um quadrado movendo e virando quatro vezes. Podemos pegar essa função e chamá-la de "desenhe um quadrado", assim, sempre que quisermos fazer isso, simplesmente dizemos "desenhe um quadrado" e o código dessa função será chamado. Ela fará isso por nós. Adicionamos esse conceito a nossa linguagem de programação.'
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Você nem se classificaria para a corrida se não tivesse pessoas proficientes em ciência da computação, por causa da quantidade de dados que os carros coletam e a necessidade de ter pessoas que possam escrever programas para descobrir como continuar a melhorar a performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: Nesses desafios, você será um artista que usa um lápis para desenhar formas diferentes. O artista vai desenhar uma linha por onde quer que ele passe.
      3:
        image: notes/C3_artist_intro_3.png
        text: Para se mover na tela, você vai usar o bloco avance. Aqui o bloco avance diz para avançar 100 pixels. Quando clicamos em Executar, o que acontece? O artista avança uma certa quantidade, e essa quantidade é 100 pixels. Pixels são, basicamente, quadradinhos muito pequenos na tela do seu computador.
      4:
        image: notes/C3_artist_intro_4.png
        text: O outro bloco que temos nesse desafio diz para virar 90 graus à direita. Quando arrastamos isso, o artista vira uma certa quantidade de graus. Então, você pode brincar com o quanto deseja que o artista vire. Essa é uma curva de 90 graus.
      5:
        image: notes/C3_artist_intro_5.png
        text: E essa é uma curva de 120 graus. Lembre-se, você pode alterar esses valores clicando nas setas próximas aos números de pixels e graus. Divirta-se desenhando com seu artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Quando você coloca um laço dentro de outro, chamamos isso de laço aninhado. Por exemplo, já temos aqui o código para desenhar um triângulo com lados de 100 pixels usando o bloco repita vezes configurado para três vezes, uma para cada lado do triângulo.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Mas queremos desenhar seis triângulos. Para isso, vamos pegar aquele laço e colocá-lo dentro de outro bloco repita vezes. Que legal!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Este é o bloco condicional. Ele diz que SE houver néctar ou mel menor que, igual a, ou maior que um número, ENTÃO algo deve ser feito.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Isso é útil quando não sabemos quanto néctar ou mel obter, como vemos aqui com esse ponto de interrogação.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Neste exemplo, vamos dizer que SE a flor roxa tem néctar maior que 0, obtenha néctar. Isso fará com que nossa abelha continue coletando néctar enquanto for possível. Bingo!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Você já ouvi falar em depurar um programa? Essa é uma forma de descobrir o que não está funcionando. Quando você depura um código, você identifica e remove os erros.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Aqui, já temos alguns blocos em nossa área de trabalho. Vamos usar o botão do passo para caminhar pelos blocos, passo a passo, para ver se esta é a solução correta e onde podemos corrigi-la.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Parece que nosso problema está aí! Precisamos de mais um bloco avance. O botão de passo nos ajuda a depurar nosso problema, identificando onde está o erro para corrigi-lo.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Um dos conceitos mais importantes da ciência da computação é como definir novos comandos, como adicionar suas próprias palavras em uma linguagem de computador. A maioria das linguagens de computador tem apenas cem palavras ou comandos. A arte e a magia estão em definir suas próprias novas palavras a partir dos blocos de construção.
      2:
        image: notes/C3_bee_functions_2.png
        text: Fazemos isso o tempo todo nos esportes. Por exemplo, no basquete você começa aprendendo como driblar, como arremessar e como fazer um rebote. Quando você tiver aprendido esses conceitos básicos, você pode aprender novos conceitos e juntar esses blocos de construção, como fazer uma jogada de pivô ou uma tabela. Então, a partir disso você pode fazer jogadas mais complexas. Quando você aprende a jogada e dá um nome a ela, todos do time sabem como executá-la.
      3:
        image: notes/C3_bee_functions_3.png
        text: Da mesma forma, depois de ensinar a um computador como fazer uma ação uma vez usando essas sequências de comandos, você pode criar o nome que quiser para essa ação, assim será mais fácil repeti-la depois. Ao definir e nomear seu próprio comando, você cria uma função. Agora, vamos usar funções para ajudar a abelha.
      4:
        image: notes/C3_bee_functions_4.png
        text: Nesse exemplo, nossa função é chamada obtenha 2 néctares, representada por esse bloco verde. Sabemos o que obtenha 2 néctares faz olhando para essa caixa cinza que é a definição da função. Se olharmos para dentro dela, a função obtenha 2 néctares vai obter néctar, e então obter néctar novamente. Sempre olhe para o que está dentro da caixa cinza, assim você sabe o que os blocos de função verdes podem fazer.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Agora, vamos usar laços aninhados com a abelha. Temos um código inicial que diz para a abelha avançar e obter néctar três vezes, e então virar à direita. Vamos pegar todo esse trecho de código, aninhá-lo dentro de outro bloco repita e configurá-lo para repetir três vezes. Pronto!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Você vai criar seu próprio jogo de pingue-pongue e vai poder compartilhá-lo com seus amigos! Que legal!
      2:
        image: notes/C3_bounce_2.png
        text: Para começar, precisamos conectar os controles da raquete às setas do nosso teclado.
      3:
        image: notes/C3_bounce_3.png
        text: 'Podemos fazer isso conectando o bloco "quando a seta à esquerda estiver pressionada" ao bloco "mova à esquerda" e o bloco "quando a seta à direita estiver pressionada" ao bloco "mova à direita". Faça isso e logo você vai programar seu próprio jogo de pingue-pongue!'
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Essa lição é sobre pensamento computacional. Às vezes, aprender um novo jogo pode ser difícil, certo? No começo isso pode parecer realmente confuso e, às vezes, não há ninguém para ensinar as regras e você precisa descobrir tudo sozinho.
      2:
        image: notes/C3_computational_thinking_2.png
        text: A boa notícia é que você pode melhorar sua habilidade de descobrir coisas sozinho quando você conhece alguns truques. Esses truques são formas únicas de olhar para os problemas e resolvê-los. Nessa lição, você vai aprender quatro truques e treinar com seus amigos para descobrir as regras de um jogo.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Quando você divide um problema grande em partes menores, você está usando seu cérebro para decompor o problema maior. Quando tivermos decomposto o problema grande em problemas menores, podemos ir para o próximo truque, o qual chamamos de correspondência de padrões.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Isso acontece quando procuramos por semelhanças entre as coisas. Quando eu encontro as coisas iguais, eu posso descobrir quais coisas são diferentes. Quando eu removo essas diferenças, isso é chamado de abstração.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Depois de descobrir as etapas para resolver um problema, eu posso colocá-las em uma ordem específica chamada algoritmo, assim qualquer um pode usar minhas instruções para resolver aquele problema. Vamos usar essas quatro etapas para descobrir como jogar o jogo sem regra alguma. No final do jogo, você vai poder jogar algo parecido com isso!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Esta lição é chamada de crowdsourcing. Nesta lição, vamos usar um baralho de cartas para aprender como algumas coisas podem ser mais fáceis se feitas em grupo, ao invés de individualmente. Então reúna alguns amigos e faça algo incrível. Crowdsourcing significa obter ajuda de um grande grupo de pessoas para terminar algo mais rápido.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: Na ciência da computação, usamos crowdsourcing o tempo todo. Milhares de amadores e profissionais conectam seus computadores para procurar por bilhões e bilhões de fragmentos de informação. Eles procuram por coisas como o próximo número primo de Mersenne, ou até mesmo pela possibilidade de comunicação com alienígenas.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Quando você assiste a um filme, cada segundo dele é composto por 24 imagens individuais, as quais chamamos de quadros. Então, cada uma dessas imagens precisa ser criada e renderizada, para que todas fiquem juntas. Minha equipe e eu somos desenvolvedores de software. Trabalhamos juntos para criar um software que de fato cria uma imagem, cria a imagem final que você vê na tela. Essa é uma ferramenta que artistas e outros desenvolvedores podem usar como parte de seu trabalho e processo para poder criar as imagens que quiserem na tela.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Por exemplo, em Procurando Nemo, quando Crush, Esguicho e seus amigos estão navegando pela Corrente da Austrália oriental. Você vê imagens de água em movimento, você vê as cores nas costas da tartaruga, você vê os lados do peixe. Todas essas coisas são geradas usando matemática e programas de computador que escrevemos e então passamos para os artistas usarem e criar a imagem final, fazendo os ajustes para que tudo fique bonito e divertido.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Essa lição é chamada Jogo de dados. Quase todo mundo gosta de jogar jogos de computador. Você já pensou sobre como programadores de computador transformam as etapas de um jogo em um programa? O primeiro passo na criação de jogos de computador e na resolução de qualquer problema consiste de pensamento e de planejamento.
      2:
        image: notes/C3_dice_race_2.png
        text: A etapa de pensamento sobre a resolução de problema produz um algoritmo, o qual é um plano passo a passo para resolver um problema ou terminar uma tarefa. Nessa lição, você vai criar um algoritmo para um jogo de dados. Então, você vai pedir a seus amigos para experimentar seu plano e ver se eles conseguem seguir os passos para jogar o jogo. Quando o programador tem certeza de que os passos estão certos, é hora de traduzir o algoritmo em um programa com uma linguagem que o computador possa entender.
      3:
        image: notes/C3_dice_race_3.png
        text: Quase tudo que fazemos todos os dias requer um algoritmo, uma lista de passos que você pode seguir para terminar uma tarefa. Pense em ficar pronto para ir à escola, ou planejar um dia divertido com seus amigos, ou fazer um lanche. Para completar essas tarefas, você precisa dividi-las em passos menores e, às vezes, os passos precisam estar em uma ordem específica.
      4:
        image: notes/C3_dice_race_4.png
        text: Pense sobre como fazer um sanduíche. Não importa qual ingrediente você tira do armário primeiro. Mas você não pode passar a margarina antes de abrir o pote. Os computadores precisam de algoritmos e programas para mostrá-los como fazer até mesmo coisas simples que podemos fazer sem pensar.
      5:
        image: notes/C3_dice_race_5.png
        text: Um algoritmo é o pensamento por trás do que precisa acontecer enquanto o programa de fato dá instruções para que o computador faça algo acontecer. Um algoritmo precisa ser traduzido em um programa antes que um computador possa executá-lo. Dividir uma tarefa em passos chamados de algoritmo pode ser difícil. Mas, como qualquer nova habilidade, isso fica mais fácil com a prática.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Laços enquanto são muito parecidos com o que você faz na vida cotidiana. Imagine que você está lavando seu carro. Você vai continuar esfregando até que ele fique limpo. Enquanto ele não estiver limpo, você continua esfregando. Você está avaliando essas coisas o tempo todo.
      2:
        image: notes/C3_farmer_while_2.png
        text: Temos um novo bloco para ajudar sua fazendeira. Ele é chamado de bloco enquanto. Na verdade, ele é muito simples. Enquanto uma instrução na parte superior for verdadeira, faça alguma coisa. Por exemplo, enquanto houver uma pilha, mova. Vá em frente e experimente isso com sua fazendeira.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Essa lição é sobre caça-sóis funcionais. Você vai criar esses belos caça-sóis usando funções. Há várias etapas para criar um caça-sol. Algumas etapas precisam ser repetidas várias vezes.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: O primeiro passo para simplificar o processo de confecção de um caça-sol é descobrir o que precisa ser repetido várias vezes. Podemos reunir esses passos no que chamamos de uma função.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Mas, para criar um belo caça-sol, precisamos fazer mais do que apenas seguir passos precisos. Às vezes, queremos ser criativos e alterar a cor das miçangas que estamos usando. Podemos tornar cada caça-sol único se usarmos miçangas de cores diferentes.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Seu caça-sol será somente seu quando você aprender a pensar nas miçangas como variáveis, que são um espaço reservado para informações que podem ser alteradas. Divirta-se criando belos caça-sóis usando funções e variáveis!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Essa lição é sobre a internet. A internet é um lugar muito movimentado, parecido com essa estrada movimentada. As mensagens são como os carros, e passam zunindo para chegar aos seus destinos. As mensagens se movem rapidamente pela internet.
      2:
        image: notes/C3_internet_2.png
        text: Pensar sobre como a internet funciona ajuda a entender o que acontece quando se usa a internet. Você vai aprender como as mensagens vão do seu computador até um dos seus sites favoritos ou até a caixa de e-mails de um amigo. Assim como fica mais fácil andar por estradas movimentadas quando você conhece o caminho e sabe ler as placas, navegar pela internet não é tão complicado quando você sabe o que acontece nos bastidores.
      3:
        image: notes/C3_internet_3.png
        text: O envio de mensagens na internet é parecido com o envio de mensagens pelo correio, mas com algumas diferenças. Eu estou aqui no Google.com. O endereço de IP para esse site é esse número. Você pode pensar em um endereço de IP como seu endereço de retorno no correio. Vamos imaginar que eu queira enviar uma mensagem por correio para alguém no escritório lá embaixo. Você vê a URL e o endereço de IP naquela porta? Eu escrevi essa mensagem e cliquei em enviar.
      4:
        image: notes/C3_internet_4.png
        text: Diferentemente dos correios, a primeira coisa que a internet faz é dividir a mensagem em partes menores para que elas sejam enviadas mais facilmente. Essas pequenas partes são chamadas pacotes. Cada pacote da mensagem é entregue ao destino, um de cada vez. Esses pacotes são colocados na ordem certa para que o destinatário possa ler a mensagem corretamente. É claro que há muitas outras coisas para aprender sobre como a internet funciona, mas esse é um ótimo começo. Você está no caminho para se tornar um usuário de internet esclarecido! Lembre-se de contar a sua família e aos seus amigos o que você aprendeu!
      5:
        image: notes/C3_internet_5.png
        text: Meu nome é Amanda Camp, sou uma engenheira de software na Google. Eu trabalho em uma equipe que faz parte do servidor backend, que armazena perfis e contatos. Em meu trabalho, pensamos muito sobre como os contatos podem ser enviados para outros dispositivos, como seu telefone. A maioria das pessoas tem muitos contatos, digamos uns mil contatos, e não queremos enviar todos esses contatos de uma vez para seu telefone porque essa seria uma mensagem muito grande. Da mesma forma que a internet divide mensagens grandes em pacotes, usamos um conceito chamado memória paginada, no qual devemos mandar apenas 100 contatos por vez para seu telefone, e depois esperamos uma resposta, pedindo para que enviemos os próximos 100.
      6:
        image: notes/C3_internet_6.png
        text: A coisa mais legal sobre software é o fato de que ele pode afetar o mundo tudo. Eu aprendi a programar quando eu tinha 19 anos. Acho que eu já estava no primeiro ou segundo ano da faculdade. O primeiro programa que eu lembro de ter feito convertia Celsius para Fahrenheit. Eu gosto de programar porque eu gosto de ajudar as pessoas. Eu posso escrever programas na Google que ajudam pessoas em todo o mundo, e isso é realmente fascinante e emocionante.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: 'As pessoas tomam decisões todos os dias. Por exemplo, antes de sair de casa, você tem uma instrução se que diz: se estiver chovendo, então eu preciso levar meu casaco. Os computadores são incríveis quando você decide esse tipo de instrução sobre a qual eles podem executar coisas em uma velocidade inacreditável. Um programa de computador é realmente um pequeno trecho de cálculos e algumas instruções se, nas quais as decisões são tomadas.'
      2:
        image: notes/C3_maze_conditionals_2.png
        text: O bloco se ajuda o zumbi a tomar uma decisão. Ele verifica alguma coisa. Por exemplo, vamos usar o bloco que diz se há um caminho à esquerda, e então colocamos um comando vire à esquerda dentro dele. Estamos falando para o zumbi ver as coisas ao seu redor, ver se há um caminho à esquerda e, caso o caminho exista, fazemos ele virar.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Então, usamos o bloco avance dentro do repita para que ele continue avançando, já que ele quer apenas seguir em frente. Então, quando há uma curva, o bloco se diz para ele virar à esquerda. Você pode ver que, se fizermos isso, se virarmos à esquerda e avançarmos, vamos atingir nosso objetivo.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: 'Esse é um exemplo de uso de uma instrução se, que é um conceito fundamental na programação de computadores. Uma das primeiras coisas que eu aprendi foi como escrever um programa para jogar o jogo da velha. Eu tinha instruções se para dizer: ok, se a outra pessoa estiver prestes a ganhar, vá em frente e impeça-a. Divirta-se aprendendo a usar instruções se, elas são um conceito-chave muito importante.'
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Nesse exemplo, seu objetivo é fazer o zumbi chegar ao girassol. Poderíamos usar cinco blocos avance, ou poderíamos dizer ao computador para avançar e repetir essa ação cinco vezes usando um bloco repita.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Isso economiza tempo e torna as coisas mais fáceis. Para usá-lo, coloque o bloco avance dentro do bloco repita. Clique em Executar e o zumbi vai avançar cinco vezes para chegar ao saboroso girassol.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade.
      2:
        image: notes/playlab_2.png
        text: 'Existem alguns novos blocos para experimentar. Há os blocos "quando a seta estiver pressionada" e "mova o personagem". Você pode juntar esses blocos para mover os personagens com as setas do teclado. E há alguns blocos que fazem coisas quando os personagens trombam ou são clicados. Dê uma olhada e divirta-se!'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Essa é a lição de composição de música. A música se parece muito com um programa de computador. As notas e as palavras escritas dizem ao cantor exatamente o que fazer. Algumas partes da música são usadas várias vezes.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Chamamos isso de refrão. Em um programa de computador, as partes do programa que são usadas várias vezes são chamadas de funções. Quando você lê a letra de uma música e encontra a palavra refrão, você canta a palavra refrão? Não, você olha para a parte de cima da página e vê quais palavras compõem o refrão.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Nessa lição, você vai aprender uma música infantil chamada Coelhinho foo foo. A música tem um refrão que você vai cantar várias vezes. Uma função é um trecho de código que você pode chamar e usar muitas vezes. Isso torna a programação mais fácil e eficiente, assim você não precisa escrever os passos da função várias vezes. Você pode escrever apenas uma vez!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Este é um bloco condicional. Ele diz se você está em uma flor ou em um favo de mel, então faça alguma coisa. É útil quando nós não sabemos quanto mel ou néctar pegar, como nós vemos aqui neste ponto de interrogação.
      2:
        image: notes/C4_bee_conditional_2.png
        text: Neste exemplo, nós vamos dizer se isto é uma flor, pegar todo o néctar e então usar outro para dizer se é um favo de mel e fazer mel. Ta-dan!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Nós temos um novo bloco chamado de se/então. É uma declaração condicional como o bloco if que você usou nos quebra cabeças anteriores. Mas agora há uma nova parte embaixo que diz else. O bloco se/então faz a abelha tomar a decisão entre dois tipos de ação. Se a abelha está na flor, a abelha irá fazer o conjunto de ações que você colocou na primeira parte que diz faça. Se a abelha não está na flor, a abelha fará o conjunto de ações que você colocou na parte onde diz então.
      2:
        image: notes/C4_conditionals_2.png
        text: 'As instruções se são como os computadores conseguem tomar decisões. Os humanos estabelecem condições para o computador que dizem que, se o computador encontrar certa situação, ele deve fazer uma coisa, senão, ele deve fazer outra coisa. O começo do nosso bloco se/senão diz "se na flor". Mas poderia dizer outras coisas, como "se néctar igual a 2" ou "se houver um caminho à frente", e o bloco se comportaria do mesmo modo. Se a afirmação for verdadeira, ele executará o primeiro conjunto de ações, mas se for falsa, ele executará o segundo conjunto de ações.'
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: 'Quando você usa um bloco repita para criar um laço no seu código, como o computador sabe que ele foi repetido o suficiente? O bloco repita está, na verdade, escondendo um trecho de código chamado "laço para", que conta a partir de um valor inicial até um valor final, em incrementos específicos.'
      2:
        image: notes/C4_for_loops_2.png
        text: 'Por exemplo, um bloco "repita três" conta de 1 até 3, de 1 em 1. Sempre que ele conta, executa o código dentro do laço. O laço for sabe quantas vezes foi executado usando uma variável contadora que começa o laço igual ao valor inicial, e é somada ao incremento sempre que o laço é executado. Assim que a variável contadora for maior que o valor final, o laço pára de ser escutado.'
      3:
        image: notes/C4_for_loops_3.png
        text: 'A vantagem de usar um laço for real em vez do bloco repita é que você pode ver a variável contadora, e usá-la no laço. Por exemplo, se eu tiver uma fileira de flores e a primeira tiver um néctar, a segunda tiver dois e a terceira tiver três, posso usar o laço for para dizer à abelha para coletar "contadora" néctares por vez, o que seria um na primeira flor, dois na segunda e três na terceira.'
      4:
        image: notes/C4_for_loops_4.png
        text: Você também pode incrementar o contador por um número diferente de um em um laço for. Você pode contar de 2 em 2, de 4 em 4, ou até mesmo um valor que mude a cada vez.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: 'Quando você usa um bloco repita para criar um laço no seu código, como o computador sabe que ele foi repetido o suficiente? O bloco repita está, na verdade, escondendo um trecho de código chamado "laço para", que conta a partir de um valor inicial até um valor final, em incrementos específicos.'
      2:
        image: notes/C4_for_loops_bee_2.png
        text: 'Por exemplo, um bloco "repita três" conta de 1 até 3, de 1 em 1. Sempre que ele conta, executa o código dentro do laço. O laço for sabe quantas vezes foi executado usando uma variável contadora que começa o laço igual ao valor inicial, e é somada ao incremento sempre que o laço é executado. Assim que a variável contadora for maior que o valor final, o laço pára de ser escutado.'
      3:
        image: notes/C4_for_loops_bee_3.png
        text: 'A vantagem de usar um laço for real em vez do bloco repita é que você pode ver a variável contadora, e usá-la no laço. Por exemplo, se eu tiver uma fileira de flores e a primeira tiver um néctar, a segunda tiver dois e a terceira tiver três, posso usar o laço for para dizer à abelha para coletar "contadora" néctares por vez, o que seria um na primeira flor, dois na segunda e três na terceira.'
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Você também pode incrementar o contador por um número diferente de um em um laço for. Você pode contar de 2 em 2, de 4 em 4, ou até mesmo um valor que mude a cada vez.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: 'Quando você usa um bloco repita para criar um laço no seu código, como o computador sabe que ele foi repetido o suficiente? O bloco repita está, na verdade, escondendo um trecho de código chamado "laço para", que conta a partir de um valor inicial até um valor final, em incrementos específicos.'
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: 'Por exemplo, um bloco "repita três" conta de 1 até 3, de 1 em 1. Sempre que ele conta, executa o código dentro do laço. O laço for sabe quantas vezes foi executado usando uma variável contadora que começa o laço igual ao valor inicial, e é somada ao incremento sempre que o laço é executado. Assim que a variável contadora for maior que o valor final, o laço pára de ser escutado. A vantagem de usar um laço for real em vez do bloco repita é que você pode ver a variável contadora e usá-la no laço.'
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: 'Agora que você editou blocos de função, é hora de criar um do zero. É bem simples. você verá que a caixa de ferramentas tem uma categoria chamada "funções". Se você clicar nela, verá um botão laranja chamado "criar uma função". Clicar nele abre o editor de funções que você já usou para editar blocos de função já existentes.'
      2:
        image: notes/C4_function_create_2.png
        text: Como antes, você começa dando um nome para sua função, escrevendo uma descrição do que a função deve fazer. Por exemplo, ela vai desenhar um quadrado ou um triângulo. Então, arraste blocos da caixa de ferramentas para o espaço em branco abaixo. Lembre-se de arrastar os blocos para dentro do bloco verde da função.
      3:
        image: notes/C4_function_create_3.png
        text: 'Quando tiver terminado, clique em "salvar e sair". Isso o levará de volta à área de trabalho principal dos quebra-cabeças. A nova função que você criou vai aparecer como um bloco verde na categoria "funções" da sua caixa de ferramentas. Arraste-o e solte-o na área de trabalho principal e use-o como qualquer outro bloco para resolver o quebra-cabeça.'
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Uma das melhores coisas na programação é que quando você ensina um computador a realizar uma ação você pode chamar essa função novamente. Você dá um nome a ela e então você a chama. Isso é realmente como estender a linguagem.
      2:
        image: notes/C4_function_edit_2.png
        text: 'No programa que criamos, aprendemos a desenhar um quadrado movendo e virando quatro vezes. Podemos pegar essa função e chamá-la de "desenhe um quadrado". Assim, sempre que quisermos fazer isso, simplesmente dizemos "desenhe um quadrado" e o código dessa função será chamado e fará isso por nós. Adicionamos esse conceito à nossa linguagem de programação.'
      3:
        image: notes/C4_function_edit_3.png
        text: 'Nesse quebra-cabeça, já criamos uma função "desenhe um quadrado" para você. Você a verá na caixa de ferramentas como um bloco verde. O que você precisa fazer é escrever o mesmo código que escreveu antes para desenhar um quadrado e colocá-lo dentro dessa função. Para fazer isso, clique na opção editar no bloco verde "desenhe um quadrado". Isso vai abrir o editor de funções. O editor de funções tem três partes. Um lugar onde você dá um nome à sua função. Ele vai aparecer no bloco verde antes da função. Depois, escreva uma descrição curta do que sua função deve fazer.'
      4:
        image: notes/C4_function_edit_4.png
        text: 'Nesse caso, ela deve desenhar um quadrado. A área em branco abaixo disso é a área de trabalho, e funciona igual ao que você já vem usando. Arraste e solte blocos da caixa de ferramentas na área de trabalho. Lembre-se de colocar os blocos que criam um quadrado dentro do bloco verde da função. Quando tiver terminado, clique em "salvar e sair". Isso vai levá-lo de volta à área de trabalho principal do quebra-cabeça. Agora, você pode usar o bloco "desenhe um quadrado" como qualquer outro bloco para resolver o quebra-cabeça.'
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Aqui está uma função que desenha um quadrado com lados de 50 pixels. Ótimo, mas e se eu quisesse desenhar um quadrado com lados de 50 pixels e outro com lados de 100 pixels? Não precisamos fazer duas funções separadas para fazer quase que exatamente a mesma coisa. Em vez disso, podemos usar uma função com um parâmetro.
      2:
        image: notes/C4_function_parameters_2.png
        text: 'Os parâmetros nos permitem atribuir valores para uma função que são usadas como variáveis dentro da função. Vamos tentar adicionar um parâmetro chamado "comprimento" a essa função para que possamos criar quadrados de tamanhos diferentes. No editor de funções, você pode editar o nome e descrição como antes, mas agora também pode adicionar um parâmetro. Escreva o nome do parâmetro no espaço e clique em "adicionar parâmetro". Isso vai criar um bloco vermelho com o nome do parâmetro que você acabou de criar. Agora, podemos substituir o 100 no bloco "avançar 100" pelo parâmetro "comprimento" para que ele avance o comprimento desejado.'
      3:
        image: notes/C4_function_parameters_3.png
        text: Clique em salvar e fechar e arraste seu novo bloco crie um quadrado da categoria funções na caixa de ferramentas. Você vai perceber que há um espaço vazio perto de comprimento, porque a função quer saber que valor o parâmetro comprimento dever ter. Arraste bloco numérico da categoria matemática e coloque-o nesse espaço. Vê como você pode usar a função várias vezes com comprimentos diferentes para criar quadrados de tamanhos diferentes? Experimente!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalmente a programação é feita toda em texto, mas vamos usar o Blockly, que usa blocos visuais que podem ser arrastados e posicionados para escrever programas. Indiretamente, você ainda está criando código. Para começar, vamos criar o código para um programa que vai ajudar esse Angry Bird a andar por um labirinto para chegar até o porco malvado que roubou seus ovos.
      2:
        image: notes/C4_intro_2.png
        text: O Blockly é dividido em três partes principais. À esquerda está o labirinto do pássaro, onde seu programa será executado. As instruções para cada nível estão escritas abaixo do labirinto. Essa área do meio é a caixa de ferramentas, e cada um desses blocos é um comando que o pássaro consegue entender. O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa.
      3:
        image: notes/C4_intro_3.png
        text: 'Se eu arrastar um bloco mova para nossa área de trabalho e clicar em "Executar", o que acontece? O pássaro avança um quadradinho na grade. E se eu quiser que o pássaro faça algo depois de avançar um quadradinho? Eu posso adicionar outro bloco ao nosso programa.'
      4:
        image: notes/C4_intro_4.png
        text: 'Vou escolher o bloco "vire à direita" e arrastá-lo para baixo do meu bloco avance até que a seta amarela apareça. Então, vou soltá-lo e os dois blocos vão se juntar. Quando eu apertar "executar" novamente, o pássaro vai realizar os comandos que estão empilhados de cima para baixo em nossa área de trabalho.'
      5:
        image: notes/C4_intro_5.png
        text: Se você quiser excluir um bloco, simplesmente remova-o da pilha e arraste-o para a lixeira. Depois de clicar em Executar, você sempre pode clicar no botão Reiniciar para fazer o pássaro voltar para o início. Agora vamos pegar os porcos!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Se eu quiser desenhar um retângulo com 50 pixels de altura e com comprimento igual a duas vezes sua altura, como posso programar o computador para fazer isso? Bem, eu poderia dizer ao artista para subir cinquenta, depois 100 para o lado e mover tudo duas vezes. Mas nesse caso eu estaria fazendo as contas para o computador.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplicar cinquenta por dois de cabeça pode não ser tão difícil, mas os computadores são realmente bons de matemática, então devemos deixá-los fazer as contas sempre que possível. Se eu simplesmente usasse uma variável chamada altura, poderia mudar a altura facilmente para cinquenta e então mudar o algoritmo para dizer para o artista subir o valor da altura, virar para a direita e andar duas vezes a altura, o que nos dá um retângulo com com comprimento igual a duas vezes sua altura.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Essa lição é chamada Algoritmos do tangram. Tangram é um quebra-cabeça com sete peças que se encaixar para criar outras formas. Você vai usar um algoritmo para explicar para seu parceiro como montar o quebra-cabeça.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Um algoritmo é apenas uma lista de ações que devem ser tomadas para completar uma tarefa. Nós os usamos todos os dias, em coisas como listas de compras e receitas. Se seu algoritmo for muito simples, haverá muitos modos de interpretá-lo, e quem for executá-lo pode não conseguir exatamente o que você queria. Se você quiser garantir que todos obtenham o mesmo resultado, seu algoritmo deverá ser detalhado e específico.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Hoje, estou usando um algoritmo para terminar uma pintura. Eu queria tentar pintar alguns lobos, mas não sou o melhor pintor do mundo. Felizmente para pessoas como eu, alguém inventou a pintura por números. Temos quarenta cores e pequenas letras e números que dizem com que cor pintar cada seção. A pintura por números me diz exatamente que cor usar e onde.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Ela é muito específica, então posso seguir as instruções e a pintura ficará incrível! É um ótimo algoritmo. Se as instruções não fossem específicas o bastante, meus lobos não ficariam tão bons. Quando você realmente quiser que alguma coisa fique exatamente do jeito que planejou, é melhor ser extremamente preciso.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: 'Em cada equipe, a pessoa que está instruindo, aquela que está com o papel, deve descobrir qual será seu símbolo de "desligado" e qual será seu símbolo de "ligado". Em binário, é uma espécie de alfabeto com duas letras, como se as letras A e B fossem todo o alfabeto, mas nesse caso, temos 0 e 1.'
      2:
        image: notes/C4_unplugged_binary_2.png
        text: O modo mais comum de usar binários é em uma instrução se. É um clássico da programação. O programa é executado e, se algo for verdadeiro, faz uma coisa, ou, se não, faz outra coisa. E se você quiser fazer algo um pouco mais complicado? Em vez de uma instrução se, você quer trabalhar com algo como uma imagem ou um som em um computador.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'O computador só conhece binário, mas uma imagem não é binária. Ela não é feita de uns e zeros, então como você pode fazer isso? Aqui está um exemplo: você tem essa linda imagem. Uma imagem é, basicamente, uma forma de informações. Todas as informações podem ser codificadas em binário de um jeito ou de outro, você só tem que descobrir como.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Imagine que vamos colocar um quadriculado sobre esse urso panda e decidir se cada quadrado é mais preto ou mais branco, e então, vamos colorir assim. Agora, cada célula do quadriculado é preta ou branca, e dizemos que os quadrados pretos são zeros (dígito binário), e os quadrados pretos são brancos, o outro dígito binário. No final, o que você terá é um monte de uns e zeros. É assim que você representa essa imagem em binário.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Esta lição é chamada diversão com o laço para. Nesta lição. vamos apender a usar a reta numérica para jogar um jogo de dados. Cada jogador vai jogar três vezes para definir um valor inicial, um valor final, e um intervalo. Em cada turno, circulamos o valor inicial, e todos os valores que estejam ao mesmo número de passos avante que o valor do nosso intervalo. Paramos de circular quando chegamos ao nosso valor final. Quem tiver a maior pontuação ganha!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: Os laços para podem ser úteis em muitos lugares, e se você fosse ser um meteorologista, usaria os laços para o tempo todo. Oi, eu sou Becky, e trabalho na EverPower Renewables como meteorologista especializada em ventos. Eu prevejo a velocidade dos ventos na área do desfiladeiro do Rio Colúmbia, onde a empresa tem parques eólicos.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Estamos tentando entender a força dos ventos lá, para que saibamos quanta energia será gerada. Fornecemos essas informações aos negociantes de energia em tempo real. Eles compram e vendem energia bom base em quanta energia dizemos que será gerada, para garantir que a malha energética permaneça equilibrada, as luzes da sua casa continuem acesas, e que maximizemos a energia que obtemos dos nossos parques.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: Estamos no centro nacional de controle da EverPower Renewables, aqui em Portland, e é aqui que recebemos informações de todas os nossos parques por todo o país. Nem mesmo os computadores mais poderosos de hoje podem simular a atmosfera inteira. Nos modelos de previsão computadorizados, temos o que chamamos de malha. Cada ponto da malha corresponde a uma latitude e uma longitude. Temos que calcular a física e tentar descobrir a velocidade do vento, temperatura, pressão, esse tipo de coisa.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Como essas malhas são bem grandes, e estamos fazendo isso em muitos pontos, estamos passando por essas coisas milhões e milhões de vezes. Eu uso laços para em tudo o que faço. Por exemplo, aqui está um laço para, bem aqui. Quando você esta fazendo previsões do vento, há tantos parâmetros diferentes que seria impossível para um ser humano se sentar e fazer todas essas contas. Há tantos aspectos diferentes afetando o que acontece com o vento que precisamos de um modelo computadorizado para prevê-lo.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: Nessa lição, vamos brincar com algumas histórias de preencher as lacunas. Você tem um modelo que pode preencher para criar histórias similares, mas com diferenças muito divertidas.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: Nessa lição, também aprendemos a criar um modelo abstraído a partir de duas histórias que já foram criadas. A abstração é a arte de eliminar diferenças e detalhes para que possamos ver como uma solução pode funcionar para problemas diferentes. Isso é muito útil em ciência da computação, porque nos permite criar funções que podem ser úteis em muitas situações diferentes.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: 'Essa lição é chamada composição de música com parâmetros. Vamos escrever algumas músicas. Às vezes, o refrão é um pouquinho diferente a cada vez que você o canta. Você conhece a música "Old Macdonald Had a Farm"? O refrão é um pouco diferente para cada animal. E naquela fazenda, ele tinha uma vaca, i-á-i-á-ô. A pequena mudança no refrão pode ser mostrada usando algo que chamamos de parâmetros.'
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Às vezes uma função precisa de um parâmetro. Um parâmetro é uma informação adicional que você pode passar para um função para personalizá-la para uma necessidade especial. Quando você faz sundaes com seus amigos, está usando um processo similar aos parâmetros em um programa de computador.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: 'A bola de sorvete de creme pode ser igual em todos os sundaes, mas quando você pede aos seus amigos para escolher duas coberturas, consegue muitas combinações diferentes. O nome da função é "cobertura", mas cada tipo de cobertura é um parâmetro. Funções e parâmetros funcionam juntas na produção de ótimos programas de computador e também ótimos sundaes.'
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: Essa lição é chamada variáveis em envelopes. Vamos aprender como podemos construir sentenças mesmo quando temos informações faltando. A maioria de nós já está familiarizado com a ideia de preencher uma lacuna. Fazemos isso quando colocamos nosso nome na lição de casa. Às vezes, mais de uma palavra precisa ser preenchida, e, nesse caso, identificamos essa lacuna, para que saibamos que informação vai onde.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variáveis são espaços reservados para informações que podem mudar. Usando uma variável para a informação que falta, podemos continuar a trabalhar no que quer que estejamos fazendo e deixar alguém preencher as informações que faltam mais tarde. Usamos muito as variáveis nos softwares. Usamos variáveis como espaços reservados para nomes, endereços de e-mail, e até mesmo nomes de usuário. Assim, podemos informar ao programa que esses detalhes vão aparecer depois que o usuário os preencher. Usamos variáveis o tempo todo no nosso trabalho.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Sempre que precisamos armazenar uma informação para mais tarde, usamos uma variável. Digamos que precisemos contar o número de vezes que o usuário escreveu um tweet. Sempre que ele escrever um tweet, somamos um a esse número, e sempre que ele apagar um, subtraímos um desse número. Sempre que precisamos saber quantas vezes o usuário escreveu um tweet, simplesmente olhamos para essa variável.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Uma variável é um contêiner em que você pode armazenar um valor. Quando você usa uma variável em um algoritmo, ele abre o contêiner e olha o valor dentro dele. Isso permite a você escrever programas mais inteligentes, que se comportam de modo diferente dependendo do valor armazenado na variável.
      2:
        image: notes/C4_variables_artist_2.png
        text: |-
          Por exemplo, se eu quisesse escrever um algoritmo para dizer "Feliz aniversário de 10 anos!" para o meu irmãozinho, ótimo, mas no ano que vem eu vou querer dizer "Feliz aniversário de 11 anos!". Posso criar uma variável chamada idade para armazenar a idade do meu irmão, e escrever meu algoritmo para dizer "Feliz aniversário de 'idade' anos!". Como a variável pode mudar, eu posso atualizar a variável 'idade' para ser igual a 'idade' mais 1 todos os anos.
      3:
        image: notes/C4_variables_artist_3.png
        text: Nesse quebra-cabeça, vamos usar uma variável que vai definir o comprimento da linha que nosso artista vai traçar. Mais à frente em nosso código, o bloco avance vai ler essa variável comprimento para ver qual seu valor.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Uma variável é um contêiner em que você pode armazenar um valor. Quando você usa uma variável em um algoritmo, ele abre o contêiner e olha o valor dentro dele. Isso permite a você escrever programas mais inteligentes, que se comportam de modo diferente dependendo do valor armazenado na variável.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Agora, você vai tentar o laboratório, onde receberá jogos diferentes, e poderá mudar os valores de variáveis como velocidade, altura e pontuação para mudar o jogo. Você não terá que mudar o algoritmo do jogo para mudar como ele é jogado, apenas as variáveis.
      3:
        image: notes/C4_variables_playlab_3.png
        text: No meu trabalho no Kindle e no raio-x para livros, aplicamos variáveis de muitos modos diferentes. Um modo como você pode usar uma variável é para armazenar os números das páginas de um livro. O usuário pode aumentar ou diminuir o tamanho da fonte de um livro eletrônico. Com base no tamanho da fonte, o número de páginas no livro eletrônico pode mudar. Podemos ajustar isso armazenando o número de páginas na variável.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Agora, vamos aprender a ler sobre algo que os programadores de jogos usam todos os dias. Eles são chamados eventos. Um evento diz ao seu programa para prestar atenção em quando alguma coisa acontece. E quando acontece, ele realiza uma ação. Alguns exemplos de eventos são detectar um clique no mouse, em uma tecla, ou um toque na tela.
      2:
        image: notes/infinity_playlab_events_2.png
        text: 'Aqui, vamos fazer Baymax se mover para cima para tocar Hiro, e para baixo para tocar Rapunzel quando o jogador usar as teclas das setas para cima/para baixo ou os botões para cima/para baixo. Vamos usar o bloco quando seta para cima e ligar o bloco ator para cima a ele, para que quando o jogador pressionar a tecla seta para cima, tudo que esteja ligado ao bloco "quando seta para cima" seja executado. Faremos o mesmo para mover Baymax para baixo. Passo a passo, seu jogo está ficando mais interativo.'
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: Em que ano você está? Segundo. Décimo ano. Primeiro ano. Eu estava no primeiro ano quando aprendi a programar. Eu ganhei meu primeiro computador quando estava no sexto ano. O que me deixa empolgado é ser capaz de resolver os problemas das pessoas. Você pode se expressar, pode construir coisas a partir de uma ideia.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: A ciência da computação é a base de muitas das coisas que os alunos de faculdade e profissionais farão pelos próximos vinte ou trinta anos. Gosto de programar porque gosto de ajudar as pessoas. Tenho a oportunidade de criar algo que tornará a vida das pessoas mais fácil. Acho que é o mais próximo que tenho de um superpoder. Começar é a parte mais importante. Eu mesmo sou uma iniciante, e quero que você aprenda comigo.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: Eu sou John Vechey, um dos co-fundadores da PopCap Games. Fazemos jogos como Plants vs. Zombies, Bejeweled, e Peggle. O importante sobre os jogos não é como seu código é perfeito, nem como sua arte é perfeita, e sim como ele faz você se sentir e como ele é divertido. Você só consegue perceber isso fazendo, aprendendo e adaptando e melhorando suas próprias habilidades na criação de jogos.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Você tem um video game favorito? Bem, vamos dar um passo para a criação de jogos como esse usando o laboratório. Bons jogos têm uma história, e toda história tem atores. Os atores fazem coisas como falar, se mover e interagir uns com os outros. Talvez até mesmo marcar pontos com base nas regras do jogo. Hoje, vamos aprender como fazer todas essas coisas, uma a uma, com personagens Disney como Anna, Elsa, Hiro, Baymax, e Rapunzel. Vamos criar um jogo do zero, que pode ser compartilhado e jogado em um celular.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Sua tela está dividida em três partes principais. À esquerda está a área do jogo, onde seu programa será executado. As instruções para cada nível estão escritas abaixo. A área do meio é a caixa de ferramentas, e cada um desses blocos é uma parte do código. O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: 'Para começar, você vai precisar vincular seus blocos ao bloco laranja "quando executar". Você pode vincular múltiplos blocos arrastando-os até ver o contorno amarelo, e então eles vão se encaixar. Nesse primeiro quebra-cabeça, Hiro é o Ator 1 e Baymax é o Ator 2. Precisamos mover Hiro para chegar a Baymax, arrastando o bloco "mover para a direita" e vinculando-o ao bloco "quando executar". Quando os blocos estiverem no lugar, clique no botão "Executar" para ver o que você programou.'
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Vamos começar e, quando terminarmos, você poderá criar seu próprio jogo com esses atores incríveis que podem interagir, marcar pontos, atirar microrrobôs, cerejas, panelas, centelhas e gelo... e derrotar uns aos outros. Depende de você!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Você consegue imaginar se tivesse que repetir alguma coisa para todo o sempre? Com sorte, você nunca terá que fazer isso, porque os computadores são muito bons em repetir as coisas. Este é o bloco repetir para sempre. Qualquer coisa dentro desse bloco vai acontecer para sempre no jogo.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: Então, se quisermos que um ator faça algo repetidamente, sem que o jogador tenha que fazer nada, vamos colocar esses blocos dentro do bloco repete para sempre. Nesse próximo quebra-cabeça, seu objetivo é ajudar Anna a andar continuamente para cima e para baixo. Aprender como os comandos repete funcionam vai poupar muito tempo mais tarde, quando você for criar seu próprio jogo.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: O que você quer ser quando crescer, Olivia? Astronauta. Você sabe o que é um programador de computador? Sim um, não. Ummm o quê? Não sei bem como explicar, a programação de computadores é muito simples. É um conjunto de instruções, como uma receita, que você tem que seguir passo a passo para obter o resultado que quer.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Eu posso mudar o número de pixels, o comprimento da linha, usando este menu dropdown. Qual era mesmo o comprimento? Você pode ver as instruções de novo procurando em baixo do botão executar. Aqui, eu usei o bloco avance e vou selecionar 100 pixels. Posso apagar um bloco arrastando-o para a caixa de ferramentas ou para a lixeira. Vamos colocá-lo de volta.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Execute o código pressionando executar. Bem, não funcionou! Vou apertar reiniciar e descobrir o que está errado. Você pode tentar fazer um quebra-cabeça quantas vezes quiser, e pular quebra-cabeças e voltar a eles mais tarde. Só tenha certeza de fazer o seu melhor, e não desista. Vamos adicionar outro avance. Ainda não funcionou. Posso colocar um bloco entre outros blocos.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Vamos pegar um bloco vire à e colocá-lo entre os avances. Vire à esquerda 45 graus. Vamos executar de novo. Reiniciar, executar, legal! Aqui está outro quebra-cabeça. Às vezes, você tem um código inicial para completar. Aqui, eu preciso adicionar os comprimentos e graus apropriados.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: Às vezes, você pode acidentalmente estragar o código inicial. O que pode fazer nesse caso? Você pode pressionar limpar quebra-cabeça e começar de novo. Vou arrastar esse bloco numérico para as diferentes áreas de pixels. Selecione 100 para pixels, 45 para graus e 100 para pixels de novo. Legal! Aqui está a abelha do Code Studio. Eu preciso mover a abelha para cada uma das flores e coletar néctar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: A primeira flor está a três blocos de distância, então eu preciso de três blocos avance. 1, 2, 3. Então, um obtenha néctar, depois outro obtenha néctar. Bem, isso não funcionou! Vou colocar outro avance entre os obtenha néctar e executar o programa de novo. Oba, funcionou! Você acaba de aprender como usar os quebra-cabeças do artista e da abelha do Code Studio. Boa sorte com o desafio do Code Studio.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: O que você quer ser quando crescer, Olivia? Umm, astronauta. Você sabe o que é um programador de computador? Siiim umm, não. Ummm, quê, o quê? Não sei bem como explicar. A programação de computadores é muito simples. É um conjunto de instruções, como uma receita. Você tem que segui-la passo a passo para obter o resultado que quer.
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: "Hi, I'm Kathleen Kennedy and I'm the producer of Star Wars, The Force Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens."
      2:
        image: notes/starwars_intro_2.JPG
        text: "Hi I'm Rachel Rose, I'm a senior R&D engineer at ILM and I lead the animation and creature development team. In The Force Awakens, I'm responsible for helping the artists develop rigs which are the parts of the character that move that allow the character to look very believable in a galaxy far far away."
      3:
        image: notes/starwars_intro_3.JPG
        text: "In the next hour, we're going to build our own Star Wars game. We'll teach you the basic concepts of programming. Usually programming is all text but we're going to use blocks here so that we can drag and drop to write the programs. Under the hood, you're still creating code. After you try the basics with blocks, we'll switch you to JavaScript, one of the most popular programming languages on the web."
      4:
        image: notes/starwars_intro_4.JPG
        text: "To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts. Your screen is split into three parts. On the left is the Star Wars game space, where code will run. The instructions for each level are written below the game space."
      5:
        image: notes/starwars_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command that BB-8 can understand.
      6:
        image: notes/starwars_intro_6.JPG
        text: The white space on the right is called the workspace and this is where we are going to build our program.
      7:
        image: notes/starwars_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace and press run, what happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together."
      9:
        image: notes/starwars_intro_9.JPG
        text: When I press run again, BB-8 will perform the commands that are stacked from top to bottom on our workspace. If you ever want to delete a block, just remove it from the stack and drag it back into the tool box.
      10:
        image: notes/starwars_intro_10.JPG
        text: "After you've hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "Inside the blocks we've been using are JavaScript commands. JavaScript is the most popular programming language for professional developers today. Blocks are a great way to get started learning to code and in fact, top universities like Harvard and Berkeley start teaching this way. But once we learn the basics, engineers write code by typing because it allows us to go faster."
      2:
        image: notes/starwars_typing_2.JPG
        text: "We can type hundreds of commands without having to find them in the toolbox or drag them out. Because you're learning typing may be slower at first but we wanted you to give it a try."
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: "In the next lesson, we'll start you out in typing mode. Here you can still drag the block from the toolbox or you can type the command name. As you start to type, you'll see names of possible commands show below where you're typing. Instead of typing the whole command name, you can select one of these to move faster. In my job, I use this auto-complete feature all the time when writing code."
      5:
        image: notes/starwars_typing_5.JPG
        text: "When you're typing code, the computer needs you to be very precise. You need to spell and capitalize the command name exactly correctly, including the parentheses and the semi-colon. Even with a small typing mistake, BB-8 cannot understand the code and won't be able to move."
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: "If you get stuck, you can always start over with the start over button and you can switch back to block mode at any time by clicking in the top-right corner. Ok, let's give typing a try! And if you make mistakes, don't get frustrated. It takes everybody a few tries to get it right."
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C3PO."
      3:
        image: notes/starwars_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down."
      7:
        image: notes/starwars_events_7.JPG
        text: "To do this, we'll use a command called whenUp(). When you drag the command out of the toolbox, you'll see that it starts and ends with a curly bracket instead of a semi-colon. This gives us space to put other commands in the middle. Every command that we place inside these brackets will run when the player presses the up arrow."
      8:
        image: notes/starwars_events_8.JPG
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Hi, my name is Alice and I run the project and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Hi I'm Kathleen Kennedy and I'm the producer of Star Wars: The Force Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the animation and creature development team. In The Force Awakens, I'm responsible for helping the artist develop rigs, which are the parts of the character that move that allow the character to look very believable in a galaxy far, far away."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "In the next hour, we're going to build our own Star Wars game that will teach you the basic concepts of programming. Usually programming is all text but we're going to use blocks here so we can drag and drop to write the programs. To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars game space where code will run. The instructions for each level are written below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command that BB-8 can understand.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: "The white space on the right is called the work space and this is where we're going to build our program."
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together. When I press run again, BB-8 will perform the commands that are stacked top to bottom on our workspace."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: "After you hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C3PO."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Hi, my name is Alice and I run the project and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "My name is Jens Bergensten but I'm better known as Jeb. I'm the lead developer on Minecraft, here at Mojang in Stockholm. I think I was eleven or maybe twelve and I started programming because I wanted to make games. One of my father's friends told me that in order to make games, you need to learn how to program. That's how I got started. I like designing and figuring out the architecture of games. That's what I really like about Minecraft."
      2:
        image: notes/mc_intro_2.JPG
        text: "Over the next hour, you're going to learn the basics of computer science by programming Alex or Steve to move through a simulated piece of a Minecraft world."
      3:
        image: notes/mc_intro_3.JPG
        text: "Traditional programming is usually in text but today we'll use Blockly, a system which uses visual blocks that you can drag and drop to write programs. Under the hood, you're creating Javascript code."
      4:
        image: notes/mc_intro_4.JPG
        text: "The concepts you'll be learning are what computer programmers use every day and are the foundation to computer science. Here at Mojang, we use these same concepts to make Minecraft work."
      5:
        image: notes/mc_intro_5.JPG
        text: "Before you start, you'll pick your character. I'm going to choose Alex. Let's build code for a program that will help her move around the screen."
      6:
        image: notes/mc_intro_6.JPG
        text: Your screen is split into three main parts. On the left is the Minecraft playspace where your program will run. The instructions for each level are written below.
      7:
        image: notes/mc_intro_7.JPG
        text: "This middle area is the toolbox and each of these blocks is a command that directs Alex's actions."
      8:
        image: notes/mc_intro_8.JPG
        text: "The white space on the right is called the work space and this is where we'll build our program."
      9:
        image: notes/mc_intro_9.JPG
        text: If we drag the moveForward(); block to our workspace and then click run, what happens? Alex moves forward one space on the grid.
      10:
        image: notes/mc_intro_10.JPG
        text: "And what if we want to do something after she has moved forward one space? We can add another block to our program. I'm going to choose the turnRight(); block and I'll drag it underneath my moveForward(); block until this orange line appears. Then I'll drop it and the two blocks will snap together. When we press run again, Alex will perform the commands that are stacked from top to bottom in our workspace."
      11:
        image: notes/mc_intro_11.JPG
        text: If you ever want to delete a block, just drag it from the stack back to the toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: "To undo your changes and get back to how the level started, use the Start Over button in the top right corner of the workspace. One more thing: you see the little triangle on the turn blocks? Anytime you see these triangles, it means that you can pick a different option. Let's start coding!"
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: "I'm Lydia Winters, Mojang's brand director and we made a little game called Minecraft."
      2:
        image: notes/mc_repeat_2.JPG
        text: "My favorite thing to do in Minecraft is explore. I love adventuring in caves and seeing what I can find. As someone who isn't a programmer, I'm really excited to go through the Minecraft lesson and actually learn some coding myself."
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier if we could just tell the computer to perform the moveForward(); command four or five times. Luckily for us, computers are really good at repeating commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: "When building Minecraft, we use repeat loops to place all the initial materials for creating a new world. That's thousands and thousands of blocks. We also use loops in little ways, for example to make Alex's feet move back and forth as she walks. Repeat loops are a powerful part of programming."
      5:
        image: notes/mc_repeat_5.JPG
        text: "Night is coming so in the next couple of levels, we're going to build a house to stay safe. We're going to use the repeat block to do this very easily."
      6:
        image: notes/mc_repeat_6.JPG
        text: "To build a wall of our house, we can either tell Alex to moveForward(); and place planks four times or we can tell her to moveForward(); and place one plank, then take this command and use the repeat block to have her perform the action multiple times. Now we'll click on the repeat block and tell her how many times we want her to perform this action. Now let's build our house before night falls! Have fun."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: "Now we're going to learn about if statements. If statements are a fundamental part of learning to program. They help a computer make decisions."
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when I unlock my phone, it runs some code that says if I enter the password correctly, then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react to what they see in the world. For example, if there is a rock in front of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: "In this case, we don't want to fall in the lava. It's easy to plan for the lava. We can see it on the screen. But what about the lava that we can't under the stone?"
      5:
        image: notes/mc_if_statements_5.JPG
        text: "After we mine the stone, we'll need to check if there's any lava in that place before moving forward. If there is lava there, we want to place a stone in front of our character before we can move forward. That way we can safely move on. Time for more mining! And remember to use the if statement to watch your step."
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no more instructions and no puzzles to solve. You can build anything you want. You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of torches. I made an A out of birch planks. It worked, it worked. We built a house out of wool!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: "When you're done making your creation, choose share to get a link to share with your friends. Have fun!"
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no more instructions and no puzzles to solve. You can build anything you want. You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of torches. I made an A out of birch planks. It worked, it worked. We built a house out of wool!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
