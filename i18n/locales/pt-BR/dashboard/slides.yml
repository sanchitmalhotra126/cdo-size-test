pt-BR:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bem-vindo à sua primeira hora de programação! Vamos mergulhar logo em sua primeira experiência com programação.
      2:
        image: notes/hoc1_2.jpg
        text: Vamos usar o Blockly, uma linguagem de programação visual onde você arrasta e solta blocos para escrever código.
      3:
        image: notes/hoc1_3.jpg
        text: 'A programação é geralmente em linhas de código escrito, porém o "Blockly" é visual. Cada bloco corresponde a uma linha de código "real".'
      4:
        image: notes/hoc1_4.jpg
        text: Você vai aprender o básico da ciência da computação, que consiste em conceitos usados no desenvolvimento de aplicativos e até mesmo para controlar uma sonda em Marte.
      5:
        image: notes/hoc1_5.jpg
        text: Um programa é um conjunto de instruções a serem seguidas pelo seu computador.
      6:
        image: notes/hoc1_6.jpg
        text: O objetivo do seu primeiro programa é levar o Angry Bird até um Porco Verde através do labirinto.
      7:
        image: notes/hoc1_7.jpg
        text: O lado esquerdo é o labirinto onde o programa é executado. As instruções para cada desafio estão abaixo do labirinto.
      8:
        image: notes/hoc1_8.jpg
        text: A caixa de ferramentas do meio contém os comandos do Angry Bird. Você vai usá-los para criar o seu programa.
      9:
        image: notes/hoc1_9.jpg
        text: À direita você tem sua área de trabalho, onde você vai arrastar os blocos da caixa de ferramentas para criar o seu programa. Para excluir um bloco, arraste-o para a lixeira no canto.
      10:
        image: notes/hoc1_10.jpg
        text: 'Cada bloco é uma instrução. Se você arrastar um bloco "avance" para a sua área de trabalho e clicar em "Executar Programa", o pássaro se move um espaço à frente no labirinto.'
      11:
        image: notes/hoc1_11.jpg
        text: Para fazer mais do que uma ação, você pode arrastar vários blocos para sua área de trabalho e conectá-los uns aos outros. O passarinho obedecerá os comandos de cima para baixo.
      12:
        image: notes/hoc1_12.jpg
        text: 'Se você executar um programa e quiser corrigi-lo, clique em "Recomeçar".'
      13:
        image: notes/hoc1_13.jpg
        text: Vamos pegar esses porcos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Oi, sou o JR! Toda equipe de corrida precisa de cientistas da computação para ganhar. Eles analisam os dados do carro para torná-lo mais rápido.
      2:
        image: notes/stage5_2.jpg
        text: Nesses desafios, você vai ser um artista que desenha por todo lugar que passa.
      3:
        image: notes/stage5_3.jpg
        text: 'Esse bloco diz "avance por 100 pixels". Pixels são pontos minúsculos na sua tela.'
      4:
        image: notes/stage5_4.jpg
        text: 'Este bloco diz "vire à direita 90 graus". Esse bloco funciona da mesma forma que o bloco "vire" no desafio do labirinto.'
      5:
        image: notes/stage5_5.jpg
        text: Clique na seta em qualquer um desses blocos para alterar o número de movimentos do artista, tanto para avançar quanto para virar. Brinque com os novos blocos para ver como eles funcionam.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Oi, eu sou a Paola! Nesses desafios, você é uma fazendeira que precisa deixar seu terreno completamente plano para começar o plantio.
      2:
        image: notes/stage9_2.jpg
        text: Você precisa ajudá-la a remover todos os montes de terra e preencher todos os buracos.
      3:
        image: notes/stage9_3.jpg
        text: Os novos blocos removem 1 pá de terra de um monte, e preenchem o buraco com 1 pá de terra.
      4:
        image: notes/stage9_4.jpg
        text: Os montes de terra e os buracos são de tamanhos diferentes, então você tem que dizer à fazendeira quantas pás usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Oi, eu sou Katie! Uma das coisas mais emocionantes sobre ciência da computação é que um programa de computador pode ser interativo.
      2:
        image: notes/flappy02.jpg
        text: Sempre que alguém clica, digita, ou toca na tela de um celular, é gerado um EVENTO, e existe alguns códigos que decidem o que fazer quando um EVENTO ocorre.
      3:
        image: notes/flappy03.jpg
        text: 'Por exemplo, você poderia ter um MANIPULADOR DE EVENTOS que diz "quando o mouse for clicado, toque um som" '
      4:
        image: notes/flappy04.jpg
        text: Você já ouviu falar do jogo Flappy Bird? Usando manipuladores de eventos, vamos aprender a programar nossa própria versão do Flappy Bird!
      5:
        image: notes/flappy05.jpg
        text: O código que você vai escrever consiste em arrastar e soltar blocos que representam os comandos para o computador. Na verdade, cada um desses blocos é representado pelo código real.
      6:
        image: notes/flappy06.jpg
        text: 'Se você der uma olhada na área de trabalho, existem alguns blocos verdes que são preenchidos para você - esses são os "manipuladores de evento" '
      7:
        image: notes/flappy07.jpg
        text: 'Se você quer que o passarinho VOE quando você CLICAR, você pode anexar o bloco "FLAP" ao manipulador de evento apropriado. Assim, sempre que você clicar, o passarinho vai voar.'
      8:
        image: notes/flappy08.jpg
        text: Em cada desafio dessa atividade, vamos introduzir novos tipos de eventos, como os blocos verdes na área de trabalho, e você pode decidir que blocos são apropriados para adicionar em resposta a esses eventos.
      9:
        image: notes/flappy09.jpg
        text: Quando você observar uma seta suspensa como essa, significa que você pode alterar as configurações, como o som a ser reproduzido quando o pássaro bater no chão.
      10:
        image: notes/flappy10.jpg
        text: No desafio final, você vai poder criar seu próprio jogo e compartilhar com seus amigos. Divirta-se!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Olá, eu sou o Mark! Vamos aprender sobre laços. Usando laços, você pode dizer para um computador repetir qualquer conjunto de ações continuamente, milhares ou mesmo milhões de vezes.
      2:
        image: notes/hoc2_2.jpg
        text: Nesse desafio, queremos fazer o pássaro avançar 5 espaços para chegar ao porco.
      3:
        image: notes/hoc2_3.jpg
        text: 'Podemos usar o novo bloco "repita" para nos ajudar.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Ao invés de arrastar 5 blocos "avance"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Podemos colocar o bloco "avance" dentro do bloco "repita" e escrever um número no bloco para definir o número de repetições.'
      6:
        image: notes/hoc2_6.jpg
        text: 'E isso é importante: você pode colocar mais de um comando dentro de um bloco "repita".'
      7:
        image: notes/hoc2_7.jpg
        text: 'Aproveite seu novo bloco "repita"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Oi, eu sou o Chris. Antes de entrar para o Miami Heat, fui para a Georgia Tech para estudar Ciência da Computação. Vamos dar uma olhada no nosso novo bloco, o bloco "repita até".'
      2:
        image: notes/hoc3_2.jpg
        text: E se nós não soubermos quanto o pássaro teve que se mover para chegar ao porco?
      3:
        image: notes/hoc3_3.jpg
        text: 'Se colocarmos um bloco "avance" dentro do bloco "repita até", o pássaro vai seguir em frente ATÉ chegar ao porco (ou se chocar contra uma parede).'
      4:
        image: notes/hoc3_4.jpg
        text: 'E isso é importante: assim como antes, podemos colocar vários blocos dentro do bloco "repita até", e todos eles serão repetidos.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Oi, eu sou o Bill! Vamos aprender um novo conceito fundamental: instruções "se". É assim que computadores tomam decisões.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Você usa a instrução "se" todos os dias. Toda manhã, antes de sair, você diz: SE estiver chovendo lá fora, vou precisar da minha jaqueta.'
      3:
        image: notes/hoc4_3.jpg
        text: Podemos dizer ao zumbi para verificar SE há caminho para a esquerda e, se ele encontrar um caminho para a esquerda, precisamos virá-lo naquela direção.
      4:
        image: notes/hoc4_4.jpg
        text: 'Para programar isso, vamos arrastar o nosso bloco "se" e colocar um bloco "vire à esquerda" dentro dele.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Agora, se colocarmos um bloco "avance" acima dele e colocarmos tudo dentro de um bloco "repita", a cada vez que o zumbi se mover, ele vai verificar se há um caminho para a esquerda e virar. O comando "repita" é fundamental para verificar a necessidade de virar a cada passo.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Instruções "se" são muito importantes para a ciência da computação. Um dos primeiros programas que escrevi foi um jogo da velha, e havia uma instrução "se" que dizia: SE a outra pessoa está prestes a ganhar, bloqueie a casa que lhe permitiria ganhar.'
      7:
        image: notes/hoc4_7.jpg
        text: 'Divirta-se usando o bloco  "se"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Olá, meu nome é Saloni. A ciência da computação me ajuda a resolver problemas das áreas da saúde e medicina. Vamos aprender sobre o bloco "se-senão". Ele parece o bloco "se", mas com uma parte extra no final que diz "senão".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Se eu colocar um bloco "avance" na instrução "faça", e um bloco "vire à esquerda" na instrução "senão", significa que o zumbi vai escolher entre 2 opções. SE existir um caminho à frente, o zumbi vai avançar e, CASO CONTRÁRIO (não há um caminho em frente), o zumbi vai virar à esquerda.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Assim como o bloco "se", nós podemos colocar blocos "se-senão" dentro de blocos "repita", assim o zumbi continuará se movendo, e o bloco "se-senão" continuará verificando se é possível virar para algum lugar.'
      4:
        image: notes/hoc5_4.jpg
        text: Agora, coloque os zumbis em seus devidos lugares!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Um comando se-senão é uma decisão entre duas opções. Vamos ver como podemos usar um comando se-senão com nosso amigo Scrat, o esquilo.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Este bloco parece igual ao bloco "se", mas há uma parte extra no final que diz "senão". Se eu colocar um bloco "avance" na instrução "faça", e um bloco "vire à esquerda" na instrução "senão", significa que o esquilo Scrat vai avançar se houver um caminho à frente. Se não houver caminho à frente, o Scrat vai virar à esquerda.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Significa tomar uma decisão e fazer uma das duas ações com base nessa decisão. E, assim como os blocos "se", você pode colocar blocos "se-senão" dentro de blocos "repita".'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Agora vamos ajudar Scrat, o esquilo, a pegar essa bolota!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Oi, eu sou a Brina, uma engenheira do Instagram. Uma função é um conjunto de linhas de código que você deseja usar várias vezes. Então, ao invés de escrever esse código toda vez, você pode usar apenas um bloco.
      2:
        image: notes/stage13_2.jpg
        text: Vamos aprender a definir funções. Definições de função têm uma estrela no canto. O nome da função está escrito na linha superior.
      3:
        image: notes/stage13_3.jpg
        text: 'Os blocos que vão dentro da definição nos dizem o que ela faz. Então, essa definição de função se chama "preencha 5", e é composta por um bloco "repita" e um bloco "preencha".'
      4:
        image: notes/stage13_4.jpg
        text: 'A definição está na área de trabalho, mas a fazendeira não vai executar a função até que arrastemos o bloco "preencha 5" para fora da categoria funções.'
      5:
        image: notes/stage13_5.jpg
        text: 'Vamos agir em "função" da diversão! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Oi, eu sou o Makinde! Vamos aprender sobre o bloco "enquanto". '
      2:
        image: notes/stage9_6.jpg
        text: 'O bloco "enquanto" vai fazer tudo o que você colocar no seu interior, DESDE QUE a declaração na parte superior seja VERDADEIRA.'
      3:
        image: notes/stage9_7.jpg
        text: Por exemplo, se a fazendeira está em um monte de terra, ela continuará a remover 1 pá ENQUANTO houver terra debaixo dela.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Oi, eu sou a Trina, e trabalho para a Pixar. Já trabalhei em um monte de filmes, incluindo o Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Este é nosso novo laço "contador". Ele executará ações repetidamente, e você pode fazer com que as ações mudem aos poucos.'
      3:
        image: notes/stage11_3.jpg
        text: 'Neste exemplo, nosso laço "contador" diz "conte de 50 até 90, indo de 10 em 10" e, dentro dele, temos o nosso bloco "desenhe um quadrado". Arraste o bloco "contador" da seção "Variáveis" para local que indica "comprimento".'
      4:
        image: notes/stage11_4.jpg
        text: Isso significa que nosso artista vai desenhar um quadrado com lados de 50 pixels de comprimento, e então vai acrescentar 10 e desenhar um quadrado com lados de 60 pixels de comprimento. Ele vai continuar adicionando 10 e desenhando quadrados até que ele atinja 90 pixels. Assim, vamos ter quadrados de 50, 60, 70, 80 e 90 pixels.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Oi, eu sou a Janete, e eu sou uma engenheira da Zynga.
      2:
        image: notes/stage15_2.jpg
        text: E se quisermos desenhar um monte de triângulos de tamanhos diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escrever todo o código à mão, ou podemos usar uma função com parâmetros.
      4:
        image: notes/stage15_4.jpg
        text: 'Para fazer isso, clique na estrela azul sobre a definição da função "desenhe um triângulo". Arraste o "nome de entrada" para o bloco "entrada".'
      5:
        image: notes/stage15_5.jpg
        text: 'Então, se você escrever "comprimento" no local onde há um "x" e apertar "Enter", você vai criar um comprimento de entrada para sua função.'
      6:
        image: notes/stage15_6.jpg
        text: 'Então, clique na estrela. Agora, você vai clicar na categoria de variáveis e arrastar o bloco "comprimento" para dentro do bloco "avance" da sua definição da função. E arraste para fora o antigo bloco de número.'
      7:
        image: notes/stage15_7.jpg
        text: 'Para usar sua função com parâmetros, clique na categoria funções e arraste para fora a função "desenhe um triângulo com comprimento".'
      8:
        image: notes/stage15_8.jpg
        text: Agora você pode usar o bloco de matemática para entrar com números diferentes e desenhar triângulos de tamanhos diferentes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Parabéns! Com o último desafio resolvido, você acabou de escrever o código que pode dizer a QUALQUER robô como encontrar o seu caminho através de um labirinto sem ramificação ou de um túnel de qualquer comprimento, seja ele um zumbi, um pássaro, uma sonda em Marte ou até mesmo um carro sem motorista.
      2:
        image: notes/hoc6_2.jpg
        text: Os conceitos básicos que você usou são o coração de qualquer programa ou aplicativo. Aprendemos sobre laços de repetição, instruções de repetições condicionais, instruções se, e instruções se senão.
      3:
        image: notes/hoc6_3.jpg
        text: Se você gostou de sua primeira hora de programação, visite a code.org para continuar a aprender a ciência da computação! Ao completar o nosso curso de 20 horas, você terá dominado o básico de programação, e vai estar apto a aprender como programar aplicativos para celular, instruções robóticas, jogos, e muito mais.
      4:
        image: notes/hoc6_4.jpg
        text: 'A tecnologia está mudando tudo o que fazemos, e não importa se você é jovem ou velho: programar é divertido, é criativo, e qualquer um pode aprender!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Olá, meu nome é Lyndsey. Eu sou modelo, atriz e também escrevo meus próprios aplicativos. Vamos usar a programação para explorar a magia e a beleza do gelo com Anna e Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Você vai criar flocos de neve e padrões enquanto esquia, e um país das maravilhas congelante para compartilhar com seus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: Na próxima hora, você vai aprender os conceitos básicos da programação. A programação tradicional é escrita, mas nós usaremos Blockly, blocos visuais que você pode arrastar e soltar para escrever programas. Também é assim que estudantes universitários aprendem o básico. E por trás desses blocos, você está criando códigos.
      4:
        image: notes/frozen1_4.jpg
        text: Um programa é um conjunto de instruções que diz a um computador o que ele deve fazer. Vamos construir um código, ou programa, que ajudará Elsa a criar uma reta simples. Mais adiante, nós vamos usar isso para criar padrões mais complexos.
      5:
        image: notes/frozen1_5.jpg
        text: Sua tela é dividida em três partes principais. À esquerda você tem a superfície de gelo onde vai executar seu programa. As instruções de cada nível estão escritas logo abaixo da superfície.
      6:
        image: notes/frozen1_6.jpg
        text: A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma ação que pode ser realizada por Elsa e Anna.
      7:
        image: notes/frozen1_7.jpg
        text: 'O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa. Para se mover pela superfície de gelo, você usará o bloco "avance".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Aqui, o bloco "avance" diz: "avance por 100 pixels". Quando clicamos em "Executar", o que acontece? Elsa se move por uma certa distância na tela, 100 pixels, na verdade! Os pixels são, basicamente, minúsculos quadrados na tela do seu computador.'
      9:
        image: notes/frozen1_9.jpg
        text: 'O outro bloco que temos neste desafio diz "vire à direita 90 graus". Quando usamos o bloco "vire à direita", Elsa faz uma determinada curva. Você pode brincar com o quanto deseja que Elsa vire. O ângulo é medido a partir do caminho à frente de Elsa. Então, este é um giro de 90 graus. E este é um giro de 120 graus.'
      10:
        image: notes/frozen1_10.jpg
        text: Lembre-se de que é possível mudar o número de pixels e graus, clicando nas setas ao lado deles.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Olá, eu sou a Paola! Os computadores são realmente muito bons em repetir ações. Você pode contar até 10, 20 ou até 100, mas um computador pode contar até um bilhão ou um trilhão sem se cansar, e ele só levará alguns segundos. Seja contar, desenhar ou qualquer outra atividade, os computadores podem repetir ações centenas ou até bilhões de vezes.
      2:
        image: notes/frozen2_2.jpg
        text: 'Na programação, podemos chamar isso de laço. Um laço é o modo como você repete seu código diversas vezes. No próximo desafio, sua meta é ajudar Anna a criar um quadrado com o bloco "repita".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Todos os blocos de código que colocar dentro do bloco "repita" serão repetidos em sequência, quantas vezes você quiser.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Para desenhar um quadrado, você pode usar os blocos "avance" e "vire à direita" quatro vezes. Mas o modo mais fácil de fazer isso é dizer ao computador "avance" e "vire à direita 90 graus" uma vez e, depois, fazer ele repetir este par de ações quatro vezes. Para isso, você precisa colocar os blocos "avance" e "vire à direita" dentro de um bloco "repita".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Lembre-se de que é possível mudar o valor no bloco "repita" para qualquer número, e ele repetirá o que está dentro do bloco de acordo com o número que você escolher.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Olá, eu sou Chris Bosh. Sou jogador de basquete profissional, e já programei quando estava na faculdade.
      2:
        image: notes/frozen3_2.jpg
        text: Um dos conceitos mais importantes da ciência da computação é como definir novos comandos. A maioria das linguagens de computador tem apenas 100 palavras ou comandos. A arte e a magia estão, então, em definir suas próprias palavras novas a partir do básico.
      3:
        image: notes/frozen3_3.jpg
        text: Depois de ensinar a um computador como fazer uma ação uma vez usando esta sequência de comandos, você pode criar o nome que quiser para essa ação, assim será mais fácil repeti-la depois. Ao definir e nomear seu próprio comando, você estará criando uma função.
      4:
        image: notes/frozen3_4.jpg
        text: Olá, eu sou Jess. Na programação com blocos, use funções quando houver um conjunto de ações que você quer repetir várias vezes. Por exemplo, você escreveu um código para criar um quadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Você pode definir isso como uma função chamada "crie um quadrado". '
      6:
        image: notes/frozen3_6.jpg
        text: Agora você tem um novo bloco que pode ser usado várias vezes para criar diversos quadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Inúmeras formas simples podem ser usadas para criar padrões mais complexos. No próximo desafio, o código que você acabou de escrever para fazer um círculo estará disponível como uma nova função que pode fazer círculos de diferentes tamanhos. Você pode usá-la para ajudar Elsa a criar padrões belos e intrincados na neve?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade.
      2:
        image: notes/playlab_2.png
        text: 'Há os blocos "quando a seta estiver pressionada" e "mova o personagem". Você pode usar esses blocos juntos para mover os personagens usando as teclas de direção.'
      3:
        image: notes/playlab_3.png
        text: E há alguns blocos que fazem outras ações quando os personagens trombam ou são clicados. Dê uma olhada e divirta-se!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nós vamos criar jogos usando o Laboratório. Os bons jogos têm histórias, e toda história tem personagens. Nós vamos aprender como criar nossos personagens, como bruxas, alienígenas e animais que falam, andam e interagem uns com os outros. Ao final deste tutorial, você poderá criar um jogo a partir do zero e compartilhá-lo com seus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: Sua tela está dividida em três partes principais. À esquerda está o espaço do jogo, onde seu programa será executado. As instruções para cada nível estão escritas abaixo.
      3:
        image: notes/playlab_intro_3.png
        text: A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma parte do código. O espaço em branco à direita é chamado de área de trabalho e é onde criaremos nosso programa.
      4:
        image: notes/playlab_intro_4.png
        text: 'Para começar, você terá que conectar seus blocos ao bloco laranja "quando executar". É possível conectar diversos blocos uns aos outros, arrastando-os até ver a linha amarela e, então, eles se encaixam.'
      5:
        image: notes/playlab_intro_5.png
        text: 'Neste primeiro desafio, nosso personagem é um pinguim, e nós o faremos dizer "Olá!", arrastando o bloco "diga", conectando-o ao bloco "quando executar" e digitando "Olá". Nós também podemos fazer com que o pinguim se mova usando os blocos "mova à direita" e "mova à esquerda". Depois que seus blocos estiverem no lugar certo, aperte o botão "executar" para ver o que você programou.'
      6:
        image: notes/playlab_intro_6.png
        text: Comece agora mesmo! Ao final, você conseguirá criar seu próprio jogo, com todos os tipos de jogadores que poderão interagir, ficar felizes ou tristes, marcar pontos ou lançar bolas de fogo, ou até mesmo fazer desaparecer uns aos outros. Depende da sua imaginação e do jogo que você quer criar.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: 'Agora, vamos aprender um pouco sobre algo que os programadores de jogos usam todos os dias: os eventos. Um evento diz ao seu programa que ele deve ouvir quando algo acontece. Quando tal coisa acontece, ele realiza uma ação.'
      2:
        image: notes/playlab_events_2.png
        text: 'Alguns exemplos de eventos são: ouvir o clique de mouse, pressionar uma tecla de direção ou tocar a tela.'
      3:
        image: notes/playlab_events_2.png
        text: 'Agora, vamos fazer o robô espacial cumprimentar os terráqueos quando um jogador clicar nele. Nós usaremos o bloco "quando clicado" e conectaremos o bloco "diga" a ele. Quando o jogador clicar no robô espacial, tudo que estiver conectado ao bloco de evento "quando clicado" será realizado. O que seu alienígena diz?'
      4:
        image: notes/playlab_events_4.png
        text: 'Há também os blocos "quando a seta estiver pressionada". Se você conectar os blocos "mova" a eles, será possível começar a mover seus personagens para cima, para baixo, para esquerda e para a direita. Pouco a pouco, seu jogo está ficando cada vez mais interativo.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Este é o bloco "repita infinitamente". Tudo que estiver contido neste bloco acontecerá repetidamente no jogo.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Se quisermos que um personagem faça algo repetidamente, sem nenhuma ação do jogador, colocaremos esses blocos dentro do bloco "repita infinitamente".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Neste desafio, nosso objetivo é ajudar o mago a proteger as fronteiras do reino, andando da esquerda para a direita e vice-versa, continuamente. Aprender como repetir ações de comandos vai economizar muito do seu tempo no futuro, quando você for criar seu próprio jogo.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Estes são seus blocos de desenho. Use o bloco correto para mover o artista para onde ele precisa preencher as linhas cinzas.
      2:
        image: notes/C1_artist_intro_2.png
        text: Estes são os blocos pule. Quando você os usa, seu artista se move mas não desenha, então use-os para pular para a próxima linha cinza.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Abelhas não são super legais? Nesse próximo conjunto de desafios, seu objetivo é ajudar a abelha a chegar até as flores, obter seu néctar e voar até a colmeia para produzir mel. Você precisa usar os blocos "obtenha néctar" e "faça mel" nesse exercício.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Cada flor tem um número diferente de néctares: 1, 2, 3, ou mais. Sabemos a quantidade de néctar presente nas flores vermelhas, por meio do pequeno número no canto. Então lembre-se de obter todo o néctar da flor antes de avançar. Além disso, cada colmeia pode armazenar apenas uma certa quantidade de mel: 1, 2, 3, ou mais. Então lembre-se de produzir o máximo de mel que uma colmeia pode armazenar.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Se você puder obter todo o néctar e produzir todo o mel, você vai para o próximo nível. Caso contrário, você precisa realizar esse desafio novamente. Brinque um pouco e veja como a programação é doce como o mel!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Um laço é uma repetição de uma atividade. Ao entrar em uma colmeia para inspecionar, eu olho para um quadro e o coloco de volta, e então eu repito essa mesma atividade várias vezes. Estou repetindo, fazendo a mesma atividade várias vezes.
      2:
        image: notes/C1_bee_loops_2.png
        text: 'Nesse nível, queremos que a abelha colete três néctares da flor. Ao invés de usar três blocos "obtenha néctar", você vai usar o bloco repita para obter néctar três vezes. Clique em "Executar" e veja se você acertou. Legal!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Essa lição é chamada de o grande evento. Ela é sobre como podemos controlar nossos programas e de fato alterar um programa em execução usando eventos, como apertar um botão ou clicar no mouse.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Para esta lição, você será controlado por um controle remoto de papel. É como um jogo da vida real.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Um evento é uma ação que faz algo acontecer. É como quando você clica no botão do mouse e uma página carrega. Isso é um evento. Quando você toca a tela do seu tablet para deslizar, isso também é um evento. Os eventos são uma ótima maneira de deixar que o usuário direcione seu programa para onde ele quiser ou precisar.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Acontecem coisas às quais todos respondemos. Sentimos fome e vamos até a geladeira. Escutamos o carteiro chegar e entregar a correspondência e vamos até a porta buscá-la. Esses eventos são como apertar um botão ou mover um controle de vídeo game. Eles são coisas que acontecem e que fazem com que realizemos algo.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'Nos jogos, há um evento chamado "atualização" e ele acontece 30 ou 60 vezes por segundo. Para programadores de jogos, isso é quase mais importante como um evento que os botões ou o controle do jogo.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'O principal evento que estamos observando é a "atualização". Então olhamos para o controle por um momento e dizemos "ah, alguém apertou o botão nesse quadro? Sim ou não?". Sem eventos, o jogador não poderia se mover, pular, nem poderia controlar o que está acontecendo. O jogo não poderia animar coisa alguma.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Na escultura de areia você tem que saber que a falha faz parte do programa. Mas se você persistir, ela não representará nada além de mais emoção. Persistência é o nome do jogo. Fique com ela, você não vai se arrepender.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Esta lição é chamada de criando uma base. Nesta lição, vamos trabalhar em uma tarefa realmente difícil. Você vai descobrir como criar uma estrutura tão alta quanto um desses copos e ela será forte o suficiente para suportar o peso de um livro.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Pode haver momentos nos quais nossa criação não funciona. Pode haver momentos nos quais nos frustramos e queremos desistir. Pode haver vários desses momentos. Mas se continuarmos tentando e dando nosso melhor, então com certeza vamos ter sucesso em pouco tempo.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistência significa aguentar firme quando você realmente quer desistir. Se você quiser criar algo novo e diferente, você vai se deparar com muitas falhas no caminho.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: O truque para persistir é escolher seguir em frente e aprender com seus fracassos ao invés de desistir por estar frustrado. A frustração na verdade significa que há algo maravilhoso esperando por nós. Então, não desista antes de conseguir!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Olá, meu nome é Miral Kotb e sou o criador do Iluminate. Em meu trabalho, há algo que usamos na dança e na programação de trajes luminosos. E são os laços! Os laços repetem uma ação várias vezes.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Quando você repete algo várias vezes, como minhas ações para manter o bambolê girando, você realiza uma repetição daquela ação. Isso é uma repetição. Isso é uma repetição. E isso é uma repetição.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Hoje vamos ter uma festa dançante. Vamos fazer repetições com uma nova dança, a iteração. Vamos aprender mais sobre repetições usando uma dança. Você vai aprender alguns passos fáceis e repeti-los várias vezes para completar a dança.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Aqui estão os passos que você precisa aprender. Bata palmas. Coloque suas mãos atrás da cabeça. Coloque as mãos na cintura. Levante sua mão esquerda. Levante sua mão direita. Fácil, não é? Você vai descobrir que você pode encurtar as direções colocando alguns passos de dança em laços de repetição.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Na verdade usamos repetições em nossa dança. Os dançarinos estão usando computadores, todos na mesma rede. Eu posso repetir as luzes para os mesmos dançarinos várias vezes. Na repetição eu posso ter uma iteração na qual eu vou dizer que quero iterar por esses seis dançarinos várias vezes e então, dentro do laço, aumentar a velocidade da luz. Tudo isso é criado usando laços de repetição. Laços são importantes na ciência da computação porque eles tornam nosso trabalho mais curto e mais fácil.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Essa lição se chama Mapas divertidos. Hoje vamos ajudar nossa amiguinha peluda Flurb a chegar até sua fruta.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Faça a Flurb ir até a fruta. Para fazer isso você precisa descobrir o caminho que ela deve percorrer e direcioná-la com as setas. Para a Flurb chegar até a maçã, em que direções ela precisa ir? Circule a seta para cima.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Para fazê-la chegar até lá, circule a direção na qual ela tem que ir.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Crie seu algoritmo colando as setas próximas ao mapa que você está tentando resolver. O segundo é igual, mas ela vai para baixo.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: É como programar com papel. E é isso mesmo!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Depurar é encontrar e corrigir problemas. Há várias formas de depurar problemas. Uma das mais fáceis é avançar passo a passo até você encontrar algo de errado. Eu estou tentando fazer uma parada de mão para trás, mas continuo caindo.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Eu fiz todo o caminho, passo a passo, e descobri onde estava meu erro. Eu não estava colocando minhas mãos na trave corretamente. Então eu tentei fazer uma parada de mão para trás na trave com minha nova posição de mãos e consegui. Eu fiquei realmente feliz por ter depurado minha parada de mão.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Para aprender sobre depuração, já começamos com um conjunto de blocos na fase. Você vai perceber que esses blocos não vão levar você até o objetivo. Precisamos depurar a solução para corrigi-la. O que deu errado? Você vai perceber que era preciso ir mais um bloco para o oeste.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Vamos corrigir isso adicionando outro bloco para o oeste e clicando em Executar para ver se deu certo. Você conseguiu!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Para este desafio, você precisa levar o pássaro até o porco. Olhe para o desafio e veja em que direções ele precisa ir.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: 'Você precisa arrastar os blocos da caixa de ferramentas para a área de trabalho. Verifique se ele está sob o bloco "quando executar" e, quando você achar que encontrou a solução correta, clique em "Executar" e veja o pássaro ir até o porco.'
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Os computadores são muito bons em repetir comandos. Como pessoa, você ficaria realmente entediado se tivesse que fazer a mesma coisa várias vezes em sequência. Mas um computador pode fazer a mesma coisa milhões, ou até mesmo bilhões de vezes, sem ficar entediado e ainda fazer muito bem.
      2:
        image: notes/C1_maze_loops_2.png
        text: Por exemplo, se eu quisesse desejar a todos no Facebook um feliz aniversário enviando um e-mail, isso levaria mais de um século para de fato escrever todos os e-mails para todos. Mas com apenas algumas linhas de código, eu posso fazer um sistema enviar um e-mail para todos no Facebook desejando um feliz aniversário.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'Para levar o pássaro até o porco nesse nível... ao invés de arrastar três blocos para o norte na área de trabalho, você vai usar o bloco "repita". Arraste o bloco "repita" para a área de trabalho e coloque o número 3. Então, arraste o bloco "mova para o norte" para dentro do bloco "repita" e clique em "Executar" para ver se você acertou. Parabéns, você conseguiu!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Essa lição se chama Criando caminhos. Juntos, vamos escrever um programa para levar nossos amigos do início, com a bússola, até o rostinho feliz.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Mas o rostinho feliz está voltado para baixo e apenas uma pessoa sabe como chegar lá. Vamos iniciar esse programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Um programa é um algoritmo que foi programado em algo que pode ser executado por uma máquina. A maioria pensa em um programa como algo que escrevemos para um computador. Os programas são realmente bons para isso, mas eles também são úteis em outros lugares. Você pode criar seu próprio jogo ou mesmo programar um robô para realizar tarefas para você.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Oi, meu nome é Jeremiah! Eu tenho sete anos. Eu adoro jogar no computador da minha mãe, mas eu sempre peço permissão primeiro. "Mãe, posso usar o computador? É claro, querido!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: Eu adoro o computador da minha mãe porque eu posso acessar a internet. A internet é como o seu bairro. Você pode visitar lugares legais, falar com sua família e amigos e aprender um monte de coisas novas.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Ontem, eu visitei um zoológico perto da minha casa. Eu vi uma zebra bebê. Tirei foto dela e alterei a cor de suas listras, então eu coloquei um chapéu nela e a adicionei à minha coleção de animais estranhos. Incrível! Depois, fui a um lugar muito distante. Eu visitei o Quênia, um país da África. Muitas zebras moram lá.
      4:
        image: notes/C1_going_places_safely_4.png
        text: 'Às vezes eu uso a internet para conversar com pessoas que eu conheço, como minha avó, que mora em outro Estado. Oi vovó! Ela está fazendo cookies para me mandar no meu aniversário. "Hmm, queria que a internet tivesse cheiro!" Eu posso conversar com pessoas diferentes na internet, como meu primo faz, mas eu só converso com pessoas que eu conheço.'
      5:
        image: notes/C1_going_places_safely_5.png
        text: O que eu mais gosto na internet é que eu posso jogar jogos divertidos. Ponto! Eu também gosto de desenhar e criar novas coisas para compartilhar com meus amigos. Legal! Às vezes eu visito sites nos quais eu aprendo coisas novas, mas eu sempre acesso sites apropriados para mim. Uau, dinossauros!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'A internet é um lugar super divertido. Mas, assim como quando você atravessa uma rua em seu bairro, você também precisa tomar cuidado quando você fica on-line. Aqui estão três regras que não podemos esquecer. Regra número 1: sempre peça a permissão de seus pais. Regra número 2: fale somente com pessoas conhecidas. Regra número 3: fique em lugares apropriados para você.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Uau, isso foi divertido! Hora do jantar. Vou sair agora. Mal posso esperar para me conectar novamente e ver o que mais posso visitar.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Hoje vamos aprender sobre programação em duplas. Na programação em duplas vocês trabalham como uma equipe. Por que duas pessoas deveriam usar um único computador? Porque duas cabeças pensam melhor que uma. Na programação em duplas, você e seu parceiro vão sentar juntos em um computador e ambos vão trabalhar no mesmo projeto.
      2:
        image: notes/C1_pair_programming_2.png
        text: Na programação em duplas, uma pessoa é o piloto e a outra é o navegador, como em um carro. O piloto senta no computador e é quem usa o teclado e o mouse, ou a tela de toque, e controla as principais ações do computador. A outra pessoa é o navegador. Ela ajuda o piloto respondendo às perguntas dele e apontando possíveis problemas ou erros.
      3:
        image: notes/C1_pair_programming_3.png
        text: A comunicação é a chave para o sucesso da programação em duplas. Não insulte, seja respeitoso, não seja um navegador mandão, porque ninguém gosta de quem fica dando palpite e tentando controlar direção o tempo todo. Você e seu parceiro devem conversar sempre. O piloto pode explicar o que ele ou ela está fazendo, e o navegador pode ajudar sugerindo o que fazer em seguida.
      4:
        image: notes/C1_pair_programming_4.png
        text: O navegador deve pensar sobre o problema todo, enquanto o piloto se concentra nos detalhes. Ambos os papéis são importantes. A programação em duplas é sobre como trabalhar em equipe.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Esta lição se chama Plantando uma semente e vai nos ajudar a entender algoritmos. Os algoritmos são instruções específicas que explicam a ordem de fazer alguma coisa. Mesmo atividades cotidianas, como tomar café ou escovar os dentes, são algoritmos que exigem pequenas etapas para realizar um trabalho.
      2:
        image: notes/C1_planting_seed_2.png
        text: Os computadores podem ser muito espertos, mas eles só entendem você se você os informar exatamente o que você quer, passo a passo. O mais interessante sobre algoritmos é que se você seguir as instruções em ordem, é possível fazer algo que você não sabia como fazer de antemão. É como seguir uma receita.
      3:
        image: notes/C1_planting_seed_3.png
        text: Hoje vamos plantar nossas próprias sementes usando um algoritmo. Crie seu próprio algoritmo separando as imagens. Selecione as imagens que mostram etapas do plantio de uma semente e organize essas imagens na ordem correta.
      4:
        image: notes/C1_planting_seed_4.png
        text: Agora, vamos ver se seu algoritmo funciona. Siga os passos do algoritmo cuidadosamente. Eles estão na ordem correta? Você conseguiu plantar uma semente seguindo o algoritmo? Isso é como programar com imagens!
      5:
        image: notes/C1_planting_seed_5.png
        text: Quando queremos fazer chocolate, há várias etapas grandes nesse processo, cada uma delas tem um conjunto de passos menores e há diferentes receitas ou algoritmos, dependendo do gosto que queremos para o chocolate. Cada etapa é importante, mesmo as menores, então se pularmos uma delas as demais não podem ser concluídas. Criar algoritmos que os outros possam entender é muito importante. É por isso que cada etapa deve ser escrita de forma que o resultado seja sempre o mesmo, não importa quem faça.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Hora de ser criativo e usar suas habilidades de programação para contar uma história. Sua história terá personagens e você vai poder fazer esses personagens conversarem e interagir uns com os outros. Comece pensando no tipo de história que você quer contar.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: 'O gato está sempre com medo do cão, mas e se o gato descobrir que o cão está tentando ser legal? O bloco "quando executar" inicia tudo. O bloco "mova" vai mover seu personagem e o bloco "diga" vai fazer seu personagem dizer o que você digitar.'
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Esse é o bloco "quando os personagens trombam" que você pode conectar aos outros blocos.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'Eu estava fazendo o cão vir aqui e dizer "Oi", mas o gato se assustou e saiu correndo. "Ahh". Se houvesse mais tempo, esse seria um final feliz. Fim!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Este é o nível do Soletrando. Use as peças para mover a abelha. Conforme ela se move, ela vai coletar letras para soletrar palavras.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Veja se você pode soletrar a palavra fornecida na caixa abaixo da fase. Mas cuidado! Ir para a direção errada vai adicionar letras que você não quer.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Os computadores são muito bons em repetir comandos. Como pessoa, você ficaria realmente entediado se tivesse que fazer a mesma coisa várias vezes em sequência. Mas um computador pode fazer a mesma coisa milhões, ou até mesmo bilhões de vezes, sem ficar entediado e ainda fazer muito bem.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Por exemplo, se eu quisesse desejar a todos no Facebook um feliz aniversário enviando um e-mail, isso levaria mais de um século para de fato escrever todos os e-mails para todos. Mas com apenas algumas linhas de código, eu posso fazer um sistema enviar um e-mail para todos no Facebook desejando um feliz aniversário.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Nesse exemplo, seu objetivo é levar o pássaro até o porco. Agora, podemos usar o bloco repita para fazer isso com mais facilidade. Você pode fazer isso passando ao computador um comando avance cinco vezes para que o pássaro dê um passo em direção ao porco toda vez, ou você pode simplesmente dizer ao computador para avançar uma vez e então dizer para ele repetir isso cinco vezes, e ele vai fazer a mesma coisa.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Para fazer isso, você deve arrastar seu comando avance e colocá-lo em um bloco repita. Então, você clica e escolhe quantas vezes o bloco repita deve realizar a ação de avançar.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Outra coisa, você pode colocar quantos comandos quiser dentro do bloco repita. Então, nesse exemplo, você está dizendo para ele avançar e virar à esquerda, o que ele fará cinco vezes. Divirta-se!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Você nem se classificaria para a corrida se não tivesse pessoas proficientes em ciência da computação, por causa da quantidade de dados que os carros coletam e a necessidade de ter pessoas que possam escrever programas para descobrir como continuar a melhorar a performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: Nesses desafios, você será um artista que usa um lápis para desenhar formas diferentes. O artista vai desenhar uma linha por onde quer que ele passe.
      3:
        image: notes/C2_artist_intro_3.png
        text: Para se mover na tela, você vai usar o bloco avance. Aqui o bloco avance diz para avançar 100 pixels. Quando clicamos em Executar, o que acontece? O artista avança uma certa quantidade, e essa quantidade é 100 pixels. Pixels são, basicamente, quadradinhos muito pequenos na tela do seu computador.
      4:
        image: notes/C2_artist_intro_4.png
        text: O outro bloco que temos nesse desafio diz para virar 90 graus à direita. Quando arrastamos isso, o artista vira uma certa quantidade de graus. Então, você pode brincar com o quanto deseja que o artista vire. Essa é uma curva de 90 graus.
      5:
        image: notes/C2_artist_intro_5.png
        text: E essa é uma curva de 120 graus. Lembre-se, você pode alterar esses valores clicando nas setas próximas aos números de pixels e graus. Divirta-se desenhando com seu artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Este é o bloco condicional. Ele diz que SE houver néctar ou mel menor que, igual a, ou maior que um número, ENTÃO algo deve ser feito.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Isso é útil quando não sabemos quanto néctar o mel obter, como vemos aqui com esse ponto de interrogação.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Neste exemplo, vamos dizer que SE a flor roxa tem néctar maior que 0, obtenha néctar. Isso fará com que nossa abelha continue coletando néctar enquanto for possível. Bingo!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Está é a lição das Pulseiras binárias. Vamos programar nossas iniciais em uma pulseira que podemos usar e mostrar a todos os nossos amigos!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: A forma binária é uma maneira de representar informações usando apenas duas opções. Às vezes as pessoas pensam nela como apenas 1s e 0s. Mas a forma binária pode ser representada com combinações de ligado e desligado, para cima e para baixo, entrada e saída, ou qualquer conjunto de coisas opostas.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Olá, meu nome é Orion e eu programo robôs aqui na Play-im. Todos os computadores e cérebros de robôs são basicamente pequenos portões eletrônicos. Quando o portão está aberto, a eletricidade pode passar e, quando está fechado, ela não pode passar.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Um exemplo de binário em robôs são os olhos. Os olhos dos robôs são LEDs, que são luzes que estão acesas ou apagadas. É um sistema binário, ou uma coisa, ou outra. Podemos usar luzes para representar números binários. Se temos um conjunto de robôs, podemos dizer que o primeiro robô está na casa dos 1s, o segundo na casa dos 2s, o terceiro na casa dos 4s, e assim por diante. É assim que você representa um número binário. Os robôs fazem isso com seus olhos binários e contam para você.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Esta lição se chama Condicionais com cartas. Todos os dias você toma decisões com base no que você vê e ouve.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Eu quero ir até o parque, mas primeiro preciso decidir se devo levar um guarda-chuva ou não. Então eu olho pela janela. Se o tempo estiver nublado, vou levar meu guarda-chuva. Senão, vou levar meus óculos de sol. Acho que é melhor levar o guarda-chuva. O que eu vejo e ouço determina o que vou levar ao parque.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: 'Condicionais também são usadas em jogos. Hoje vamos praticar usando condicionais com um jogo de cartas. Nesse jogo, a carta que eu tiro determina o que meus amigos vão fazer. Se eu tirar um sete, todos batem palmas. Senão, todos dizem "ahhhh". Vamos tentar! "Ahhhh" "aplausos"'
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Aposto que você consegue fazer jogos ainda mais divertidos com condicionais. Tente! Condicionais fazem os computadores parecerem espertos. Um programa de computador que inclui condicionais pode reagir ao usuário e alterar seu curso de ação.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pense no seu jogo preferido. Você ganha mais pontos por fazer algumas ações em comparação com outras? Isso ocorre porque o computador está usando condicionais. Essa é a forma do computador tomar uma decisão. Por exemplo, se você atinge o alvo, você ganha dez pontos. Senão, você perde três. Quando você sabe como essas condições funcionam é possível criar todo o tipo de jogos emocionantes.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Aqui já temos alguns blocos em nossa área de trabalho. Mas algo está errado.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Vamos depurar esse código diminuindo a velocidade e vendo como ele passa por cada bloco, passo a passo.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ah, aí está o problema! Os bigodes do gato têm 75 pixels de comprimento, e não 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Você já ouvi falar em depurar um programa? Essa é uma forma de descobrir o que não está funcionando. Quando você depura um código, você identifica e remove os erros.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Aqui, já temos alguns blocos em nossa área de trabalho. Vamos usar o botão do passo para caminhar pelos blocos, passo a passo, para ver se esta é a solução correta e onde podemos corrigi-la.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Parece que nosso problema está aí! Precisamos de mais um bloco avance. O botão de passo nos ajuda a depurar nosso problema, identificando onde está o erro para corrigi-lo.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Você segura seu chapéu na cabeça e seu cérebro lhe diz onde você está e para pensar sobre o zoológico, para acenar e dizer oi! Use a cabeça quando estiver online para manter o que é seu em sua mente e para saber se proteger, como dar um pouco de privacidade para você mesmo! Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use seu coração para crescer, dê a si mesmo um brilho saudável, e para conquistar alguém, diga a esse alguém você será meu! Use seu coração quando estiver on-line, seja gentil, correto e mostre respeito por seus amigos, seja justo e bom na internet. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use seus braços para abraçar seu bichinho de estimação, para evitar que suas roupas se molhem, para usar suas mangas favoritas e para voar e acreditar. Use seus braços quando estiver on-line, para dar um tempo, equilibrar o tempo, deixar a tecnologia para trás e subir em uma árvore. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use sua barriga para armazenar comida, para ouvir seu estômago roncar, para mexer a pança e para sentir o gás do refrigerante. Use sua barriga quando estiver on-line, para ficar de olho em alguns sinais e guiar você pelo caminho, dizendo quando as coisas não estiverem bem. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Então pense com sua cabeça, sinta com seu coração, se equilibre com seus braços e ouça sua barriga, on-line. Use suas pernas para correr e chutar, para pular em um pula-pula, para dançar e para pular com suas meias suadas. Use suas pernas quando estiver on-line, para enfrentar os valentões e lembre-se de manter-se em pé, de ser bom com as criaturas pequenas e grandes.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line! Então pense com sua cabeça, sinta com seu coração, se equilibre com seus braços, ouça sua barriga e fique de pé com suas pernas. Da cabeça aos pés, pare, pense. Dos pés até seu nariz, pare, e pense on-line!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Toda vez que você fica online, você deixa uma pegada que pode ser pesquisada, copiada, compartilhada e transmitida, e ela é permanente. Que tipo de pegada digital você está deixando? Que tipo de pegada digital você quer deixar?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: 'Esta lição se chama "Programação em papel quadriculado", e ela é sobre algoritmos. Hoje vamos aprender a escrever programas que mostram uns aos outros como recriar imagens simples em preto e branco, usando apenas setas desenhadas à mão.'
      2:
        image: notes/C2_graph_paper_2.png
        text: Um algoritmo é uma lista de instruções para realizar uma tarefa. Vamos seguir esse conjunto de instruções para fazer a tigela. Os algoritmos são realmente úteis quando você precisa que alguém entenda como fazer alguma coisa.
      3:
        image: notes/C2_graph_paper_3.png
        text: Se você está escrevendo um algoritmo para um computador, você precisa dividi-lo em penas etapas. Então termine essa linha e vá para a próxima, então para a próxima, e você chegará no fim.
      4:
        image: notes/C2_graph_paper_4.png
        text: Eu uso algoritmos no meu trabalho. Se eu escrevo todas as etapas, eu posso recriar a mesma peça novamente, ou eu posso ensinar outra pessoa a fazer isso. Coloque o vidro no forno, faça a fundição, siga o resto das instruções para fazer a tigela. Os algoritmos dão um mapa para fazer alguma coisa.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Aqui, vamos usar o bloco repita para economizar passos quando estivermos programando nosso artista. Já temos alguns blocos, mas eles estão aqui somente para darmos início ao programa.
      2:
        image: notes/C2_artist_loops_2.png
        text: Para repetir esses blocos quatro vezes para desenhar o quadrado inteiro, arrastamos o bloco repita e colocamos os blocos avance e vire à direita dentro dele. Quando clicarmos em Executar, o artista vai repetir esses passos quatro vezes para completar o quadrado.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Um laço é uma repetição de uma atividade. Ao entrar em uma colmeia para inspecionar, eu olho para um quadro e o coloco de volta. Eu repito essa mesma atividade várias vezes. Estou repetindo, fazendo a mesma atividade várias vezes.
      2:
        image: notes/C2_bee_loops_2.png
        text: Este é o bloco repita. Tudo o que você colocar dentro do bloco repita será repetido o número de vezes que você quiser. Por exemplo, nesse nível, ao invés de arrastar os blocos avance e obtenha néctar três vezes, vamos arrastá-los uma vez cada e repetir a ação três vezes. Assim fica fácil!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalmente a programação é feita toda em texto, mas vamos usar o Blockly, que usa blocos visuais que podem ser arrastados e posicionados para escrever programas. Indiretamente, você ainda está criando código. Para começar, vamos criar o código para um programa que vai ajudar esse Angry Bird a andar por um labirinto para chegar até o porco malvado que roubou seus ovos.
      2:
        image: notes/C2_maze_intro_2.png
        text: O Blockly é dividido em três partes principais. À esquerda está o labirinto do pássaro, onde seu programa será executado. As instruções para cada nível estão escritas abaixo do labirinto. Essa área do meio é a caixa de ferramentas, e cada um desses blocos é um comando que o pássaro consegue entender. O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: 'Se eu arrastar um bloco mova para nossa área de trabalho e clicar em "Executar", o que acontece? O pássaro avança um quadradinho na grade. E se eu quiser que o pássaro faça algo depois de avançar um quadradinho? Eu posso adicionar outro bloco ao nosso programa.'
      4:
        image: notes/C2_maze_intro_4.png
        text: 'Eu vou escolher o bloco "vire à direita" e vou arrastá-lo para baixo do meu bloco avance até que a seta amarela apareça. Então, vou soltá-lo e os dois blocos vão se juntar. Quando eu apertar "Executar" novamente, o pássaro vai realizar os comandos que estão empilhados de cima para baixo em nossa área de trabalho.'
      5:
        image: notes/C2_maze_intro_5.png
        text: Se você quiser excluir um bloco, simplesmente remova-o da pilha e arraste-o para a lixeira. Depois de clicar em Executar, você sempre pode clicar no botão Reiniciar para fazer o pássaro voltar para o início. Agora vamos pegar os porcos!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Esta lição se chama Algoritmos da vida real. Os algoritmos descrevem coisas que as pessoas fazem todos os dias. Receitas de cookies e instruções para construir uma casa de passarinho são exemplos de algoritmos da vida cotidiana.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Hoje vamos fazer, criar e testar um algoritmo para um avião de papel. Mas primeiro, precisamos dividir esse grande projeto em pequenas etapas fáceis de seguir. Para criar um avião de papel, precisamos decidir quais passos dar e em que ordem dá-los.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Você vai criar seu algoritmo primeiro cortando as imagens. Em seguida, você vai selecionar as 6 imagens que mostram as etapas necessárias para criar um avião de papel e organizar essas imagens na ordem correta. Depois de colocar tudo em ordem, você vai trocar de algoritmo com outra equipe de alunos para testá-lo e ver se ele funciona. Um algoritmo bem projetado é super importante para criar o melhor avião de papel.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Quando queremos fazer chocolate, há várias etapas grandes nesse processo. Cada uma delas tem seu próprio conjunto de passos menores. E há diferentes receitas ou algoritmos, dependendo do gosto que queremos para o chocolate. Cada etapa é importante, mesmo as menores, então se pularmos uma delas as demais não podem ser concluídas. Criar algoritmos que os outros possam entender é muito importante. É por isso que cada etapa deve ser escrita de forma que o resultado seja sempre o mesmo, não importa quem faça.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Existem alguns novos blocos para experimentar. Há os blocos "quando a seta estiver pressionada" e "mova o personagem". Você pode juntar esses blocos para mover os personagens com as setas do teclado. E há alguns blocos que fazem coisas quando os personagens trombam ou são clicados. Dê uma olhada e divirta-se!'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Hoje vamos fazer programação por revezamento. Isso significa programar sob pressão e depurar os erros que às vezes acontecem quando você trabalha muito rápido ou em equipe. Vamos usar a programação em papel quadriculado para simular a programação e usar corridas de revezamento para simular um prazo de entrega.
      2:
        image: notes/C2_relay_programming_2.png
        text: Na programação por revezamento, as equipes vão competir para terminar um programa em papel quadriculado. Você precisa verificar o trabalho do seu companheiro de time, ou depurá-lo, corrigi-lo se houver um erro, adicionar sua seta, voltar e marcar seu companheiro.
      3:
        image: notes/C2_relay_programming_3.png
        text: Os programadores usam muito a depuração para encontrar e corrigir problemas em seus algoritmos ou códigos. Há várias formas de depurar problemas. Uma das mais fáceis é seguir a execução passo a passo até você encontrar algo errado, e então corrigir o problema.
      4:
        image: notes/C2_relay_programming_4.png
        text: Aqui, estou tentando fazer uma parada de mão para trás, mas eu continuo caindo. Eu passei por cada parte, passo a passo, e descobri onde estava meu erro. Meu treinador me mostrou que eu não estava colocando as mãos na trave corretamente. Então, eu tentei fazer outra parada de mão para trás com minha nova posição de mãos e eu consegui! Fiquei realmente feliz por ter depurado minha parada de mão para trás. Descobrimos o problema! Depurar é encontrar e corrigir problemas. Bom trabalho!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Uma coisa na qual os computadores são muito bons é repetir comandos. Como pessoa, você ficaria realmente entediado se tivesse que fazer a mesma coisa várias vezes em sequência. Mas um computador pode fazer a mesma coisa milhões, ou até mesmo bilhões de vezes, sem ficar entediado e ainda fazer muito bem.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Então, por exemplo, se eu quisesse desejar feliz aniversário a todos no Facebook enviando um e-mail, eu levaria mais de um século para de fato escrever todos os e-mails para todo o mundo. Mas, com apenas algumas linhas de código, eu posso fazer um sistema enviar um e-mail para todos no Facebook desejando um feliz aniversário. É isso que são as repetições, e é por isso que são valiosas, algo que os computadores conseguem fazer muito bem.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Neste exemplo seu objetivo será mover o pasáro para pegar o porco. Agora poderemos usar o bloco repeat para fazer isso de forma muito fácil.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Ou você pode simplesmente dizer ao computador "avance" uma única vez, e então dizer a ele "repita" isso 5 vezes, e ele fará a mesma coisa. Então, para fazer isso, você arrasta seu comando "avance" e o coloca dentro do bloco "repita". Você pode clicar nele e escolher quantas vezes você quer repetir o bloco, para dizer quantos passos você quer que ele avance.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'Outra coisa, você pode colocar quantos comandos quiser dentro do bloco "repita". Então, nesse exemplo, você está dizendo para ele avançar e virar à esquerda, o que ele fará cinco vezes. Certo, bom trabalho e divirta-se!'
