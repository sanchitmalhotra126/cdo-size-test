da:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til din første times kodning! Lad os dykke direkte ind i din første smagsprøve af programmeringen.
      2:
        image: notes/hoc1_2.jpg
        text: Vi vil bruge Blockly, et visuel programmeringssprog hvor du trækker og slipper blokke for at skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: 'Det meste kode er skrevet, men Blockly er visuel. Hver blok svarer til en "rigtig" kodelinje.'
      4:
        image: notes/hoc1_4.jpg
        text: Du vil lære grundprincipperne for computer videnskab, begreber der anvendes overalt fra at lave apps til at kontrollere Mars Rover.
      5:
        image: notes/hoc1_5.jpg
        text: Et program er et sæt af instruktioner som din computer skal følge.
      6:
        image: notes/hoc1_6.jpg
        text: Målet for dit første program er at få en Angry Bird gennem en labyrint og ramme en grøn gris.
      7:
        image: notes/hoc1_7.jpg
        text: Venstre side er labyrinten, hvor programmet køres. Instruktionerne for hver gåde er under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: "Den midterste værktøjskasse har kommandoerne for Angry Bird'en. Du skal bruge disse til at bygge din kode."
      9:
        image: notes/hoc1_9.jpg
        text: Til højre er dit arbejdsområde, hvor du kan trække blokke fra værktøjskasse til at bygge dit program. Hvis du vil slette en blok, skal du trække den til papirkurven i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: |-
          Hver blok er en instruktion. Hvis du trækker en "flyt fremad"-blok til dit arbejdsområde og trykker på "Kør", bevæger Angry Bird'en sig en plads frem i labyrinten.
      11:
        image: notes/hoc1_11.jpg
        text: For at udføre mere end én handling, kan du trække mange blokke til dit arbejdsområde og knytte dem sammen. Fuglen vil udføre kommandoerne fra top til bund.
      12:
        image: notes/hoc1_12.jpg
        text: 'Hvis du kører et program og ønsker at ændre det og prøve igen, skal du trykke på knappen "Nulstil".'
      13:
        image: notes/hoc1_13.jpg
        text: Lad os så ordne de grise!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hej, jeg hedder JR! Hvert racerbilsteam har brug for computereksperter for at vinde. De analyserer data fra bilen for at få den til at køre hurtigere.
      2:
        image: notes/stage5_2.jpg
        text: I disse gåder, vil du være en kunstner, der tegner en linje bag dem overalt de går.
      3:
        image: notes/stage5_3.jpg
        text: 'Denne blok siger "Flyt fremad med 100 pixel." Pixels er bare virkelig små prikker på din skærm.'
      4:
        image: notes/stage5_4.jpg
        text: 'Denne blok siger "Drej 90 grader til højre." Dette vil dreje din kunstner, på samme måde som "drej" blokken i labyrint gåderne.'
      5:
        image: notes/stage5_5.jpg
        text: Klik på pilen i en af disse blokke for at ændre hvor meget kunstneren bevæger sig fremad eller vender. Leg med det for at blive fortrolig med disse nye blokke.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hej, jeg er Paola! I disse gåder er du en landmand, der skal få hendes område helt fladt, så der kan plantes afgrøder.
      2:
        image: notes/stage9_2.jpg
        text: Du skal hjælpe hende med at fjerne alle bunker af snavs og udfylde alle hullerne.
      3:
        image: notes/stage9_3.jpg
        text: De nye blokke fjerner 1 skovlfuld snavs fra en bunke og fylder i 1 skovlfuld snavs i et hul.
      4:
        image: notes/stage9_4.jpg
        text: Bunkerne og hullerne er forskellige størrelser, så du skal fortælle landmanden hvor mange skovlfulde der skal bruges.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hej, jeg er Katie! En af de mest spændende ting ved datalogi er, at computerprogrammer kan være interaktive.
      2:
        image: notes/flappy02.jpg
        text: Hver gang der klikkes, trykkes eller skriver på en computer eller telefon, indtræffer en hændelse. og der er noget kode som bestemmer hvad der skal ske når hændelsen indtræffer.
      3:
        image: notes/flappy03.jpg
        text: 'For eksempel, du kunne have en HÆNDELSESHÅNDTERING, der siger "når der klikkes på musen, spil en lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du nogensinde hørt om spillet FlappyBird? Ved hjælp af hændelseshandlere, vil vi lære at programmere vores egen version af FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Den kode, du kommer til at skrive indebærer at trække og slippe blokke, der repræsenterer kommandoer til computeren. Under kølerhjelmen, er hver af disse blokke repræsenteret af reel kode.
      6:
        image: notes/flappy06.jpg
        text: 'Hvis du tager et kig på arbejdsområdet, der er nogle grønne blokke, der er udfyldt for dig - disse er "hændelseshåndteringer" '
      7:
        image: notes/flappy07.jpg
        text: 'Hvis du vil få fuglen til at FLAPPE når du klikker med musen, kan du gøre det ved at knytte "flap"-blokken til den passende hændelseshåndtering. Så vil fuglen flappe hver gang du klikker med musen i dit spil.'
      8:
        image: notes/flappy08.jpg
        text: I hver opgave i denne aktivitet vil vi introducere nye typer af hændelser som grønne blokke på arbejdsområdet, og du kan vælge passende blokke at tilføje som reaktion på disse hændelser.
      9:
        image: notes/flappy09.jpg
        text: 'Når du ser en fald-ned pil som denne betyder det, at du kan ændre indstillinger - f.eks. hvilken lyd der afspilles når flappy rammer jorden.'
      10:
        image: notes/flappy10.jpg
        text: I den sidste opgave vil du kunne lave dit eget spil og dele det med dine venner. God fornøjelse!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hej, jeg er Mark! Lad os lære om løkker. Ved hjælp af løkker kan du fortælle en computer at den skal gentage et sæt af handlinger, igen og igen, tusinder eller endda milliarder af gange.
      2:
        image: notes/hoc2_2.jpg
        text: I denne opgave vil vi flytte fuglen 5 skridt fremad for at komme hen til grisen.
      3:
        image: notes/hoc2_3.jpg
        text: 'Vi kan bruge den nye "gentag" blok til at hjælpe os.'
      4:
        image: notes/hoc2_4.jpg
        text: 'I stedet for at trække 5 "Flyt fremad" blokke ud...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Kan vi sætte "Flyt fremad" blokken ind i "gentag" blokken og skrive et tal i blokken for at fortælle hvor mange gange det skal gentages.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er vigtigt: du kan sætte mere end én kommando ind i en "gentag" blok.'
      7:
        image: notes/hoc2_7.jpg
        text: 'God fornøjelse med at bruge din nye "gentag" blok!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hej, jeg er Chris. Før jeg kom til Miami Heat, gik jeg på Georgia Tech og studerede Computer Videnskab. Lad os prøve vores nye blok, "gentag indtil" blokken.'
      2:
        image: notes/hoc3_2.jpg
        text: "Hvad hvis vi ikke  vidste hvor langt Angry Bird'en var nødt til at flytte for at komme til grisen?"
      3:
        image: notes/hoc3_3.jpg
        text: |-
          Hvis vi sætter en "Flyt fremad" blok inden i "Gentag indtil"-blokken, så vil Angry Bird'en bevæge sig fremad indtil den når til grisen (eller styrter ind i en væg).
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er vigtigt: ligesom før, vi kan sætte flere blokke inden i "gentag indtil" blokken, og de vil alle blive gentaget.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hej, jeg hedder Bill! Lad os lære et ny grundlæggende begreb: "hvis"-sætninger. Dette er, hvordan computere træffer beslutninger.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du bruger "hvis"-sætninger selv hver dag. Før du går udenfor hver morgen, siger du, HVIS det regner udenfor, så har jeg brug for at tage min jakke på.'
      3:
        image: notes/hoc4_3.jpg
        text: Vi kan bede zombien kontrollere, om der er en sti til venstre, og hvis han finder en sti til venstre, kan vi få ham til at dreje i retningen.
      4:
        image: notes/hoc4_4.jpg
        text: 'For at skrive koden til dette, lad os trække vores "hvis" blok ud og sætte en "venstresving" blok inde i den.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Nu, hvis vi sætter en "gå frem" blok over det og en "gentag" blok omkring alt, så hver gang zombien bevæger sig, vil han kontrollere, om der er en vej til venstre og dreje. Kommandoen "Gentag" er kritisk, for at kontrollere om der skal drejes for hvert skridt.'
      6:
        image: notes/hoc4_6.jpg
        text: Hvis-sætninger er rigtigt vigtige i computer videnskab. Et af de første programmer jeg skrev var et kryds og bolle spil, og der var en hvis-sætning, der sagde, at hvis den anden person er ved at vinde, bloker den plads, der lader dem vinde.
      7:
        image: notes/hoc4_7.jpg
        text: 'God fornøjelse med at bruge "hvis" blokken!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hej, jeg hedder Saloni. Jeg bruger programmering til at løse problemer inden for sundhed og medicin. Lad os lære om "hvis-ellers"-blokken. Den ligner "hvis"-blokken, men den har en ekstra del i slutningen, der siger "ellers".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Hvis jeg placerer en "flyt fremad"-blok hvor der står "udfør" og en "drej til venstre"-blok hvor der står "ellers", betyder det at zombien vil vælge mellem to muligheder. HVIS der er en sti forude, vil zombien vil bevæge sig fremad, og ELLERS (altså hvis der ikke er en sti forude), vil zombien dreje til venstre.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Ligesom med "hvis"-blokken, kan vi sætte "hvis-ellers" blokke inden i en "gentag"-blok,  så zombien fortsætter med at bevæge sig fremad, og med "hvis-ellers"-blokken også holder øje med om der er et sted at dreje.'
      4:
        image: notes/hoc5_4.jpg
        text: Nå, få så de zombier hen hvor de hører hjemme!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: En hvis-ellers sætning er et valg mellem to ting. Lad os se, hvordan vi kan bruge en hvis-ellers sætning med vores ven, egernet Scrat.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Denne blok ligner en "hvis"-blok, men der er en ekstra del i bunden, der siger "ellers". Hvis jeg sætter en "flyt fremad"-blok hvor der står "udfør" og en "drej til venstre"-blok hvor der står "ellers", så betyder det at egernet Scrat går videre, hvis der er en sti forude (fremad). Hvis der ikke er en sti forude, vil Scrat dreje til venstre.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Det er at træffe et valg og udføre een af to handlinger baseret på dette valg. Og ligesom "hvis"-blokke, kan du sætte "hvis-ellers"-blokke indeni "gentag"-blokke.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Lad os nu hjælpe egernet Scrat med at finde agern!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hej, jeg er Brina, en ingeniør på Instagram. En funktion er visse linjer kode, som du vil bruge igen og igen, så i stedet for at skrive koden ud hver gang, kan du bare bruge én blok.
      2:
        image: notes/stage13_2.jpg
        text: Vi skal lære at definere funktioner. Funktions definitioner har en stjerne i hjørnet. Funktionens navn er skrevet på den øverste linje.
      3:
        image: notes/stage13_3.jpg
        text: 'De blokke, der er inde i definitionen fortæller os, hvad den gør. Så denne funktions definition hedder "fyld 5" og den består af en "gentag" blok og en "fyld" blok.'
      4:
        image: notes/stage13_4.jpg
        text: 'Definitionen hæfter sig på arbejdsområdet, men vores landmand vil ikke køre funktionen indtil vi trækker vores "fyld 5" funktionsblok ud fra funktioneskategorien.'
      5:
        image: notes/stage13_5.jpg
        text: 'Lad os putte "fun" tilbage ind i "FUNktion!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hej, Jeg er Makinde! Lad os lære om "imens" blokken. '
      2:
        image: notes/stage9_6.jpg
        text: '"While blokken" vil udføre hvad end du placerer indeni den, så længe udtrykket i toppen er sandt.'
      3:
        image: notes/stage9_7.jpg
        text: For eksempel, hvis landmanden står på en bunke, vil hun fortsætte med at fjerne 1 skovlfuld, så længe der er en bunke under hende.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hej, jeg er Trina, og jeg arbejder for Pixar. Jeg har arbejdet på en masse film, blandt andet Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Dette er vores nye "tæller" loop. Det vil udføre handlinger igen og igen og du kan ændre handlinger lidt hver gang.'
      3:
        image: notes/stage11_3.jpg
        text: 'I dette eksempel siger vores "tæller" løkke "tæl fra 50 til 90 med 10" og inde i det, har vi vores "tegn en firkant" blok. Træk "tæller" blokket fra afsnittet "Variabler" til "længde" stedet.'
      4:
        image: notes/stage11_4.jpg
        text: Dette betyder, at vores kunstner vil tegne en firkant, der har 50 pixel længde sider, så vil tilføje 10 til det og tegne en firkant med 60 pixel længde sider. Så vil det blive ved med at tilføje 10 og tegne firkanter, indtil det når 90. Så vil vi have kvadrater af 50, 60, 70, 80 og 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hej! Jeg hedder Janete, og jeg er ingeniør hos Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Hvad hvis vi ønsker at tegne en masse trekanter og give dem forskellige størrelser?
      3:
        image: notes/stage15_3.jpg
        text: Vi kunne skrive al den kode i hånden eller vi kan bruge en funktion med parametre.
      4:
        image: notes/stage15_4.jpg
        text: 'For at gøre dette, skal du klikke på den blå stjerne på "tegn en trekant" funktions-definition. Træk derefter "indtast navn" til "input" blokken.'
      5:
        image: notes/stage15_5.jpg
        text: 'Hvis du så skriver "længde" på det sted, hvor der står "x" og trykker "Enter" skal du oprette en længde input til din funktion.'
      6:
        image: notes/stage15_6.jpg
        text: 'Klik på stjernen. Nu du ønsker at klikke på kategorien variabler og trække "længde" blokken til "Flyt fremad" blok af din funktions-definition. Og træk den gamle nummer blok væk.'
      7:
        image: notes/stage15_7.jpg
        text: 'For at bruge din funktion med parametre, skal du klikke på kategorien funktioner og trække din "tegn en trekant med længde" funktion ud.'
      8:
        image: notes/stage15_8.jpg
        text: Nu kan du bruge matematik blokken til at indtaste forskellige tal for at tegne trekanter med forskellige størrelser.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Tillykke! Med den sidste opgave du har løst, skrev du kode, der kan fortælle enhver robot hvordan den kan finde vej gennem en labyrint eller tunnel af enhver længde, uanset om det er en zombie, en fugl, en Mars robot eller endda en selvkørende bil.
      2:
        image: notes/hoc6_2.jpg
        text: De grundlæggende begreber, du har brugt er kernen i ethvert program eller app du nogensinde kommer til at prøve. Vi lærte om gentag løkker, gentag indtil sætninger, hvis sætninger, og hvis-ellers sætninger.
      3:
        image: notes/hoc6_3.jpg
        text: Hvis du kunne lide din første times kodning, så besøg code.org for at fortsætte din uddannelse i datalogi! Når du har fuldført vores 20 timers kursus, har du lært grundlæggende programmering, og kan begynde at lære at skrive apps til din telefon, robot instruktioner, spil, eller noget helt andet.
      4:
        image: notes/hoc6_4.jpg
        text: Teknologien ændrer alt hvad vi gør og det er lige meget om du er ung eller gammel. Programmering er sjovt, kreativt, og alle kan lære det!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Vis noter kommer snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hej, jeg hedder Lyndsey. Jeg er model, skuespiller, og skriver mine egne apps. Lad os bruge kode til at udforske isens magi og skønhed, sammen med Anna og Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Du vil skabe snefnug og mønstre mens du skøjter og laver et eventyrligt vinterlandskab, som du kan dele med dine venner.
      3:
        image: notes/frozen1_3.jpg
        text: I den næste time vil du lære det grundlæggende i, hvordan man programmerer. Traditionel programmering er normalt tekst-baseret, men vi vil bruge Blockly, som bruger grafiske blokke, som du kan trække og slippe for at skrive programmer. Også universitetsstuderende lærer det grundlæggende sådan. I baggrunden opretter du stadig kode.
      4:
        image: notes/frozen1_4.jpg
        text: Et program er et sæt af instruktioner, der fortæller en computer hvad de skal gøre. Lad os bygge kode eller et program, der kan hjælpe Elsa med at skøjte en simpel linje. Det vil vi senere bruge til at oprette mere komplekse mønstre.
      5:
        image: notes/frozen1_5.jpg
        text: 'Skærmen er opdelt i tre hoveddele. Til venstre ser du isen, hvor du kan se dit program blive udført, når du klikke på "Kør". Instruktioner for hvert trin finder du lige under.'
      6:
        image: notes/frozen1_6.jpg
        text: I midten finder du værktøjskassen, og hver af blokkene du finder her, svarer til en handling, Elsa og Anna kan udføre.
      7:
        image: notes/frozen1_7.jpg
        text: 'Det hvide område til højre kaldes arbejdsområdet, og det er her vi bygger programmet. For at flytte rundt på isen, skal du bruge "flyt fremad"-blokken.'
      8:
        image: notes/frozen1_8.jpg
        text: 'Her siger "flyt fremad"-blokken "flyt fremad med 100 pixels". Hvad sker der, når du klikker på "Kør"? Elsa flytter sig præcis 100 pixels fremad. Tænk på pixels som bittesmå firkanter på din computerskærm.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Den anden blok, vi har i denne øvelse siger "drej til højre med 90 grader." Og når vi bruger denne "drej til højre"-blok, vil Elsa slå et sving med en bestemt vinkel. Du kan selv bestemme hvor langt du vil have Elsa til at dreje. Vinklen måles fra stien foran Elsa. Så det her er et 90 graders sving. Og det her er et 120 graders sving.'
      10:
        image: notes/frozen1_10.jpg
        text: Husk, du kan ændre antallet af pixels og grader ved at klikke på pilene ved siden af dem.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Hej, jeg hedder Paola. Computere er rigtig gode til at gentage handlinger. Du kan tælle til 10, 20 eller 100. Men en computer kan tælle til en milliard eller en trillion. Uden at kede sig, og det vil kun tage et par sekunder. Uanset om det er at tælle, at lave en tegning, eller noget helt andet - så kan computere gentage ting hundredvis eller endda milliarder af gange.'
      2:
        image: notes/frozen2_2.jpg
        text: 'I programmering kalder vi det at gentage ting en løkke. En løkke er altså at gentage din kode igen og igen. I den næste opgave er dit mål, at hjælpe Anna med at lave et kvadrat med "gentag"-blokken.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Alle blokke, som du sætter ind i "gentag" blokken vil blive gentaget i den rækkefølge de er placeret, lige så mange gange du ønsker det.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Hvis du vil tegne et kvadrat, kan du bruge "flyt fremad"- og "drej til højre"-blokkene fire gange. Men en lettere måde er, at skrive "flyt fremad" og "drej til højre med 90 grader " een gang - og så fortælle computeren, at den skal gentage dette fire gange. For at kunne gøre det, skal du sætte "flyt fremad"- og "drej til højre"-blokkene ind i en "gentag"-blok.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Husk at du kan ændre antallet af gentagelser i "gentag"-blokken, og den vil gentage hvad der er indeni blokken, det antal gange du har angivet.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hej, jeg hedder Chris Bosh. Jeg er en professionel basketballspiller, men har også programmeret i skolen.
      2:
        image: notes/frozen3_2.jpg
        text: Noget af det vigtigste i programmering er, hvordan man definerer nye kommandoer. Hvordan du tilføjer dine egne ord til et computersprog. De fleste computersprog har kun omkring 100 ord eller kommandoer. Og kunsten og magien er, at definere sine egne nye ord ud fra disse byggesten.
      3:
        image: notes/frozen3_3.jpg
        text: Når du først har lært en computer, hvordan den skal udføre en handling, ved hjælp af en bestemt sekvens af kommandoer, så kan du lave dit eget navn for denne handling, så det er nemt at gentage det senere. Når du definerer din egen kommando og giver den et navn, så kaldes det en funktion.
      4:
        image: notes/frozen3_4.jpg
        text: Hej, jeg hedder Jess. Når du programmerer med blokke, vil du bruge funktioner, når der er et sæt af handlinger, du gerne vil bruge masser af gange. For eksempel, har du skrevet kode til at skabe et kvadrat.
      5:
        image: notes/frozen3_5.jpg
        text: 'Du kan definere dette som en funktion kaldet "opret kvadrat". '
      6:
        image: notes/frozen3_6.jpg
        text: Du har nu en ny blok, du kan bruge flere gange til at oprette flere kvadrater.
      7:
        image: notes/frozen3_7.jpg
        text: Enkle former kan bruges til at oprette mere komplekse mønstre. I den næste øvelse er den kode, du for nylig skrev til at oprette en cirkel tilgængelig for dig som en ny funktion, der kan lave cirkler af forskellige størrelser. Kan du bruge det til at hjælpe Elsa med at skabe mere indviklede og smukke mønstre i sneen?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Indtil nu har du lavet en animation eller en historie, der gør præcis det samme, hver gang du kører den. Nu kan du lave et interaktivt spil, som du rent faktisk kan spille.
      2:
        image: notes/playlab_2.png
        text: 'Her er "når pilen"- og "flyt figur"-blokkene. Du kan sætte disse blokke sammen for at kunne flytte figurerne rundt med piletasterne.'
      3:
        image: notes/playlab_3.png
        text: Og der er nogle blokke, der gør noget når figurer kolliderer eller der klikkes på dem. Tjek dem ud og hav det sjovt!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vi kommer til at oprette spil ved hjælp af Play Lab. Gode spil har en historie, og enhver historie har figurer. Vi vil lære hvordan vi får figurer som hekse, aliens, og dyr til at tale, flytte sig og interagere med hinanden. Når du er færdig med denne øvelse, kan du opbygge et spil fra bunden og dele det med dine venner.
      2:
        image: notes/playlab_intro_2.png
        text: Skærmen er opdelt i tre hoveddele. Til venstre er den plads hvor dit program vil køre. Instruktioner til hvert trin er skrevet under.
      3:
        image: notes/playlab_intro_3.png
        text: Det midterste område er værktøjskassen, og hver af disse blokke er et stykke kode. Det hvide område til højre kaldes arbejdsområdet og det er, hvor vi vil bygge vores program.
      4:
        image: notes/playlab_intro_4.png
        text: 'Til at begynde med, skal du knytte dine blokke til den orange "når kør" blok. Du kan sammenkæde flere blokke ved at trække dem hen til hinanden, indtil du ser den gule linje. Derefter vil de snappe sammen af sig selv.'
      5:
        image: notes/playlab_intro_5.png
        text: 'I denne første øvelse, er vores figur en pingvin og vi vil få den til at sige "Hej!" ved at trække "sig"-blokken ud i arbejdsområdet, forbinde den til "når programmet kører"-blokken, og skrive "Hej!" i den. Vi kan også flytte pingvinen ved hjælp af "flyt til højre" og "flyt til venstre" blokke. Når du har placeret dine blokke, så klik på knappen "kør" for at se, hvad du har programmeret.'
      6:
        image: notes/playlab_intro_6.png
        text: Kom i gang og til sidst vil du kunne lave et spil med mange slags figurer som kan interagere, blive glade eller triste, få point, eller kaste ildkugler eller endda trylle hinanden væk. Det er alt sammen op til dig, og det spil som du vil lave.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nu skal vi lære om noget som alle spilprogrammører bruger hver eneste dag. Det kaldes hændelser eller events. En hændelse fortæller programmet at det skal lytte efter om noget sker. Når netop den hændelse sker, udføres en handling.
      2:
        image: notes/playlab_events_2.png
        text: Eksempler på hændelser er at lytte efter et museklik, en piletast eller at der tappes på skærmen.
      3:
        image: notes/playlab_events_3.png
        text: 'Her skal vi få rumrobotten til at hilse på jordboerene når en spiller klikker på ham. Vi bruger "ved klik"-blokken og knytter "sig"-blokken til den. Når spilleren klikker på rumrobotten vil alt knyttet til denne "ved klikk"-hændelsesblok blive udført. Hvad siger dit rumvæsen?'
      4:
        image: notes/playlab_events_4.png
        text: 'Der findes også "når pil"-blokke. Hvis du knytter "flyt"-blokke til disse, kan du flytte dine figurer op, ned, til venstre eller højre. Lidt efter lidt bliver dit spil mere interaktivt.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Dette er "for evigt"-blokken. Alt i denne blok sker altid i spillet.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Hvis vi ønsker at en figur skal gøre noget igen og igen, uden at spilleren behøver at gøre noget, så sætter vi det ind i "for evigt"-blokken.'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: 'I den næste øvelse er det vores mål at hjælpe troldmanden med at patruljere langs kongerigets grænse, uafbrudt fra venstre til højre. Hvis du lærer at bruge at bruge "gentag" og "for evigt" kommandoer, vil det spare dig masser af tid når du koder dine egne spil.'
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: "These are jump blocks. When you use these, your artist moves but doesn't draw, so use these to jump to the next grey line."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Aren't bees super cool? In this next set of puzzles, your goal is to help the bee get to the flowers and get nectar from the flowers and fly over to the honeycomb to make honey. You'll need to use the "get nectar" and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We know how much nectar is in the red flowers, by the little number in the corner. So be sure to get all the nectar from the flower before you move forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: |-
          If you're able to get all the nectar and make all the honey, you succeed and go to the next level. Otherwise, you need to try this puzzle again. Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "A loop is a repetition of activity. So going into a hive to inspect, I look at a frame and then I put it back, so I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          In this level, we want the bee to collect three nectars from the flower. Instead of using three "get nectar" blocks, you're going to use the repeat block to get nectar three times. Hit "Run" and see if you got it right. Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "This lesson is called the big event. It's all about how we can control our programs and actually change the way a program runs on the fly using events, like the push of a button or the click of a mouse."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "For this lesson, you'll be controlled with a paper remote control. It's just like a real-live video game."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "An event is an action  that causes something to happen. It's like when you click the button on a mouse and a webpage loads. That's an event. When you touch your screen on a tablet to scroll, that's an event also. Events are a great way of letting the user direct your program whenever they need or want to."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Things happen that we all respond to. We feel hungry and we go to the fridge. We hear the mailman come and he puts our mail in the mailbox  and then we go get our mail. Those are just like the events of pushing a button or moving a joystick. They are something that happens that triggers us to do something.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: |-
          In video games, there's an event called "Update" and it happens 30 or 60 times a second. For videogame programmers that's almost more important as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |-
          The main event we're watching for is that "Update" tick happening. And then we check the joystick in the tick. So we say, "Oh, has somebody pushed the button this frame? Yes or no?" Without events, the player couldn't move, you couldn't jump, you wouldn't be able to control what's going on. The videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "In sand sculpture you've got to know that failure is part of the program. But if you're persist, it's just going to get nothing but better and more exciting for you.Persistence is the name of the game. Stay with it, you'll love it."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "This lesson is called building a foundation. In this lesson, we'll work on a task that is meant to be really difficult. You will figure out how to make a structure at least as tall as one of these cups and it's got to be strong enough to hold the weight of a book."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "There might be times that our creation doesn't work out. There might be times that we get frusrated and want to give up. There might be a lot of those moments. But if we keep on trying, give it our best shot over and over again, then we're sure to get it before long."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Persistence is all about hanging in there when you really want to give up. If you want to create something new and different, there's going to be a lot of failures along the way."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "The trick to persistence is choosing to keep on going and learn from your failures instead of quitting because you're frustrated. Frustration actually just means there's something wonderful around the corner. So don't quit before you get to it. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the internet. The internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the internet I talk to peeople I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the internet had smellorama!" I can talk to different people on the internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Indtil nu har du lavet en animation eller en historie, der gør præcis det samme, hver gang du kører den. Nu kan du lave et interaktivt spil, som du rent faktisk kan spille.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: |-
          There are some new blocks to try out. There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys. And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
