ro:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bine ai venit la prima ta oră de cod! Hai să pătrundem direct în prima ta încercare de programare.
      2:
        image: notes/hoc1_2.jpg
        text: Vom folosi Blockly, un limbaj de programare vizuală, în care muți blocuri cu drag și drop pentru a scrie un cod.
      3:
        image: notes/hoc1_3.jpg
        text: 'Majoritatea codului e scris cu tastatura, dar Blockly e vizual. Fiecare bloc corespunde unei linii de cod "real".'
      4:
        image: notes/hoc1_4.jpg
        text: 'Vei învăța bazele informaticii, concepte care sunt folosite în orice domeniu de la crearea de aplicații până la controlul roboților trimiși pe Marte. '
      5:
        image: notes/hoc1_5.jpg
        text: Un program este un set de instrucțiuni pe care calculatorul tău să le urmeze.
      6:
        image: notes/hoc1_6.jpg
        text: Scopul primului tău program este să treci o Pasăre Furioasă printr-un labirint care să ajungă să lovească un Porcușor Verde.
      7:
        image: notes/hoc1_7.jpg
        text: Partea stângă este labirintul în care programul se execută. Instrucțiunile pentru fiecare puzzle se găsesc sub labirint.
      8:
        image: notes/hoc1_8.jpg
        text: Cutia de instrumente din mijloc conține comenzile pentru Pasărea Furioasă. Le vei utiliza pe acestea pentru a-ți construi codul.
      9:
        image: notes/hoc1_9.jpg
        text: În dreapta este spațiul tău de lucru unde vei trage blocuri din cutia de instrumente pentru a îți construi programul. Ca să ștergi un bloc trage-l la gunoi în colț.
      10:
        image: notes/hoc1_10.jpg
        text: 'Fiecare bloc este o instrucție. Dacă tragi un bloc de tip "mută înainte" către spațiul tău de lucru și apeși pe "Execută Programul" pasărea se mută cu un spațiu pe labirint.'
      11:
        image: notes/hoc1_11.jpg
        text: Pentru a face mai multe acţiuni, puteţi trage mai multe blocuri în spaţiul de lucru atașându-le împreună. Pasărea va executa comenzile de sus în jos.
      12:
        image: notes/hoc1_12.jpg
        text: 'Dacă rulezi un program și vrei să îl repari pentru ca apoi să-l încerci din nou, apasă pe butonul "Reset".'
      13:
        image: notes/hoc1_13.jpg
        text: Hai să prindem porcii!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Bună, eu sunt JR! Fiecare echipa de cursă auto are nevoie de informaticieni pentru a câştiga. Ei analizează datele din maşină pentru a o face să meargă mai repede.
      2:
        image: notes/stage5_2.jpg
        text: În aceste puzzle-uri, vei fi un artist care desenează o linie în spatele lor indiferent unde ei merg.
      3:
        image: notes/stage5_3.jpg
        text: 'Acest bloc spune "mută înainte cu 100 pixeli." Pixelii sunt de fapt doar puncte foarte mici pe ecran.'
      4:
        image: notes/stage5_4.jpg
        text: 'Acest bloc spune "întoarce la dreapta cu 90 de grade." Acesta va roti artistul tău asemenea blocurilor "întoarce" din puzzle-urile de tip labirint.'
      5:
        image: notes/stage5_5.jpg
        text: Dă clic pe săgeată în oricare din aceste blocuri în așa fel încât să modifici distanța cu care artistul va înainta sau unghiul cu care se va întoarce într-o direcție sau alta.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Bună, eu sunt Paula! În aceste puzzle-uri, tu ești un fermier care trebuie să-și niveleze terenul astfel încât să devină complet plat pentru a începe plantarea culturilor.
      2:
        image: notes/stage9_2.jpg
        text: Trebuie să o ajuți să elimine toate grămezile de murdărie și să umple toate găurile.
      3:
        image: notes/stage9_3.jpg
        text: Noile blocuri elimină 1 lopată de murdărie dintr-o grămadă și umple o altă gaură cu 1 lopată de murdărie.
      4:
        image: notes/stage9_4.jpg
        text: Grămezile și găurile sunt de mărimi diferite, deci va trebui să-i spui fermierului câte lopeți să folosească.
    flappy_intro:
      1:
        image: note/flappy01.jpg
        text: Bună, eu sunt Katie! Unul dintre lucrurile cele mai incitante despre informatică este ca un program de calculator poate fi interactiv.
      2:
        image: note/flappy02.jpg
        text: Oricând cineva dă clic sau apasă sau tastează de la un calculator sau telefon, aceasta generează un EVENIMENT, şi pe undeva există un cod care decide ce să facă atunci când are loc un eveniment.
      3:
        image: note/flappy03.jpg
        text: 'De exemplu, ai putea avea un GESTIONAR de EVENIMENT care spune "Când se face clic cu mouse-ul, redă un sunet" '
      4:
        image: note/flappy04.jpg
        text: Ai auzit vreodată de jocul FlappyBird? Prin utilizarea gestionărilor de Eveniment, vom învăţa să programăm singuri versiunea noastră personalizată de FlappyBird!
      5:
        image: note/flappy05.jpg
        text: Codul pe care îl vei scrie presupune glisarea şi plasarea blocurilor care reprezintă comenzi pentru calculator. Sub capotă, fiecare din aceste blocuri este reprezentat de un cod propriu-zis.
      6:
        image: note/flappy06.jpg
        text: 'Dacă te uiți la spațiul de lucru, există unele blocuri verzi, care sunt completate pentru tine - acestea sunt "gestionari de eveniment" '
      7:
        image: note/flappy07.jpg
        text: 'Dacă dorești ca pasăre să ZBOARE când dai clic cu mouse-ul, poţi face asta ataşând blocul "ZBOARĂ" la gestionarul de eveniment corespunzătoare, şi de acum când te joci, ori de câte ori faci clic cu mouse-ul, pasărea va zbura.'
      8:
        image: note/flappy08.jpg
        text: În fiecare puzzle din cadrul acestei activități vom introduce noi tipuri de evenimente sub forma blocurilor verzi din spațiul de lucru, şi tu poţi alege blocurile adecvate pe care le vei adauga în răspuns la aceste evenimente.
      9:
        image: note/flappy09.jpg
        text: 'Când vezi o săgeată de tip "dropdown" ca aceasta, înseamnă că poţi schimba setările - cum ar fi, de exemplu, ce sunet să se scoată atunci când flappy atinge pământul.'
      10:
        image: note/flappy10.jpg
        text: În puzzle-ul final vei fi capabil să-ți creezi propriul joc şi să-l distribui și prietenilor tăi. Distracţie plăcută!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Salut, sunt Mark! Hai să învățăm despre bucle. Folosind bucle îi poți spune unui computer să repete orice set de acțiuni din nou și din nou, de mii sau chiar de miliarde de ori.
      2:
        image: notes/hoc2_2.jpg
        text: În acest puzzle, vrem să facem pasărea să se mute înainte 5 spații pentru a ajunge la porcușor.
      3:
        image: notes/hoc2_3.jpg
        text: 'Putem să folosim noul bloc "repetă" ca să ne ajute.'
      4:
        image: notes/hoc2_4.jpg
        text: 'În loc să tragem 5 blocuri de tip "mută înainte"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Putem să așezăm blocul "mută înainte" în interiorul blocului "repetă" și să scriem un număr în bloc ca să îi spunem de câte ori să repete acțiunea.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Și asta este important: poți să pui mai mult de o singură comandă în interiorul unui bloc "repetă".'
      7:
        image: notes/hoc2_7.jpg
        text: 'Bucurați-vă de folosirea noului bloc "repetă"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Salut, sunt Chris. Înainte să intru la Miami Heat, am fost la Georgia Tech ca să invăţ informatică. Să încercăm noul nostru bloc, blocul "repetaţi până când".'
      2:
        image: notes/hoc3_2.jpg
        text: Cum ar fi dacă nu am ști cât de departe trebuie pasărea să se mute pentru a ajunge la porcușor?
      3:
        image: notes/hoc3_3.jpg
        text: 'Dacă punem un bloc "mută înainte" în interiorul blocului "repetă până", pasărea se va muta înainte PÂNĂ va ajunge la porcușor (sau se lovește de un perete).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Şi asta este important: la fel ca înainte, putem pune mai multe blocuri înăuntrul blocului "repetă până când" şi toate se vor repeta.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Salut, sunt Bill! Hai să învățăm un nou concept fundamental: Afirmațile de tip "Dacă." Acesta este felul în care computerele iau decizii.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Voi utilizați afirmații de tip "Dacă" în fiecare zi. Înainte să mergi afară în fiecare dimineață spui că DACĂ plouă afară, am nevoie să port o geacă.'
      3:
        image: notes/hoc4_3.jpg
        text: Putem să-i spunem zombie-ului să verifice DACĂ este o cale către stânga, și dacă găsește o cale către stânga, putem să îl facem să se întoarcă în acea direcție.
      4:
        image: notes/hoc4_4.jpg
        text: 'Ca să scriem codul pentru asta, hai să scoatem afară blocul nostru "dacă" și să punem un bloc "întoarce la stânga" în interiorul său.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Acum, dacă punem un bloc "mută înainte" deasupra lui și un bloc "repetă" în jurul tuturor obiectelor, de fiecare dată când un zombie se va mișca, va verifica dacă este o cale către stânga și se va întoarce.  Comanda "repetă" este critică, ca să verifice dacă există o cale alternativă la fiecare pas.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Afirmațiile de tip dacă sunt foarte importante în informatică. Unul din primele programe pe care le-am scris a fost un joc x și 0, și exista o afirmație de tipul "dacă", care spunea în felul următor programului de execuție : Dacă adversarul este pe cale să câștige, blochează locul care îi va permite să câștige.'
      7:
        image: notes/hoc4_7.jpg
        text: 'Distrează-te folosind blocul "dacă"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Salut, numele meu este Saloni. Eu folosesc informatica să pot ajuta și găsi soluții în medicină și sănătate. Hai să învățăm  despre blocul "dacă altfel". Arată ca blocul "dacă", dar are o parte în plus la sfârșit care spune "altfel".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Dacă pun un bloc "mută înainte" în locul unde spune "execută" și un bloc "întoarce la stânga" unde spune "altfel" asta înseamnă că zombie-ul va alege între 2 opțiuni. DACĂ există o cale în față, zombie-ul se va mișca înainte și ALTFEL (nu există o cale înainte), zombie-ul se va întoarce la stânga.'
      3:
        image: notes/hoc5_3.jpg
        text: 'La fel ca blocul "dacă", putem pune blocuri "dacă altfel" în interiorul blocului "repetare", astfel încât zombie continuă să se mişte şi blocul "dacă altfel" va continua să verifice dacă există o posibilitate de întoarcere.'
      4:
        image: notes/hoc5_4.jpg
        text: Acum , condu-i pe zombie unde le este locul!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: O instrucţiune dacă-altfel este o decizie între două lucruri. Hai să vedem cum putem folosi o instrucţiune dacă-altfel cu amicul nostru veverița Scrat.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Acest bloc arată la fel ca blocul "dacă", dar există o ramură suplimentară în partea de jos care spune "altfel". Dacă punem un bloc "mută înainte" unde scrie "execută" şi un bloc "întoarce la stânga" unde scrie "altfel",  atunci veverița Scrat va merge înainte dacă este posibil. Dacă nu există drum înainte, Scrat se va întoarce la stânga.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Înseamnă luarea unei decizii și a face una dintre două acţiuni pe baza acelei decizii. Şi la fel ca blocurile "dacă", puteţi pune blocuri "dacă-altfel" în interiorul blocurilor "repetare".'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Acum, haideţi să o ajutăm pe veverița Scrat să obțină acea ghindă!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Salut, eu sunt Brina, inginer la Instagram. O funcţie este alcătuită din anumite linii de cod pe care vrei să o folosești din nou și din nou, astfel încât în loc să scrii codul de fiecare dată, poți folosi doar un singur bloc.
      2:
        image: notes/stage13_2.jpg
        text: Vom învață cum să definim funcții. Definițiile funcțiilor au o stea în colț. Numele funcției este scris pe prima linie de sus.
      3:
        image: notes/stage13_3.jpg
        text: 'Blocuri care merg în interiorul definiției ne spun ce face aceasta. Deci această definiție a funcției se numește "umple 5" și aceasta este formată dintr-un un bloc "repetă" și un bloc "umple".'
      4:
        image: notes/stage13_4.jpg
        text: 'Definiția stă pe spațiul de lucru, dar fermierul nostru nu va executa funcția până când nu vom trage în afară blocul nostru cu funcția "umple 5" de la categoria de funcții.'
      5:
        image: notes/stage13_5.jpg
        text: 'Hai să punem "distracţia" înapoi în "FUNcţie!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Salut, eu sunt Makinde! Hai să învățăm despre blocul "în timp ce" '
      2:
        image: notes/stage9_6.jpg
        text: 'Blocul "în timp ce" va face tot ce ai pus în interiorul acestuia, ATÂTA TIMP CÂT declarația din partea de sus este ADEVĂRATĂ.'
      3:
        image: notes/stage9_7.jpg
        text: De exemplu, în cazul în care fermierul stă pe o grămadă, el va continua să elimine o lopată ÎN TIMP CE încă există o grămadă sub el.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Salut, eu sunt Trina și lucrez la Pixar. Am lucrat la o grămadă de filme, inclusiv Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Aceasta este noua buclă "contor". Ea va efectua acțiuni din nou și din nou și tu poți face ca acțiunile să se schimbe câte puțin de fiecare dată.'
      3:
        image: notes/stage11_3.jpg
        text: 'În acest exemplu, bucla noastră "contor" spune "numără cu contorul de la 50 la 90 din 10 în 10" și în interiorul ei avem blocul nostru "desenează un pătrat". Glisează blocul "contor" de la secțiunea "Variabile" în interiorul spațiului "lungime".'
      4:
        image: notes/stage11_4.jpg
        text: 'Acest lucru înseamnă că artistul nostru va desena un pătrat care are laturi de 50 de pixeli lungime, și apoi va adăuga încă 10 pixeli la ele și va desena un pătrat cu laturi de 60 de pixeli lungime. Iar mai apoi va tot continua să adauge câte 10 pixeli și va desena pătrate până când va ajunge la 90 de pixeli. Astfel   vom avea pătrate de 50, 60, 70, 80 și 90 de pixeli.'
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Salut, eu sunt Janete și sunt inginer la Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Cum ar fi dacă am vrea să desenăm o grămadă de triunghiuri cu lungimi de dimensiuni diferite?
      3:
        image: notes/stage15_3.jpg
        text: Am putea scrie tot acel cod de mână sau am putea folosi o funcție cu parametri.
      4:
        image: notes/stage15_4.jpg
        text: 'Pentru a face acest lucru, dă clic pe steaua albastră de la definiția funcției "desenează un triunghi". Apoi trage "intrare nume" în interiorul blocului "intrare".'
      5:
        image: notes/stage15_5.jpg
        text: 'Apoi, dacă scrii "lungime" în locul unde scrie "x" și apeși "Enter", vei crea o intrare de tipul lungime pentru funcția ta.'
      6:
        image: notes/stage15_6.jpg
        text: 'Apoi fă clic pe stea. Acum, vei dori să dai clic pe categoria variabile și să glisezi blocul "lungime" înspre blocul definiției funcției "mergi înainte". Și înlătură prin glisare blocul cu vechiul număr.'
      7:
        image: notes/stage15_7.jpg
        text: 'Pentru a folosi funcția cu parametri, dă clic pe categoria de funcții și trage în afară funcția ta cu "desenează un triunghi cu lungime".'
      8:
        image: notes/stage15_8.jpg
        text: Acum poți folosi blocul de matematică cu diferite numere ca intrări pentru a desena triunghiuri de dimensiuni diferite.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: 'Felicitări! Cu ultimul puzzle pe care l-ai rezolvat, tocmai ai scris un cod ce poate spune ORICĂRUI robot cum să-și găsească drumul printr-un labirint fără ramificații sau un tunel de orice lungime , fie că e un zombie, o pasăre, un  robot de misune pe marte, sau chiar o mașină ce se conduce singură.'
      2:
        image: notes/hoc6_2.jpg
        text: 'Conceptele de bază pe care le-ai folosit sunt inima oricărui program sau aplicație pe care le vei încerca. Am învățat despre bucle care se repetă, afirmații de tipul "repetă până la", și afirmații de tipul dacă/altfel.'
      3:
        image: notes/hoc6_3.jpg
        text: Dacă ți-a plăcut prima ta oră de cod, vizitează code.org pentru a-ți continua educația în informatică! Când vei termina cursul nostru de 20 de ore, vei stăpâni bazele programării, și vei putea să înveți cum să scrii aplicații de telefon, instrucțiuni de roboți, jocuri, tu alegi.
      4:
        image: notes/hoc6_4.jpg
        text: 'Tehnologia schimbă tot ceea ce facem și nu contează dacă ești tânăr sau bătrân: programarea e distractivă, e creativă și oricine o poate învăța!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Arată notițele care vor apărea în curând!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Bună, numele meu este Lyndsey. Sunt model, actriță şi imi programez propriile mele aplicații. Hai să folosim codul și să ne alăturăm personajelor Anna şi Elsa în explorarea magiei şi frumuseţii gheții.
      2:
        image: notes/frozen1_2.jpg
        text: 'Veţi crea fulgi de zăpadă şi modele în gheaţă in timp ce patinați și  apoi puteti construi un paradis de iarnă, pe care îl puteţi distribui prietenilor.'
      3:
        image: notes/frozen1_3.jpg
        text: În următoarea oră, vei învăța elementele de bază ale programării. Programarea tradițională este, de obicei, sub forma text, dar vom folosi Blockly, care foloseste blocuri vizuale ce se pot glisa și fixa pentru a scrie programe. Acest mod este folosit și de studenţi în universități pentru a învăța bazele programării. Sub capotă, de fapt scrieți cod.
      4:
        image: notes/frozen1_4.jpg
        text: Un program este un set de instrucţiuni care îi spune unui computer ce să facă. Să construim un cod sau un program, care o va ajuta pe Elsa să creeze o linie simplă. Vom folosi acest lucru mai târziu pentru a crea modele mai complexe.
      5:
        image: notes/frozen1_5.jpg
        text: Ecranul tău este împărţit în trei părţi principale. În stânga, este suprafaţa de gheaţăunde va rula programul tău. Instrucţiunile pentru fiecare nivel sunt scrise chiar sub suprafaţă.
      6:
        image: notes/frozen1_6.jpg
        text: Aceasta zonă de mijloc este setul de instrumente, şi fiecare din aceste blocuri reprezintă o acţiune pe care Elsa şi Anna o pot face.
      7:
        image: notes/frozen1_7.jpg
        text: 'Spaţiul alb din dreapta este numit spațiul de lucru şi acesta este locul în care vom construi programul nostru. Pentru a muta suprafața de gheață vei utiliza blocul de "Mută înainte".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Aici, blocul "Mută înainte", spune, "merge înainte cu 100 pixeli." Ce se întâmplă atunci când am apăsaţi "Execută" ? Elsa avansează o anumită porțiune pe ecran, de fapt 100 pixeli! De fapt, pixelii sunt pătrate foarte mici pe ecranul computerului.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Alt bloc pe care îl avem în acest puzzle spune "întoarce dreapta 90 de grade." Şi când vom folosi acest bloc "întoarce dreapta", Elsa se întoarce un anumit unghi. Vă puteți juca cu unghiul de rotire al Elsei. Unghiul este măsurat față de poziția inițială a Elsei. Deci, acesta este un viraj la 90 de grade. Şi acesta este un viraj de 120 de grade.'
      10:
        image: notes/frozen1_10.jpg
        text: Amintiţi-vă, puteţi schimba numărul de pixeli şi grade făcând clic pe săgeţile de lângă ei.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Bună, eu sunt Paola! Computerele sunt foarte bune la repetarea acţiunilor. Voi puteţi număra până 10, 20 sau 100. Dar un calculator poate număra un miliard sau un trilion. Nu se va plictisi şi îi va doar câteva secunde. Fie că este de numărat, de desenat sau orice altceva --computerele pot repeta lucruri sute sau chiar miliarde de ori.
      2:
        image: notes/frozen2_2.jpg
        text: 'În programare, numim aceasta o buclă. O buclă repetă codul respectiv de mai multe ori. Pentru următorul puzzle-ului, trebuie să o ajuți pe Anna să creeze un pătrat cu blocul "Repetă".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Orice bloc de cod pui in interiorul blocului "Repetă" va fi repetat în secvenţă, ori de câte ori dorești.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Pentru a desena un pătrat, puteţi folosi "Muta înainte" şi "Întoarce dreapta" de 4 ori. Dar modul mai simplu este de a spune computerului sa repete actiunea pereche "Muta înainte" şi "Întoarce dreapta la 90 de grade"  de 4 ori. Pentru a face acest lucru, trebuie sa inseram blocul "Muta înainte" şi "Întoarce Dreapta" în interiorul unui bloc "Repetare".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Amintiţi-vă, puteţi schimba numărul de repetari în blocul "Repetare" cu oricât şi se va repeta ceea ce este în interiorul blocului de exact atâtea ori.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Bună, sunt Chris Bosh. Eu sunt un jucător profesionist de baschet şi am invațat programare în facultate.
      2:
        image: notes/frozen3_2.jpg
        text: Unul dintre cele mai importante concepte în programare este definirea de noi comenzi. Cele mai multe programe de computer au aproximativ 100 de cuvinte sau comenzi. Şi este într-adevăr, artă şi magie definirea propriilor tale comenzi noi din aceste blocuri.
      3:
        image: notes/frozen3_3.jpg
        text: Odată ce aţi învăţat un computer să facă o acţiune o dată utilizând o secvenţă de comenzi, poti să îi dai un nume aestei acţiuni, astfel încât să fie uşor să-l repete mai târziu. Atunci când definești propria comanda şi îi dai și un nume, acest lucru se numeste o funcţie.
      4:
        image: notes/frozen3_4.jpg
        text: Bună, eu sunt Jess. Atunci când programăm cu blocuri, utilizăm funcţii, dacă există un set de acţiuni pe care dorim să le utilizăm de multe ori. De exemplu, ai scris un program pentru a crea un pătrat.
      5:
        image: notes/frozen3_5.jpg
        text: 'Puteţi defini acest lucru ca o funcţie numită "Creaţi un pătrat". '
      6:
        image: notes/frozen3_6.jpg
        text: Acum ai un bloc nou ce îl puteţi folosi mai multe ori pentru a crea mai multe pătrate.
      7:
        image: notes/frozen3_7.jpg
        text: O mulţime de forme simple pot fi utilizate pentru a crea modele mai complexe. În puzzle-ul următor, codul pe care l-ai scris recent pentru a face un cerc este disponibil ca o funcţie nouă care poate face cercuri de diferite dimensiuni. O puteţi folosi pentru a o ajuta pe Elsa să creeze modele complicate şi frumoase în zăpadă?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: 'Vom încerca să creeăm jocuri folosind Play Lab. Jocurile bune au o poveste și fiecare poveste are personaje. Vom învăța cum să creeăm personaje cum ar fi: vrăjitoare, extratereștrii și animale. Le vom face să vorbească, să se miște și să interacționeze unele cu altele. La sfărșitul aceste lecții vei putea construi un joc de la zero și să-l prezinți/dai prietenilor tăi.'
      2:
        image: notes/playlab_intro_2.png
        text: Ecranul tău este împărțit in 3 zone. În stânga este spațiul de joc unde jocul tău va funcționa. Instrucțiunile pentru fiecare nivel sunt scrise mai jos.
      3:
        image: notes/playlab_intro_3.png
        text: Zona de mijloc este ocupată de cutia cu instrumente și fiecare bloc reprezintă o secvență de code. Spațiul alb din dreapta se numește spațiu de lucru și aici e locul unde vom construi programul nostru.
      4:
        image: notes/playlab_intro_4.png
        text: 'Pentru a începe, vei avea nevoie să legi blocurile tale la blocul portocaliu "când rulezi". Poți lega mai multe blocuri împreună trăgându-le până când vezi o linie galbenă, iar ele se vor fixa.'
      5:
        image: notes/playlab_intro_5.png
        text: 'În acest prim puzzle, actorul nostru este un pinguin și îl vom face să spună "Salut!" trăgând blocul "spune", legând-ul la blocul "când rulezi" și scriind "Salut!". Putem, de asemenea, să facem pinguinul să se miște folosind blocurile "întoarce la dreapta" și "întoarce la stânga". Când ai pus blocurile la locul lor, apasă pe butonul "rulează" pentru a vedea ce ai programat.'
      6:
        image: notes/playlab_intro_6.png
        text: 'Incepe-ti si la sfarsit , veti fi capabili de a crea propriul joc cu toate tipurile de jucatori ca pot interactiona , sa fie fericiti sau tristi , scorul de puncte sau sa arunce mingi de foc  sau sau chiar ai facea invizbili pe ceilalti . Totul tine de tine si de jocul pe care vrei sa il creezi.'
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: 'Acum, am de gând să înveţe ceva despre care toţi programatorii de jocuri folosesc  de zi cu zi. Ele sunt numite evenimente. Un eveniment spune programului tău să asculte pentru atunci când ceva se întâmplă. Atunci când acest lucru se întâmplă, acesta efectuează o acţiune.'
      2:
        image: notes/playlab_events_2.png
        text: Cateva exeple de evenimente sunt de ascultare pentru un clic de mouse, un buton segeata sau un robinet pe ecran.
      3:
        image: notes/playlab_events_3.png
        text: 'Uite, il vom determina pe extraterestru să-l salute pe umanoid când jucătorul apasă pe el. Vom folosi blocul "când s-a apăsat", atașându-i blocul "spune". Când jucătorul apasă pe extraterestru, tot ce este atașat acestui bloc "când s-a apăsat" va fi executat. Ce va zice extraterestrul tău?'
      4:
        image: notes/playlab_events_4.png
        text: 'Exista, de asemena blocuri "când săgeți". Daca conectezi blocurile "muta" la acestea, poți sa începi sa muti actorii în sus, în jos, în stânga, în dreapta. Pas cu pas, jocul tău devine mult mai atractiv.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Acesta este blocul "repetă pentru totdeauna". Orice din interiorul acestui bloc se va întâmpla pentru totdeauna în joc.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Dacă vrem ca un actor să facă ceva în mod repetat, fără ca jucătorul să trebuiască să facă ceva, vom pune aceste blocuri în interiorul blocului "repetă pentru totdeauna".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In următorul puzzle, scopul nostru este de a-l ajuta pe Vrăjitor sa patruleze granițele regatului, în stânga și în dreapta în continuu. Învățând cum sa folosești comenzile de repetare, vei salva a groaza de timp când iți vei construi propriul joc.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Acestea sunt blocurile voastre pe care va trebui sa le mutati. Utilizati-l pe cel corect pentru a muta artistul oriunde trebuie sa mearga pentru a umple liniile gri.
      2:
        image: notes/C1_artist_intro_2.png
        text: 'Acestea sunt blocuri "sari". Atunci cand le folosesti pe acestea, artistul tau sare insa nu deseneaza, asa ca folosesti aceasta comanda doar pentru a sari catre urmatoarea linie gri.'
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Nu sunt super cool albinele? In urmatorul set de puzzle-uri, țelul tau este sa ajuti albina sa ajunga la flori si sa culeaga polen de la ele, apoi sa mearga in stupul lor pentru a face miere. Vei avea nevoie de blocul "ia polen" si "produ miere" pentru acest exercitiu.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Fiecare floare are un număr diferit de polen: 1, 2, 3 sau mai mult. Ştim cât de mult polen este în flori rosii, datorita numărul mic din colţul ei. Deci, asiguraţi-vă că obţineți tot polenul din flori înainte de a trece mai departe. De asemenea, fiecare fagure de miere poate stoca atât de multă miere: 1, 2, 3 sau mai mult. Deci fii sigur că faci atat de multa miere incat să organizezi tot fagurele.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Dacă sunteţi capabili sa obţineti tot polenul şi să faceti toata mierea, reuşiți şi treceti la nivelul următor. În caz contrar, trebuie să încercaţi acest puzzle din nou. Jucaţi-vă un timp vedeți cum e sa programati albinuțe!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: 'O bucla este o repetare a activităţii. Deci, merg într-un stup să inspectez, mă uit la un cadru şi apoi l-am pus inapoi, asa ca repet aceeaşi activitate de mai multe ori. Acesta este o bucla - a face aceeaşi activitate de mai multe ori.'
      2:
        image: notes/C1_bee_loops_2.png
        text: 'În acest nivel, vrem ca albinele sa colecteze de trei ori polen de la floare. În loc să utilizaţi trei blocuri "ia polen", veți utiliza blocul "repetare" pentru a obţine polen de trei ori. Apasati butonul "Ruleaza" şi vedeti daca ati inteles. Bun!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Această lecţie se numeste Marele eveniment. Este despre cum putem controla programele noastre şi schimba defapt modul în care un program execută comenzile folosind evenimente, cum ar fi apăsarea unui buton sau click de mouse.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Pentru această lecţie, tu vei fi controlat cu o telecomanda de hârtie. Este la fel ca un joc video din viata reală.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Un eveniment este o acţiune care determină să se întâmple ceva. Este ca atunci când faceţi clic pe butonul unui mouse şi se încarcă o pagină web. Acesta este un eveniment. Când vă atingeţi ecranul touchscreen pentru a muta, este un eveniment de asemenea. Evenimentele sunt o modalitate foarte bună de a lăsa utilizatorul sa controleze programul ori de câte ori au nevoie sau doresc să faca asta.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Lucrurile se intampla ca noi sa raspundem la ele. Ne este foame asa ca mergem la frigider. Auzim postasul cum ne pune corespondenta la cutia postala si mergem sa vedem ce am primit. Acelea sunt tipurile de evenimente ca apasarea unui buton sau mutarea unui joystick. Este ceva ce se intampla ce ne face pe noi sa reactionam.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'În jocuri video, e un eveniment numit "Actualizare" şi se întâmplă 30 sau 60 de ori pe secundă. Pentru programatorii de jocuri video, este mai important acest eveniment decât butoanele sau joystick-ul.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Evenimentul principal la care ne uitam este acea punctare numita "Actualizare". Si apoi vom verifica joystick-ul. Si spunem "Hei, a imping cineva butonul din acest cadru? Da sau nu?" Fara evenimente, jucatorul nu s-ar putea misca, tu nu vei putea sari, nu vei putea sa controlezi ceea ce se intampla. Jocul video nu va mai fi in stare sa animeze nimic.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: In sculptura in nisip trebuie sa stii ca esecul este o parte din program. Dar daca persisti, este pe care sa devine totul in regula si mult mai incitant pentru tine. Persistenta este numele jocului. Stai aici, il vei iubi.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Lectia se numeste construirea unei fundatii. In aceasta lectie, vom lucra pe o sarcina menita sa fie foarte dificila. Ne vom da seama cum sa facem o structura cel putin la cel de inalta ca una dintre aceste pahare si cum o putem face destul de puternica pentru a mentine greutatea unei carti.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Sunt dati cand creatia ta nu functioneaza. Sunt dati in care devenim frustrati si vrem sa renuntam. Vor fi multe momente de genul acesta. Dar daca continuam, dam tot ceea ce avem mai bun din nou si din nou, sigur vom reusi in cele din urma.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Presistenta este despre a rezista cand tot ceea ce vrei este sa renunti. Daca vrei sa creezi ceva nou si diferit, vor fi multe erori in drum.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Trucul pentru a persista este alegerea de a continua si de a invata din greseli in loc sa renunti pentru ca esti frustrat. Frustrarea defapt inseamna ca ceva minunat te asteapta dupa colt. Asa ca nu renunta inainte sa ajungi acolo. Woooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Buna, numele meu este Miral Kotb si sunt creatorul Iluminate. In munca mea, este ceva ce folosim atat in dansuri cat si in programarea costumelor cu luminite. Si acelea sunt buclele! Buclele sunt repetarea unei actiuni din nou si din nou.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Cand repeti ceva de mai multe ori, ca actiunile mele din sold pentru a mentine cercul invartit, fac o bucla a actiunii respective. Aceasta este o bucla, Aceasta este o bucla. Si aceasta este o bucla.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Astazi vom avea o petrecere cu dans. Vom actiona bucle cu un nou dans. Repetarea. Vom invata despre bucle folosind un dans. Veti invata cativa pasi simpli si ii veti repeta din nou si din nou pana terminati dansul.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Acestia sunt pasii pe care trebuie sa ii invatati. Aplaudati. Puneti-va mainile la spate. Puneti-va mainile pe sold. Mana stanga sus. Mana dreapta sus. Destul de simplu, nu? Vei descoperi ca poti scurta directiile punand cativa pasi de dans in bucle.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Chiar folosim bucle in dans. Dansatorii poarta computere, toate conectate la aceeasi retea. In bucla in care am o repetare unde voi spune ca vreu sa am o bucla la acesti 6 dansatori din nou si din nou si in cadrul buclei vrei sa cresti viteza luminii. Acestea sunt create cu ajutorul buclelor. Buclele sunt importante in stiinta computerului pentru ca va fac munca mai scurta si mai usoara.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Aceasta lectie se numeste Harti fericite. Astazi il vom ajuta pe micutul nostru prieten pufos Flurb sa ajunga la fruct.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Fa-l pe Flurb sa mearga la fructul tau. Pentru a face asta, trebuie sa te gandesti in ce parte terbuie sa mearga Flurb si sa o ghidezi cu sagetile. Pentru ca Flurb sa ajunga la mar, in ce directie trebuie sa mearga? Fa-l sa mearga in sus.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Pentru a ajunge acolo trebuie sa inconjori directia in care trebuie sa mearga.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Creeaza algoritmul lipind sagetile urmatoare in harta pe care trebuie sa o rezolvi. A doua este la fel dar merge in jos.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Este ca programarea cu hartie! Si asta e!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Depanarea este găsirea și repararea unor probleme. Problemele pot fi depanate în multe feluri. Una dintre cele mai ușoare moduri este să înaintezi pas cu pas până când descoperi ceva care funcționează incorect. Aici eu încerc să fac o întoarcere înapoi pe bârnă dar cad mereu.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Am parcurs fiecare parte pas cu pas și am realizat unde era greșeala mea. Nu puneam mâinile corect pe bârnă. Astfel am încercat o nouă întoarcere înapoi pe bârnă cu o nouă tehnică de a pune mâinile pe bârnă, și mi-a reușit. Am fost foarte bucuros că am reușit să îmi depanez întoarcerea înapoi.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Pentru a învăța despre depanare, vom începe cu o mulțime de blocuri aflate deja în spațiul de lucru. Vei observa că aceste blocuri nu te vor duce la obiectiv. Trebuie să depanăm soluția și să o reparăm. Ce a funcționat greșit? Vei observa că ar fi trebuit să continui să mergi la vest încă o poziție.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Haide să reparăm această soluție prin introducerea unui bloc vest și apăsând rulează pentru a verifica dacă funcționează. Yay, funcționează!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Pentru acest puzzle, va trebui să duci pasărea la porc. Uită-te la puzzle și vezi ce direcții trebuie să urmeze.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: 'Trebuie să muți blocurile din caseta de instrumente în spațiul de lucru. Asigură-te că blocurile sunt puse sub blocul "când rulezi" și atunci când consideri că ai găsit soluția potrivită, apasă pe "Rulează" și vezi cum pasărea merge la porc.'
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Un lucru la care calculatoarele sunt foarte bune este repetarea unor comenzi. Ca persoana, te-ai plictisi dacă ar trebui să face același lucru de multe ori una după alta. Dar un calculator poate face același lucru de milioane sau chiar miliarde de ori fără să se plictisească, și poate să facă acest lucru foarte bine.
      2:
        image: notes/C1_maze_loops_2.png
        text: De exemplu, dacă aș vrea să le urez tuturor celor de pe Facebook La Mulți Ani prin e-mail, atunci s-ar putea să îmi trebuiască mai mult de un secol să trimit acele e-mailuri. Dar folosind doar câteva linii de cod, pot face în așa fel încât un sistem să trimită un e-mail tuturor de pe Facebook urândule La Mulți Ani.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'Pentru a duce pasărea la porc în acest nivel... în loc să tragi trei blocuri Nord în spațiul de lucru, vei folosi blocul "repetă". Trage blocul "repetă" în spațiul de lucru și introdu numărul 3. Apoi trage blocul "Mută-mă un spațiu la nord" în blocul "repetă" și apasă "Rulează" pentru a verifica dacă este corect. Felicitări, ai reușit!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Aceasta lectie se numeste misca-te, misca-te. Impreuna o sa scriem un program care sa-i faca pe prietenii nostri sa ajunga la fata zambitoare.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Dar fata zambitoare este jos si o singura persoana stie sa ajunga acolo. Sa incepem acest program.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Un program este un algoritm care a fost codificat in ceva ce poate fi rulat de o masina. Cei mai multi dintre noi se gandesc la un program ca la ceva ce scriem pentru un calculator. Programele sunt foarte bune pentru asta dar sunt de asemenea utile si in alte locuri. Poti sa faci propriul tau joc si chiar sa programezi un robot sa faca lucruri pentru tine.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Numele meu este Jeremiah. Salut! Am sapte ani. Ador sa ma joc pe calculatorul mamei mele dar intotdeauna ii cer permisiunea prima data. "Mama, pot sa folosesc calculatorul? Sigur draga!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: Ador calculatorul mamei mele deoarece pot sa intru pe internet. Internetul este asemenea cartierului tau. Poti vizita locuri cool, poti sa vorbesti cu familia si cu prietenii tai si poti invata o multime de lucruri noi.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Ieri, am vizitat gradina zoologica care se afla in apropierea casei mele. Am vazut un pui de zebra. I-am facut o poza si i-am schimbat culoare dungilor, apoi i-am adaugat o palarie si am salvat fotografia in colectia mea de animale traznite. Grozav! Mai tarziu am plecat intr-un loc foarte indepartat. Am vizitat Kenya. Aceasta este o tara din Africa. Multe zebre locuiesc aici.
      4:
        image: notes/C1_going_places_safely_4.png
        text: 'Uneori, pe internet, vorbesc cu oameni pe care ii cunosc, cum ar fi bunica mea care locuieste in alt stat. Buna bunica! Ea imi va face prajiturele pe care mi le va trimite de ziua mea. "Yummy, mi-as fi dorit ca internetul sa transmita mirosul si gustul!" Pe internet pot vorbi cu diverse persoane, cum ar fi varul meu, dar eu vorbesc doar cu oameni pe care ii stiu.'
      5:
        image: notes/C1_going_places_safely_5.png
        text: Pe internet cel mai mult imi place faptul ca pot sa joc multe jocuri distractive. Scor! De asemenea imi place sa desenez si sa creez lucruri noi pe care le impartasesc cu prietenii mei. Cool! Cateodata intru pe site-uri web de unde invat lucruri noi, dar intotdeauna raman la site-urile care mi se potrivesc mie. Wow, dinozauri!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internetul este un loc super distractiv. Dar, la fel ca atunci cand traversezi strada din cartierul tau, trebuie sa ai grija si cand intrii online. Sunt trei reguli pe care trebuie sa le tii minte. Prima regula 1: Mereu sa iti intrebi parintii. Regula numarul 2: Vorbeste doar cu persoane pe care le cunosti. Regula numarul 3: Viziteaza doar site-uri potrivite tie.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, asta a fost distractiv! Ora cinei. Ma deconectez acum. De-abia astept sa ma loghez din nou sa vad ce urmeaza.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Astazi vom invata despre Pair Programming (programarea in echipa). In pair programming lucrezi ca o echipa. De ce ar trebui doua persoane sa foloseasca un calculator? Pentru ca doua capete sunt mai bune decat unul. In pair programming, tu si partenerul tau va trebui sa stati impreuna la un calculator si impreuna veti lucra la acelasi proiect.
      2:
        image: notes/C1_pair_programming_2.png
        text: In programarea in echipa, una dintre persoane este conducatorul auto si cealalta persoana este navigatorul, la fel ca in condusul unei masini. Conducatorul auto sta la calculator folosind tastatura si mouse-ul sau touchscreenul si controleaza principalele actiuni ale calculatorului. Cealalta persoana este navigatorul. Navigatorul ajuta conducatorul auto raspunzandu-i acestuia la intrebari si ii evidentiaza potentialele probleme sau greseli.
      3:
        image: notes/C1_pair_programming_3.png
        text: Comunicarea este cheia succesului in programarea in echipa. Fara insulte, fii respectuos, nu fi un navigator autoritar, deoarece nimanui nu ii place un sofer de pe bancheta din spate. Intre tine si partenerul tau ar trebuie sa existe comunicare. Conducatorul auto poate explica ceea ce el sau ea va face. Si navigatorul poate sa ii sugereze ce sa faca in continuare.
      4:
        image: notes/C1_pair_programming_4.png
        text: Navigatorul ar trebui sa se gandeasca in ansamblu si conducatorul auto sa se concentreze pe detalii. Ambele roluri sunt importante. In programarea pereche este vorba doar de lucru impreuna, ca o echipa.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Aceasta lectie este numita plantarea unei seminte si ne va ajuta sa intelegem algoritmi. Algoritmii sunt instructiuni specifice care arata ordinea in care trebuie facut un lucru. Chiar si zi de zi lucruri ca micul dejun sau spalatul pe dinti reprezinta algoritmi care necesita pasi mici pentru a termina o munca.
      2:
        image: notes/C1_planting_seed_2.png
        text: Calculatoarele pot fi foarte inteligente, dar te pot intelege doar daca tu le spui exact ceea ce vrei pas cu pas. Cel mai tare lucru despre algoritmi este acela ca, daca tu urmezi intructiunile in ordine, poti sa realizezi un lucru pe care inainte nu stiai cum sa il faci. Este ca si cum ai urma o reteta.
      3:
        image: notes/C1_planting_seed_3.png
        text: Astazi vom planta propriile noastre seminte folosind un algoritm. Creati-va propriul algoritm prin taierea de imagini. Selecteaza pozele care arata pasii plantarii unei seminte si aranjati-va pozele in ordinea corecta.
      4:
        image: notes/C1_planting_seed_4.png
        text: Acum, este timpul sa vezi daca algoritmul functioneaza. Urmeaza pasii din algoritm foarte atent. Sunt in ordinea corecta? Ai reusit plantarea unei seminte urmarind algoritmul? Este ca si cum ai programa cu poze!
      5:
        image: notes/C1_planting_seed_5.png
        text: Cand vrem sa facem ciocolata, sunt multi pasi importanti in acest proces si fiecare dintre acesti mari pasi are un set cu pasi mai micuti si exista diferite retete sau algoritmi in functie de gustul pe care il dorim ca ciocolata sa o aiba. Fiecare pas este important, chiar si cei mici, astfel incat fara un singur pas, restul sa nu poata fi finalizat. Crearea de algoritmi pe care altii o pot intelege este foarte importanta. De aceea fiecare pas trebuie sa fie scris astfel incat indiferent de cine il utilizeaza, rezultatul sa fie acelasi.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Este timpul sa fii creativ si sa iti folosesti abilitatile de programare pentru a spune o poveste. Povestea ta va contine actori si tu vei fi capabil sa faci acesti actori sa vorbeasca si sa interactioneze intre ei. Incepe sa te gandesti ce fel de poveste vrei sa spui.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: 'Pisicii mereu i-a fost frica de caine si daca pisica va realiza ca acel caine doreste sa fie prietenos? Blocul "cand alearga" porneste totul. Blocul "mutare" va misca personajul tau si blocul "spune" va face personajul tau sa vorbeste indiferent de ce vei tasta.'
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Acesta este blocul "atunci cand actorii se ciocnesc" pe care il poti lega de celelalte blocuri.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'Incercam sa chem cainele si sa ii spun "Buna" dar apoi pisica s-a speriat si a fugit. "Ahh" daca ar fi fost mai mult timp, ar fi fost un final fericit. Sfarsit!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Acesta este nivelul de ortografie al albinelor. Foloseste bucatile de puzzle pentru a muta albina. In timpul miscarii, albina va colecta litere pentru a scrie cuvinte.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Vezi daca poti scrie corect cuvantul pe care ti l-au dat in casuta de mai jos. Dar fii atent! Mutarea intr-o directie gresita va adauga litere pe care nu le-ai dori.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Un lucru la care calculatoarele sunt foarte bune este să repete comenzi. Ca persoana, te-ai plictisi foarte tare dacă ar trebui să faci același lucru de multe, multe ori la rând. Dar un calculator poate face același lucru de milioane sau chiar miliarde de ori fără să se plictisească și poate să facă acest lucru foarte bine.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: De exemplu, dacă aș vrea să le urez tuturor celor de pe Facebook La Mulți Ani prin e-mail, atunci s-ar putea să îmi trebuiască mai mult de un secol să scriu acele e-mailuri. Dar, folosind doar câteva linii de cod, pot face în așa fel încât un sistem să trimită un e-mail tuturor de pe Facebook urându-le La Mulți Ani.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In acest exemplu, obiectivul tau va fi sa muti pasarea pentru a ajunge la porc. Acum, vom putea folosi blocul repeta pentru a putea face acest lucru mai usor. Poti face asta dandu-i calculatorului o comanda sa mute inainte de cinci ori la rand in scopul de a avansa pasarea cate un pas de fiecare data pentru a ajunge la porc, ori poti sa comanzi calculatorului sa mearga mai departe o singura data, si apoi pune-l sa repete asta de cinci ori si va face acelasi lucru.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: In scopul de a face asta, trageti comanda muta inainte si apoi pune-o inauntru blocului repeta. Si poti sa faceti clic pe el si spuneti-i de cate ori vreti sa repetati blocul pentru a ii spune cati pasi doriti sa mergeti inainte.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Un alt lucru este acela ca poti sa pui cat de multe comenzi doresti in interiorul blocului repeta. Deci in acest exemplu, o sa ii spui sa se mute inainte si apoi sa faca stanga, pe care o va face de cinci ori. Distractie placuta!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Tu nici nu te-ai califica pentru cursa daca nu ai persoane care sunt competente in informatica din cauza marimii data pe care masinile le colecteaza si necesitatea de a fi capabili in a avea oameni care pot scrie programe pentru a-si da seama cum veti continua sa construiti performanta.
      2:
        image: notes/C2_artist_intro_2.png
        text: In aceste puzzle-uri, tu vei fi un artist care va folosi creionul pentru a desena diversa forme. Oriunde merge artistul dumneavoastra, se va desena o linie in spatele tau.
      3:
        image: notes/C2_artist_intro_3.png
        text: Pentru a te muta in jurul panzei, vei utiliza blocul muta inainte. Aici, blocul muta inainte, zice muta inainte 100 pixeli. Atunci cand vei lovi blocul fugi, ce se intampla? Artistul merge inainte o anumita suma si acea suma este de 100 pixeli. Practic, pixelii sunt patratelele foarte mici de pe ecranul calculatorului.
      4:
        image: notes/C2_artist_intro_4.png
        text: Celalalt bloc pe care il avem in puzzle spune muta dreapta cu 90 de grade. Si cand tragi, aceasta va face artistul nostru sa se intoarca o anumita suma. Deci te vei putea juca cat de departe vrei ca artistul sa se intoarca. Acesta este un viraj de 90 de grade.
      5:
        image: notes/C2_artist_intro_5.png
        text: Si aceasta este un viraj de 120 de grade. Si nu uita, poti sa modifici aceste valori apasand clic pe sagetile de langa numerele pentru pixeli si grade. Bucura-te de desen impreuna cu artistul tau!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Acesta este un bloc conditional. Spune ca daca exista nectar sau miere care este mai putin, echivalent sau mai mare decat un numar, atunci fa ceva.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Acest lucru este util atunci cand nu stim cat de mult nectar sau miere obtinem, dupa cum vedem cu acest semn se intrebare.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In acest exemplu, vom spune ca, daca floarea mov are nectar mai mare de 0, obtine nectar. Acest lucru va spune albinelor noastre sa continue obtinerea de nectar atata timp cat exista acolo. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Aceasta este lecţia despre brăţări binare. Vom codifica iniţialele noastre pe o brăţară pe care să o putem purta şi arăta toturor prietenilor noştri!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Sistemul binar este o modalitate de a reprezenta informaţii utilizând doar două opţiuni. Uneori, oamenii se gândesc la acesta ca și cum ar fi vorba numai de 0-uri şi mulți de 1. Dar poţi reprezenta binar cu combinaţii de pe sau sub, sus şi jos, înăuntru sau înafară sau chiar orice set de contrarii.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Bună, eu sunt Orion şi programez roboţi aici la Play-im. Toate creierele calculatoarelor şi roboților sunt, la nivelul cel mai fundamental, mici porți electronice. Când poarta este deschisă, energia electrică poate curge prin ea şi, atunci când este închisă, energia electrică nu mai poate trece.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Un exemplu de sistem binar la robot îl reprezintă ochii robotului. Ochii robotului sunt LED-uri şi acestea sunt luminile care fie sunt aprinse, fie sunt stinse. Este un sistem binar, unul sau altul. Putem folosi luminile pentru a reprezenta numerele binare. Dacă avem un set de roboţi, putem spune că primul robot este locul numerelor 1 şi al doilea robot este locul numerelor 2, al treilea robot este locul numerelor 4 şi aşa mai departe. Așa se reprezintă un număr binar. Roboţii vor face acest lucru cu ochii lor binari şi vor enumera pentru tine.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Această lecţie se numeşte condiţionale cu carduri. În fiecare zi iei decizii bazate pe ceea ce vezi şi auzi.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Vreau să fac o plimbare în parc dar mai întâi trebuie să decid dacă ar trebui să iau umbrela sau nu. Deci, mă uit pe fereastră, dacă este noros voi lua umbrela. Altfel voi lua ochelarii de soare. Mă gândesc că este mai bine să iau umbrela. Ceea ce văd și aud stabilește ce iau cu mine în parc.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: 'Condiţionale sunt utilizate și în jocuri. Astăzi vom exersa utilizarea condiţionalelor cu un joc de cărți. În acest joc, cartea pe care o trag eu determină ceea ce vor face prietenii mei. Dacă trag un şapte, toată lumea va bate din palme. Altfel, toată lumea va spune "Auuu". Hai să-l încercăm! "Auuu" "noroc"'
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Pun pariu că poţi inventa jocuri care sunt chiar și mai distractive cu condiţionale. Hai, încearcă și tu! Condiţionalele sunt cele care fac calculatoarele să pară inteligente. Un program de calculator care include condiţionale poate reacţiona la utilizator şi-și poate schimba cursul de acţiune.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: 'Gândește-te la jocul tău video favorit. Câștigi mai multe puncte cu anumite acțiuni față decât câștigi cu altele? Acest lucru se întâmplă deoarece calculatorul folosește condiționale. Este modul în care calculatorul ia o decizie. Cum ar fi: dacă atingi ținta, câștigi zece puncte. Altfel, pierzi trei. Când știi cum funcționează condiționalele, poți crea tot felul de jocuri palpitante.'
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Aici avem deja câteva blocuri în spațiul de lucru. Dar ceva este greșit.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Să depanăm acest cod încetinind viteza pentru a vedea ce se întâmplă la fiecare bloc pas cu pas.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, aici este o problemă! Mustățile pisicii sunt de 75 pixeli, nu de 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Ai auzit vreodată de depanarea unui program? Este o modalitate de a afla ce nu funcționează. Când depanezi un cod găsești și elimini erorile.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Avem deja câteva blocuri în spațiul nostru de lucru. Vom folosi butonul „Pas” pentru a parcurge blocurile, pas cu pas, pentru a vedea dacă aceasta este soluția corectă și unde ar fi nevoie să o reparăm.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Se pare că aceasta este problema noastră! Mai avem nevoie de un bloc „mută înainte”. Butonul „Pas” ne ajută să depanăm problema prin identificarea erorii pentru ca noi să o putem repara.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: Un algoritm este o listă de instrucțiuni cu scopul de a completa o sarcină. Vom respecta acest set de instrucțiuni pentru a face castronul. Algoritmii sunt foarte utili când ai nevoie ca altcineva să ințeleagă cum să facă ceva.
      3:
        image: notes/C2_graph_paper_3.png
        text: Dacă scrii un algoritm pentru un computer, trebuie să îl împarți în mici pași. Așa că termină acest rând și treci la următorul, apoi la următorul, și vei fi gata.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Acum vom folosi blocul „repetă” pentru a economisi pași când programăm artistul. Avem deja câteva blocuri în spațiul nostru de lucru dar acestea sunt acolo pentru a ne ajuta să începem.
      2:
        image: notes/C2_artist_loops_2.png
        text: Pentru a repeta (bucla) aceste blocuri de 4 ori pentru a desena întregul pătrat, doar tragem blocul „repetă” și punem blocurile „mută înainte” și „întoarce la dreapta” în interiorul blocului „repetă”. Când apăsăm „rulează”, artistul va repeta acei pași de 4 ori pentru a completa pătratul.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Până acum aţi facut o animaţie sau o poveste care face exact acelaşi lucru de fiecare dată când o rulezi. Acum, puteţi face un joc interactiv, pe care îl puteți chiar juca.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Aveți blocul "atunci când săgeata" şi blocul "mutare actor". Puteţi pune aceste blocuri împreună pentru a deplasa actorii cu tastele săgeată.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: 'În acest exemplu sarcina ta este să muți pasărea astfel încât să ajungă la porc. Acum vom putea folosi blocul "repetă" pentru a face aceasta foarte ușor. Poți, deasemenea face aceasta dând calculatorului comanta "mută înainte" de 5 ori pentru ca pasărea să înainteze spre porc câte un pas pentru fiecare comandă.'
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Tu nici nu te-ai califica pentru cursa daca nu ai persoane care sunt competente in informatica din cauza marimii data pe care masinile le colecteaza si necesitatea de a fi capabili in a avea oameni care pot scrie programe pentru a-si da seama cum veti continua sa construiti performanta.
      2:
        image: notes/C3_artist_intro_2.png
        text: In aceste puzzle-uri, tu vei fi un artist care va folosi creionul pentru a desena diversa forme. Oriunde merge artistul dumneavoastra, se va desena o linie in spatele tau.
      3:
        image: notes/C3_artist_intro_3.png
        text: Pentru a te muta in jurul panzei, vei utiliza blocul muta inainte. Aici, blocul muta inainte, zice muta inainte 100 pixeli. Atunci cand vei lovi blocul fugi, ce se intampla? Artistul merge inainte o anumita suma si acea suma este de 100 pixeli. Practic, pixelii sunt patratelele foarte mici de pe ecranul calculatorului.
      4:
        image: notes/C3_artist_intro_4.png
        text: Celalalt bloc pe care il avem in puzzle spune muta dreapta cu 90 de grade. Si cand tragi, aceasta va face artistul nostru sa se intoarca o anumita suma. Deci te vei putea juca cat de departe vrei ca artistul sa se intoarca. Acesta este un viraj de 90 de grade.
      5:
        image: notes/C3_artist_intro_5.png
        text: Si aceasta este un viraj de 120 de grade. Si nu uita, poti sa modifici aceste valori apasand clic pe sagetile de langa numerele pentru pixeli si grade. Bucura-te de desen impreuna cu artistul tau!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Acesta este un bloc conditional. Spune ca daca exista nectar sau miere care este mai putin, echivalent sau mai mare decat un numar, atunci fa ceva.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Acest lucru este util atunci cand nu stim cat de mult nectar sau miere obtinem, dupa cum vedem cu acest semn se intrebare.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In acest exemplu, vom spune ca, daca floarea mov are nectar mai mare de 0, obtine nectar. Acest lucru va spune albinelor noastre sa continue obtinerea de nectar atata timp cat exista acolo. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Ai auzit vreodată de depanarea unui program? Este o modalitate de a afla ce nu funcționează. Când depanezi un cod găsești și elimini erorile.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Avem deja câteva blocuri în spațiul nostru de lucru. Vom folosi butonul „Pas” pentru a parcurge blocurile, pas cu pas, pentru a vedea dacă aceasta este soluția corectă și unde ar fi nevoie să o reparăm.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Se pare că aceasta este problema noastră! Mai avem nevoie de un bloc „mută înainte”. Butonul „Pas” ne ajută să depanăm problema prin identificarea erorii pentru ca noi să o putem repara.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Până acum aţi facut o animaţie sau o poveste care face exact acelaşi lucru de fiecare dată când o rulezi. Acum, puteţi face un joc interactiv, pe care îl puteți chiar juca.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Aveți blocul "atunci când săgeata" şi blocul "mutare actor". Puteţi pune aceste blocuri împreună pentru a deplasa actorii cu tastele săgeată.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: notes/C4_conditionals_2.png
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: notes/C4_function_create_2.png
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: notes/C4_function_create_3.png
        text: "Once you're done, click on save and exit. This will take you back to the main puzzle work space. The new function you created will show up as a green block in the function category in your toolbox. Drag and drop this into the main work space and use it like any other block to solve the puzzle."
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C4_function_edit_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: notes/C4_function_edit_3.png
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: notes/C4_function_edit_4.png
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: notes/C4_function_parameters_3.png
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C4_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C4_intro_3.png
        text: 'If I drag the move block to our work space and press "run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "Now we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. And then when it does, it performs an action. Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen."
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Your screen is split into three main parts. On the left is the gamespace, where your program will run. The instructions for each level are written below. This middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace, and this is where we'll build our program."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: |
          Buna! Sunt Kathleen Kennedy - producator al Star Wars: The Force Awakens. Azi vei lucra cu unul din star-urile noastre, BB-8. BB-8 este un droid sferic. Orice face si orice miscare a sa este controlata de un program. Informatica are influenta asupra fiecatui domeniu, de la marketing
          la sanatate si film. Sute de ingineri lucreaza impreuna pentru a face un film ca The Force Awakens.
      2:
        image: notes/starwars_intro_2.JPG
        text: 'Buna! Sunt Rachel Rose, inginer R&D senior la IM si coordonez echipa de dezvoltare a personajelor si animatiei. In The Force Awakens, ajut la dezvoltarea artistica a instalatiilor, care sunt componente ale pesonajului care se misca si il fac sa arate real intr-o galaxie indepartata.'
      3:
        image: notes/starwars_intro_3.JPG
        text: |
          In urmatoarea ora vom realiza propriul joc Star Wars cu care vei invata conceptele
          de baza ale programarii. De obicei, programarea se face prin text, dar noi
          vom folosi aici blocuri pentru a scrie programe. In spatele acestora, tu chiar creezi programe. Dupa ce incerci bazele programarii cu blocuri, vom trece la JavaScript, unul dintre cele mai populare limbaje de programare pentru web.
      4:
        image: notes/starwars_intro_4.JPG
        text: Pentru inceput, vom lucra cu Rey pentru a-l programa pe BB-8 sa mearga si sa colecteze toate reziduurile. Ecranul este impartit in trei zone. In stanga este spatiul jocului Star Wars unde se va rula codul. Instructiunile pentru fiecare nivel se scriu sub spatiul jocului.
      5:
        image: notes/starwars_intro_5.JPG
        text: |
          Aceasta zona din mijloc se numeste toolbox si fiecare din aceste blocuri este o comanda pe care
          BB-8 o poate intelege.
      6:
        image: notes/starwars_intro_6.JPG
        text: Spatiul alb din dreapta se numeste spatiul de lucru si aici vom construi programul nostru.
      7:
        image: notes/starwars_intro_7.JPG
        text: Daca aduc blocul moveLeft(); in spatiul de lucru, ce se intampla? BB-8 se misca spre stanga un bloc pe grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: Si daca vreau ca BB-8 sa mai faca altceva dupa blocul moveLeft();? Pot adauga alt bloc la programul nostru. Voi alege blocul moveUp(); si il aduc sub blocul meu moveLeft(); pana cand se lumineaza. Apoi ii dau drumul si cele doua blocuri se vor lipi.
      9:
        image: notes/starwars_intro_9.JPG
        text: Cand apas iar run, BB-8 va executa toate comenzile stivuite din spatiul de lucru, de sus in jos. Daca vei vrea sa stergi un bloc, scoate-l din stiva si trage-l inapoi in toolbox.
      10:
        image: notes/starwars_intro_10.JPG
        text: Dupa ce ai apasat run, poti sa apesi butonul reset ca sa il aduci pe BB-8 inapoi la start. Acum sa incepem!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "Inside the blocks we've been using are JavaScript commands. JavaScript is the most popular programming language for professional developers today. Blocks are a great way to get started learning to code and in fact, top universities like Harvard and Berkeley start teaching this way. But once we learn the basics, engineers write code by typing because it allows us to go faster."
      2:
        image: notes/starwars_typing_2.JPG
        text: "We can type hundreds of commands without having to find them in the toolbox or drag them out. Because you're learning typing may be slower at first but we wanted you to give it a try."
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: "In the next lesson, we'll start you out in typing mode. Here you can still drag the block from the toolbox or you can type the command name. As you start to type, you'll see names of possible commands show below where you're typing. Instead of typing the whole command name, you can select one of these to move faster. In my job, I use this auto-complete feature all the time when writing code."
      5:
        image: notes/starwars_typing_5.JPG
        text: "When you're typing code, the computer needs you to be very precise. You need to spell and capitalize the command name exactly correctly, including the parentheses and the semi-colon. Even with a small typing mistake, BB-8 cannot understand the code and won't be able to move."
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: "If you get stuck, you can always start over with the start over button and you can switch back to block mode at any time by clicking in the top-right corner. Ok, let's give typing a try! And if you make mistakes, don't get frustrated. It takes everybody a few tries to get it right."
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C3PO."
      3:
        image: notes/starwars_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down."
      7:
        image: notes/starwars_events_7.JPG
        text: "To do this, we'll use a command called whenUp(). When you drag the command out of the toolbox, you'll see that it starts and ends with a curly bracket instead of a semi-colon. This gives us space to put other commands in the middle. Every command that we place inside these brackets will run when the player presses the up arrow."
      8:
        image: notes/starwars_events_8.JPG
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Hi, my name is Alice and I run the project and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Hi I'm Kathleen Kennedy and I'm the producer of Star Wars: The Force Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the animation and creature development team. In The Force Awakens, I'm responsible for helping the artist develop rigs, which are the parts of the character that move that allow the character to look very believable in a galaxy far, far away."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "In the next hour, we're going to build our own Star Wars game that will teach you the basic concepts of programming. Usually programming is all text but we're going to use blocks here so we can drag and drop to write the programs. To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars game space where code will run. The instructions for each level are written below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: |
          Aceasta zona din mijloc se numeste toolbox si fiecare din aceste blocuri este o comanda pe care
          BB-8 o poate intelege.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Spațiul alb din dreapta se numește spațiul de lucru și aici vom construi programul nostru.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together. When I press run again, BB-8 will perform the commands that are stacked top to bottom on our workspace."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: "After you hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C3PO."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Hi, my name is Alice and I run the project and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "My name is Jens Bergensten but I'm better known as Jeb. I'm the lead developer on Minecraft, here at Mojang in Stockholm. I think I was eleven or maybe twelve and I started programming because I wanted to make games. One of my father's friends told me that in order to make games, you need to learn how to program. That's how I got started. I like designing and figuring out the architecture of games. That's what I really like about Minecraft."
      2:
        image: notes/mc_intro_2.JPG
        text: "Over the next hour, you're going to learn the basics of computer science by programming Alex or Steve to move through a simulated piece of a Minecraft world."
      3:
        image: notes/mc_intro_3.JPG
        text: "Traditional programming is usually in text but today we'll use Blockly, a system which uses visual blocks that you can drag and drop to write programs. Under the hood, you're creating Javascript code."
      4:
        image: notes/mc_intro_4.JPG
        text: "The concepts you'll be learning are what computer programmers use every day and are the foundation to computer science. Here at Mojang, we use these same concepts to make Minecraft work."
      5:
        image: notes/mc_intro_5.JPG
        text: "Before you start, you'll pick your character. I'm going to choose Alex. Let's build code for a program that will help her move around the screen."
      6:
        image: notes/mc_intro_6.JPG
        text: Your screen is split into three main parts. On the left is the Minecraft playspace where your program will run. The instructions for each level are written below.
      7:
        image: notes/mc_intro_7.JPG
        text: "This middle area is the toolbox and each of these blocks is a command that directs Alex's actions."
      8:
        image: notes/mc_intro_8.JPG
        text: "The white space on the right is called the work space and this is where we'll build our program."
      9:
        image: notes/mc_intro_9.JPG
        text: If we drag the moveForward(); block to our workspace and then click run, what happens? Alex moves forward one space on the grid.
      10:
        image: notes/mc_intro_10.JPG
        text: "And what if we want to do something after she has moved forward one space? We can add another block to our program. I'm going to choose the turnRight(); block and I'll drag it underneath my moveForward(); block until this orange line appears. Then I'll drop it and the two blocks will snap together. When we press run again, Alex will perform the commands that are stacked from top to bottom in our workspace."
      11:
        image: notes/mc_intro_11.JPG
        text: If you ever want to delete a block, just drag it from the stack back to the toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: "To undo your changes and get back to how the level started, use the Start Over button in the top right corner of the workspace. One more thing: you see the little triangle on the turn blocks? Anytime you see these triangles, it means that you can pick a different option. Let's start coding!"
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: "I'm Lydia Winters, Mojang's brand director and we made a little game called Minecraft."
      2:
        image: notes/mc_repeat_2.JPG
        text: "My favorite thing to do in Minecraft is explore. I love adventuring in caves and seeing what I can find. As someone who isn't a programmer, I'm really excited to go through the Minecraft lesson and actually learn some coding myself."
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier if we could just tell the computer to perform the moveForward(); command four or five times. Luckily for us, computers are really good at repeating commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: "When building Minecraft, we use repeat loops to place all the initial materials for creating a new world. That's thousands and thousands of blocks. We also use loops in little ways, for example to make Alex's feet move back and forth as she walks. Repeat loops are a powerful part of programming."
      5:
        image: notes/mc_repeat_5.JPG
        text: "Night is coming so in the next couple of levels, we're going to build a house to stay safe. We're going to use the repeat block to do this very easily."
      6:
        image: notes/mc_repeat_6.JPG
        text: "To build a wall of our house, we can either tell Alex to moveForward(); and place planks four times or we can tell her to moveForward(); and place one plank, then take this command and use the repeat block to have her perform the action multiple times. Now we'll click on the repeat block and tell her how many times we want her to perform this action. Now let's build our house before night falls! Have fun."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: "Now we're going to learn about if statements. If statements are a fundamental part of learning to program. They help a computer make decisions."
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when I unlock my phone, it runs some code that says if I enter the password correctly, then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react to what they see in the world. For example, if there is a rock in front of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: "In this case, we don't want to fall in the lava. It's easy to plan for the lava. We can see it on the screen. But what about the lava that we can't under the stone?"
      5:
        image: notes/mc_if_statements_5.JPG
        text: "After we mine the stone, we'll need to check if there's any lava in that place before moving forward. If there is lava there, we want to place a stone in front of our character before we can move forward. That way we can safely move on. Time for more mining! And remember to use the if statement to watch your step."
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no more instructions and no puzzles to solve. You can build anything you want. You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of torches. I made an A out of birch planks. It worked, it worked. We built a house out of wool!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: "When you're done making your creation, choose share to get a link to share with your friends. Have fun!"
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no more instructions and no puzzles to solve. You can build anything you want. You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of torches. I made an A out of birch planks. It worked, it worked. We built a house out of wool!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
