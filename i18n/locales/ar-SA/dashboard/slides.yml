ar:
  slides:
    maze_intro:
      1:
        image: |
          notes/hoc1_1.jpg
          
        text: مرحباً في أول ساعة من البرمجة! دعنا نتجه إلى تذوقك الأول للبرمجة .
      2:
        image: notes/hoc1_2.jpg
        text: بلوكلي هي لغة برمجية مرئية تمكنك من سحب وافلات القطع لكتابة الكود البرمجي.
      3:
        image: notes/hoc1_3.jpg
        text: 'تتم كتابة معظم الاكواد البرمجية، ولكن بلوكلي هو مرئي. بحيث ان كل القطع تطابق سطر من الكود البرمجي " الحقيقي ".'
      4:
        image: |
          notes/hoc1_4.jpg
          
        text: أنت ستتعلم أسس علوم الكمبيوتر، والمفاهيم التي يتم استخدامها في أي مكان من صنع تطبيقات للتحكم في تجول المريخ.
      5:
        image: |
          notes/hoc1_5.jpg
          
        text: البرنامج هو مجموعة من الإيعازات التي يتبعها جهاز الكمبيوتر الخاص بك.
      6:
        image: |
          notes/hoc1_6.jpg
          
        text: 'الهدف من برنامجك الاول هو  توصيل "الطيور الغاضبة" عبر المتاهة لضرب " المخلوق الاخضر".'
      7:
        image: |
          notes/hoc1_7.jpg
          
        text: الجانب الايسر هو مكان تنفيذ المتاهة. حيث يمكنك ايجاد الارشادات لكل لغز والتي تكون اسفل المتاهة.
      8:
        image: |
          notes/hoc1_8.jpg
          
        text: 'شريط الادوات الوسطي يمتلك مجموعة من الاوامر المتعلقة بلعبة "الطيور الغاضبة" . والتي ستستخدم في بناء الكود البرمجي الخاص بك.'
      9:
        image: |
          notes/hoc1_9.jpg
          
        text: على الجانب الايمن توجد مساحة عمل بيضاء حيث يتم عليها سحب القطع من شريط الادوات من اجل بناء برنامجك . لحذف القطعة الغير مرغوب بها , عليك القيام بسحبها الى سلة المهملات الواقعة في الزاوية.
      10:
        image: |
          notes/hoc1_10.jpg
          
        text: 'كل قطعة تقوم بأمر واحد. بحيث إذا سحبت قطعة "تقدم للامام" الى مساحة العمل البيضاء وضغطت على  "تنفيذ البرنامج" ، سوف يتحرك الطير مسافة واحدة في المتاهة.'
      11:
        image: |
          notes/hoc1_11.jpg
          
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: |
          notes/hoc1_12.jpg
          
        text: 'إذا قمت بتنفيذ برنامج وترغب في إصلاحه ومحاولة تنفيذه مرة أخرى، اضغط على الزر "اعادة تعيين".'
      13:
        image: |
          notes/hoc1_13.jpg
          
        text: دعنا نذهب للحصول على المخلوق الاخضر!
    artist_intro:
      1:
        image: |
          notes/stage5_1.jpg
          
        text: 'مرحبا، أنا جر! كل فريق سباق سيارات بحاجة إلى علماء الكمبيوتر من اجل الفوز.  هم يحللون البيانات من السيارة لجعلها تسير بسرعة.'
      2:
        image: |
          notes/stage5_2.jpg
          
        text: في هذه الألغاز، أنت ستكون رسام يرسم خط في كل مكان.
      3:
        image: |
          notes/stage5_3.jpg
          
        text: 'هذه القطعة تقول "التقدم للامام" بمقدار 100 بكسل . " البكسلات هي النقاط الصغيرة الموجودة في شاشة الكمبيوتر.'
      4:
        image: |
          notes/stage5_4.jpg
          
        text: 'هذه القطعة تقول "الانعطاف يمينا بدرجة 90" . " هذا سيمكن الرسام من الانعطاف بنفس المقدار مثل قطعة "اتجه" المستخدمة في الغاز المتاهة. '
      5:
        image: |
          notes/stage5_5.jpg
          
        text: اضغط على السهم في أي من هذه القطع لتغيير مقدار تحرك الرسام للامام او الانعطاف. العب من اجل ان تكون على دراية باستخدام هذه القطع الجديدة.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: مرحبا، أنا باولا! في هذه الألغاز، انت ستصبح المزارع الذي يجب ان يقوم بجعل حقله الزراعي مسطحا تماما من اجل البدء بزراعة المحاصيل.
      2:
        image: notes/stage9_2.jpg
        text: بامكانك مساعدتها بأزلة جميع الاكداس من التراب و ملاْ جميع الثقوب.
      3:
        image: notes/stage9_3.jpg
        text: القطعة الجديدة ازالة مجرفة تراب واحدة من الكدس وتملأ مجرفة واحدة من التراب في الحفرة.
      4:
        image: notes/stage9_4.jpg
        text: الاكداس والثقوب مختلفة الاحجام, لذلك يجب ان تخبر المزارع كم عدد من الجرافات تحتاج.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: مرحبا، أنا كاتي! واحدة من الأمور الأكثر إثارة حول علوم الحاسوب هي ان البرامج الحاسوبية تمكن أن تكون تفاعلية.
      2:
        image: notes/flappy02.jpg
        text: أي وقت شخص ينقر أو الصنابير أو أنواع على جهاز الكمبيوتر أو الهاتف، الذي يولد هذا الحدث، وهناك بعض التعليمات البرمجية التي تقرر ما يجب القيام به عند حدوث الحدث.
      3:
        image: notes/flappy03.jpg
        text: 'على سبيل المثال، يمكن أن يكون لديك معالج الحدث الذي يقول "عندما يتم النقر على الماوس، تشغيل صوت" '
      4:
        image: notes/flappy04.jpg
        text: هل سمعت من أي وقت مضى من فلابيبيرد اللعبة؟ باستخدام معالجات الأحداث، نحن ذاهبون للتعرف إلى البرنامج الخاص بنا إصدار مخصص من فلابيبيرد!
      5:
        image: notes/flappy05.jpg
        text: التعليمات البرمجية التي سوف تكتب ينطوي على سحب وإسقاط القطع التي تمثل أوامر لجهاز الكمبيوتر. تحت غطاء محرك السيارة، يمثل كل من هذه الكتل البرمجية الحقيقية.
      6:
        image: notes/flappy06.jpg
        text: 'إذا كنت نلقي نظرة على مساحة العمل، وهناك بعض الكتل الخضراء التي تمتلئ لك--هذه "معالجات الأحداث" '
      7:
        image: notes/flappy07.jpg
        text: 'إذا كنت تريد الطيور إلى رفرف عند النقر بالماوس، يمكنك القيام بذلك عن طريق ربط كتلة "رفرف" إلى معالج الحدث المناسب، والآن في اللعبة الخاصة بك كلما قمت بالنقر فوق الماوس، الطيور سوف رفرف.'
      8:
        image: notes/flappy08.jpg
        text: في كل لغز هذا النشاط سوف نقدم أنواع جديدة من الأحداث ككتل خضراء على مساحة العمل، ويمكنك أن تقرر القطع المناسبة لإضافة ردا على تلك الأحداث.
      9:
        image: notes/flappy09.jpg
        text: عند ظهور القائمة المنسدلة السهم بمثل هذا، وهذا يعني يمكنك تغيير الإعدادات--مثل ما الصوت للعب عندما يضرب flappy الأرض.
      10:
        image: notes/flappy10.jpg
        text: عليك أن تكون قادراً على إنشاء اللعبة الخاصة بك ومشاركتها مع أصدقائك في اللغز النهائي. استمتع!
    loop_times:
      1:
        image: |
          notes/hoc2_1.jpg
          
        text: مرحباً، أنا مارك! دعنا نتعرف على الحلقات التكرارية. بإستخدام الحلقات التكرارية يمكنك أن تأمر الكمبيوتر بتكرار أي مجموعة من الإجراءات عدة مرات، بالاف أو حتى بلايين من المرات.
      2:
        image: |
          notes/hoc2_2.jpg
          
        text: في هذا اللغز، نريد أن نقدم الطير الى الامام 5 خطوات من اجل الوصول الى المخلوق الاخضر .
      3:
        image: |
          notes/hoc2_3.jpg
          
        text: 'يمكننا استخدام قطعة "أكرر" الجديدة لمساعدتنا حل المشكلة.'
      4:
        image: |
          notes/hoc2_4.jpg
          
        text: 'بدلاً من سحب 5  قطع "تقدم للامام" ...'
      5:
        image: |
          notes/hoc2_5.jpg
          
        text: 'يمكننا وضع قطعة "تقدم للامام" داخل قطعة "أكرر" وكتابة عدد معين في القطعة من اجل ان تقوم بتكرار الامر العديد من المرات.'
      6:
        image: |
          notes/hoc2_6.jpg
          
        text: 'وهذا أمر مهم: يمكنك وضع أمر واحد أو أكثر داخل القطعة "أكرر".'
      7:
        image: |
          notes/hoc2_7.jpg
          
        text: 'تمتع بإستخدام قطعتك "أكرر" الجديدة!'
    loop_until:
      1:
        image: |
          notes/hoc3_1.jpg
          
        text: 'مرحبا، أنا كريس. قبل أنضمامي إلى "ميامي هيت"، ذهبت إلى معهد "جورجيا للتكنولوجيا" لدراسة "علوم الكمبيوتر". دعونا نجرب قطعتنا الجديدة، قطعة "أكرر حتى".'
      2:
        image: |
          notes/hoc3_2.jpg
          
        text: ماذا اذا لم نعرف كم مسافة التقدم بين الطير والمخلوق الاخضر ؟
      3:
        image: |
          notes/hoc3_3.jpg
          
        text: 'إذا وضعنا قطعة "تقدم للامام" داخل قطعة "أكرر حتى" ، سوف يتقدم الطير إلي الأمام حتى يصل للمخلوق الاخضر (أو يتحطم في الجدار).'
      4:
        image: |
          notes/hoc3_4.jpg
          
        text: 'هذا مهم كما في السابق، نحن نستطيع أن نضع قطع متعددة داخل قطعة "أكرر حتى"، من اجل تكرار القطع جميعا.'
    if:
      1:
        image: |
          notes/hoc4_1.jpg
          
        text: 'مرحبا، أنا بيل! دعونا نتعلم مفهوم أساسي جديد: عبارات "اذا". هذه هي الطريقة التي تجعل أجهزة الكمبيوتر تتخذ القرارات.'
      2:
        image: |
          notes/hoc4_2.jpg
          
        text: |-
          أنت بنفسك تستخدم  عبارات"اذا" يومياً. قبل الذهاب إلى الخارج كل صباح، أنت تقول 'اذا' كانت تمطر بالخارج، يجب ان ارتدي الجاكيت.
      3:
        image: |
          notes/hoc4_3.jpg
          
        text: 'يمكن أن نقول للزومبي التحقق "إذا كان" يوجد طريق على اليسار، و "إذا وجد طريق على اليسار، نحن بأستطاعتنا أن نجعلة يدور في هذاك الاتجاه.'
      4:
        image: |
          notes/hoc4_4.jpg
          
        text: 'لكتابة الكود البرمجي لهذا اللغز، دعونا نسحب قطعة "اذا كان" ونضعها داخل قطعة "اتجه لليسار".'
      5:
        image: |
          notes/hoc4_5.jpg
          
        text: 'الآن، إذا وضعنا قطعة "تقدم للامام" فوقها قطعة "أكرر" حول كل شيء، في كل مرة يتحرك الزومبي، هو سوف يتحقق من إذا يوجد طريق على اليسار ومنعطف . أمر "أكرر" هو  حاسم،لانه يقوم بالتحقق من وجود منعطفاً في كل خطوة.'
      6:
        image: |
          notes/hoc4_6.jpg
          
        text: 'إذا كانت العبارات هامة جداً في علوم الكمبيوتر. من أولى البرامج التي كتبتها هى لعبة تيك تاك تو، وكانت هناك عبارة تقول "اذا" كان الشخص الآخر على وشك الفوز، أمنع الاماكن التي تسمح لهم بالفوز.'
      7:
        image: |
          notes/hoc4_7.jpg
          
        text: 'أستمتع بإستخدام قطعة "اذا كان" !'
    if_else:
      1:
        image: |
          notes/hoc5_1.jpg
          
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: |
          notes/hoc5_2.jpg
          
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: |
          notes/hoc5_3.jpg
          
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: |
          notes/hoc5_4.jpg
          
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: مرحباً، أنا برينا، مهندسة في إينستاجرام. الدالة عبارة عن بعض الأسطر من الكود البرمجي التي تريد استخدامها مراراً وتكراراً، لذا بدلاً من كتابة الكود البرمجي عدة مرات، يمكنك فقط استخدام قطعة واحدة.
      2:
        image: notes/stage13_2.jpg
        text: نحن في طريقنا لمعرفة كيفية تعريف الدوال . تعرف الدالة بنجمة في الزاوية. يتم كتابة اسم الدالة في السطر العلوي.
      3:
        image: notes/stage13_3.jpg
        text: 'القطع التي تذهب داخل التعريف تخبرنا بعملها . لذلك هذه تعريف الدالة التي تسمى "املأ 5" والتي تصنع من قطعة "كرر" و قطعة "املأ".'
      4:
        image: notes/stage13_4.jpg
        text: 'التعريف يجلس على مساحة العمل . ولكن مزارعنا لايرغب بتنفيذ الدالة حتى نقوم بسحب قطعة "دالة املأ 5" من قسم الدول.'
      5:
        image: notes/stage13_5.jpg
        text: 'دعنا نضع "المتعة" مرة اخرى في "الدالة!"'
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'مرحبا، أنا ماكندي! دعنا نتعرف على قطعة "اكرر طالما." '
      2:
        image: notes/stage9_6.jpg
        text: 'قطعة "اكرر طالما" ستنفذ اي شي في داخلها ما دام العبارة في الاعلى صحيحة.'
      3:
        image: notes/stage9_7.jpg
        text: على سبيل المثال، إذا كان المزارع يقف على التكدس ، سستمر الجرافة بالازالة في حين لايزال يوجد تكدس تحتها.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: مرحبا، أنا ترينا، أعمل على بيكسار. لقد عملت على مجموعة من الأفلام، من ضمنها فلم شريك.
      2:
        image: notes/stage11_2.jpg
        text: 'هذه هي حلقة "العداد" الجديدة. ستقوم بتنفيذ الإجراءات مراراً وتكراراً، ويمكنك أن تجعل الإجراءات تتغير قليلاً في كل مرة.'
      3:
        image: notes/stage11_3.jpg
        text: 'في هذا المثال، حلقة"العداد" تقول " قم بالعد مع العداد من 50 إلى 90 من 10" ، وداخله يوجد لدينا قطعة "ارسم مربع". اسحب قطعة "العداد" من قسم "المتغيرات" الى مكان "الطول".'
      4:
        image: notes/stage11_4.jpg
        text: وهذا يعني الرسام سيقوم برسم مربع طول اضلاعه 50 بكسل، ثم يضيف 10 بكسلات ورسم مربعاً طول اضلاعه 60 بكسل. ثم نضيف 10 بكسلات اخرى ورسم المربعات حتى تصل إلى 90. لذا سوف نحصل على مربعات من 50، 60، 70، 80 و 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: مرحباً، أنا جانيت، وأنا مهندسة في Zynga.
      2:
        image: notes/stage15_2.jpg
        text: ماذا اذا كنا نرغب برسم مجموعة من المثلثات ويكون اطوالهم بأحجام مختلفة؟
      3:
        image: notes/stage15_3.jpg
        text: يمكن أن نكتب جميع الكود البرمجي هذا باليد، أو يمكن أن نستخدم دالة مع المعلمات.
      4:
        image: notes/stage15_4.jpg
        text: 'للقيام بهذا، اضغط فوق النجمة الزرقاء في "رسم المثلث" تعريف الدالة . ثم اسحب "اسم الادخال" إلى قطعة "الادخال".'
      5:
        image: notes/stage15_5.jpg
        text: 'ثم إذا قمت بكتابة "الطول" في المكان حيث يقول "x" ثم اضغط "ادخل" سوف تقوم بإنشاء الإدخال الطولي للدالة الخاصة بك.'
      6:
        image: notes/stage15_6.jpg
        text: 'ثم اضغط على النجمة. الآن، انت ترغب بالضغط على قسم المتغيرات وسحب قطعة "الطول" الى قطعة "التقدم للامام" لتعريف الدالة الخاصة بك. واسحب بعيداً قطعة الأرقام القديمة.'
      7:
        image: notes/stage15_7.jpg
        text: 'لاستخدام الدالة الخاص بك مع المعلمات، اضغط على قسم الدوال واسحب الدالة "ارسم مثلث مع الطول".'
      8:
        image: notes/stage15_8.jpg
        text: الآن يمكنك استخدام قطعة الرياضيات لإدخال أرقام مختلفة لرسم مثلثات ذات أحجام مختلفة.
    hoc_wrapup:
      1:
        image: |
          notes/hoc6_1.jpg
          
        text: تهانينا! مع حل اللغز الاخر، انت لقد كتبت الكود البرمجي الذي يمكن أن يخبر اي روبوت عن كيفية العثور على طريقها من خلال المتاهات غير المتفرعة أو الأنفاق بأي طول، سواء أكان الزومبي، الطيور، مارس روفر (عربة المريخ)، أو حتى سيارة ذاتية القيادة.
      2:
        image: |
          notes/hoc6_2.jpg
          
        text: 'الفكرة أو المفاهيم الأساسية التي أستخدمتها هى الجوهر لكل البرامج أو التطبيقات التي أستخدمتها في أي وقت مضى.  تعلمنا عن الحلقات المتكررة، عبارة "أكرر حتى", عبارة "أذا" و أيضاً عبارة "أذا والا".'
      3:
        image: |
          notes/hoc6_3.jpg
          
        text: إذا احببت الساعة الاولى من البرمجة ، قم بزيارة code.org لمواصلة تعلمك علوم الكمبيوتر! بمجرد إكمالك 20 ساعة من دورتنا التعليمية، ستكون قد أتقنت أساسيات البرمجة، ويمكن البدء بتعلم كيفية كتابة تطبيقات الهاتف الخليوي وأوامر الروبوت والألعاب، وأختر ما شئت.
      4:
        image: |
          notes/hoc6_4.jpg
          
        text: التكنلوجيا غيرت كل شي نقوم به، ولا يهم إذا كنت صغير أو كبير فالبرمجة متعة و إبداع، ويمكن للجميع تعلمها!
    20_wrapup:
      1:
        image: |
          notes/bird.png
          
        text: بيان الملاحظات قريبا!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: مرحباً، اسمي لِندسي وأنا عارضة أزياء وممثلة وأبرمج التطبيقات الخاصة بي. هيا نبرمج معاً لننضم إلى آنا وإلسا فر رحلتهما لاكتشاف سحر وجمال الجليد.
      2:
        image: notes/frozen1_2.jpg
        text: سنقوم بإنشاء ندفات الثلج والأشكال المختلفة بينما نتزلج على الجليد ونصنع شتاء عجائب يمكنكم مشاركته مع أصدقائكم.
      3:
        image: notes/frozen1_3.jpg
        text: خلال الساعة القادمة، سنتعلّم أساسيات البرمجة. عادةً ما تكون البرمجة التقليدية من خلال النص، ولكن سنقوم باستخدام بلوكلي، وهو استخدام الكتل المرئية التي يمكنكم سحبها وإفلاتها لكتابة البرامج. هكذا يتعلّم الطلاب الأساسيات، حتى في الجامعات لكن في الحقيقة لا زلتم تكتبون التعليمات البرمجية.
      4:
        image: notes/frozen1_4.jpg
        text: البرنامج هو عبارة عن مجموعة من الإرشادات التي تخبر الكمبيوتر ما يجب فعله. دعونا نكتب تعليمات برمجية، أو برنامج، ليساعد إلسا في إنشاء خط بسيط. سوف نستخدم هذا في وقت لاحق لإنشاء أنماط أكثر تعقيداً.
      5:
        image: notes/frozen1_5.jpg
        text: تنقسم الشاشة إلى ثلاثة أجزاء رئيسية. على اليسار، يوجد السطح الجليدي حيث يجب تشغيل برنامجك. وتتم كتابة التعليمات الخاصة بكل مستوى تحت سطحها تماماً.
      6:
        image: notes/frozen1_6.jpg
        text: أما المساحة الوسطى، فهي علبة الأدوات، وكل من هذه القطع البرمجية هي أعمال من الممكن لآنا وإلسا القيام بها.
      7:
        image: notes/frozen1_7.jpg
        text: 'المساحة البيضاء على اليمين تُسَمّى مساحة العمل، وهنا سنقوم ببناء برنامجنا. للتحرك على سطح الجليد، سنقوم باستخدام القطعة البرمجية "تقدم للأمام".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: "These are jump blocks. When you use these, your artist moves but doesn't draw, so use these to jump to the next grey line."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Aren't bees super cool? In this next set of puzzles, your goal is to help the bee get to the flowers and get nectar from the flowers and fly over to the honeycomb to make honey. You'll need to use the "get nectar" and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We know how much nectar is in the red flowers, by the little number in the corner. So be sure to get all the nectar from the flower before you move forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: |-
          If you're able to get all the nectar and make all the honey, you succeed and go to the next level. Otherwise, you need to try this puzzle again. Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "A loop is a repetition of activity. So going into a hive to inspect, I look at a frame and then I put it back, so I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          In this level, we want the bee to collect three nectars from the flower. Instead of using three "get nectar" blocks, you're going to use the repeat block to get nectar three times. Hit "Run" and see if you got it right. Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "This lesson is called the big event. It's all about how we can control our programs and actually change the way a program runs on the fly using events, like the push of a button or the click of a mouse."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "For this lesson, you'll be controlled with a paper remote control. It's just like a real-live video game."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "An event is an action  that causes something to happen. It's like when you click the button on a mouse and a webpage loads. That's an event. When you touch your screen on a tablet to scroll, that's an event also. Events are a great way of letting the user direct your program whenever they need or want to."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Things happen that we all respond to. We feel hungry and we go to the fridge. We hear the mailman come and he puts our mail in the mailbox  and then we go get our mail. Those are just like the events of pushing a button or moving a joystick. They are something that happens that triggers us to do something.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: |-
          In video games, there's an event called "Update" and it happens 30 or 60 times a second. For videogame programmers that's almost more important as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |-
          The main event we're watching for is that "Update" tick happening. And then we check the joystick in the tick. So we say, "Oh, has somebody pushed the button this frame? Yes or no?" Without events, the player couldn't move, you couldn't jump, you wouldn't be able to control what's going on. The videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "In sand sculpture you've got to know that failure is part of the program. But if you're persist, it's just going to get nothing but better and more exciting for you.Persistence is the name of the game. Stay with it, you'll love it."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "This lesson is called building a foundation. In this lesson, we'll work on a task that is meant to be really difficult. You will figure out how to make a structure at least as tall as one of these cups and it's got to be strong enough to hold the weight of a book."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "There might be times that our creation doesn't work out. There might be times that we get frusrated and want to give up. There might be a lot of those moments. But if we keep on trying, give it our best shot over and over again, then we're sure to get it before long."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Persistence is all about hanging in there when you really want to give up. If you want to create something new and different, there's going to be a lot of failures along the way."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "The trick to persistence is choosing to keep on going and learn from your failures instead of quitting because you're frustrated. Frustration actually just means there's something wonderful around the corner. So don't quit before you get to it. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the internet. The internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the internet I talk to peeople I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the internet had smellorama!" I can talk to different people on the internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: |-
          There are some new blocks to try out. There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys. And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
