el:
  slides:
    maze_intro:
      1:
        image: σημειώσεις/hoc1_1.jpg
        text: 'Καλώς ήρθες στην πρώτη σου Ώρα του Κώδικα! Ας ξεκινήσουμε με μια πρώτη γεύση  προγραμματισμού.'
      2:
        image: σημειώσεις/hoc1_2.jpg
        text: Θα χρησιμοποιήσουμε το Blockly, μια οπτική γλώσσα προγραμματισμού στην οποία μπορείς να μετακινείς πλακίδια για να γράψεις κώδικα.
      3:
        image: σημειώσεις/hoc1_3.jpg
        text: Στα περισσότερα προγράμματα πρέπει κάποιος να πληκτρολογήσει τον κώδικα του προγράμματος, αλλά στο Blockly ο προγραμματισμός είναι οπτικός. Κάθε πλακίδιο αντιστοιχεί σε μια γραμμή «πραγματικού» κώδικα.
      4:
        image: σημειώσεις/hoc1_4.jpg
        text: Θα μάθεις τις βασικές αρχές της επιστήμης των υπολογιστών, έννοιες που χρησιμοποιούνται παντού από την κατασκευή εφαρμογών μέχρι τον έλεγχο οχήματος στον Άρη.
      5:
        image: σημειώσεις/hoc1_5.jpg
        text: Το πρόγραμμα είναι ένα σύνολο οδηγιών που πρέπει να εκτελέσει ο υπολογιστής.
      6:
        image: σημειώσεις/hoc1_6.jpg
        text: 'Ο στόχος του πρώτου προγράμματος είναι να καθοδηγήσει το πουλί (Angry Bird)  ώστε να κινηθεί μέσα στο λαβύρινθο και να πιάσει το πράσινο γουρουνάκι.'
      7:
        image: σημειώσεις/hoc1_7.jpg
        text: Στο αριστερό μέρος της οθόνης εμφανίζεται ο λαβύρινθος μέσα στον οποίο εκτελείται το πρόγραμμα. Οι εντολές για κάθε puzzle εμφανίζονται κάτω από το λαβύρινθο.
      8:
        image: σημειώσεις/hoc1_8.jpg
        text: Η μεσαία εργαλειοθήκη έχει εντολές για το Θυμωμένο Πουλί. Θα τις χρησιμοποιήσεις για να φτιάξεις τον κώδικά σου.
      9:
        image: σημειώσεις/hoc1_9.jpg
        text: Στα δεξιά είναι ο χώρος εργασίας σου, όπου θα μεταφέρετε πλακίδια από την εργαλειοθήκη για να φτιάξεις το πρόγραμμά σου. Για να διαγράψεις ένα πλακίδιο σύρε το στα σκουπίδια στη γωνία.
      10:
        image: σημειώσεις/hoc1_10.jpg
        text: Κάθε πλακίδιο είναι μια εντολή. Εάν σύρεις το πλακίδιο «μετακίνηση προς τα εμπρός» στο χώρο εργασίας σου και πατήστε το «Εκτέλεση Προγράμματος», το πουλί κάνει ένα βήμα στο λαβύρινθο.
      11:
        image: σημειώσεις/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: σημειώσεις/hoc1_12.jpg
        text: Εάν εκτελέσεις ένα πρόγραμμα και θέλεις να το διορθώσεις και προσπαθήσεις ξανά, πάτησε το πλήκτρο «Επαναφορά».
      13:
        image: σημειώσεις/hoc1_13.jpg
        text: Πάμε να πιάσουμε εκείνα τα γουρουνάκια!
    artist_intro:
      1:
        image: σημειώσεις/stage5_1.jpg
        text: Γεια σου, είμαι ο JR! Κάθε ομάδα αγωνιστικών αυτοκινήτων χρειάζεται επιστήμονες υπολογιστών για να κερδίσει. Αυτοί αναλύουν τα δεδομένα από το αυτοκίνητο για να το κάνουν να πάει πιο γρήγορα.
      2:
        image: σημειώσεις/stage5_2.jpg
        text: Σε αυτά τα παζλ, θα γίνεις ένας καλλιτέχνης που σχεδιάζει γραμμή πίσω του όπου πηγαίνει.
      3:
        image: σημειώσεις/stage5_3.jpg
        text: Αυτό το πλακίδιο λέει «προχώρησε προς τα εμπρός για 100 εικονοστοιχεία». Τα εικονοστοιχεία είναι μικροσκοπικές τελείες στην οθόνη σου.
      4:
        image: σημειώσεις/stage5_4.jpg
        text: Αυτό το πλακίδιο λέει «στρίψε δεξιά κατά 90 μοίρες.» Αυτό θα κάνει τον καλλιτέχνη σου να στρίψει όπως έκανε το πλακίδιο «στρίψε» στα παζλ του λαβύρινθου.
      5:
        image: σημειώσεις/stage5_5.jpg
        text: Κάνε κλικ στο βέλος σε ένα από αυτά τα πλακίδια για να αλλάξεις το πόσο προχωρεί ή στρίβει ο καλλιτέχνης. Παίξε λίγο για να εξοικειωθείς με αυτά τα νέα πλακίδια.
    farmer_intro:
      1:
        image: σημειώσεις/stage9_1.jpg
        text: Γεια σου, είμαι η Πάολα! Σε αυτά τα παζλ, είσαι μία γεωργός που πρέπει να κάνει τον αγρό της εντελώς επίπεδο για να αρχίσει να φυτεύει σπαρτά.
      2:
        image: σημειώσεις/stage9_2.jpg
        text: Θα πρέπει να τη βοηθήσεις να αφαιρέσει όλους τους σωρούς βρωμιάς και να καλύψει όλες τις τρύπες.
      3:
        image: σημειώσεις/stage9_3.jpg
        text: Τα νέα πλακίδια αφαιρούν 1 φτυαριά βρωμιάς από έναν σωρό και γεμίζουν μια τρύπα με 1 φτυαριά βρωμιάς.
      4:
        image: σημειώσεις/stage9_4.jpg
        text: Οι σωροί και οι τρύπες έχουν διαφορετικά μεγέθη, οπότε πρέπει να πεις στη γεωργό πόσες φτυαριές να χρησιμοποιήσει.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Γεια σου, είμαι η Κάτια! Ένα από τα πιο συναρπαστικά πράγματα της επιστήμης των υπολογιστών είναι ότι τα προγράμματα υπολογιστών μπορεί να γίνουν διαδραστικά.
      2:
        image: notes/flappy02.jpg
        text: Κάθε φορά που κάποιος κάνει κλικ ή πληκτρολογεί η αγγίζει την οθόνη αφής ενός υπολογιστή ή τηλεφώνου, αυτή η πράξη παράγει ένα ΣΥΜΒΑΝ και υπάρχει συνήθως ένα κομμάτι κώδικα που αποφασίζει τι θα γίνει όταν πραγματοποιείται ένα ΣΥΜΒΑΝ.
      3:
        image: notes/flappy03.jpg
        text: 'Για παράδειγμα, μπορείς να έχετε έναν ΧΕΙΡΙΣΤΗ-ΣΥΜΒΑΝΤΩΝ που να λέει «όταν γίνει κλικ με το ποντίκι, παίξε έναν ήχο» '
      4:
        image: notes/flappy04.jpg
        text: Έχεις ποτέ ακούσει για το παιχνίδι FlappyBird; Χρησιμοποιώντας χειριστές Γεγονότων, θα μάθουμε πως να προγραμματίζουμε τη δική μας έκδοση του FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Ο κώδικας που θα γράψεις περιλαμβάνει μεταφορά και απόθεση πλακιδίων που αντιπροσωπεύουν εντολές για τον υπολογιστή. Στο παρασκήνιο, καθένα από αυτά τα πλακίδια αντιπροσωπεύεται από πραγματικό κώδικα.
      6:
        image: notes/flappy06.jpg
        text: 'Αν θες να ρίξεις μια ματιά στο χώρο εργασίας, υπάρχουν κάποια πράσινα πλακίδια που τα γεμίσαμε για σένα - αυτά είναι οι «χειριστές γεγονότων» '
      7:
        image: notes/flappy07.jpg
        text: Αν θέλεις να κάνεις το πουλί να ΦΤΕΡΟΥΓΙΣΕΙ όταν κάνεις ΚΛΙΚ με το ποντίκι, μπορείς να το κάνεις προσθέτοντας το πλακίδιο «ΦΤΕΡΟΥΓΙΣΜΑ» στον κατάλληλο χειριστή γεγονότων, και πλέον στο παιχνίδι σου όταν κάνεις κλικ με το ποντίκι, το πουλί θα φτερουγίσει.
      8:
        image: notes/flappy08.jpg
        text: Με κάθε παζλ σε αυτή την δραστηριότητα θα παρουσιάζουμε νέους τύπους γεγονότων με τη μορφή των πράσινων πλακιδίων στο χώρο εργασίας και μπορείς να αποφασίζεις για τα κατάλληλα πλακίδια που θα προσθέτεις ως απάντηση σε αυτά τα γεγονότα.
      9:
        image: notes/flappy09.jpg
        text: 'Όταν δεις ένα αναπτυσσόμενο σαν κι αυτό, αυτό σημαίνει ότι μπορείς να αλλάξεις τις ρυθμίσεις - όπως το ποιος ήχος να παιχτεί όταν ο φλάπι χτυπήσει στο έδαφος.'
      10:
        image: notes/flappy10.jpg
        text: Στο τελικό παζλ θα μπορέσεις να δημιουργήσεις το δικό σου παιχνίδι και να το μοιραστείς με τους φίλους σου. Καλή διασκέδαση!
    loop_times:
      1:
        image: σημειώσεις/hoc2_1.jpg
        text: Γεια σου, είμαι ο Μάρκος! Ας μάθουμε για βρόχους. Χρησιμοποιώντας βρόχους μπορείς να πεις σε έναν υπολογιστή να επαναλάβει κάθε σύνολο ενεργειών ξανά και ξανά, χιλιάδες ή ακόμη και δισεκατομμύρια φορές.
      2:
        image: σημειώσεις/hoc2_2.jpg
        text: Σε αυτό το παζλ, θέλουμε να κάνουμε το πουλί να μετακινηθεί προς τα εμπρός 5 βήματα για να πιάσει το γουρούνι.
      3:
        image: σημειώσεις/hoc2_3.jpg
        text: Μπορούμε να χρησιμοποιήσουμε το νέο πλακίδιο «επανάληψης» για να μας βοηθήσει.
      4:
        image: σημειώσεις/hoc2_4.jpg
        text: 'Αντί να χρησιμοποιήσεις 5 πλακίδια "μετακίνηση προς τα εμπρός"...'
      5:
        image: σημειώσεις/hoc2_5.jpg
        text: 'Μπορούμε να βάλουμε το πλακίδιο "μετακίνηση προς τα εμπρός" στο εσωτερικό του πλακιδίου "επανάληψη" και να γράψουμε έναν αριθμό στο πλακίδιο για να του πούμε πόσες φορές να το επαναλάβει.'
      6:
        image: σημειώσεις/hoc2_6.jpg
        text: 'Και αυτό είναι σημαντικό: μπορείς να βάλεις περισσότερες από μία εντολές μέσα σε ένα πλακίδιο «επανάληψη».'
      7:
        image: σημειώσεις/hoc2_7.jpg
        text: Απόλαυσε το νέο σου πλακίδιο «επανάληψη»!
    loop_until:
      1:
        image: σημειώσεις/hoc3_1.jpg
        text: Γεια σου, είμαι ο Χρήστος. Πριν πάω στους Miami Heat πήγα στο πανεπιστήμιο Georgia Tech να σπουδάσω Επιστήμη των Υπολογιστών. Ας δοκιμάσουμε ένα νέο πλακίδιο, τo «επανάλαβε μέχρι».
      2:
        image: σημειώσεις/hoc3_2.jpg
        text: Κι αν δεν ξέραμε πόσο μακριά πρέπει να πάει το πουλί για να φτάσει το γουρούνι;
      3:
        image: σημειώσεις/hoc3_3.jpg
        text: Αν βάλουμε ένα πλακίδιο «μετακίνηση προς τα εμπρός» στο εσωτερικό του πλακιδίου «επανάληψη μέχρι», το πουλί θα κινηθεί προς τα εμπρός, ΜΕΧΡΙ να φτάσει το γουρούνι (ή να πέσει πάνω σε έναν τοίχο).
      4:
        image: σημειώσεις/hoc3_4.jpg
        text: 'Είναι σημαντικό: όπως και πριν, μπορούμε να βάλουμε πολλά πλακίδια μέσα στο «επανάλαβε μέχρι» και όλα αυτά μαζί θα επαναληφθούν.'
    if:
      1:
        image: σημειώσεις/hoc4_1.jpg
        text: 'Γεια σου, είμαι ο Βασίλης! Ας μάθουμε μια νέα θεμελιώδη έννοια: τις εντολές  «εάν». Αυτός είναι ο τρόπος με τον οποίο οι υπολογιστές παίρνουν αποφάσεις.'
      2:
        image: σημειώσεις/hoc4_2.jpg
        text: 'Χρησιμοποιείς τις εντολές «εάν» καθημερινά στη ζωή σου. Κάθε πρωί, πριν βγεις για να πας στο σχολείο, σκέφτεσαι: αν βρέχει έξω, πρέπει να φορέσω το παλτό μου.'
      3:
        image: σημειώσεις/hoc4_3.jpg
        text: Μπορούμε να πούμε στο ζόμπι να ελέγξει ΕΑΝ υπάρχει μονοπάτι αριστερά, και αν πράγματι βρει μονοπάτι στα αριστερά, να τον κάνουμε να στρίψει προς αυτή την κατεύθυνση.
      4:
        image: σημειώσεις/hoc4_4.jpg
        text: Για να γράψεις τον κώδικα για αυτό, σύρε έξω το πλακίδιο «εάν» και βάλε ένα πλακίδιο «στρίψε αριστερά» μέσα του.
      5:
        image: σημειώσεις/hoc4_5.jpg
        text: Τώρα, εάν βάλουμε ένα πλακίδιο «προχώρησε εμπρός» πάνω από αυτό και ένα πλακίδιο «επανάλαβε» γύρω από όλα, κάθε φορά που κινείται το ζόμπι, θα ελέγχει εάν υπάρχει μονοπάτι στα αριστερά και θα στρίβει. Η εντολή «επανάλαβε» είναι κρίσιμη, για τον έλεγχο της στροφής σε κάθε βήμα.
      6:
        image: σημειώσεις/hoc4_6.jpg
        text: Οι εντολές «εάν» είναι πραγματικά σημαντικές στην επιστήμη των υπολογιστών. Ένα από τα πρώτα προγράμματα που έγραψα ήταν ένα παιχνίδι τρίλιζας και υπήρχε μια εντολή «εάν» που έλεγε ΕΑΝ ο αντίπαλος είναι ένα βήμα πριν κερδίσει, τότε μπλόκαρε το σημείο από το οποίο μπορεί να κερδίσει.
      7:
        image: σημειώσεις/hoc4_7.jpg
        text: Καλή διασκέδαση με το πλακίδιο «εάν»!
    if_else:
      1:
        image: σημειώσεις/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: σημειώσεις/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: σημειώσεις/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: σημειώσεις/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: σημειώσεις/stage13_1.jpg
        text: Γεια σου, είμαι η Μπρίνα, μηχανικός στο Instagram. Μια συνάρτηση είναι ορισμένες γραμμές κώδικα που θέλετε να χρησιμοποιήσετε ξανά και ξανά, έτσι αντί να γράφετε αυτόν τον κώδικα κάθε φορά, μπορείτε απλά να χρησιμοποιήσετε ένα μπλοκ.
      2:
        image: σημειώσεις/stage13_2.jpg
        text: Πρόκειται να μάθουμε πώς να ορίζουμε συναρτήσεις. Οι ορισμοί των συναρτήσεων έχουν ένα αστέρι στη γωνία. Το όνομα της συνάρτησης γράφετε ψηλά στην πρώτη γραμμή.
      3:
        image: σημειώσεις/stage13_3.jpg
        text: 'Τα μπλοκ που πάνε μέσα στον ορισμό μας λένε τι κάνει. Έτσι το όνομα αυτής της συνάρτησης που ορίζουμε είναι «γέμισε 5» και αποτελείται από ένα μπλοκ "επανάλαβε" και ένα μπλοκ "γέμισε".'
      4:
        image: σημειώσεις/stage13_4.jpg
        text: Ο ορισμός βρίσκεται στο χώρο εργασίας, αλλά ο γεωργός μας δε θα εκτελέσει τη συνάρτηση μέχρι να σύρουμε το πλακίδιο συνάρτησης «γέμισε 5» από την κατηγορία συναρτήσεων.
      5:
        image: notes/stage13_5.jpg
        text: 'Ας βάλουμε τη "διασκέδαση" πίσω στη "ΣΥΝάρτηση!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Γεια σου, είμαι ο Μακέντ! Ας μάθουμε για το "όσο μπλοκ." '
      2:
        image: notes/stage9_6.jpg
        text: |-
          Το μπλοκ "εφ' όσον" θα κάνει οτιδήποτε τοποθετήσετε μέσα του ΑΡΚΕΙ η δήλωση στην κορυφή είναι ΑΛΗΘΗΣ.
      3:
        image: notes/stage9_7.jpg
        text: Για παράδειγμα, εάν ο γεωργός στέκεται σε έναν σωρό, θα συνεχίζει να αφαιρεί 1 φτυαριά ΟΣΟ υπάρχει βρωμιά από κάτω του.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Γεια σου, είμαι η Τριν, και δουλεύω για την Pixar. Έχω εργαστεί για πολλές ταινίες, συμπεριλαμβανομένου του Σρεκ.
      2:
        image: notes/stage11_2.jpg
        text: 'Αυτός είναι ο νέος βρόχος "μετρητής". Θα εκτελεί ενέργειες ξανά και ξανά και μπορείτε να κάνετε τις ενέργειες αυτές να αλλάζουν ελαφρώς κάθε φορά.'
      3:
        image: notes/stage11_3.jpg
        text: 'Σε αυτό το παράδειγμα, ο βρόχος "μετρητής" λέει "μέτρησε με μετρητή από 50 μέχρι 90 με βήμα 10" και μέσα σε αυτόν, έχουμε το μπλοκ "σχεδίασε ένα τετράγωνο". Σύρετε το μπλοκ "μετρητής" από την ενότητα "Μεταβλητές" στη θέση "μήκος".'
      4:
        image: notes/stage11_4.jpg
        text: Αυτό σημαίνει ότι ο καλλιτέχνης πρόκειται να σχεδιάσει ένα τετράγωνο που έχει πλευρές μήκους 50 εικονοστοιχείων, μετά θα αυξήσει κατά 10 το μέγεθος και θα σχεδιάσει ένα τετράγωνο με μήκος πλευρών 60 εικονοστοιχεία. Έπειτα θα συνεχίσει να αυξάνει κατά 10 και να σχεδιάζει τετράγωνα μέχρι να φτάσει το 90. Έτσι θα έχουμε τετράγωνα των 50, 60, 70, 80 και 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Γεια σου, είμαι η Τζανέτ, και είμαι ένας μηχανικός στη Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Και αν θέλουμε να σχεδιάσουμε πολλά τρίγωνα που οι πλευρές τους να έχουν διαφορετικά μεγέθη;
      3:
        image: notes/stage15_3.jpg
        text: Θα μπορούσαμε να γράψουμε όλο αυτό τον κώδικα με το χέρι ή μπορούμε να χρησιμοποιήσουμε μια συνάρτηση με παραμέτρους.
      4:
        image: notes/stage15_4.jpg
        text: 'Για να το κάνετε αυτό, κάντε κλικ στο μπλε αστέρι στον ορισμό της συνάρτησης «σχεδίασε ένα τρίγωνο». Στη συνέχεια, σύρετε το "εισάγετε όνομα" μέσα στο μπλοκ "εισαγωγή".'
      5:
        image: σημειώσεις/stage15_5.jpg
        text: 'Στη συνέχεια, αν γράψετε "μήκος" στο σημείο όπου λέει "x" και πατήσετε "Enter" θα δημιουργήσετε ένα μήκος εισόδου για τη συνάρτησή σας.'
      6:
        image: σημειώσεις/stage15_6.jpg
        text: 'Στη συνέχεια, κάντε κλικ πάνω στο αστέρι. Τώρα, θέλετε να κάνετε κλικ στην κατηγορία μεταβλητές και να σύρετε το μπλοκ "μήκος" μέσα στο μπλοκ "προχώρησε μπροστά" στον ορισμό της συνάρτησης. Και απομακρύνετε τον παλιό αριθμό μπλοκ.'
      7:
        image: σημειώσεις/stage15_7.jpg
        text: 'Για να χρησιμοποιήσετε τη συνάρτησή σας με παραμέτρους, κάντε κλικ στην κατηγορία συναρτήσεων και σύρετε τη συνάρτηση με όνομα "σχεδίασε ένα τρίγωνο με μήκος".'
      8:
        image: σημειώσεις/stage15_8.jpg
        text: 'Τώρα μπορείτε να χρησιμοποιήσετε το μπλοκ "μαθηματικά" για να εισάγετε διαφορετικούς αριθμούς ώστε να σχεδιάσετε τρίγωνα διαφόρων μεγεθών.'
    hoc_wrapup:
      1:
        image: σημειώσεις/hoc6_1.jpg
        text: Συγχαρητήρια! Με το τελευταίο παζλ που λύσατε, γράψατε τον κώδικα που μπορεί να πει σε οποιοδήποτε robot πώς να βρει την έξοδο σε έναν λαβύρινθο που δεν έχει πολύπλοκους διαδρόμους ή σε μια σήραγγα οποιουδήποτε μήκους. Το ρομπότ σας μπορεί να είναι ένα ζόμπι, ένα πουλί, ένα όχημα που κινείται στον πλανήτη Άρη, ή ακόμη και ένα αυτο-οδηγούμενο (χωρίς οδηγό) αυτοκίνητο.
      2:
        image: σημειώσεις/hoc6_2.jpg
        text: 'Οι βασικές έννοιες που χρησιμοποίησες είναι η καρδιά κάθε προγράμματος ή εφαρμογής που μπορεί να συναντήσεις.  Μάθαμε για βρόχους επανάληψης, για εντολές "επανάλαβε μέχρι", για εντολές "εάν" και "εάν αλλιώς".'
      3:
        image: σημειώσεις/hoc6_3.jpg
        text: Αν σου άρεσε η πρώτη σου ώρα στον προγραμματισμό, επισκέψου τον ιστότοπο code.org για να συνεχίσεις την εκπαίδευσή σου στην Πληροφορική! Μόλις ολοκληρώσεις την 20ώρη σειρά μαθημάτων μας, θα έχεις κατακτήσει τις βασικές γνώσεις του προγραμματισμού και θα μπορείς να αρχίσεις να μαθαίνεις πώς να γράψεις εφαρμογές για κινητά, οδηγίες για ρομπότ, παιχνίδια και ότι άλλο φανταστείς.
      4:
        image: σημειώσεις/hoc6_4.jpg
        text: |
          Η τεχνολογία αλλάζει όλα όσα κάνουμε και δεν έχει σημασία αν είσαι μικρός ή μεγάλος:
          ο προγραμματισμός είναι διασκεδαστικός, δημιουργικός και όλοι μπορούν να μάθουν!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Προβολή σημειώσεων, προσεχώς!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
