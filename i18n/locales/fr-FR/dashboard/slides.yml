fr:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bienvenue à ta première heure de code! Plongeons dans ton premier avant-goût de la programmation.
      2:
        image: notes/hoc1_2.jpg
        text: Nous allons utiliser Blockly, un langage de programmation visuel où tu déplaces des blocs pour écrire le code.
      3:
        image: notes/hoc1_3.jpg
        text: Généralement, on écrit le code, mais Blockly est un langage visuel. Chaque bloc correspond à une ligne de code.
      4:
        image: notes/hoc1_4.jpg
        text: "Vous allez apprendre les bases de l'informatique, des concepts utilisés partout : de la création d'applications jusqu'au contrôle du véhicule qui s'est posé sur Mars."
      5:
        image: notes/hoc1_5.jpg
        text: "Un programme est un ensemble d'instructions que ton ordinateur suit."
      6:
        image: notes/hoc1_6.jpg
        text: "Le but de ton premier programme est de guider un Angry Bird dans un labyrinthe afin d'attraper un Cochon Vert."
      7:
        image: notes/hoc1_7.jpg
        text: Sur le côté gauche il y a le labyrinthe où ton programme est exécuté. Les instructions pour chaque puzzle se trouvent sous le labyrinthe.
      8:
        image: notes/hoc1_8.jpg
        text: La boîte à outils du milieu a les commandes pour les Angry Birds. Tu vas utiliser celles-ci pour construire ton code.
      9:
        image: notes/hoc1_9.jpg
        text: Sur la droite il y a ton espace de travail où tu déposeras les blocs de la boîte à outils pour construire ton programme. Pour supprimer un bloc, déplace-le vers la poubelle dans le coin.
      10:
        image: notes/hoc1_10.jpg
        text: "Chaque bloc est une seule instruction. Si tu fais glisser un bloc « avancer » dans ton espace de travail et appuies sur « Exécuter le programme », l'oiseau se déplacera d'une case sur le labyrinthe."
      11:
        image: notes/hoc1_11.jpg
        text: "Pour faire plusieurs actions, vous pouvez faire glisser les blocs sur votre espace de travail et les attacher les uns aux autres. L'oiseau exécutera toutes les commandes de haut en bas."
      12:
        image: notes/hoc1_12.jpg
        text: 'Si tu exécutes un programme et tu veux le corriger et réessayer, appuie sur le bouton " Réessayer".'
      13:
        image: notes/hoc1_13.jpg
        text: Allons attraper ces cochons!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: "Salut, je suis JR ! Chaque équipe de voitures de course a besoin d'informaticiens pour gagner. Ils analysent les données de la voiture pour la faire aller plus vite."
      2:
        image: notes/stage5_2.jpg
        text: Dans ces puzzles, tu sera un artiste qui dessine une ligne derrière eux partout où ils vont.
      3:
        image: notes/stage5_3.jpg
        text: |-
          Ce bloc dit ''avances de 100 pixels." Les pixels sont en fait des points minuscules sur ton écran.
      4:
        image: notes/stage5_4.jpg
        text: Ce bloc dit « tourner à droite de 90 degrés. », cela fera tourner votre artiste du même angle que le bloc « tourner » dans les puzzles de labyrinthe.
      5:
        image: notes/stage5_5.jpg
        text: "Clique sur la flèche dans l'un de ces blocs pour changer le nombre de pas en avant ou de virages que l'artiste fera.  Joue un peu avec pour t'habituer à ces nouveaux blocs."
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: "Salut, je m'appelle Paola ! Dans ces puzzles, tu es un agriculteur qui doit complètement niveler son terrain avant de commencer à planter."
      2:
        image: notes/stage9_2.jpg
        text: "Tu dois l'aider à enlever tous les tas de terre et remplir tous les trous."
      3:
        image: notes/stage9_3.jpg
        text: "Les nouveaux blocs enlèvent une pelletée de terre d'une pile et remplissent un trou avec une pelletée de terre."
      4:
        image: notes/stage9_4.jpg
        text: Les tas et les trous sont de tailles différentes, donc tu devras dire à ton fermier combien de pelletées il doit utiliser.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: "Salut, je suis Katie! Une des choses les plus excitantes à propos de l'informatique est qu'un programme informatique peut être interactif."
      2:
        image: notes/flappy02.jpg
        text: "Chaque fois que quelqu'un clique ou appuie ou tape sur un ordinateur ou un téléphone, ça génère un EVENEMENT, et il y a un code qui décide quoi faire quand un EVENEMENT a lieu."
      3:
        image: notes/flappy03.jpg
        text: |-
          Par exemple, tu pourrais avoir un GESTIONNAIRE d'EVENEMENTS qui dit "quand la souris est cliquée, joues un son" 
      4:
        image: notes/flappy04.jpg
        text: "Tu as déjà entendu parler du jeu FlappyBird? En utilisant les gestionnaires d'Evénements, nous allons apprendre à programmer notre propre version personnalisée de FlappyBird!"
      5:
        image: notes/flappy05.jpg
        text: "Le code que tu vas écrire implique de glisser et placer les blocs qui représentent les commandes pour l'ordinateur. Sous la capuche, chacun de ses blocs est représenté par un code réel."
      6:
        image: notes/flappy06.jpg
        text: |-
          Si tu regardes au lieu de travail, il y a quelques blocs verts qui sont remplies pour toi - ce sont des "gestionnaires d'événements" 
      7:
        image: notes/flappy07.jpg
        text: |-
          Si tu veux que l'oiseau BATTE DES AILES quand tu CLIQUES sur la souris, tu peux faire ça en attachant le bloc " BATTRE DES AILES" au gestionnaire d'événements approprié, et maintenant dans ton jeu chaque fois que tu cliques sur la souris, l'oiseau va battre des ailes.
      8:
        image: notes/flappy08.jpg
        text: "Dans chaque puzzle de cette activité, nous allons introduire des nouveaux types d'événements comme des blocs verts au lieu de travail, et tu peux décider le bloc approprié à ajouter en réponse à ces événements."
      9:
        image: notes/flappy09.jpg
        text: 'Quand tu vois une flèche déroulante comme ça, ça veut dire que tu peux changer les paramètres - comme par exemple, quel son jouer quand flappy touche le sol.'
      10:
        image: notes/flappy10.jpg
        text: Dans le puzzle final, tu seras capable de créer ton propre jeu et de le partager avec tes amis. Bon amusement!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: "Salut, je m'appelle Mark! Apprenons un peu plus sur les boucles. En utilisant les boucles, tu peux dire à un ordinateur de répéter chaque série d'actions une ou plusieurs fois, jusqu'à des milliers ou même des milliards de fois."
      2:
        image: notes/hoc2_2.jpg
        text: "Dans ce puzzle, nous voulons faire bouger l'oiseau vers l'avant de 5 places pour arriver au cochon."
      3:
        image: notes/hoc2_3.jpg
        text: 'Nous pouvons nous aider en utilisant le nouveau bloc "répéter".'
      4:
        image: notes/hoc2_4.jpg
        text: |-
          Au lieu d'utiliser 5 blocs de type "avancer"...
      5:
        image: notes/hoc2_5.jpg
        text: |-
          Nous pouvons mettre le bloc "avancer" à l'intérieur du bloc "répéter" et écrire un nombre dans le bloc pour lui dire combien de fois il doit répéter.
      6:
        image: notes/hoc2_6.jpg
        text: |-
          Et ceci est important: tu peux mettre plus d'une commande à l'intérieur d'un bloc " répéter " .
      7:
        image: notes/hoc2_7.jpg
        text: 'Amuse-toi en utilisant ton nouveau bloc "répéter"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: |-
          Salut, je m'appelle Chris. Avant de me joindre à Miami Heat, j'ai été à Georgia Tech pour étudier l'informatique. Essayons notre nouveau bloc, le bloc "répéter jusqu'à".
      2:
        image: notes/hoc3_2.jpg
        text: "Et si on ne sait pas de quelle distance l'oiseau doit se déplacer pour arriver au cochon?"
      3:
        image: notes/hoc3_3.jpg
        text: |-
          Si nous mettons un bloc "avancer" à l'intérieur d'un bloc " répéter jusqu'à", l'oiseau va avancer JUSQU'À ce qu'il atteigne le cochon (ou qu'il se cogne sur un mur).
      4:
        image: notes/hoc3_4.jpg
        text: |-
          Et ceci est important: comme avant, on peut mettre plusieurs blocs à l'intérieur du bloc "répéter jusqu'à", et ils seront tous répétés.
    if:
      1:
        image: notes/hoc4_1.jpg
        text: |-
          Salut, je m'appelle Bill ! Nous allons apprendre un nouveau concept fondamental : les instructions "Si". C'est ainsi que les ordinateurs prennent des décisions.
      2:
        image: notes/hoc4_2.jpg
        text: |-
          Toi aussi tu utilises les instructions "si" chaque jour. Avant d'aller dehors chaque matin, tu te dis SI il pleut dehors, je dois porter mon imperméable.
      3:
        image: notes/hoc4_3.jpg
        text: "Nous pouvons dire au zombie d'aller vérifier SI il y a un chemin à gauche, et SI il en trouve un, il peut tourner dans cette direction."
      4:
        image: notes/hoc4_4.jpg
        text: |-
          Afin  d'écrire le code pour ceci, déposons un bloc "si" et mettons-y un bloc "tourner à gauche" à l'intérieur.
      5:
        image: notes/hoc4_5.jpg
        text: |-
          Maintenant, si nous mettons un bloc "avancer" au-dessus et englober le tout d'un bloc "répéter", chaque fois que le zombie bouge, il va vérifier si il y a un chemin à gaucher et tourner. La commande "répéter" est critique, pour vérifier si on peut tourner à chaque étape.
      6:
        image: notes/hoc4_6.jpg
        text: |-
          Les instructions "Si" sont vraiment importantes dans l'informatique. Un des premiers programmes que j'ai écrit était un jeu d'OXO, et il y avait une instruction Si qui disait SI l'autre personne est sur le point de gagner, bloque la case qui va le faire gagner.
      7:
        image: notes/hoc4_7.jpg
        text: 'Amuse-toi à utiliser le bloc "si"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: "Salut, je m'appelle Saloni. J'utilise l'informatique pour aider à résoudre des problèmes en santé et médecine. Apprenons un peu sur le bloc « si sinon ». Il ressemble au bloc « si », mais il a une partie à la fin qui dit « sinon »."
      2:
        image: notes/hoc5_2.jpg
        text: |-
          Si je mets un bloc "avancer plus" dans l'emplacement nommé "faire" et un bloc "tourner à gauche" dans l'emplacement nommé "autre", le zombie choisira une de ces 2 options. SI il y a un chemin le zombie avancera, SINON (il n'y a donc pas de chemin) le zombie tournera à gauche.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Comme pour le bloc "si", nous pouvons utiliser des blocs "si sinon" à l'intérieur de blocs de "répétition", afin que le zombie continue à se déplacer et que le bloc "si sinon" permette de vérifier s'il y a un endroit vers lequel se tourner.
      4:
        image: notes/hoc5_4.jpg
        text: Maintenant, ramène ces zombies à leur place!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "Une expressions si-sinon est une décision entre deux choses. Voyons comment nous pouvons utiliser les expressions si-sinon avec notre copain Scrat l'écureuil."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          Ce bloc est identique au bloc "si", mais il comporte une partie supplémentaire nommée "sinon". Si l'on pose un bloc "avancer" dans la partie "faire" et un bloc "tourne à gauche" dans la partie "sinon", cela signifie que l'écureuil Scrat va avancer s'il a un chemin devant lui. S'il n'a pas de chemin devant lui, Scrat va tourner à gauche.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          Il s'agit de prendre une décision et de faire une des deux actions en fonction de cette décision. Et comme pour les blocs "si", vous pouvez utiliser des blocs "si-sinon" à l'intérieur des blocs "répéter".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Maintenant, aidons Scrat l'écureuil à obtenir ce gland !"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Salut, je m'appelle Brina, une ingénieure à Instagram. Une fonction est un ensemble de lignes de code que vous souhaitez utiliser plusieurs fois. Ainsi, plutôt que de ré-écrire le même code plusieurs fois, vous pouvez simplement utiliser un bloc."
      2:
        image: notes/stage13_2.jpg
        text: Nous allons apprendre comment définir des fonctions. Les définitions de fonctions ont une étoile dans le coin. Le nom de la fonction est écrit sur la ligne du haut.
      3:
        image: notes/stage13_3.jpg
        text: |-
          Les blocs qui vont dans la définition nous disent ce que la fonction fait. Ainsi cette définition de fonction s'appelle "remplir 5 fois" et est composée d'un bloc "répéter" et d'un bloc "remplir.
      4:
        image: notes/stage13_4.jpg
        text: |-
          La définition se trouve sur l'espace de travail mais notre fermier ne démarrera pas la fonction tant que nous ne sortirons pas le bloc de fonction "remplir 5" de la catégorie fonctions.
      5:
        image: notes/stage13_5.jpg
        text: Amusons-nous avec les fonctions!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: |-
          Le bloc "tant que" exécute les actions qui se trouvent à l'intérieur de celui-ci TANT QUE la condition énoncée au dessus reste VRAIE.
      3:
        image: notes/stage9_7.jpg
        text: "Par exemple, si la fermière se tient sur une pile, elle continuera à enlever 1 pelletée TANT QU'il reste une pile sous elle."
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Salut, je m'appelle Trina, et je travaille pour Pixar. J'ai travaillé sur un tas de films, y compris Shrek."
      2:
        image: notes/stage11_2.jpg
        text: Ceci est notre nouvelle boucle « compteur ». Cette boucle répète des actions plusieurs fois, et vous pouvez légèrement changer les actions à chaque fois.
      3:
        image: notes/stage11_3.jpg
        text: "Dans cet exemple, notre boucle « compteur » dit « compter avec un compteur de 50 à 90 par pas de 10 » et à l'intérieur, nous avons notre bloc « dessiner un carré ». Déplace le bloc « compteur » de la section « Variables » à l'emplacement de « longueur »."
      4:
        image: notes/stage11_4.jpg
        text: "Cela signifie que notre artiste va dessiner un carré qui a des côtés de 50 pixels de longueur, puis y ajouter 10 et dessiner un carré de côté de 60 pixels de longueur. Puis il va continuer d'ajouter 10 et dessiner des carrés jusqu'à ce qu'il atteigne 90. Ainsi nous aurons des carrés de 50, 60, 70, 80 et 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Salut, je m'appelle Janete, et je suis ingénieur chez Zynga."
      2:
        image: notes/stage15_2.jpg
        text: Que faudrait-il faire pour dessiner un ensemble de triangles de différentes tailles ?
      3:
        image: notes/stage15_3.jpg
        text: Nous pouvons écrire tout ce code à la main, ou bien utiliser une fonction avec des paramètres.
      4:
        image: notes/stage15_4.jpg
        text: "Pour ce faire, clique sur l'étoile bleue dans la définition de la fonction « dessiner un triangle ». Ensuite déplace le bloc « nom d'entrée » vers le bloc « entrée »."
      5:
        image: notes/stage15_5.jpg
        text: "Ensuite, si tu écris « longueur » à l'endroit où se trouve « x » et presse « ENTREE », cela créera, pour ta fonction, un paramètre d'entrée de la longueur."
      6:
        image: notes/stage15_6.jpg
        text: |-
          Clique ensuite sur l'étoile. Maintenant clique sur la catégorie variables et déplace le bloc "longueur" dans le bloc "avancer" de ta définition de fonction. Finalement, déplace le vieux bloc nombre à l'extérieur.
      7:
        image: notes/stage15_7.jpg
        text: |-
          Pour utiliser ta fonction avec des paramètres, clique sur la catégorie fonctions et déplace ta fonction "dessine un triangle de longueur" vers l'extérieur.
      8:
        image: notes/stage15_8.jpg
        text: Tu peux maintenant utiliser le bloc mathématique pour saisir différents nombres et dessiner des triangles de différentes tailles.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Félicitations! Avec le dernier puzzle que tu viens de résoudre, tu viens juste d'écrire un code qui dit à N'IMPORTE QUEL robot où trouver son chemin entre un labyrinthe sans ramifications ou un tunnel de n'importe quelle longueur, qu'il soit un zombie, un oiseau, un rover de Mars, ou même une voiture qui se conduit toute seule."
      2:
        image: notes/hoc6_2.jpg
        text: "Les concepts fondamentaux que tu as utilisés sont au coeur de chaque programme ou application que tu utiliseras. Nous avons appris les boucles Répéter, Répéter jusqu'à, ainsi que les énoncés Si et Si Sinon."
      3:
        image: notes/hoc6_3.jpg
        text: "Si tu as aimé ta première heure de code, visite code.org pour continuer ton éducation en informatique! Une fois que tu auras complété 20 heures de cours, tu auras maîtrisé les bases de la programmation, et tu pourras commencer à apprendre comment écrire des applications pour téléphones, des instructions de robot, des jeux...  C'est toi qui choisis."
      4:
        image: notes/hoc6_4.jpg
        text: "La technologie change tout ce que nous faisons et peu importe qu'on soit jeune ou pas: programmer est amusant, c'est un processus créatif, et n'importe qui peut l'apprendre !"
    20_wrapup:
      1:
        image: notes/bird.png
        text: Montrer les notes à venir bientôt !
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Bonjour, je suis Lyndsey. Je modélise, joue et écris mes propres applications. Utilisons du code pour rassembler Anna et Elsa tandis qu'elles explorent la magie et la beauté de la glace."
      2:
        image: notes/frozen1_2.jpg
        text: Tu vas créer des flocons de neige et des motifs en patinant, et créer un monde magique hivernal que tu pourras partager ensuite avec tes amis.
      3:
        image: notes/frozen1_3.jpg
        text: "Durant l'heure qui vient, tu vas appendre les bases du code. La programmation traditionnelle est généralement en texte, mais nous allons utiliser Blockly, qui utilise des blocs visuels que tu peux glisser et déposer pour écrire des programmes. C'est ainsi que mêmes les étudiants en université apprennent les bases. Mais derrière le vernis, c'est bien toujours du code que tu crées."
      4:
        image: notes/frozen1_4.jpg
        text: "Un programme est un ensemble d'instructions qui disent à une ordinateur quoi faire. Construisons un code, ou un programme, qui va aider Elsa à créer une simple ligne. Nous l'utiliserons plus tard pour créer des motifs plus complexes."
      5:
        image: notes/frozen1_5.jpg
        text: Ton écran est divié en trois parties. Sur la gauche, on trouve la surface de glace sur laquelle tu vas exécuter ton programme. Les instructions pour chaque niveau sont écrites juste en dessous de cette surface.
      6:
        image: notes/frozen1_6.jpg
        text: "La zone du milieu est la boîte à outils, et chacun de ces blocs est une action qu'Elsa et Anna peuvent faire."
      7:
        image: notes/frozen1_7.jpg
        text: |-
          L'espace blanc sur la droite est appelé l'espace de travail, et c'est ici que nous allons construire notre programme. Pour se déplacer autour de la surface de glace, tu vas utiliser le bloc "avancer".
      8:
        image: notes/frozen1_8.jpg
        text: |-
          Ici, le bloc "avancer' dit "avance de 100 pixels". Quand tu appuies sur "Run" que ce passe-t-il ? Elsa se déplace en avant sur une certaine distance sur l'écran, 100 pixels en fait ! Les pixels sont, en gros, de minuscules carrés sur ton écran d'ordinateur.
      9:
        image: notes/frozen1_9.jpg
        text: |-
          L'autre bloc que nous avons dans cette épreuve dit "tourne à droite de 90 degrés". Et quand nous utilisons ce bloc "Tourne à droite", cela fait tourner Elsa d'un certain angle. Tu peux jouer avec pour voir de combien tu veux qu'Elsa tourne. Cet angle est mesuré à partir du chemin qui se trouve en face d'Elsa. Ainsi, ceci est un tour à 90 degrés. Et ceci un tour à 120 degrés.
      10:
        image: notes/frozen1_10.jpg
        text: "N'oubliez pas, vous pouvez modifier le nombre de pixels et de degrés en cliquant sur les flèches sur le côté."
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Salut, je suis Paola ! Les ordinateurs sont vraiment bons pour faire des actions répétitives. Tu peux compter jusqu'à 10, 20 ou 100. Mais un ordinateur peut compter jusqu'à 1 milliard ou 1 billion. Il ne s'ennuiera pas et ça ne lui prendra que quelques secondes. Que ce soit pour compter, dessiner, ou faire n'importe quoi, les ordinateurs peuvent répéter des choses des centaines, ou même des milliards de fois."
      2:
        image: notes/frozen2_2.jpg
        text: "En programmation, nous appelons ceci une boucle. Une boucle est ce que l'on utilise pour répéter son code maintes et maintes fois. Pour l'épreuve suivante, ton but est d'aider Anna à créer un carré avec le bloc « Répéter »."
      3:
        image: notes/frozen2_3.jpg
        text: "Tous les blocs de code que tu places à l'intérieur du bloc « Répéter » seront répétés les uns après les autres, autant de fois que tu le souhaites."
      4:
        image: notes/frozen2_4.jpg
        text: |-
          Pour dessiner un carré, tu peux utiliser le bloc "avancer" et "tourner à droite" quatre fois. Mais la façon la plus simple est de dire à l'ordinateur "avance" et "tourne à droite de 90 degrés" une seule fois, et de lui dire ensuite de répéter ce groupe d'actions quatre fois. Pous cela, tu dois placer le bloc "avancer" et "tourner à droite" à l'intérieur d'un bloc "Répéter".
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Souviens-toi, tu peux utiliser le nombre que tu veux dans le bloc "Répéter" , et cela va répéter l'intérieur du bloc autant de fois que tu as choisi.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "Salut, je suis Chris Bosh. Je suis un joueur de basket-ball professionnel, et j'ai codé au lycée."
      2:
        image: notes/frozen3_2.jpg
        text: "Un des concepts les plus importants en informatique est la manière de définir des nouvelles commandes. La plupart des ordinateurs n'ont qu'une centaine de commande ou de mots. Et en fait, l'art et la magie consiste à définir tes propres nouveaux mots à partir de ces premières briques."
      3:
        image: notes/frozen3_3.jpg
        text: "Une fois que tu as appris à un ordinateur comment faire une action une fois en utilisant cette suite de commandes, tu peux donner un nom à cette action pour qu'elle soit plus facile à répéter ensuite. Quand tu définis ta propre commande et lui donne un nom, on appelle ça une fonction."
      4:
        image: notes/frozen3_4.jpg
        text: "Salut, je suis Jess. Lorsque tu programmeras avec des blocs, tu pourras utiliser des fonctions au lieu de reproduire un ensemble d'actions plusieurs fois. Un exemple de fonction est le code que tu as écrit pour faire un carré."
      5:
        image: notes/frozen3_5.jpg
        text: 'Tu peux définir ceci comme une fonction "créer un carré".'
      6:
        image: notes/frozen3_6.jpg
        text: Tu as maintenant un nouveau bloc que tu peux utiliser plusieurs fois pour créer plusieurs carrés.
      7:
        image: notes/frozen3_7.jpg
        text: "Beaucoup de formes simples peuvent être utilisées pour créer des motifs plus complexes. Dans l'épreuve suivante, le code que tu as écrit récemment pour faire un cercle est à ta disposition en tant que nouvelle fonction capable de faire des cercles de différentes tailles. Peux-tu l'utiliser pour aider Elsa à créer des motifs beaux et complexes dans la neige?"
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nous allons créer des jeux avec le Labo. Les bons jeux ont une histoire, et chaque histoire a des acteurs. Nous allons apprendre comment faire parler, bouger et intéragir des acteurs tels que des sorcières, des extra-terrestres, et animaux. À la fin de cette leçon, tu pourras créer un jeu à partir de rien et le partager avec tes amis.
      2:
        image: notes/playlab_intro_2.png
        text: "Votre écran se divise en trois parties. A la gauche, se trouve l'espace de jeu où le programme va s'exécuter. Les instructions pour chaque niveau sont écrites en dessous."
      3:
        image: notes/playlab_intro_3.png
        text: "La zone centrale est la boîte à outils, et chacun de ces blocs est un bout de code. L'espace sur la droite est appelé l'espace de travail et c'est ici que nous allons construire notre programme."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          Pour commencer, tu devras relier tes blocs au bloc "lors du lancement". Tu peux relier plusieurs blocs ensemble en les glissant jusqu'à ce que tu voies la ligne jaune, et il s'emboiteront alors ensemble.
      5:
        image: notes/playlab_intro_5.png
        text: "Dans ce premier puzzle, notre acteur est un manchot et nous allons lui faire dire « Bonjour » en faisant glisser le bloc « dire », en l'accrochant au bloc « lors du lancement » , et en tapant « Bonjour ». Nous pouvons aussi faire bouger le manchot en utilisant les blocs « aller à droite » et « aller à gauche ». Une fois tes blocs en place, appuie sur « Démarrer » pour voir ce que tu as programmé."
      6:
        image: notes/playlab_intro_6.png
        text: Commençons, et à la fin tu seras capable de créer ton propre jeu avec toutes sortes de joueurs qui peuvent interagir, devenir content ou triste, gagner des points, ou jeter des boules de feu, ou même disparaître. tout dépend de toi et du jeu que tu souhaites faire.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "À présent, nous allons apprendre une chose que tous les programmeurs de jeu utilisent. On appelle ça des événements. Un événement dit à ton programme d'écouter lorsque quelque chose se produit. Quand cette chose arrive, il effectue une action."
      2:
        image: notes/playlab_events_2.png
        text: "Quelques exemples d'évènements sont l'écoute des clics de souris, une touche fléchée, ou un effleurement de l'écran."
      3:
        image: notes/playlab_events_3.png
        text: |-
          Ici, nous allons faire en sorte que le robot de l'espace salue les terriens quand on clique sur lui. Nous lui dirons d'utiliser le bloc "quand tu es cliqué" et d'y attacher le bloc "dire". Quand le joueur clique sur le robot de l'espace, tout ce qui est attaché à cet évènement "quand tu es cliqué" sera exécuté. Qu'en dit ton extra-terrestre ?
      4:
        image: notes/playlab_events_4.png
        text: 'Il y a aussi des blocs "quand flèche ...". Si tu les relies à des blocs "se déplacer", tu peux commencer à déplacer tes acteurs vers le haut, le bas, la droite ou la gauche. Petit à petit, ton jeu devient plus interactif.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: |-
          Voici le bloc "répète à l'infini". Tout ce qui se trouve dans ce bloc sera effectué sans arrêt tout au long du jeu.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          Si tu veux qu'un acteur fasse quelque chose de manière répétée, sans que le joueur ait à faire quoi que ce soit, nous allons placer cela dans le bloc "répète à l'infini".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: "Dans la prochaine épreuve notre but est d'aider le magicien à patrouiller le long des frontières du royaume, à gauche et à droite en continu. En apprenant comment fonctionne les commandes de répétition, tu gagneras énormément de temps quand tu feras ton propre jeu."
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: "Ce sont des blocs de dessin. Utilisez le bon bloc pour déplacer l'artiste là où il doit se rendre pour repasser les lignes grises."
      2:
        image: notes/C1_artist_intro_2.png
        text: "Ce sont des blocs de saut. Lorsque tu utilises ces blocs, ton artiste se déplace sans dessiner, alors utilise-les pour sauter jusqu'à la prochaine ligne grise."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Abeilles ne sont-elles pas super cool ? Dans cette prochaine série d'énigmes, votre objectif est d'aider l'abeille a aller jusqu'aux fleurs et a prendre le nectar des fleurs puis le ramener jusqu'à la ruche des abeilles. Vous devrez utiliser les blocs "prendre le nectar" et « faire le miel » pour cet exercice.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: "Chaque fleur possède un nombre différent de nectars: 1, 2, 3 ou plus. Nous connaissons le nombre de nectar dans les fleurs rouges par le petit nombre écrit dans le coin. Donc n'oubliez pas d'obtenir tout le nectar de la fleur avant d'avancer. En outre, chaque nid d'abeilles contient autant de miel que nécessaire : 1, 2, 3 ou plus. Donc n'oubliez pas de récolter autant de miel que le nid d'abeille peut contenir."
      3:
        image: notes/C1_bee_level_intro_3.png
        text: "Si vous êtes en mesure d'obtenir tout le nectar et faire tout le miel, vous avez réussi et vous passez au prochain niveau. Dans le cas contraire, vous devrez recommencer ce puzzle. Jouez un certain temps et vous allez voir ce qu'on ressent à « être (jeu de mot avec bee = abeille)» un programmeur !"
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "Une boucle est une répétition de l'activité. Donc, aller dans une ruche et l'inspecter, regarder un cadre, puis je le remettre, donc je répète cette même activité plusieurs fois. Il existe donc une boucle autour, qui fait la même activité plusieurs fois."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          Dans ce niveau, nous voulons que l'abeille de récolte trois nectars de la fleur. Au lieu d'utiliser trois blocs "obtenir le nectar", vous allez utiliser le bloc de répéter pour obtenir nectar trois fois. Cliquez sur « Exécuter» et voir si vous avez juste. Sympa !
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "Cette leçon est appelé le grand événement. Il est tout au sujet de la façon dont nous pouvons contrôler nos programmes et de réellement changer la façon dont un programme fonctionne directement en utilisant les événements, comme la poussée d'un bouton ou un clic de souris."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "Pour cette leçon, vous allez contrôler une télécommande de papier. C'est comme un jeu vidéo réelles."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "Un événement est une action qui provoque quelque chose se passe. C'est comme quand vous cliquez sur le bouton sur une souris et charge une page Web. C'est un événement. Quand vous touchez votre écran sur une tablette pour faire défiler, c'est aussi un événement. Événements sont un excellent moyen de laisser l'utilisateur direct votre programme chaque fois qu'ils ont besoin ou que vous voulez."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: "Nous devons anticiper. Nous nous sentons affamés et nous allons dans le réfrigérateur. Nous entendons le facteur venez il met notre courrier dans la boîte aux lettres et ensuite, nous allons obtenir notre courrier. Ceux type d'action qui sont comme les événements : pousser un bouton ou déplacer un joystick. Il existe quelque chose qui se passe nous déclenche une envie de faire quelque chose."
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: "Dans les jeux vidéo, il y a un événement appelé « Update » et il arrive 30 ou 60 fois par seconde. Pour les programmeurs de jeux vidéo c'est presque plus important comme un événement que les boutons ou le joystick."
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |
          L'évènement principal qu'on attend, c'est que la case de mise à jour soit cochée. Ensuite on va vérifier la manette de jeu dans la case. 
          Donc on dit, "Est-ce que quelqu'un a poussé le bouton dans ce cadre? Oui ou non?"
          Sans les évènements, le joueur ne pourrait pas bouger, il ne pourrait pas sauter, il ne pourrait pas contrôer ce qui se passe. Le jeu vidéo ne pourrait rien animer.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "Dans la sculpture de sable, il faut que tu saches que l'échec fait partie du programme. Mais si tu persistes, le jeu deviendra de mieux en mieux et de plus en plus excitant pour toi. La persistance, c'est la clé de ce jeu. Accroche-toi, tu vas adorer ça."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "Cette leçon s'appelle Comment Construire Une Fondation. Dans cette leçon, on va travailler sur une tâche qui est vraiment difficile. Tu vas devoir trouver une façon de construire une structure au moins aussi haute que l'une de ces tasses, et il faut qu'elle soit assez solide pour qu'elle puisse soutenir le poids d'un livre."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "Il est possible que souvent ta création ne marche pas. Tu vas sûrement passer par des moments où tu te sentiras frûstré(e) et où tu voudras laisser tomber. Il y aura peut-êre beaucoup de ces moments-là. Mais si tu continue d'essayer, si tu donnes et redonnes ton meilleur effort, alors c'est sûr que tu y arriveras bientôt."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "La persistance, c'est de s'accrocher au moment où on a vraiment envie de laisser tomber. Si tu veux créer quelque chose de nouveau et de différent, il va forcément y avoir beaucoup d'échecs sur ton chemin."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "Pour réussir à être persistant, il faut choisir de continuer et d'apprendre par ses erreurs au lieu de laisser tomber parce qu'on se sent frustré. La frustration, en fait, ça veut dire qu'il va se passer quelque chose de fantastique au prochain tournant. Donc, ne laisse pas tomber avant d'y arriver ! Youhou !"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Bonjour, je m'appelle Miral Kotb et je suis le créateur d'Illuminate. Dans mon travail, il y a quelque chose que nous utilisons pour les danses et pour les programmations de costumes. Et cette chose, c'est une boucle ! Les boucles servent àrépéter des évènements encore et encore."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "Quand on répète quelque chose plusieurs fois, comme par exemple mes mouvements pour que le hula hoop continue de tourner, on fait ce qui s'appelle une boucle. Ceci est une boucle. Ceci est une boucle. Et ceci est une boucle."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Aujourd'hui, on va faire une boum. On va créer des boucles avec une nouvelle danse: l'itération. On va en apprendre plus sur les boucles en utilisant une danse. Tu vas apprendre une paire de pas faciles, et les répéter encore et encore pour compléter la danse."
      4:
        image: notes/C1_getting_loopy_4.png
        text: "Voici les pas que tu dois apprendre. Frappe dans tes mains. Mets tes mains derrière ta tête. Mets tes mains sur tes hanches. Lève ta main gauche. Lève ta main droite. C'est facile, non ? Tu vas découvrir que tu peux raccourcir tes instructions en mettant certains pas de danse en boucle."
      5:
        image: notes/C1_getting_loopy_5.png
        text: "On utilise vraiment des boucles dans notre danse. Les danseurs portent des ordinateurs, et ils sont tous sur le même réseau. Je pourrais mettre les lumières en boucle sur les mêmes danseurs encore et encore. Dans la boucle, je pourrais mettre une itération dans laquelle je dirais que je veux que les six danseurs passent en boucle encore et encore et ensuite, dans la boucle elle-même, je vais augmenter la vitesse de la lumière. Et tout ça se crée avec des boucles. Les boucles sont importantes dans la programmation parce qu'elles rendent notre travail plus simple et plus court."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "Cette leçon s'appelle Les Joyeuses Cartes. Aujourd'hui nous allons aider notre petit copain poilu, Flurb, à arriver près de ses fruits."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Fais aller ton Flurb vers tes fruits. Pour cela, tu vas devoir comprendre de quel côté le Flurb doit aller et diriger ses flèches. Pour que le Flurb arrive à la pomme, dans quelle direction doit-il aller ? Pointe-le dans la bonne direction pour qu'il monte."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: "Pour qu'il y aille, tu dois encercler la direction dans laquelle il doit aller."
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Crée ton algorithme on collant des flèches à côté de la carte que tu essaies de décoder. Le deuxième algorithme sera le même sauf qu'il descendra."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "C'est comme de programmer avec du papier. Et voilà !"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Débugger, c'est trouver et résoudre des problèmes. Il y a beaucoup de façons de débugger des problèmes. L'une des plus simples consiste à avancer instruction par instruction jusqu'à ce que tu trouves le moment où quelque chose cloche. Ici, j'essaie de faire un salto arrière sur la poutre, mais je n'arrête pas de tomber."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "Je suis repassé sur chaque étape pas à pas et j'ai réalisé où était mon erreur. Je ne positionnais pas mes mains correctement sur la poutre. Alors j'ai essayé un autre salto arrière sur la poutre avec ma nouvelle position pour les mains et j'ai réussi. J'étais vraiment contente d'avoir débogué mon salto arrière."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "Pour apprendre le débogage, nous commençons avec un ensemble de blocs déjà sur l'espace de travail. Tu remarqueras que ces blocs ne te permettent pas d'atteindre l'objectif. Nous avons besoin de déboguer la solution et corriger. Qu'est ce qui n'a pas fonctionné ? Tu remarqueras que devais continuer à aller vers l'Ouest d'une cas de plus."
      4:
        image: notes/C1_maze_debugging_4.png
        text: |-
          Nous allons résoudre ce problème en ajoutant un autre bloc à l'ouest et en appuyant sur "Démarrer" pour voir si tu as réussi. Yeah, tu l'as eu !
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: "Pour ce puzzle, vous devez amener déplacer l'oiseau jusqu'au cochon. Regardez le puzzle pour voir quel direction prendre."
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: "Tu dois faire glisser les blocs de la boîte à outils vers l'espace de travail. Assure-toi que c'est sous le bloc « quand l'exécution commence » et lorsque tu penses que tu as la bonne solution, alors tu peux cliquez sur « Démarrer» et regarder l'oiseau aller jusqu'au cochon."
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "Les ordinateurs sont vraiment doués pour répéter des actions. En tant que personne, tu t'ennuierais beaucoup si tu devais faire la même chose beaucoup de fois d'affilée. Mais un ordinateur peut faire la même chose des millions ou même des milliards de fois sans s'ennuyer et réussir à le faire très bien."
      2:
        image: notes/C1_maze_loops_2.png
        text: "Ainsi, par exemple, si je voulais souhaiter à tout le monde sur Facebook un joyeux anniversaire en leur envoyant un email, cela pourrait me prendre plus d'un siècle pour écrire tous ces mails à tout le monde. Mais avec seulement quelques lignes de code, je peux avoir un système pour envoyer un email à tout le monde sur Facebook pour leur souhaiter un joyeux anniversaire."
      3:
        image: notes/C1_maze_loops_3.png
        text: "Pour que l'oiseau aille jusqu’au cochon à ce niveau... plutôt que de faire glisser trois blocs Nord vers l'espace de travail, tu utiliseras le bloc « répéter ». Fais glisser le bloc « répéter » sur l'espace de travail et entre le numéro 3. Ensuite, fais glisser le bloc « déplacer vers le Nord » dans le bloc « répéter » et cliquez sur « Démarrer» pour voir si c'est bon. Félicitations, tu as réussi !"
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "Cette leçon est appelée bouge-le, bouge-le. Ensemble, nous allons écrire un programme pour déplacer nos amis, de la rose des vents jusqu'au smiley."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Mais le smiley est tête en bas et une seule personne sait comment y aller. Commençons ce programme.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "Un programme est un algorithme qui a été en codé de façon à pouvoir être exécuté par une machine. La plupart d'entre nous voient un programme comme quelque chose que l'on écrit pour un ordinateur. Les programmes sont parfaits pour cela, mais ils sont également utiles à d'autres endroits. Tu peux programmer ton propre jeu ou même programmer un robot qui pourra faire des choses pour toi."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          Mon nom est Jérémie. Salut ! J'ai 7 ans. J'aime jouer sur l'ordinateur de ma maman mais je demande toujours d'abord la permission. "Maman, je peux aller sur l'ordinateur ? Bien sûr mon chéri !"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "J'aime l'ordinateur de ma maman parce que je peux aller sur internet. Internet c'est un peu comme ton voisinage. Tu peux visiter des endroits supers, parler à la famille et aux amis et tu peux apprendre plein de choses nouvelles."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Hier, j'ai visité un zoo près de ma maison. J'ai vu un bébé zèbre. J'ai pris une photo et j'ai changé la couleur des rayures, puis ajouté un chapeau et je l'ai ajouté à ma collection d'animaux farfelus. Génial ! Plus tard, je suis allé très très loin. J'ai visité le Kenya. C'est un pays en Afrique. Plein de zèbres y vivent."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Parfois sur Internet, je parle à des gens que je connais, comme ma grand-mère, qui vit dans un autre état. Salut Mamie! Elle me fait des cookies qu'elle m'enverra pour mon anniversaire. "Miam, j'aimerais que l'odeur passe par Internet !". Je peux parler à beaucoup de gens par Internet, comme mon cousin, mais je ne parle qu'aux gens que je connais.
      5:
        image: notes/C1_going_places_safely_5.png
        text: "Ce que j'aime le plus sur Internet, c'est que je peux jouer à des jeux amusants. Gagné ! J'aime aussi dessiner et créer de nouvelles choses et les partager avec mes amis. Cool ! Parfois, je visite des sites où j'apprends de nouvelles choses, mais je reste toujours sur les sites qui sont bien pour moi. Oh, des dinosaures !"
      6:
        image: notes/C1_going_places_safely_6.png
        text: "Internet est un lieu très amusant. Mais comme quand tu traverse une rue dans ton quartier, tu dois être prudent en ligne. Voici trois règles à retenir. Règle numéro 1 : Demande toujours à tes parents d'abord. Règle numéro 2 : Ne parle qu'aux gens que tu connais. Règle numéro 3 : Reste aux endroits qui sont adaptés pour toi."
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wouah, c'était amusant ! Heure du dîner. Je me déconnecte maintenant. Je suis impatient de me reconnecter pour voir où je peux aller après."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Aujourd'hui, nous allons en savoir plus sur la programmation en binôme. Dans la programmation en binôme, tu travailles en équipe. Pourquoi deux personnes devraient utiliser un seul ordinateur ? Parce que deux têtes valent mieux qu'une. Dans la programmation en binôme, toi et ton partenaire allez vous asseoir ensemble devant le même ordinateur et vous allez travailler sur le même projet."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Si vous pouvez épeler ce mot, ils sera présent dans la zone au-dessous. Mais attention abeille ! Déplacer dans la mauvaise direction ajoutera des lettres que vous ne voulez pas.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "Les ordinateurs sont vraiment doués pour répéter des actions. En tant que personne, tu t'ennuierais beaucoup si tu devais faire la même chose beaucoup de fois d'affilée. Mais un ordinateur peut faire la même chose des millions ou même des milliards de fois sans s'ennuyer et réussir à le faire très bien."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: "Ainsi, par exemple, si je voulais souhaiter à tout le monde sur Facebook un joyeux anniversaire en leur envoyant un email, cela pourrait me prendre plus d'un siècle pour écrire tous ces mails à tout le monde. Mais avec seulement quelques lignes de code, je peux avoir un système pour envoyer un email à tout le monde sur Facebook pour leur souhaiter un joyeux anniversaire."
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "Tu ne serais même pas qualifié pour la course si tu n'avais pas les gens qui sont compétents en informatique en raison de la quantité de données collectées par les voitures et la nécessité d'être en mesure d'avoir des gens capable d'écrire des programmes pour savoir comment continuer à être performant."
      2:
        image: notes/C2_artist_intro_2.png
        text: Dans ces puzzles, tu seras un artiste qui utilise un crayon pour dessiner différentes formes. Partout où ton artiste va, elle dessine une ligne derrière elle.
      3:
        image: notes/C2_artist_intro_3.png
        text: |-
          Pour te déplacer sur la zone de dessin, tu vas utiliser le bloc "avancer plus". Ici le bloc "avancer plus" signifie un déplacement vers l'avant de 100 pixels. Que se passe-t-il lorsque l'on appuie sur "Démarrer" ? L'artiste avance un certaine distance et cette distance est de 100 pixels. Les pixels sont simplement de très petits carrés sur l'écran de votre ordinateur.
      4:
        image: notes/C2_artist_intro_4.png
        text: |-
          L'autre bloc que nous avons dans ce puzzle est "tourner à droite de 90 degrés". Et quand nous l'utilisons, cela fait tourner notre Artiste d'un certain angle. Tu peux donc jouer cet angle selon la rotation souhaitée pour l'Artiste. Il s'agit d'un virage à 90 degrés.
      5:
        image: notes/C2_artist_intro_5.png
        text: "Et il s'agit d'un virage de 120 degrés. Et n'oublie pas, tu peux modifier ces valeurs en cliquant sur les flèches à côté du nombre de pixels et de degrés. Amuses toi bien à dessiner avec ton artiste !"
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: "Il s'agit du bloc conditionnel. Il dit que SI il y a du nectar ou du miel qui est inférieur, égal ou supérieur à un certain nombre, ALORS faire quelque chose."
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "Cela est utile lorsque nous ne savons pas combien de nectar ou miel est à obtenir, comme nous le voyons ici avec ce point d'interrogation."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "Dans cet exemple, nous allons dire SI la fleur pourpre a du nectar supérieur à 0, prendre du nectar. Ce qui dira à notre abeille de continuer à prendre du nectar tant qu'il y en a. Tadam !"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: "C'est la leçon sur les bracelets binaires. Nous allons coder nos initiales sur un bracelet que nous pourrons porter et montrer à tous nos amis !"
      2:
        image: notes/C2_binary_bracelets_2.png
        text: "Le binaire est une façon de représenter des informations à l'aide de seulement deux valeurs. Parfois les gens imaginent cela uniquement comme des 1 et des 0. Mais tu peux te représenter le binaire comme une combinaisons d ouvert ou fermé, haut ou bas, dedans ou dehors ou vraiment tout ensemble des contraires."
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Salut, je suis Orion et je programme des robots ici à Play-im. Tous les ordinateurs et cerveaux des robots sont constituées de petites portes électroniques à leur niveau le plus fondamental. Lorsque la porte est ouverte, l'électricité peut circuler, et lorsqu'elle est fermée, l'électricité ne circule pas."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "Les yeux du robot sont un exemple de binaire sur le robot. Les yeux du robot sont des LEDs et celles-ci sont des lumières qui sont soit allumées soit éteintes. C'est un système binaire, l'un ou l'autre. Nous pouvons utiliser les lumières pour représenter des nombres binaires. Si nous avons un ensemble de robots, nous pouvons dire que le premier robot est à la place 1 et le second robot est la 2, le troisième robot est la 3 et ainsi de suite. Voilà comment représenter un nombre binaire. Les robots vont le faire avec leurs yeux binaire et compter pour vous."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: "Cette leçon s'appelle instructions conditionnelles avec les cartes. Chaque jour tu prends des décisions fondées sur ce que tu vois et entends."
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "Je veux marcher vers le parc, mais tout d'abord, je dois décider si je devrais prendre un parapluie ou non. Donc je regarde par la fenêtre. Si c'est nuageux, je vais prendre mon parapluie. Sinon, je vais prendre des lunettes de soleil. Je pense que je ferais mieux de prendre le parapluie. Ce que je vois et entends détermine ce que je prends pour le parc."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: "Les instructions conditionnelles sont utilisées dans les jeux aussi. Aujourd'hui, nous allons nous exercer à l'utilisation d'instructions conditionnelles avec un jeu de cartes. Dans ce jeu, la carte que j'ai dessiné détermine ce que mes amis vont faire. Si je tire un sept, tout le monde applaudit. Sinon, tout le monde dit « Waouw». Essayons-le ! « Waouw» « merci»"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: "Je parie que tu peux faire des jeux qui sont encore plus marrants avec les instructions conditionnelles. Fais un essai ! Les instructions conditionnelles sont ce qui donne l'impression que les ordinateurs sont intelligents. Un programme informatique qui contient des instructions conditionnelles peut réagir à l'utilisateur et modifier sa façon d'agir."
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Pensez à ton jeu vidéo préféré. Gagnes-tu plus de points pour certaines actions que tu fais pour les autres ? Cela se produit car l'ordinateur utilise des instructions conditionnelles. C'est la façon dont un ordinateur prend une décision. Que dirais-tu si, lorsque tu touches la cible, tu gagnes 10 points. Sinon, tu en perds trois. Quand on sait comment fonctionnent les instructions conditionnelles, on peut créer toutes sortes de jeux passionnants."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Ici nous avons déjà quelques blocs positionnés dans notre espace de travail. Mais il y a quelque chose qui cloche.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Débogue ce code en ralentissant la vitesse et en regardant ce qu'il se passe pour chaque bloc pas à pas."
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ah, il y a un problème ! Les moustaches du chat font 75 pixels de long, pas 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "As-tu déjà entendu parler de débogage de programme ? Il s'agit d'un moyen pour comprendre ce qui ne fonctionne pas. Lorsque tu débogues du code, tu identifies et supprimes les erreurs."
      2:
        image: notes/C2_bee_debugging_2.png
        text: |-
          Ici, tu démarres avec quelques blocs déjà positionnés dans l'espace de travail. Nous allons utiliser le bouton "Étape" pour parcourir les blocs, pas à pas, pour voir si c'est la bonne solution et où nous devrions corriger.
      3:
        image: notes/C2_bee_debugging_3.png
        text: |-
          On dirait que notre problème est là ! Nous avons besoin d'un bloc "avancer plus" supplémentaire. Le bouton "Étape" nous aide à déboguer notre problème en identifiant où est l'erreur et ainsi corriger.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Tu as un chapeau sur ta tête et ton cerveau te dira où tu es, de penser que tu es au zoo et de saluer untel et untel ! Utilise ta tête lorsque tu es connecté pour garder ce qui te concerne dans ton cerveau et pour savoir comment être en sécurité, comment faire pour garder un espace de vie privée dans ta vie ! De la tête au pied, fais une pause et réfléchis. Des pieds au nez, fais une pause et pense connecté !
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Utilise ton cœur pour croître et grandir et pour être resplendissant et pour avoir un amour, dire à quelqu'un que vous serez sien ! Utilise ton cœur quand tu es connecté, sent ce qui est juste et toujours aimable et montre du respect à tes amis, pour être juste et agréable sur Internet. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Utilise tes bras pour câliner ton animal de compagnie, pour empêcher tes vêtements de se mouiller et pour porter ta chemise préférée et pour t'aider à voler et faire croire. Utilise tes bras lorsque tu es en ligne, pour prendre le temps de faire une pause et de laisser la technologie et de te trouver un arbre pour grimper. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Utilise ton intestin pour mettre la nourriture et pour écouter son grognement d'humeur, de faire un bruit de ventre et de sentir le gaz dans les boissons gazeuses. Utilise ton instinct quand tu es en ligne, pour savoir surveiller certains signes et laisse le te montrer le chemin et te dire quand ce n'est pas bon. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
      5:
        image: notes/C2_digital_footprint_5.png
        text: Donc pense avec ta tête et ressent avec ton coeur, équilibre avec tes bras, écoute ton instinct, en ligne. Utilisez tes jambes pour courir et lancer et pour sauter et rebondir sur un bâton sauteur, pour danser autour du bloc et à ignorer tes chaussettes qui sentent mauvais. Utilise tes jambes lorsque tu es en ligne, pour résister aux intimidateurs qui franchissent la ligne et ne pas oublier de se tenir debout, être gentil avec les créatures grandes et petites.
      6:
        image: notes/C2_digital_footprint_6.png
        text: "De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté ! Alors pense avec ta tête et ressent avec ton coeur, équilibre avec tes bras, écouter ton instinct, debout avec tes jambes. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: "Chaque fois que tu vas sur Internet, tu laisses une trace qui peut être consultée, copiée, partagée, diffusée et qui est permanente. Quel genre d'empreinte numérique laisses-tu ? Quel genre d'empreinte numérique veux-tu laisser ?"
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: "Cette leçon s'appelle « Programmation sur papier quadrillé » et tout tourne autour des algorithmes. Aujourd'hui, nous allons apprendre à écrire des programmes qui montrent comment recréer de simples images noir et blanc, juste en dessinant des flèches à la main."
      2:
        image: notes/C2_graph_paper_2.png
        text: "Un algorithme est une liste de consignes permettant de réaliser une tâche. Nous allons suivre cet ensemble de consignes destinées à faire un bol. Les algorithmes sont vraiment utiles quand vous avez besoin que quelqu'un d'autre comprenne comment faire quelque chose."
      3:
        image: notes/C2_graph_paper_3.png
        text: Si tu écris un algorithme pour un ordinateur, tu dois le découper en toutes petites étapes. Donc termine cette ligne et passe à la suivante, puis la suivante et tu as terminé.
      4:
        image: notes/C2_graph_paper_4.png
        text: "J'utilise des algorithmes dans mon travail. Si j'écris toutes les étapes, je peux recréer la même chose à nouveau, ou je peux enseigner à quelqu'un d'autre comment le faire. Mets le verre dans le four, fusionne le, suis le reste des instructions pour faire le bol. Les algorithmes te donnent une feuille de route pour obtenir quelque chose."
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: "Ici nous allons utiliser le bloc de répéter pour nous aider à économiser des étapes lorsque nous programmons notre Artiste. Il y a déjà quelques blocs sur l'espace de travail mais ils sont juste là pour démarrer."
      2:
        image: notes/C2_artist_loops_2.png
        text: "Pour faire boucler 4 fois ces blocs pour dessiner le carré complet, nous devons juste choisir le bloc répéter et mettre les blocs avancer plus et tourner à l'intérieur du bloc de répéter. Lorsque l'on clique sur Démarrer, l'artiste répète ces étapes quatre fois pour compléter le carré."
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "Une boucle est une répétition d'activités. Pour inspecter une ruche, je regarde un cadre, puis je le remets. Je répète cette même activité plusieurs fois. Et donc je boucle en répétant la même activité plusieurs fois."
      2:
        image: notes/C2_bee_loops_2.png
        text: "C'est le bloc répéter. Quelque soit ce que vous y mettez à l'intérieur, le bloc répéter va répéter ces actions le nombre de fois que tu lui as demandé. Par exemple, dans ce niveau, plutôt que de choisir les blocs avancer plus et prendre du nectar trois fois, on va juste les faire glisser une fois chacun et répétez l'action trois fois. Ça rend les choses plus facile !"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Habituellement la programmation est faite en texte, mais nous allons utiliser Blockly qui utilise des blocs visuels que tu glisses et déposes pour écrire des programmes. Sous le capot, tu crées toujours du code. Pour commencer, nous allons créér du code pour un programme qui aidera Angry Bird à se déplacer dans un labyrinthe pour se rendre jusqu'aux porcs maléfiques qui ont volé ses œufs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly est divisé en trois parties principales. Sur la gauche se trouve le labyrinthe de l'oiseau, où ton programme va s'exécuter. Les consignes pour chaque puzzle sont écrites sous le labyrinthe. Cette zone centrale est la boîte à outils et chacun de ces blocs est une commande que l'oiseau peut comprendre. L'espace blanc sur la droite est appelé l'espace de travail et c'est là où nous allons construire notre programme."
      3:
        image: notes/C2_maze_intro_3.png
        text: |-
          Si je fais glisser le bloc "avancer plus" dans notre espace de travail et que je cliques sur "Démarrer", que se passe-t-il ? L'oiseau se déplace vers l'avant d'une case sur la grille. Et si je veux que l'oiseau fasse quelque chose après qu'il se soit déplacé d'un case vers l'avant ? Je peux ajouter un autre bloc à notre programme.
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          Je vais choisir le bloc « tourner à droite » et je vais le faire glisser sous mon bloc "avancer plus" jusqu'à ce que la flèche jaune apparaisse. Puis je vais le déposer et les deux blocs vont s'emboîter. Lorsque j'appuie sur « Démarrer» à nouveau, l'oiseau va exécuter les commandes qui sont empilées de haut en bas sur notre espace de travail.
      5:
        image: notes/C2_maze_intro_5.png
        text: |-
          Si jamais tu veux supprimer un bloc, il te suffit de le retirer de la pile et de le glisser vers la poubelle. Après avoir cliqué sur "Démarrer", tu peux toujours cliquer sur le bouton "Réinitialiser" pour ramener l'oiseau au début. Maintenant, allons nous occuper de ces cochons !
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: |-
          Cette leçon s'appelle "Les algorithmes dans le monde réel". Les algorithmes décrivent des choses que les gens font tous les jours. Recettes de biscuit et notices pour construire un abri à oiseaux sont tous deux des algorithmes de la vie de tous les jours.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Aujourd'hui nous allons faire, créer et tester un algorithme pour un avion en papier. Mais tout d'abord, nous devons découper ce grand projet en petites étapes faciles à suivre. Pour faire un avion en papier, nous avons besoin de décider quelles sont les étapes à réaliser et dans quel ordre."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "Tu vas créer ton algorithme en en découpant les photos. Ensuite, tu vas sélectionner les 6 photos qui montrent les étapes nécessaires pour faire un avion en papier et organiser ces images dans le bon ordre. Lorsque tu as tout dans l'ordre, tu échangeras ton algorithme avec un autre élève pour tester l'algorithme pour voir s'il fonctionne. Un algorithme bien conçu est super important faire le meilleur avion de papier."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "Quand on veut faire du chocolat, il y a plusieurs étapes importantes à ce processus. Et chacune de ces étapes importantes a son propre ensemble de petites étapes. Et il y a différentes recettes, ou algorithmes, selon le goût du chocolat que nous voulons obtenir. Chaque étape est importante, même les plus petites. Donc, une seule étape manquante, et le reste d'entre elles ne peuvent avoir lieu. Il est vraiment important de créer des algorithmes que d'autres puissent comprendre. C'est pourquoi chaque étape doit être écrite, de façon à ce que le résultat soit le même quelque soit la personne qui le fait."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à l'identique à chaque fois que tu l'exécutes. A présent, tu vas faire un jeu intéractif auquel tu peux véritablement jouer."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: |-
          Voici le bloc "si une flèche est utilisée" et le bloc "déplacer l'acteur". Tu peux utiliser ces blocs ensemble pour déplacer l'acteur avec les touches de flèches.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Aujourd'hui, nous allons faire de la programmation en relais. Il s'agit de programmer sous pression et de déboguer les erreurs qui se produisent parfois lorsque on travaille très rapidement ou en équipes. Nous utiliserons la programmation sur papier quadrillé pour simuler le codage, et des courses en relais pour simuler un temps limite."
      2:
        image: notes/C2_relay_programming_2.png
        text: "Avec la programmation en relais, les équipes feront la course pour terminer un programme sur papier quadrillé. Tu devras vérifier le travail de ton coéquipier, ou le déboguer, le réparer s'il y a une erreur, ajouter ta flèche et exécuter en arrière et marquer votre coéquipier."
      3:
        image: notes/C2_relay_programming_3.png
        text: "Les programmeurs utilisent beaucoup le débogage pour rechercher et résoudre des problèmes dans leurs algorithmes ou leur code. Il y a beaucoup de façons de déboguer des problèmes. L'une des plus facile est d'avancer pas à pas jusqu'à ce que tu trouves où il y a un problème, puis de le corriger."
      4:
        image: notes/C2_relay_programming_4.png
        text: "Ici, j'essaie de faire un saut arrière sur la poutre, mais je n'arrête pas de tomber. Je suis repassé sur chaque étape pas à pas et j'ai réalisé où était mon erreur. Je ne positionnais pas mes mains correctement sur la poutre. Alors j'ai essayé un autre salto arrière sur la poutre avec ma nouvelle position pour les mains et j'ai réussi. J'étais vraiment contente d'avoir débogué mon salto arrière. On a trouvé ! Déboguer, c'est trouver et résoudre des problèmes. Joli, bon travail !"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "Les ordinateurs sont vraiment doués pour répéter des actions. En tant que personne, tu t'ennuierais beaucoup si tu devais faire la même chose beaucoup de fois d'affilée. Mais un ordinateur peut faire la même chose des millions ou même des milliards de fois sans s'ennuyer et réussir à le faire très bien."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "Ainsi, par exemple, si je voulais souhaiter à tout le monde sur Facebook un joyeux anniversaire en leur envoyant un email, cela pourrait me prendre plus d'un siècle pour écrire tous ces mails à tout le monde. Mais avec seulement quelques lignes de code, je peux avoir un système pour envoyer un email à tout le monde sur Facebook pour leur souhaiter un joyeux anniversaire. Voilà donc ce que sont les boucles, pourquoi elles sont utiles et c'est quelque chose que les ordinateurs font très bien."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: "Dans cet exemple, ton but va être de déplacer l'oiseau pour attraper le cochon. Maintenant, nous allons être en mesure d'utiliser le bloc « Répéter » et donc déplacer l'oiseau très facilement. Tu peux aussi le faire en donnant à l'ordinateur la commande « avancer plus » cinq fois afin de faire avancer l'oiseau case par case vers le cochon."
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: |-
          Ou tu peux juste dire à l'ordinateur d'« avancer plus » une fois et puis lui dire de « répéter » cela 5 fois, et le résultat sera le même. Pour ce faire, tu fais glisser ta commande "avancer plus", et puis tu le mets dans le bloc « répéter ». Ensuite tu peux cliquer dessus et lui dire combien de fois tu veux répéter le bloc pour lui dire combien d'étapes tu veux le faire avancer.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Maintenant une dernière chose : tu peux mettre autant de commandes que tu le souhaites à l'intérieur du bloc « répéter ». Donc dans cet exemple, tu dis d'"avancer plus" et de tourner à gauche, ce qu'il fera cinq fois. Allez, bon travail et amuse-toi bien !
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "Tu ne serais même pas qualifié pour la course si tu n'avais pas les gens qui sont compétents en informatique en raison de la quantité de données collectées par les voitures et la nécessité d'être en mesure d'avoir des gens capable d'écrire des programmes pour savoir comment continuer à être performant."
      2:
        image: notes/C3_artist_intro_2.png
        text: Dans ces puzzles, tu seras un artiste qui utilise un crayon pour dessiner différentes formes. Partout où ton artiste va, elle dessine une ligne derrière elle.
      3:
        image: notes/C3_artist_intro_3.png
        text: |-
          Pour te déplacer sur la zone de dessin, tu vas utiliser le bloc "avancer plus". Ici le bloc "avancer plus" signifie un déplacement vers l'avant de 100 pixels. Que se passe-t-il lorsque l'on appuie sur "Démarrer" ? L'artiste avance un certaine distance et cette distance est de 100 pixels. Les pixels sont simplement de très petits carrés sur l'écran de votre ordinateur.
      4:
        image: notes/C3_artist_intro_4.png
        text: |-
          L'autre bloc que nous avons dans ce puzzle est "tourner à droite de 90 degrés". Et quand nous l'utilisons, cela fait tourner notre Artiste d'un certain angle. Tu peux donc jouer cet angle selon la rotation souhaitée pour l'Artiste. Il s'agit d'un virage à 90 degrés.
      5:
        image: notes/C3_artist_intro_5.png
        text: "Et il s'agit d'un virage de 120 degrés. Et n'oublie pas, tu peux modifier ces valeurs en cliquant sur les flèches à côté du nombre de pixels et de degrés. Amuses toi bien à dessiner avec ton artiste !"
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: "Il s'agit du bloc conditionnel. Il dit que SI il y a du nectar ou du miel qui est inférieur, égal ou supérieur à un certain nombre, ALORS faire quelque chose."
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "Cela est utile lorsque nous ne savons pas combien de nectar ou miel est à obtenir, comme nous le voyons ici avec ce point d'interrogation."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "Dans cet exemple, nous allons dire SI la fleur pourpre a du nectar supérieur à 0, prendre du nectar. Ce qui dira à notre abeille de continuer à prendre du nectar tant qu'il y en a. Tadam !"
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: "As-tu déjà entendu parler de débogage de programme ? Il s'agit d'un moyen pour comprendre ce qui ne fonctionne pas. Lorsque tu débogues du code, tu identifies et supprimes les erreurs."
      2:
        image: notes/C3_debugging_bee_2.png
        text: |-
          Ici, tu démarres avec quelques blocs déjà positionnés dans l'espace de travail. Nous allons utiliser le bouton "Étape" pour parcourir les blocs, pas à pas, pour voir si c'est la bonne solution et où nous devrions corriger.
      3:
        image: notes/C3_debugging_bee_3.png
        text: |-
          On dirait que notre problème est là ! Nous avons besoin d'un bloc "avancer plus" supplémentaire. Le bouton "Étape" nous aide à déboguer notre problème en identifiant où est l'erreur et ainsi corriger.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: "Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à l'identique à chaque fois que tu l'exécutes. A présent, tu vas faire un jeu intéractif auquel tu peux véritablement jouer."
      2:
        image: notes/C3_playlab_create_game_2.png
        text: |-
          Voici le bloc "si une flèche est utilisée" et le bloc "déplacer l'acteur". Tu peux utiliser ces blocs ensemble pour déplacer l'acteur avec les touches de flèches.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: notes/C4_conditionals_2.png
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: notes/C4_function_create_2.png
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: notes/C4_function_create_3.png
        text: "Once you're done, click on save and exit. This will take you back to the main puzzle work space. The new function you created will show up as a green block in the function category in your toolbox. Drag and drop this into the main work space and use it like any other block to solve the puzzle."
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C4_function_edit_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: notes/C4_function_edit_3.png
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: notes/C4_function_edit_4.png
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: notes/C4_function_parameters_3.png
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: "Habituellement la programmation est faite en texte, mais nous allons utiliser Blockly qui utilise des blocs visuels que tu glisses et déposes pour écrire des programmes. Sous le capot, tu crées toujours du code. Pour commencer, nous allons créér du code pour un programme qui aidera Angry Bird à se déplacer dans un labyrinthe pour se rendre jusqu'aux porcs maléfiques qui ont volé ses œufs."
      2:
        image: notes/C4_intro_2.png
        text: "Blockly est divisé en trois parties principales. Sur la gauche se trouve le labyrinthe de l'oiseau, où ton programme va s'exécuter. Les consignes pour chaque puzzle sont écrites sous le labyrinthe. Cette zone centrale est la boîte à outils et chacun de ces blocs est une commande que l'oiseau peut comprendre. L'espace blanc sur la droite est appelé l'espace de travail et c'est là où nous allons construire notre programme."
      3:
        image: notes/C4_intro_3.png
        text: |-
          Si je fais glisser le bloc "avancer plus" dans notre espace de travail et que je cliques sur "Démarrer", que se passe-t-il ? L'oiseau se déplace vers l'avant d'une case sur la grille. Et si je veux que l'oiseau fasse quelque chose après qu'il se soit déplacé d'un case vers l'avant ? Je peux ajouter un autre bloc à notre programme.
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: |-
          Si jamais tu veux supprimer un bloc, il te suffit de le retirer de la pile et de le glisser vers la poubelle. Après avoir cliqué sur "Démarrer", tu peux toujours cliquer sur le bouton "Réinitialiser" pour ramener l'oiseau au début. Maintenant, allons nous occuper de ces cochons !
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "À présent, nous allons apprendre une chose que tous les programmeurs de jeu utilisent tous les jours. On appelle ça des événements. Un événement dit à ton programme d'écouter lorsque quelque chose se produit. Quand cette chose arrive, il effectue une action. Quelques exemples d'évènements sont l'écoute des clics de souris, une touche fléchée, ou un effleurement de l'écran."
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Ton écran est divisé en trois parties principales. Sur la gauche se trouve l'espace de jeu, où le programme s'exécutera. Les consignes pour chaque niveau sont écrites sous l'espace de jeu. Cette zone centrale est la boîte à outils et chacun de ces blocs est une portion de code. L'espace blanc à droite est appelé l'espace de travail et c'est là où nous allons construire notre programme."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: "Hi, I'm Kathleen Kennedy and I'm the producer of Star Wars, The Force Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens."
      2:
        image: notes/starwars_intro_2.JPG
        text: "Bonjour je suis Rachel Rose, je suis ingénieur R&D senior chez ILM, et je dirige l'équipe d’animation et de développement de créatures. Dans Le Réveil de la Force, je suis chargée d'aider les artistes à développer des mouvements pour les parties du personnage qui bougent et qui permettent de rendre le personnage très crédible dans une galaxie très lointaine."
      3:
        image: notes/starwars_intro_3.JPG
        text: "Dans l'heure qui vient, nous allons construire notre propre jeu Star Wars. Nous t'enseignerons les concepts de base de la programmation. Habituellement la programmation est textuelle, mais nous allons utiliser ici des blocs pour écrire des programmes en les glissant et en les déposant. Sous le capot, tu crées toujours code. Après avoir vu les bases avec des blocs, nous allons basculer vers du JavaScript, un des langages de programmation les plus populaires sur le web."
      4:
        image: notes/starwars_intro_4.JPG
        text: "To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts. Your screen is split into three parts. On the left is the Star Wars game space, where code will run. The instructions for each level are written below the game space."
      5:
        image: notes/starwars_intro_5.JPG
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est une action que BB-8 peut comprendre.
      6:
        image: notes/starwars_intro_6.JPG
        text: The white space on the right is called the workspace and this is where we are going to build our program.
      7:
        image: notes/starwars_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace and press run, what happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together."
      9:
        image: notes/starwars_intro_9.JPG
        text: When I press run again, BB-8 will perform the commands that are stacked from top to bottom on our workspace. If you ever want to delete a block, just remove it from the stack and drag it back into the tool box.
      10:
        image: notes/starwars_intro_10.JPG
        text: "After you've hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "Dans les blocs que nous utilisons se trouvent des commandes JavaScript. JavaScript est le langage de programmation plus utilisé par les développeurs professionnels de nos jours. Les blocs sont une excellente façon de commencer l'apprentissage du code et, en fait, les meilleures universités comme Harvard et Berkeley commencent à enseigner de cette façon. Mais une fois que l'on a appris les bases, les ingénieurs écrivent du code en tapant parce que cela leur permet d'aller plus vite."
      2:
        image: notes/starwars_typing_2.JPG
        text: "We can type hundreds of commands without having to find them in the toolbox or drag them out. Because you're learning typing may be slower at first but we wanted you to give it a try."
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: "In the next lesson, we'll start you out in typing mode. Here you can still drag the block from the toolbox or you can type the command name. As you start to type, you'll see names of possible commands show below where you're typing. Instead of typing the whole command name, you can select one of these to move faster. In my job, I use this auto-complete feature all the time when writing code."
      5:
        image: notes/starwars_typing_5.JPG
        text: "When you're typing code, the computer needs you to be very precise. You need to spell and capitalize the command name exactly correctly, including the parentheses and the semi-colon. Even with a small typing mistake, BB-8 cannot understand the code and won't be able to move."
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: "If you get stuck, you can always start over with the start over button and you can switch back to block mode at any time by clicking in the top-right corner. Ok, let's give typing a try! And if you make mistakes, don't get frustrated. It takes everybody a few tries to get it right."
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C3PO."
      3:
        image: notes/starwars_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down."
      7:
        image: notes/starwars_events_7.JPG
        text: "To do this, we'll use a command called whenUp(). When you drag the command out of the toolbox, you'll see that it starts and ends with a curly bracket instead of a semi-colon. This gives us space to put other commands in the middle. Every command that we place inside these brackets will run when the player presses the up arrow."
      8:
        image: notes/starwars_events_8.JPG
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Hi, my name is Alice and I run the project and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Bonjour, je suis Kathleen Kennedy, et je suis la productrice de Star Wars : Le Réveil de la Force. Aujourd'hui, tu travailleras avec une de nos stars, BB-8. BB-8 est un droïde sphérique. Tout ce qu'il fait et tous ses mouvements sont contrôlés par un logiciel. L'informatique a un impact sur tous les secteurs, du marketing à la santé en passant par le cinéma. En fait, des centaines d'ingénieurs informaticiens ont travaillé ensemble pour faire un film comme Le Réveil de la Force."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Bonjour je suis Rachel Rose, je suis ingénieur R&D senior chez ILM, et je dirige l'équipe d’animation et de développement de créatures. Dans Le Réveil de la Force, je suis chargée d'aider les artistes à développer des mouvements pour les parties du personnage qui bougent et qui permettent de rendre le personnage très crédible dans une galaxie très lointaine."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "Dans l'heure qui vient, nous allons construire notre propre jeu Star Wars. Nous t'enseignerons les concepts de base de la programmation. Habituellement la programmation est textuelle, mais nous allons utiliser ici des blocs pour écrire des programmes en les glissant et en les déposant. Pour commencer, nous allons travailler avec Rey pour programmer BB-8 pour qu'il marche collecte toutes les pièces de ferraille."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: "Ton écran est divisé en trois parties. Sur la gauche, on trouve l'espace de jeu Star Wars où ton code va s'exécuter. Les instructions pour chaque niveau sont écrites juste en dessous de cet espace de jeu."
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est une action que BB-8 peut comprendre.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: "The white space on the right is called the work space and this is where we're going to build our program."
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together. When I press run again, BB-8 will perform the commands that are stacked top to bottom on our workspace."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: "After you hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C3PO."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Hi, my name is Alice and I run the project and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "Mon nom est Jens Bergensten, mais je suis plus connu sous le nom de Jeb. Je suis le principal développeur de Minecraft, chez Mojang, ici à Stockholm. Je pense que j'avais onze ans ou peut-être douze quand j'ai commencé à programmer parce que je voulais réaliser des jeux. Un ami de mon père m'avais dit que pour faire des jeux, il fallait savoir programmer. C'est ainsi que j'ai commencé. J'aime concevoir et comprendre l'architecture des jeux. C'est ce que j'apprécie le plus dans Minecraft."
      2:
        image: notes/mc_intro_2.JPG
        text: "Pendant l'heure qui vient, tu vas apprendre les bases de l'informatique en programmant les mouvements de d'Alex et Steve dans une simulation d'un morceau du monde de Minecraft."
      3:
        image: notes/mc_intro_3.JPG
        text: "La programmation se fait traditionnellement avec du texte, mais aujourd'hui nous allons utiliser Blockly, un système qui utilise des blocs visuels que tu peux glisser et déposer pour écrire des programmes. Dans les coulisses de ce système, tu vas en fait créer du code Javascript."
      4:
        image: notes/mc_intro_4.JPG
        text: "Les concepts que tu vas apprendre sont ceux que les programmeurs utilisent chaque jour et sont les fondations de l'informatique. Chez Mojang, nous utilisons ces mêmes concepts pour faire fonctionner Minecraft."
      5:
        image: notes/mc_intro_5.JPG
        text: "Avant de démarrer, tu vas choisir un personnage. Je vais choisir Alex. Elaborons le code d'un programme qui va l'aider à se déplacer dans l'écran."
      6:
        image: notes/mc_intro_6.JPG
        text: "Ton écran est divisé en 3 parties principales. A gauche se trouve la zone de jeu Minecraft où ton programme va s'exécuter. Les instructions pour chaque niveau sont inscrites en dessous."
      7:
        image: notes/mc_intro_7.JPG
        text: "Cette zone centrale est la boîte à outils et chacun de ces blocs est une commande qui dirige les actions d'Alex."
      8:
        image: notes/mc_intro_8.JPG
        text: "La zone blanche à droite est l'espace de travail et c'est ici que nous allons construire notre programme."
      9:
        image: notes/mc_intro_9.JPG
        text: "Si tu glisses le bloc moveForward(); (avancer plus) dans l'espace de travail et que tu cliques Démarrer, que se passe-t-il ? Alex avance d'un espace sur la grille."
      10:
        image: notes/mc_intro_10.JPG
        text: "Et si nous voulons faire autre chose après son déplacement d'un espace ? Nous pouvons ajouter un nouveau bloc dans notre programme. Je vais choisir le bloc turnRight(); (tourner à droite) et je vais le glisser sous le bloc moveForward(); (avancer plus) jusqu'à ce que la ligne orange apparaisse. Ensuite je vais le déposer et les deux blocs vont s'attacher. Quand on appuie sur Démarrer à nouveau, Alex va exécuter les commandes qui sont empilées de haut en bas de l'espace de travail."
      11:
        image: notes/mc_intro_11.JPG
        text: Si jamais tu veux détruire un bloc, glisse le de la pile vers la boîte à outils.
      12:
        image: notes/mc_intro_12.JPG
        text: |-
          Pour annuler tes changements et revenir à la situation de départ, utilise le bouton Recommencer dans le coin en haut à droite de l'espace de travail. Autre chose : tu vois le petit triangle sur les blocs "tourner". Chaque fois que tu vois un bloc comme celui-ci, cela signifie que tu peux choisir une option (un paramètre) différent. Commençons à coder !
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: "I'm Lydia Winters, Mojang's brand director and we made a little game called Minecraft."
      2:
        image: notes/mc_repeat_2.JPG
        text: "My favorite thing to do in Minecraft is explore. I love adventuring in caves and seeing what I can find. As someone who isn't a programmer, I'm really excited to go through the Minecraft lesson and actually learn some coding myself."
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier if we could just tell the computer to perform the moveForward(); command four or five times. Luckily for us, computers are really good at repeating commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: "When building Minecraft, we use repeat loops to place all the initial materials for creating a new world. That's thousands and thousands of blocks. We also use loops in little ways, for example to make Alex's feet move back and forth as she walks. Repeat loops are a powerful part of programming."
      5:
        image: notes/mc_repeat_5.JPG
        text: "Night is coming so in the next couple of levels, we're going to build a house to stay safe. We're going to use the repeat block to do this very easily."
      6:
        image: notes/mc_repeat_6.JPG
        text: "To build a wall of our house, we can either tell Alex to moveForward(); and place planks four times or we can tell her to moveForward(); and place one plank, then take this command and use the repeat block to have her perform the action multiple times. Now we'll click on the repeat block and tell her how many times we want her to perform this action. Now let's build our house before night falls! Have fun."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: "Now we're going to learn about if statements. If statements are a fundamental part of learning to program. They help a computer make decisions."
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when I unlock my phone, it runs some code that says if I enter the password correctly, then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react to what they see in the world. For example, if there is a rock in front of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: "In this case, we don't want to fall in the lava. It's easy to plan for the lava. We can see it on the screen. But what about the lava that we can't under the stone?"
      5:
        image: notes/mc_if_statements_5.JPG
        text: "After we mine the stone, we'll need to check if there's any lava in that place before moving forward. If there is lava there, we want to place a stone in front of our character before we can move forward. That way we can safely move on. Time for more mining! And remember to use the if statement to watch your step."
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no more instructions and no puzzles to solve. You can build anything you want. You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of torches. I made an A out of birch planks. It worked, it worked. We built a house out of wool!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: "When you're done making your creation, choose share to get a link to share with your friends. Have fun!"
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no more instructions and no puzzles to solve. You can build anything you want. You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of torches. I made an A out of birch planks. It worked, it worked. We built a house out of wool!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
