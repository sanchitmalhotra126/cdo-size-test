<%
commit = ENV['COMMIT'] || `git rev-parse HEAD`.split.first
ami = commit[0..4]
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: Minimal test stack for AMI-builder.
Parameters:
  InstanceType:
    Type: String
    Default: t3.large
  ImageIdParameter:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  # Stack-specific IAM permissions applied to both daemon and frontends.
  CDOPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub "Application permissions for ${AWS::StackName}."
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Instance-bootstrap CloudFormation hook.
          - Effect: Allow
            Action: 'cloudformation:SignalResource'
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
  FrontendRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: LifecycleHook
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'autoscaling:CompleteLifecycleAction'
                Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Frontends-${AWS::StackName}"
      ManagedPolicyArns: [!Ref CDOPolicy]
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  FrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref FrontendRole]}
  # Signal when the instance is fully provisioned and ready for AMI creation.
  AMICreate<%=ami%>:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1
  WebServerAMI:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageIdParameter
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref FrontendInstanceProfile
      SecurityGroupIds: [!ImportValue VPC-FrontendSecurityGroup]
      SubnetId: !ImportValue VPC-Subnet<%=azs.first%>
      KeyName: <%=SSH_KEY_NAME%>
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 16
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Modify cloud-init to re-run this user-data script every time instance restarts.
          sed -i 's/scripts-user$/\[scripts-user, always\]/' /etc/cloud/cloud.cfg

          # Signal CloudFormation resource.
          aws cloudformation signal-resource \
            --unique-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
            --stack-name ${AWS::StackName} \
            --logical-resource-id <%="AMICreate#{ami}"%> \
            --status SUCCESS \
            --region ${AWS::Region} \
          || true
          shutdown -h now
  AMI<%=ami%>: <%= lambda_fn.call 'AMIManager',
    DependsOn: "AMICreate#{ami}",
    InstanceId: {Ref: "WebServerAMI" } %>
  FastSnapshotRestore: <%= lambda_fn.call 'FastSnapshotRestore',
    ImageIds: [{Ref: "AMI#{ami}" }],
    AvailabilityZones: AVAILABILITY_ZONES
  %>
  ASGCount: <%= lambda_fn.call 'CountASG',
    Default: {
      MinSize: 2,
      MaxSize: 20,
      DesiredCapacity: 2
    },
    AutoScalingGroupTags: [
      {Key: 'aws:cloudformation:stack-id', Value: {Ref: 'AWS::StackId'}},
      {Key: 'aws:cloudformation:logical-id', Value: 'Frontends'}
    ],
    LaunchConfiguration: {Ref: 'FrontendLaunchConfig'}
  %>
  Frontends:
    DependsOn: [ASGCount]
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !GetAtt [ASGCount, DesiredCapacity]
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 80
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 20
        MinInstancesInService: !GetAtt [ASGCount, DesiredCapacity]
        MinSuccessfulInstancesPercent: 80
        PauseTime: PT10M
        SuspendProcesses: [ScheduledActions]
        WaitOnResourceSignals: true
    Properties:
      AutoScalingGroupName: !Sub "Frontends-${AWS::StackName}"
      VPCZoneIdentifier: <%=subnets.to_json%>
      LaunchConfigurationName: !Ref FrontendLaunchConfig
      MinSize: !GetAtt [ASGCount, MinSize]
      MaxSize: !GetAtt [ASGCount, MaxSize]
      DesiredCapacity: !GetAtt [ASGCount, DesiredCapacity]
      HealthCheckType: EC2
      HealthCheckGracePeriod: 2000
      MetricsCollection:
        - Granularity: 1Minute
  FrontendLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: FastSnapshotRestore
    Properties:
      ImageId: !Ref AMI<%=ami%>
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref FrontendInstanceProfile
      SecurityGroups: [!ImportValue VPC-FrontendSecurityGroup]
      KeyName: <%=SSH_KEY_NAME%>
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 16
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          STACK=${AWS::StackName}
          REGION=${AWS::Region}
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          # This line causes the LaunchConfiguration to be replaced on each new commit.
          COMMIT=<%=commit%>

          # Signal CompleteLifecycleAction, in case this instance was launched from an Auto Scaling process.
          sleep 10 # Prevent 'No active Lifecycle Action found' error
          aws autoscaling complete-lifecycle-action \
            --lifecycle-action-result CONTINUE \
            --instance-id $INSTANCE_ID \
            --lifecycle-hook-name WebServerHook-${AWS::StackName} \
            --auto-scaling-group-name Frontends-${AWS::StackName} \
            --region $REGION \
          || true

          # Signal CloudFormation, in case this instance was launched from a CloudFormation stack update.
          aws cloudformation signal-resource \
          --status SUCCESS \
          --unique-id $INSTANCE_ID \
          --stack-name $STACK \
          --logical-resource-id Frontends \
          --region $REGION \
          || true
  CPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref Frontends
      EstimatedInstanceWarmup: 300
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50
  WebServerHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      LifecycleHookName: !Sub "WebServerHook-${AWS::StackName}"
      AutoScalingGroupName: !Ref Frontends
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      DefaultResult: ABANDON
      HeartbeatTimeout: 1200 # seconds = 20 minutes
      NotificationTargetARN: !Ref WebServerHookTopic
      RoleARN: !GetAtt WebServerHookRole.Arn
  WebServerHookTopic: {Type: 'AWS::SNS::Topic'}
  WebServerHookRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'autoscaling'%>
      Policies:
        - PolicyName: snsPublish
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref WebServerHookTopic
      PermissionsBoundary: !ImportValue IAM-DevPermissions
