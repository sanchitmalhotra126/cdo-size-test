  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${AWS::StackName}-cluster"
      DBClusterParameterGroupName: !Ref AuroraClusterDBParameters # Resource name generated from db_parameters.yml.erb.
      Engine: aurora-mysql
      # We will usually do engine version updates manually, since updating this requires replacement, so this value may be out of sync with cluster.
      EngineVersion: 5.7.12
      MasterUsername: !Sub "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}"
      EnableIAMDatabaseAuthentication: true
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
      DBSubnetGroupName: !ImportValue VPC-DBSubnetGroup
      EnableCloudwatchLogsExports:
        - general
        - audit
        - error
        - slowquery
      DeletionProtection: true
      BackupRetentionPeriod: !Ref DBBackupRetention
<%
  # Integer range identifying each of the DB Instances to provision in the cluster.
  DB_INSTANCE_RANGE=(0..1)
  DB_INSTANCE_RANGE.each do |i| %>
  Aurora<%=i%>:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-<%=i%>"
      # Resource name generated from db_parameters.yml.erb
      # Use same ParameterGroup for writer and all readers so that any reader can be promoted to writer during a Failover.
      DBParameterGroupName: !Ref AuroraWriterDBParameters
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !ImportValue VPC-DBSubnetGroup
      Engine: aurora-mysql
      # We will usually do engine version updates manually, so don't specify an EngineVersion for the DBInstance.
<% end -%>

<%
  YAML.load(erb_file(aws_dir('cloudformation/db_parameters.yml.erb'))).each do |key, values|
-%>
  <%=key%>DBParameters:
    Type: AWS::RDS::DB<%=key.match('Cluster')%>ParameterGroup
    Properties:
      Description: !Sub "<%=key.titleize%> DB Parameters for ${AWS::StackName}."
      Family: aurora-mysql5.7
      Parameters: <%=values.compact.to_json%>
<%end -%>

<% db_secrets = [nil, 'application-writer', 'readonly'].map do |user| -%>
  DatabaseSecret<%=secret = user&.underscore&.camelcase%>:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub "Secrets for accessing database<%user ? " user #{user}" : ''%> from ${AWS::StackName} CloudFormation stack"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "<%=user || '${DatabaseUsername}'%>"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludePunctuation: True
      Name: !Sub "CfnStack/${AWS::StackName}/database-<%=user || 'secret'%>"
<% secret; end -%>

  DBProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: !Ref AWS::StackName
      EngineFamily: MYSQL
      RoleArn: !GetAtt DBProxyRole.Arn
      Auth:
<% db_secrets.each do |secret| -%>
        - {AuthScheme: SECRETS, SecretArn: !Ref DatabaseSecret<%=secret%>, IAMAuth: DISABLED}
<%end -%>
      VpcSubnetIds: <%=subnets.to_json%>
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
  DBProxyRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'rds'%>
      Policies:
        - PolicyName: RDSProxy
          PolicyDocument:
            Statement:
<% db_secrets.each do |secret| -%>
              - {Effect: Allow, Action: 'secretsmanager:GetSecretValue', Resource: !Ref DatabaseSecret<%=secret%>}
<%end -%>
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  DBProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    # List of Database Instance Logical IDs that must be provisioned before this RDS Proxy TargetGroup (Aurora0,Aurora1)
    DependsOn: [<%=DB_INSTANCE_RANGE.map {|i| "Aurora#{i}"}.join(',')%>]
    Properties:
      DBProxyName: !Ref DBProxy
      DBClusterIdentifiers: [!Ref AuroraCluster]
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        ConnectionBorrowTimeout: 10
